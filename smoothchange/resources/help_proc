CREATE OR REPLACE FUNCTION Clm_GetAccountUpdatesDetails(inEeId   IN NUMBER,
                                                        inErId   IN NUMBER,
                                                        inAdmnId IN NUMBER,
                                                        inUserId IN NUMBER,
                                                        inDays   IN NUMBER)
  RETURN tTab_AccountUpdateDetail IS

  tblAccountUpdateDetail tTab_AccountUpdateDetail := tTab_AccountUpdateDetail();
  tblDebitCardDetails    tTab_AccountUpdateDetail := tTab_AccountUpdateDetail();
  v_claimsdata           TBL_CLAIMSDATA := TBL_CLAIMSDATA();
  cObjectName            VARCHAR2(255);
  cHasHSAViewPriv        VARCHAR2(3) := 'No';
  nUserId                NUMBER := inUserId;
  cProvider              VARCHAR2(255);
  cActivityDesc          VARCHAR2(255);
  cResult                VARCHAR2(5);
  cErrorCategory         VARCHAR2(255);
  nErrorCode             NUMBER;
  cErrorArea             VARCHAR2(255);
  cOtherMessage          VARCHAR2(4000);
  dElectionBegins        DATE;
  dElectionEnds          DATE;
  dServiceBegins         DATE; -- Minimum Date of Service Grace period
  dServiceEnds           DATE; -- Maximum Date of Service Grace period
  dMaxFutureServiceEnds  DATE;
  dSubmitEnds            DATE; -- RunOffDate
  cElectionEndReason     VARCHAR2(255);
  cStackExists           VARCHAR2(3);
  cUpdatedAcctLabel      VARCHAR2(255);
  cWorkGroup             VARCHAR2(255);
  cAmount                VARCHAR2(255);
  dTruncSysdate          DATE := trunc(SYSDATE);
  dMovementDate          DATE;
  nIndex                 PLS_INTEGER := 0;
  isJRA                  VARCHAR2(3);
  eNoInput   EXCEPTION;
  eException EXCEPTION;

  -- Non Claim Activities(RKP)
  CURSOR curRKPNonClaimActivity(inEeId IN NUMBER,
                                inDays IN NUMBER) IS
  
    SELECT 'Non Claim Activities(RKP)' "SOURCE",
           D.ID "SOURCE_ID",
           A.EE_ID,
           TO_CHAR(COALESCE(D.CONFIRMED_ON,
                            D.POSTED_ON,
                            D.CREATED_ON,
                            D.TXN_DATE),
                   'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           D.DR_CR_IND,
           NVL(TO_CHAR(DECODE(D.DR_CR_IND, 'DR', -1 * D.TXN_AMT, D.TXN_AMT)),
               '') "AMOUNT",
           C.TXN_CATEGORY,
           NVL(C.TXN_CATEGORY_DISPLAY, C.TXN_TYPE) TXN_CATEGORY_DISPLAY,
           C.TXN_TYPE,
           C.TXN_CODE_SHORT_DESC,
           DECODE(UPPER(D.TXN_STATUS),
                  'CONFIRMED',
                  'Processed',
                  'Processing') "STATUS",
           D.POSTED_ON "PROCESSING_DATE",
           D.CONFIRMED_ON "PROCESSED_DATE",
           A.ACTP_CD
      FROM RKP_TRANSACTION_DTL D, RKP_TRANSACTION_CODE C, RKP_ACCOUNT A
     WHERE D.TXN_CODE = C.TXN_CODE
       AND D.TXN_STATUS IN ('Posted', 'Confirmed')
       AND NVL(D.LINK_REC_TYPE, 'X') != 'CLAIM'
       AND ((C.TXN_CATEGORY != 'Distribution' AND
           NVL(D.SOURCE_REC_TYPE, 'X') NOT IN
           ('CLAIM', 'DEBIT_CARD_IN_FILE_DTL', 'DEBIT_CARD_AUTH_TRXN_DTL')) OR
           (C.TXN_CATEGORY = 'Distribution' AND
           NVL(D.SOURCE_REC_TYPE, 'X') = 'RKP_TXN_ADJUSTMENT_DTL' AND
           NVL(D.SOURCE_SYSTEM, 'X') != 'BOA-FIS-Data' AND
           C.TXN_MODE = 'NA') OR EXISTS
            (SELECT 1
               FROM Rkp_Txn_Attr_Map rt, rkp_transaction_code rc
              WHERE rt.src_attr_code IN
                    ('REFUNDEXCESSAMOUNT', 'REFUNDEXCESSINTERESTAMOUNT')
                AND rt.tgt_attr_code = rc.txn_type
                AND rt.attr_map_domain = 'DISTRIB_TYPE_TO_TXN_TYPE'
                AND rc.txn_code = d.txn_code))
       AND A.EE_ID = INEEID
       AND A.ID = D.ACCOUNT_ID
       AND A.ACTIVATED_ON <= SYSDATE
       AND COALESCE(D.CONFIRMED_ON, D.POSTED_ON, D.CREATED_ON, D.TXN_DATE) >=
           SYSDATE - inDays;

  -- Non Claim Activities(Notional)
  CURSOR curNotionalNonClaimActivity(inEeId IN NUMBER,
                                     inDays IN NUMBER) IS
    SELECT 'Non Claim Activities(Notional)' "SOURCE",
           D.ID "SOURCE_ID",
           NVL(TO_CHAR(D.Created_On, 'MM/DD/YYYY HH24:MI:SS'),
               TO_CHAR(DS.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS')) "ACTIVITY_ON",
           DT.DEPOSIT_TYPE TXN_TYPE,
           CASE
             WHEN D.STATUS IN ('Confirmed', 'AckFromMV') THEN
              'Processed'
             ELSE
              'Processing'
           END "STATUS",
           (nvl(D.AMT, 0) + nvl(D.ADJUSTMENT_AMT, 0)) "AMOUNT",
           nvl(DT.WEB_CODE, DT.DEPOSIT_TYPE) "ACTIVITY_DESC",
           NVL(TO_CHAR(D.Created_On, 'MM/DD/YYYY HH24:MI:SS'),
               TO_CHAR(DS.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS')) "PROCESSING_DATE",
           NVL(TO_CHAR(D.Created_On, 'MM/DD/YYYY HH24:MI:SS'),
               TO_CHAR(DS.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS')) "PROCESSED_DATE",
           E.ERAC_ACTP_CD,
           DECODE(DT.WEB_CODE,
                  'Distribution',
                  'distribution',
                  'Interest',
                  'interest',
                  'Contribution',
                  'deposit',
                  'Fee',
                  'fees',
                  'others') "TXN_CATEGORY"
      FROM DEPOSIT          D,
           DEPOSIT_TYPE     DT,
           DEPOSIT_FILE     DFL,
           DEPOSIT_SCHEDULE DS,
           ELECTION         E
     WHERE D.DEPOSIT_TYPE = DT.DEPOSIT_TYPE
       AND D.DPFL_ID = DFL.ID
       AND DFL.DPSC_ID = DS.ID
       AND D.ELCT_ID = E.ID
       AND D.EE_ID = INEEID
       AND TO_DATE(NVL(TO_CHAR(D.Created_On, 'MM/DD/YYYY HH24:MI:SS'),
                       TO_CHAR(DS.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS')),
                   'MM/DD/YYYY HH24:MI:SS') >= SYSDATE - inDays
       AND E.ERAC_ACTP_CD NOT IN ('HSA');

  -- JRA Non Claim Activities
  CURSOR curJRANonClaimActivity(inEeId IN NUMBER,
                                inDays IN NUMBER) IS
    SELECT VW.GROUP_TYPE "SOURCE",
           VW.ID "SOURCE_ID",
           VW.ERAC_ACTP_CD "ERAC_ACTP_CD",
           TO_CHAR(VW.ACTIVITY_DATE, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           VW.TXN_STATUS "STATUS",
           VW.AMOUNT,
           TO_CHAR(VW.PROCESSING_DATE, 'MM/DD/YYYY HH24:MI:SS') "PROCESSING_DATE",
           TO_CHAR(VW.PROCESSED_DATE, 'MM/DD/YYYY HH24:MI:SS') "PROCESSED_DATE",
           VW.TXN_CATEGORY,
           VW.TXN_TYPE,
           VW.PLAN_YEAR,
           TO_CHAR(VW.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS') "EFFECTIVE_DATE"
      FROM VW_EE_JRA_ACCOUNTACTIVITY VW
     WHERE VW.EE_ID = inEeId      
       AND TRUNC(VW.ACTIVITY_DATE) >= TRUNC(SYSDATE) - inDays
       AND VW.GROUP_TYPE IN
           ('JRANONCLAIMACTIVITY', 'ROLLOVERINOUT', 'ADHOCADJUSTMENTS');

  -- Debit Card Unsettled Transactions Activity
  CURSOR curDebitCardUnsettledActivity(inEeId IN NUMBER,
                                       inDays IN NUMBER) IS
    SELECT 'DBCard Unsettled Txn' "SOURCE",
           TO_CHAR(VWUDB.DEBIT_CARD_AUTH_TXN_ID) "SOURCE_ID",
           VWUDB.EE_ID,
           VWUDB.TRXN_DATE "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           DECODE(VWUDB.STATUS,
                  'Approved',
                  'UNSETTLEDDBCARDTRXN',
                  'Declined',
                  'DENIEDDBCARDTRXN',
                  '') "OBJECT_NAME",
           'Section' "SECTION",
           VWUDB.ACTP_CD "ACTP_CD",
           INITCAP(NVL(VWUDB.PROVIDER_NAME, 'Unknown Provider')) "ACTIVITY_TYPE",
           'Debit card Activity' "ACTIVITY_DESCRIPTION",
           VWUDB.CLAIM_AMT "AMOUNT",
           decode(VWUDB.STATUS,
                  'Approved',
                  'Processing',
                  'Declined',
                  'Card Declined',
                  VWUDB.STATUS) "STATUS",
           'NA' "WORKGROUP",
           VWUDB.TXN_INDICATOR
      FROM VW_UNSETTLED_DBCARD_TRXN_TSYS VWUDB
     WHERE VWUDB.EE_ID = inEeId
       AND TO_DATE(VWUDB.TRXN_DATE, 'MM/DD/YYYY HH24:MI:SS') >=
           SYSDATE - inDays;

  -- Contribution Schedule activity
  CURSOR curContribScheduleActivity(inEeId IN NUMBER,
                                    inDays IN NUMBER) IS
    SELECT 'Contribution Schedule' "SOURCE",
           ECR.ID "SOURCE_ID",
           RA.EE_ID "EE_ID",
           DECODE(ECR.STATUS,
                  'Created',
                  TO_CHAR(ECR.CREATED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'Requested',
                  TO_CHAR(ECR.REQUESTED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'RequestFailed',
                  TO_CHAR(ECR.REJECTED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'ReadyToPost',
                  TO_CHAR(ECR.REQUESTED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'SentForPosting',
                  TO_CHAR((SELECT FILE_CREATION_DATE
                            FROM ACHFILE
                           WHERE ID = ECR.ACHFILE_ID),
                          'MM/DD/YYYY HH24:MI:SS'),
                  'Posted',
                  TO_CHAR(ECR.POSTED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'PostFailed',
                  TO_CHAR(ECR.REJECTED_ON, 'MM/DD/YYYY HH24:MI:SS')) "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'HSAROLE' "OBJECT_NAME",
           'Section' "SECTION",
           RA.ACTP_CD "ACTP_CD",
           'HSA' "ACTIVITY_TYPE",
           DECODE(ECR.STATUS,
                  'Requested',
                  'Contribution Scheduled',
                  'RequestFailed',
                  'Contribution Rejected',
                  'Created',
                  'Contribution Scheduled',
                  'ReadyToPost',
                  'Contribution Scheduled',
                  'SentForPosting',
                  'Contribution Scheduled',
                  'Posted',
                  'Contribution Scheduled',
                  'PostFailed',
                  'Contribution Rejected') "ACTIVITY_DESCRIPTION",
           '' AMOUNT,
           DECODE(ECR.STATUS,
                  'RequestFailed',
                  'Rejected',
                  'PostFailed',
                  'Rejected',
                  'Posted',
                  'Processed',
                  'Processing') STATUS,
           'NA' "WORKGROUP"
      FROM ELCT_CONTRIB_RQST ECR, ELCT_CONTRIB_SCHEDULE ECS, RKP_ACCOUNT RA
     WHERE RA.ELCT_ID = ECS.ELCT_ID
       AND ECS.ID = ECR.ELCTCOSCHD_ID
       AND ECR.STATUS IN ('Requested',
                          'RequestFailed',
                          'Created',
                          'ReadyToPost',
                          'SentForPosting',
                          'Posted',
                          'PostFailed')
       AND RA.EE_ID = inEeId
       AND (ECR.CREATED_ON >= SYSDATE - inDays OR
           ECR.REQUESTED_ON >= SYSDATE - inDays OR
           ECR.REJECTED_ON >= SYSDATE - inDays OR
           ECR.POSTED_ON >= SYSDATE - inDays);

  -- Bank Account Setup Activity For Contribution
  CURSOR curContribSetupActivity(inEeId IN NUMBER,
                                 inDays IN NUMBER) IS
    SELECT 'Contribution Setup' "SOURCE",
           B.ID "SOURCE_ID",
           B.EE_ID "EE_ID",
           TO_CHAR(B.STATUS_DATE, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'HSAROLE' "OBJECT_NAME",
           'Section' "SECTION",
           '' "ACTP_CD",
           CASE
             WHEN B.STATUS IN ('Created', 'Validation Sent') THEN
              'Bank Info Change'
             WHEN B.STATUS IN ('Validation Error',
                               'Validation Ageout',
                               'Validation ACH Reject') THEN
              'Bank Info Incorrect'
             WHEN B.STATUS = 'Validated' THEN
              'Bank Info Validated'
             WHEN B.STATUS = 'Deactivated' THEN
              'Bank Account Removed'
           END AS "ACTIVITY_TYPE",
           'NA' "ACTIVITY_DESCRIPTION",
           '' "AMOUNT",
           CASE
             WHEN B.STATUS IN ('Created', 'Validation Sent') THEN
              'Updated'
             WHEN B.STATUS IN ('Validation Error',
                               'Validation Ageout',
                               'Validation ACH Reject') THEN
              'Rejected'
             WHEN B.STATUS = 'Validated' THEN
              'Processed'
             WHEN B.STATUS = 'Deactivated' THEN
              'Removed'
           END AS "STATUS",
           'NA' "WORKGROUP"
      FROM BANK B
     WHERE B.EE_ID = inEeId
       AND B.STATUS_DATE >= SYSDATE - inDays;

  -- Help Ticket Activity
  CURSOR curHelpTicketActivity(inEeId IN NUMBER,
                               inDays IN NUMBER) IS
  
    SELECT 'Help Ticket' "SOURCE",
           TO_CHAR(TK.ID) "SOURCE_ID",
           TK.CREATED_FOR_ID "EE_ID",
           TO_CHAR(coalesce(TK.REOPEN_RESOLVED_ON,
                            TK.REOPEN_DATE,
                            TK.RESOLVED_ON,
                            TK.ASSIGNED_ON,
                            TK.CREATED_ON),
                   'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'HLPTKTVIEW' "OBJECT_NAME",
           'Page' "SECTION",
           '' ACTP_CD,
           'Help Ticket Generated' "ACTIVITY_TYPE",
           DECODE(TK.STATUS,
                  'Open',
                  TO_CHAR(TRUNC(TK.CREATED_ON), 'MON-DD-YYYY'),
                  'Assigned',
                  TO_CHAR(TRUNC(TK.ASSIGNED_ON), 'MON-DD-YYYY'),
                  'Resolved',
                  TO_CHAR(TRUNC(TK.RESOLVED_ON), 'MON-DD-YYYY')) ACTIVITY_DESCRIPTION,
           '' "AMOUNT",
           TK.STATUS "STATUS",
           nvl(TK.Privacy_Level, 'No Restrictions') "WORKGROUP"
      FROM TICKET TK
     WHERE TK.CREATED_FOR_ID = inEeId
       AND TK.TKTY_CATEGORY = 'Employee'
       AND (TK.STATUS <> 'Resolved' OR TK.CREATED_THRU <> 'IVR')
       AND coalesce(TK.REOPEN_RESOLVED_ON,
                    TK.REOPEN_DATE,
                    TK.RESOLVED_ON,
                    TK.ASSIGNED_ON,
                    TK.CREATED_ON) >= SYSDATE - inDays;

  -- CIP Documents Upload Activity
  CURSOR curCIPDocsUploadActivity(inEeId IN NUMBER,
                                  inDays IN NUMBER) IS
    WITH CIPWORKGROUP AS
     (SELECT GETWORKGROUPFORCIPUPLOAD(inAdmnId, inErId, inEeId) AS WORKGROUP
        FROM DUAL)
    SELECT 'CIP Document Upload' "SOURCE",
           '' "SOURCE_ID",
           CI.EE_ID,
           TO_CHAR(CI.IMAGE_RECEIVED_ON, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'HSAROLE' "OBJECT_NAME",
           'Section' "SECTION",
           'HSA' "ACTP_CD",
           'HSA Application' "ACTIVITY_TYPE",
           'Documentation Uploaded' "ACTIVITY_DESCRIPTION",
           '' AMOUNT,
           'Under Review' STATUS,
           CI.WORKGROUP
      FROM CLAIMS_IMAGE CI, CIPWORKGROUP CW
     WHERE CI.STATUS = 'Indexed'
       AND CI.EE_ID = inEeId
       AND CI.WORKGROUP = CW.WORKGROUP
       AND CI.IMAGE_RECEIVED_ON >= SYSDATE - inDays;

  -- Profile Changes Activity
  CURSOR curProfileChangesActivity(inEeId IN NUMBER,
                                   inDays IN NUMBER) IS
  
    SELECT EMP.ID,
           TO_CHAR(EEHIST.DML_ON, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           TO_CHAR(EEHIST.DML_ON, 'MON-DD-YYYY') "ACTIVITY_DESCRIPTION",
           EEHIST.MAILING_LINE1_NEW,
           EEHIST.MAILING_LINE2_NEW,
           EEHIST.MAILING_LINE3_NEW,
           EEHIST.MAILING_ZIP_NEW,
           EEHIST.MAILING_CITY_NEW,
           EEHIST.MAILING_ST_CD_NEW,
           EEHIST.MAILING_ST_CTRY_CD_NEW,
           EEHIST.USER_NAME_NEW,
           EEHIST.ENCRYPTED_PASSWORD_NEW,
           EEHIST.SECURITY_CHALLENGE_NEW
      FROM EMPLOYEE EMP, EE_PROFILE_CHANGE_HIST EEHIST
     WHERE EMP.ID = EEHIST.EE_ID
       AND EMP.ID = inEeId
       AND EEHIST.DML_ON >= SYSDATE - inDays;

  -- Communication Event Activity
  CURSOR curCommunicationReturnActivity(inEeId IN NUMBER,
                                        inDays IN NUMBER) IS
  
    SELECT RMFD.ID,
           RMFD.EE_ID,
           TO_CHAR(RMFD.RETURNED_ON, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           TO_CHAR(RMFD.RETURNED_ON, 'MON-DD-YYYY') "ACTIVITY_DESCRIPTION"
      FROM RETURN_MAIL_FILE_DTL RMFD
     WHERE RMFD.EE_ID = inEeId
       AND RMFD.RETURNED_ON >= SYSDATE - inDays
     ORDER BY RMFD.RETURNED_ON DESC;

  -- Investment Realign/Sell Processing Activity
  CURSOR curInvestmentRealignSellProcessingActivity(inEeId IN NUMBER,
                                                    inDays IN NUMBER) IS
  
    SELECT RA.EE_ID "EE_ID",
           TO_CHAR(EIT.ID) "SOURCE_ID",
           TO_CHAR((SELECT EIS.REQUESTED_ON
                     FROM ELCT_INVEST_SELL EIS
                    WHERE EIS.ELCTINVSTTXN_ID = EIT.ID
                      AND rownum = 1),
                   'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           'HSAROLE' "OBJECT_NAME",
           TO_CHAR((SELECT EIS.REQUESTED_ON
                     FROM ELCT_INVEST_SELL EIS
                    WHERE EIS.ELCTINVSTTXN_ID = EIT.ID
                      AND rownum = 1),
                   'MM/DD/YYYY HH24:MI:SS') "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'Section' "SECTION",
           'HSA' "ACTP_CD",
           'Investment Sell' "ACTIVITY_DESCRIPTION",
           'Processing' "STATUS",
           'Non Claim Activities(RKP)' "SOURCE",
           'HSA' "ACTIVITY_TYPE",
           '' "AMOUNT",
           'Investment Sell' "WORKGROUP"
    
      FROM ELCT_INVEST_TRANSACTION EIT, RKP_ACCOUNT RA
     WHERE RA.EE_ID = inEeId
       AND EIT.INVEST_TYPE = 'Sell'
       AND EIT.ELCT_ID = RA.ELCT_ID
       AND EIT.TRXN_STATUS IN ('Pending', 'Inprocess', 'Processing')
       AND EIT.CREATED_ON >= SYSDATE - inDays
    
    UNION ALL
    
    SELECT RA.EE_ID "EE_ID",
           TO_CHAR(EIT.ID) "SOURCE_ID",
           TO_CHAR(EIT.REALIGN_CALL_ON, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           'HSAROLE' "OBJECT_NAME",
           TO_CHAR(EIT.REALIGN_CALL_ON, 'MM/DD/YYYY HH24:MI:SS') "PROCESSING_DATE",
           TO_CHAR(EIT.REALIGN_ACK_ON, 'MM/DD/YYYY HH24:MI:SS') "PROCESSED_DATE",
           'Section' "SECTION",
           'HSA' "ACTP_CD",
           'Investment Change' "ACTIVITY_DESCRIPTION",
           CASE
             WHEN EIT.TRXN_STATUS IN ('Pending', 'Inprocess', 'Processing') THEN
              'Processing'
             WHEN EIT.TRXN_STATUS IN ('Processed') THEN
              'Processed'
           END AS "STATUS",
           'Realign' "SOURCE",
           'HSA' "ACTIVITY_TYPE",
           '' "AMOUNT",
           'Investment Change' "WORKGROUP"
    
      FROM ELCT_INVEST_TRANSACTION EIT, RKP_ACCOUNT RA
     WHERE RA.EE_ID = inEeId
       AND EIT.INVEST_TYPE = 'Realign'
       AND EIT.ELCT_ID = RA.ELCT_ID
       AND EIT.TRXN_STATUS IN
           ('Pending', 'Inprocess', 'Processing', 'Processed')
       AND EIT.CREATED_ON >= SYSDATE - inDays
    
     ORDER BY ACTIVITY_ON DESC;

  --Direct Deposit Setup
  CURSOR curDirectDepositSetup(inEeId IN NUMBER,
                               inDays IN NUMBER) IS
  
    SELECT EMP.ID,
           TO_CHAR(EMP.ACH_STATUS_DATE, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           TO_CHAR(EMP.ACH_STATUS_DATE, 'MON-DD-YYYY') "ACTIVITY_DESCRIPTION"
      FROM EMPLOYEE EMP
     WHERE EMP.ID = inEeId
       AND (EMP.ACH_STATUS_DATE IS NOT NULL AND
           EMP.ACH_STATUS_DATE >= SYSDATE - inDays);

BEGIN

  tblAccountUpdateDetail.Delete;
  IF inEeId IS NULL THEN
    RAISE eNoInput;
  END IF;

  IF nUserId IS NULL THEN
    BEGIN
      SELECT l.id
        INTO nUserId
        FROM login l
       WHERE l.ee_id = inEeId
         AND rownum = 1;
    EXCEPTION
      WHEN no_data_found THEN
        RAISE eNoInput;
      WHEN OTHERS THEN
        RAISE eNoInput;
    END;
  END IF;

  cHasHSAViewPriv := HASVIEWPRIVILEGE(nUserId, 'HSAROLE', 'Section');
  isJRA           := jra_account_util.isJRA(inEeId);

  IF isJRA <> 'Yes' THEN
    -- Account Closure/Moved Activities
    FOR recElections IN (SELECT EL.EE_ID PPTID,
                                EL.ID ELCTID,
                                EL.ERAC_ACTP_CD ACTPCD,
                                EL.ENROLLMENT_STATUS ENROLLMENTSTATUS,
                                TO_CHAR(EL.ERAC_ENDS, 'YYYY') PLANYEAR,
                                EL.ELECTED_AMOUNT ELCT_AMT,
                                EL.ELECTION_DATE ELCT_DATE
                           FROM ELECTION EL
                          WHERE EL.ERAC_ACTP_CD NOT IN
                                ('NON REIMBURSEMENT', 'NO ELECTION')
                            AND EL.EE_ID = inEeId) LOOP
    
      Clm_ElectionDates(ocresult        => cResult,
                        ocerrorcategory => cErrorCategory,
                        onerrorcode     => nerrorcode,
                        ocerrorarea     => cErrorArea,
                        ocothermessage  => cOtherMessage,
                        --
                        ineeid                 => inEeId,
                        inelctid               => recElections.Elctid,
                        inerid                 => inErId,
                        icactpcd               => recElections.Actpcd,
                        icDebugMode            => 'No',
                        odElectionBegins       => dElectionBegins, --What is the start date of the election
                        odElectionEnds         => dElectionEnds, --What is the end date of the election (incl separation rules)
                        odServiceBegins        => dServiceBegins, --What is the earliest service date.
                        odServiceEnds          => dServiceEnds, --What is the latest service date (incl grace)
                        odMaxFutureServiceEnds => dMaxFutureServiceEnds, --What is the max future service date
                        odSubmitEnds           => dSubmitEnds, --Last day allowed to submit a claim
                        ocElectionEndReason    => cElectionEndReason,
                        ocStackExists          => cStackExists,
                        idOverRideDate         => NULL);
    
      IF cResult != 'OK' THEN
        RAISE eException;
      END IF;
    
      IF (recElections.Enrollmentstatus = 'Moved') THEN
      
        SELECT MAX(MOVEMENT_DT)
          INTO dMovementDate
          FROM EE_MOVEMENT_DTL
         WHERE EE_ID_FROM = inEeId;
        dSubmitEnds := trunc(dMovementDate);
      END IF;
    
      IF (trunc(dSubmitEnds) - dTruncSysdate < 0) AND
         (dTruncSysdate - trunc(dSubmitEnds) <= inDays) THEN
      
        cUpdatedAcctLabel := PortalUtil.GetAccountLabel(inEeId,
                                                        recElections.Actpcd);
        IF (recElections.Actpcd <> 'HSA' AND
           TO_CHAR(trunc(SYSDATE, 'YEAR')) = recElections.Planyear) THEN
          tblAccountUpdateDetail.Extend;
          tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Closed Account',
                                                                                           SOURCE_ID            => '',
                                                                                           EE_ID                => inEeId,
                                                                                           ACTIVITY_ON          => TO_CHAR(dSubmitEnds,
                                                                                                                           'MM/DD/YYYY HH24:MI:SS'),
                                                                                           OBJECT_NAME          => '',
                                                                                           SECTION              => 'Section',
                                                                                           ACTP_CD              => cUpdatedAcctLabel,
                                                                                           ACTIVITY_TYPE        => cUpdatedAcctLabel ||
                                                                                                                   ' Closed',
                                                                                           ACTIVITY_DESCRIPTION => 'Account Closure',
                                                                                           PROCESSING_DATE      => '',
                                                                                           PROCESSED_DATE       => '',
                                                                                           AMOUNT               => '',
                                                                                           STATUS               => 'CLOSED',
                                                                                           WORKGROUP            => 'NA',
                                                                                           TXN_CATEGORY         => '',
                                                                                           EFFECTIVE_DATE       => '');
        
        ELSIF recElections.Actpcd = 'HSA' AND cHasHSAViewPriv = 'Yes' AND
              recElections.Enrollmentstatus = 'Moved' THEN
          tblAccountUpdateDetail.Extend;
          tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Moved Account',
                                                                                           SOURCE_ID            => '',
                                                                                           EE_ID                => inEeId,
                                                                                           ACTIVITY_ON          => TO_CHAR(dSubmitEnds,
                                                                                                                           'MM/DD/YYYY HH24:MI:SS'),
                                                                                           OBJECT_NAME          => '',
                                                                                           SECTION              => 'Section',
                                                                                           ACTP_CD              => cUpdatedAcctLabel,
                                                                                           ACTIVITY_TYPE        => cUpdatedAcctLabel ||
                                                                                                                   ' Moved',
                                                                                           ACTIVITY_DESCRIPTION => 'Account Moved',
                                                                                           PROCESSING_DATE      => '',
                                                                                           PROCESSED_DATE       => '',
                                                                                           AMOUNT               => '',
                                                                                           STATUS               => 'MOVED',
                                                                                           WORKGROUP            => 'NA',
                                                                                           TXN_CATEGORY         => '',
                                                                                           EFFECTIVE_DATE       => '');
        
        ELSIF recElections.Actpcd = 'HSA' AND cHasHSAViewPriv = 'Yes' THEN
          tblAccountUpdateDetail.Extend;
          tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Closed Account',
                                                                                           SOURCE_ID            => '',
                                                                                           EE_ID                => inEeId,
                                                                                           ACTIVITY_ON          => TO_CHAR(dSubmitEnds,
                                                                                                                           'MM/DD/YYYY HH24:MI:SS'),
                                                                                           OBJECT_NAME          => '',
                                                                                           SECTION              => 'Section',
                                                                                           ACTP_CD              => cUpdatedAcctLabel,
                                                                                           ACTIVITY_TYPE        => cUpdatedAcctLabel ||
                                                                                                                   ' Closed',
                                                                                           ACTIVITY_DESCRIPTION => 'Account Closure',
                                                                                           PROCESSING_DATE      => '',
                                                                                           PROCESSED_DATE       => '',
                                                                                           AMOUNT               => '',
                                                                                           STATUS               => 'CLOSED',
                                                                                           WORKGROUP            => 'NA',
                                                                                           TXN_CATEGORY         => '',
                                                                                           EFFECTIVE_DATE       => '');
        END IF;
      END IF;
    
    END LOOP;
  
    -- Non Claim Activities(RKP)
    IF cHasHSAViewPriv = 'Yes' THEN
      FOR recRKPNonClaimActivity IN curRKPNonClaimActivity(inEeId, inDays) LOOP
      
        tblAccountUpdateDetail.Extend;
        tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recRKPNonClaimActivity.SOURCE,
                                                                                         SOURCE_ID            => recRKPNonClaimActivity.SOURCE_ID,
                                                                                         EE_ID                => recRKPNonClaimActivity.EE_ID,
                                                                                         ACTIVITY_ON          => recRKPNonClaimActivity.ACTIVITY_ON,
                                                                                         OBJECT_NAME          => 'HSAROLE',
                                                                                         SECTION              => 'Section',
                                                                                         ACTP_CD              => recRKPNonClaimActivity.ACTP_CD,
                                                                                         ACTIVITY_TYPE        => 'HSA',
                                                                                         ACTIVITY_DESCRIPTION => nvl(recRKPNonClaimActivity.Txn_Category_Display,
                                                                                                                     recRKPNonClaimActivity.Txn_Type),
                                                                                         PROCESSING_DATE      => recRKPNonClaimActivity.PROCESSING_DATE,
                                                                                         PROCESSED_DATE       => recRKPNonClaimActivity.PROCESSED_DATE,
                                                                                         AMOUNT               => recRKPNonClaimActivity.AMOUNT,
                                                                                         STATUS               => recRKPNonClaimActivity.STATUS,
                                                                                         WORKGROUP            => recRKPNonClaimActivity.Txn_Category_Display,
                                                                                         TXN_CATEGORY         => recRKPNonClaimActivity.Txn_Category,
                                                                                         EFFECTIVE_DATE       => '');
      
      END LOOP;
    END IF;
  
    -- Non Claim Activities(Notional)
    FOR recNotionalNonClaimActivity IN curNotionalNonClaimActivity(inEeId,
                                                                   inDays) LOOP
    
      cUpdatedAcctLabel := PortalUtil.GetAccountLabel(inEeId,
                                                      recNotionalNonClaimActivity.Erac_Actp_Cd);
    
      IF nvl(UPPER(recNotionalNonClaimActivity.Txn_Category), 'others') =
         'DEPOSIT' THEN
        cWorkGroup := cUpdatedAcctLabel || ' Contribution';
      ELSE
        cWorkGroup := recNotionalNonClaimActivity.Txn_Type;
      END IF;
    
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recNotionalNonClaimActivity.SOURCE,
                                                                                       SOURCE_ID            => recNotionalNonClaimActivity.SOURCE_ID,
                                                                                       EE_ID                => inEeId,
                                                                                       ACTIVITY_ON          => recNotionalNonClaimActivity.ACTIVITY_ON,
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => 'Section',
                                                                                       ACTP_CD              => cUpdatedAcctLabel,
                                                                                       PROCESSING_DATE      => recNotionalNonClaimActivity.PROCESSING_DATE,
                                                                                       PROCESSED_DATE       => recNotionalNonClaimActivity.PROCESSED_DATE,
                                                                                       ACTIVITY_TYPE        => cUpdatedAcctLabel,
                                                                                       ACTIVITY_DESCRIPTION => recNotionalNonClaimActivity.Activity_Desc,
                                                                                       AMOUNT               => recNotionalNonClaimActivity.AMOUNT,
                                                                                       STATUS               => recNotionalNonClaimActivity.STATUS,
                                                                                       WORKGROUP            => cWorkGroup,
                                                                                       TXN_CATEGORY         => recNotionalNonClaimActivity.Txn_Category,
                                                                                       EFFECTIVE_DATE       => '');
    END LOOP;
  ELSE
    -- JRA Non Claim Activities
    FOR recJRANonClaimActivity IN curJRANonClaimActivity(inEeId, inDays) LOOP
    
      cUpdatedAcctLabel := PortalUtil.GetAccountLabel(inEeId,
                                                      recJRANonClaimActivity.ERAC_ACTP_CD);
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recJRANonClaimActivity.SOURCE,
                                                                                       SOURCE_ID            => recJRANonClaimActivity.SOURCE_ID,
                                                                                       EE_ID                => inEeId,
                                                                                       ACTIVITY_ON          => recJRANonClaimActivity.ACTIVITY_ON,
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => 'Section',
                                                                                       ACTP_CD              => recJRANonClaimActivity.ERAC_ACTP_CD,
                                                                                       PROCESSING_DATE      => recJRANonClaimActivity.PROCESSING_DATE,
                                                                                       PROCESSED_DATE       => recJRANonClaimActivity.PROCESSED_DATE,
                                                                                       ACTIVITY_TYPE        => cUpdatedAcctLabel,
                                                                                       ACTIVITY_DESCRIPTION => recJRANonClaimActivity.TXN_TYPE,
                                                                                       AMOUNT               => recJRANonClaimActivity.AMOUNT,
                                                                                       STATUS               => recJRANonClaimActivity.STATUS,
                                                                                       WORKGROUP            => recJRANonClaimActivity.PLAN_YEAR,
                                                                                       TXN_CATEGORY         => recJRANonClaimActivity.Txn_Category,
                                                                                       EFFECTIVE_DATE       => recJRANonClaimActivity.EFFECTIVE_DATE);
    END LOOP;
  END IF;
  -- Claims Activity
  v_claimsdata := clm_getclaimdetails(NULL, NULL, NULL, inEeId);
  FOR indx IN 1 .. v_claimsdata.COUNT LOOP
    BEGIN
      SELECT DECODE(v_claimsdata(indx).ACCOUNT_TYPE, 'HSA', 'HSAROLE', '')
        INTO cObjectName
        FROM dual;
    
    EXCEPTION
      WHEN no_data_found THEN
        cObjectName := '';
    END;
  
    IF v_claimsdata(indx)
     .activity_date >= SYSDATE - inDays AND v_claimsdata(indx)
       .claim_status NOT IN ('Void', 'Hold') AND
        HASVIEWPRIVILEGE(nUserId, cObjectName, 'Section') = 'Yes' THEN
    
      IF v_claimsdata(indx).claim_status = 'UsedForOffset' THEN
        v_claimsdata(indx).claim_status := 'Used For offset';
      END IF;
    
      cProvider     := INITCAP(v_claimsdata(indx).PROVIDER);
      cActivityDesc := TO_CHAR(TRUNC(v_claimsdata(indx).ACTIVITY_DATE),
                               'MON-DD-YYYY');
      IF v_claimsdata(indx)
       .ACCOUNT_TYPE = 'HSA' AND instr(lower(cProvider), 'liquidate') > 0 THEN
        cProvider     := 'HSA Distribution';
        cActivityDesc := 'Account Distribution';
      END IF;
    
      IF v_claimsdata(indx).CLAIM_BATCH_TYPE IN ('Manual', 'Online') THEN
        cActivityDesc := v_claimsdata(indx).CATEGORY || ' Expense';
      ELSIF v_claimsdata(indx).CLAIM_BATCH_TYPE IN ('Debit Card') THEN
        cActivityDesc := 'Debit Card Activity';
      END IF;
    
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Claim',
                                                                                       SOURCE_ID            => v_claimsdata(indx).ID,
                                                                                       EE_ID                => inEeId,
                                                                                       ACTIVITY_ON          => TO_CHAR(nvl(v_claimsdata(indx)
                                                                                                                           .PAID_ON,
                                                                                                                           v_claimsdata(indx)
                                                                                                                           .ACTIVITY_DATE),
                                                                                                                       'MM/DD/YYYY HH24:MI:SS'),
                                                                                       OBJECT_NAME          => cObjectName,
                                                                                       SECTION              => 'Section',
                                                                                       ACTP_CD              => v_claimsdata(indx)
                                                                                                               .ACCOUNT_TYPE,
                                                                                       ACTIVITY_TYPE        => cProvider,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       ACTIVITY_DESCRIPTION => cActivityDesc,
                                                                                       AMOUNT               => -1 *
                                                                                                               REPLACE(REPLACE(v_claimsdata(indx)
                                                                                                                               .TOTAL_AMOUNT,
                                                                                                                               '$'),
                                                                                                                       ' '),
                                                                                       STATUS               => v_claimsdata(indx)
                                                                                                               .CLAIM_STATUS,
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;
  END LOOP;
  v_claimsdata.delete;

  -- Help Ticket Activity
  FOR recHelpTicketActivity IN curHelpTicketActivity(inEeId, inDays) LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recHelpTicketActivity.SOURCE,
                                                                                     SOURCE_ID            => recHelpTicketActivity.SOURCE_ID,
                                                                                     EE_ID                => recHelpTicketActivity.EE_ID,
                                                                                     ACTIVITY_ON          => recHelpTicketActivity.ACTIVITY_ON,
                                                                                     OBJECT_NAME          => recHelpTicketActivity.OBJECT_NAME,
                                                                                     SECTION              => recHelpTicketActivity.SECTION,
                                                                                     ACTP_CD              => recHelpTicketActivity.ACTP_CD,
                                                                                     PROCESSING_DATE      => recHelpTicketActivity.PROCESSING_DATE,
                                                                                     PROCESSED_DATE       => recHelpTicketActivity.PROCESSED_DATE,
                                                                                     ACTIVITY_TYPE        => recHelpTicketActivity.ACTIVITY_TYPE,
                                                                                     ACTIVITY_DESCRIPTION => recHelpTicketActivity.ACTIVITY_DESCRIPTION,
                                                                                     AMOUNT               => recHelpTicketActivity.AMOUNT,
                                                                                     STATUS               => recHelpTicketActivity.STATUS,
                                                                                     WORKGROUP            => recHelpTicketActivity.WORKGROUP,
                                                                                     TXN_CATEGORY         => '',
                                                                                     EFFECTIVE_DATE       => '');
  
  END LOOP;

  -- Debit Card Unsettled Transactions Activity
  FOR recDebitCardUnsettledActivity IN curDebitCardUnsettledActivity(inEeId,
                                                                     inDays) LOOP
  
    IF (recDebitCardUnsettledActivity.ACTP_CD = 'HSA' AND
       cHasHSAViewPriv = 'Yes') OR
       recDebitCardUnsettledActivity.ACTP_CD <> 'HSA' OR
       recDebitCardUnsettledActivity.ACTP_CD IS NULL THEN
    
      IF HASVIEWPRIVILEGE(nUserId,
                          recDebitCardUnsettledActivity.OBJECT_NAME,
                          recDebitCardUnsettledActivity.SECTION) = 'Yes' THEN
      
        cAmount := recDebitCardUnsettledActivity.AMOUNT;
      
        IF recDebitCardUnsettledActivity.TXN_INDICATOR = 'D' AND
           recDebitCardUnsettledActivity.Status = 'Processing' THEN
          cAmount := -1 * recDebitCardUnsettledActivity.AMOUNT;
        END IF;
      
        tblAccountUpdateDetail.Extend;
        tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recDebitCardUnsettledActivity.SOURCE,
                                                                                         SOURCE_ID            => recDebitCardUnsettledActivity.SOURCE_ID,
                                                                                         EE_ID                => recDebitCardUnsettledActivity.EE_ID,
                                                                                         ACTIVITY_ON          => recDebitCardUnsettledActivity.ACTIVITY_ON,
                                                                                         OBJECT_NAME          => recDebitCardUnsettledActivity.OBJECT_NAME,
                                                                                         SECTION              => recDebitCardUnsettledActivity.SECTION,
                                                                                         ACTP_CD              => recDebitCardUnsettledActivity.ACTP_CD,
                                                                                         PROCESSING_DATE      => recDebitCardUnsettledActivity.PROCESSING_DATE,
                                                                                         PROCESSED_DATE       => recDebitCardUnsettledActivity.PROCESSED_DATE,
                                                                                         ACTIVITY_TYPE        => recDebitCardUnsettledActivity.ACTIVITY_TYPE,
                                                                                         ACTIVITY_DESCRIPTION => recDebitCardUnsettledActivity.ACTIVITY_DESCRIPTION,
                                                                                         AMOUNT               => cAmount,
                                                                                         STATUS               => recDebitCardUnsettledActivity.STATUS,
                                                                                         WORKGROUP            => recDebitCardUnsettledActivity.WORKGROUP,
                                                                                         TXN_CATEGORY         => '',
                                                                                         EFFECTIVE_DATE       => '');
      END IF;
    END IF;
  
  END LOOP;

  -- Contribution Schedule activity
  IF isJRA <> 'Yes' AND cHasHSAViewPriv = 'Yes' THEN
    FOR recContribScheduleActivity IN curContribScheduleActivity(inEeId,
                                                                 inDays) LOOP
    
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recContribScheduleActivity.SOURCE,
                                                                                       SOURCE_ID            => recContribScheduleActivity.SOURCE_ID,
                                                                                       EE_ID                => recContribScheduleActivity.EE_ID,
                                                                                       ACTIVITY_ON          => recContribScheduleActivity.ACTIVITY_ON,
                                                                                       OBJECT_NAME          => recContribScheduleActivity.OBJECT_NAME,
                                                                                       SECTION              => recContribScheduleActivity.SECTION,
                                                                                       ACTP_CD              => recContribScheduleActivity.ACTP_CD,
                                                                                       PROCESSING_DATE      => recContribScheduleActivity.PROCESSING_DATE,
                                                                                       PROCESSED_DATE       => recContribScheduleActivity.PROCESSED_DATE,
                                                                                       ACTIVITY_TYPE        => recContribScheduleActivity.ACTIVITY_TYPE,
                                                                                       ACTIVITY_DESCRIPTION => recContribScheduleActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => recContribScheduleActivity.AMOUNT,
                                                                                       STATUS               => recContribScheduleActivity.STATUS,
                                                                                       WORKGROUP            => recContribScheduleActivity.WORKGROUP,
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    
    END LOOP;
  END IF;

  -- Bank Account Setup Activity For Contribution
  FOR recContribSetupActivity IN curContribSetupActivity(inEeId, inDays) LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recContribSetupActivity.SOURCE,
                                                                                     SOURCE_ID            => recContribSetupActivity.SOURCE_ID,
                                                                                     EE_ID                => recContribSetupActivity.EE_ID,
                                                                                     ACTIVITY_ON          => recContribSetupActivity.ACTIVITY_ON,
                                                                                     OBJECT_NAME          => recContribSetupActivity.OBJECT_NAME,
                                                                                     SECTION              => recContribSetupActivity.SECTION,
                                                                                     ACTP_CD              => recContribSetupActivity.ACTP_CD,
                                                                                     PROCESSING_DATE      => recContribSetupActivity.PROCESSING_DATE,
                                                                                     PROCESSED_DATE       => recContribSetupActivity.PROCESSED_DATE,
                                                                                     ACTIVITY_TYPE        => recContribSetupActivity.ACTIVITY_TYPE,
                                                                                     ACTIVITY_DESCRIPTION => recContribSetupActivity.ACTIVITY_DESCRIPTION,
                                                                                     AMOUNT               => recContribSetupActivity.AMOUNT,
                                                                                     STATUS               => recContribSetupActivity.STATUS,
                                                                                     WORKGROUP            => recContribSetupActivity.WORKGROUP,
                                                                                     TXN_CATEGORY         => '',
                                                                                     EFFECTIVE_DATE       => '');
  
  END LOOP;

  -- Debit Card Activity

  tblDebitCardDetails := Clm_GetDebitCardActivities(inEeId, inDays);
  FOR nIndex IN 1 .. tblDebitCardDetails.COUNT LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tblDebitCardDetails(nIndex);
  
  END LOOP;

  -- CIP Documents Upload Activity
  IF isJRA <> 'Yes' AND cHasHSAViewPriv = 'Yes' THEN
    FOR recCIPDocsUploadActivity IN curCIPDocsUploadActivity(inEeId, inDays) LOOP
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recCIPDocsUploadActivity.SOURCE,
                                                                                       SOURCE_ID            => recCIPDocsUploadActivity.SOURCE_ID,
                                                                                       EE_ID                => recCIPDocsUploadActivity.EE_ID,
                                                                                       ACTIVITY_ON          => recCIPDocsUploadActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => recCIPDocsUploadActivity.PROCESSING_DATE,
                                                                                       PROCESSED_DATE       => recCIPDocsUploadActivity.PROCESSED_DATE,
                                                                                       OBJECT_NAME          => recCIPDocsUploadActivity.OBJECT_NAME,
                                                                                       SECTION              => recCIPDocsUploadActivity.SECTION,
                                                                                       ACTP_CD              => recCIPDocsUploadActivity.ACTP_CD,
                                                                                       ACTIVITY_TYPE        => recCIPDocsUploadActivity.ACTIVITY_TYPE,
                                                                                       ACTIVITY_DESCRIPTION => recCIPDocsUploadActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => recCIPDocsUploadActivity.AMOUNT,
                                                                                       STATUS               => recCIPDocsUploadActivity.STATUS,
                                                                                       WORKGROUP            => recCIPDocsUploadActivity.WORKGROUP,
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    
    END LOOP;
  END IF;

  -- Profile Changes Activity
  FOR recProfileActivity IN curProfileChangesActivity(inEeId, inDays) LOOP
  
    -- Contact Info Changes
    IF (recProfileActivity.MAILING_LINE1_NEW IS NOT NULL OR
       recProfileActivity.MAILING_LINE2_NEW IS NOT NULL OR
       recProfileActivity.MAILING_LINE3_NEW IS NOT NULL OR
       recProfileActivity.MAILING_ZIP_NEW IS NOT NULL OR
       recProfileActivity.MAILING_CITY_NEW IS NOT NULL OR
       recProfileActivity.MAILING_ST_CD_NEW IS NOT NULL OR
       recProfileActivity.MAILING_ST_CTRY_CD_NEW IS NOT NULL) THEN
    
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Contact Info',
                                                                                       SOURCE_ID            => recProfileActivity.ID,
                                                                                       EE_ID                => recProfileActivity.ID,
                                                                                       ACTIVITY_ON          => recProfileActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       ACTIVITY_TYPE        => 'Contact Info Change',
                                                                                       ACTIVITY_DESCRIPTION => recProfileActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => '',
                                                                                       STATUS               => 'Updated',
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;
  
    -- Credentials Changes
    IF (recProfileActivity.USER_NAME_NEW IS NOT NULL) THEN
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Credentials',
                                                                                       SOURCE_ID            => recProfileActivity.ID,
                                                                                       EE_ID                => recProfileActivity.ID,
                                                                                       ACTIVITY_ON          => recProfileActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       ACTIVITY_TYPE        => 'Username',
                                                                                       ACTIVITY_DESCRIPTION => recProfileActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => '',
                                                                                       STATUS               => 'Updated',
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;
  
    -- Credentials Changes
    IF (recProfileActivity.ENCRYPTED_PASSWORD_NEW IS NOT NULL) THEN
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Credentials',
                                                                                       SOURCE_ID            => recProfileActivity.ID,
                                                                                       EE_ID                => recProfileActivity.ID,
                                                                                       ACTIVITY_ON          => recProfileActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       ACTIVITY_TYPE        => 'Password',
                                                                                       ACTIVITY_DESCRIPTION => recProfileActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => '',
                                                                                       STATUS               => 'Updated',
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;
  
    -- Credentials Changes
    IF (recProfileActivity.SECURITY_CHALLENGE_NEW IS NOT NULL) THEN
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Credentials',
                                                                                       SOURCE_ID            => recProfileActivity.ID,
                                                                                       EE_ID                => recProfileActivity.ID,
                                                                                       ACTIVITY_ON          => recProfileActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       ACTIVITY_TYPE        => 'Security Question',
                                                                                       ACTIVITY_DESCRIPTION => recProfileActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => '',
                                                                                       STATUS               => 'Updated',
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;
  
  END LOOP;

  -- Communication Event Activity
  FOR recCommunicationReturnActivity IN curCommunicationReturnActivity(inEeId,
                                                                       inDays) LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := trec_AccountUpdateDetail(SOURCE               => 'Communication Return',
                                                                                     SOURCE_ID            => recCommunicationReturnActivity.ID,
                                                                                     EE_ID                => inEeId,
                                                                                     ACTIVITY_ON          => recCommunicationReturnActivity.ACTIVITY_ON,
                                                                                     PROCESSING_DATE      => '',
                                                                                     PROCESSED_DATE       => '',
                                                                                     OBJECT_NAME          => '',
                                                                                     SECTION              => '',
                                                                                     ACTP_CD              => '',
                                                                                     ACTIVITY_TYPE        => 'Document Received',
                                                                                     ACTIVITY_DESCRIPTION => recCommunicationReturnActivity.ACTIVITY_DESCRIPTION,
                                                                                     AMOUNT               => '',
                                                                                     STATUS               => 'Returned Mail',
                                                                                     WORKGROUP            => 'NA',
                                                                                     TXN_CATEGORY         => '',
                                                                                     EFFECTIVE_DATE       => '');
    EXIT;
  END LOOP;

  -- Investment Realign/Sell Processing Activity
  IF isJRA <> 'Yes' THEN
    FOR recInvestmentRealignSellProcessingActivity IN curInvestmentRealignSellProcessingActivity(inEeId,
                                                                                                 inDays) LOOP
      IF (recInvestmentRealignSellProcessingActivity.ACTIVITY_DESCRIPTION IS NOT NULL) THEN
        tblAccountUpdateDetail.Extend;
        tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := trec_AccountUpdateDetail(SOURCE               => recInvestmentRealignSellProcessingActivity.SOURCE,
                                                                                         SOURCE_ID            => recInvestmentRealignSellProcessingActivity.SOURCE_ID,
                                                                                         EE_ID                => recInvestmentRealignSellProcessingActivity.EE_ID,
                                                                                         ACTIVITY_ON          => recInvestmentRealignSellProcessingActivity.ACTIVITY_ON,
                                                                                         PROCESSING_DATE      => recInvestmentRealignSellProcessingActivity.PROCESSING_DATE,
                                                                                         PROCESSED_DATE       => recInvestmentRealignSellProcessingActivity.PROCESSED_DATE,
                                                                                         OBJECT_NAME          => recInvestmentRealignSellProcessingActivity.OBJECT_NAME,
                                                                                         SECTION              => recInvestmentRealignSellProcessingActivity.SECTION,
                                                                                         ACTP_CD              => recInvestmentRealignSellProcessingActivity.ACTP_CD,
                                                                                         ACTIVITY_TYPE        => recInvestmentRealignSellProcessingActivity.ACTIVITY_TYPE,
                                                                                         ACTIVITY_DESCRIPTION => recInvestmentRealignSellProcessingActivity.ACTIVITY_DESCRIPTION,
                                                                                         AMOUNT               => recInvestmentRealignSellProcessingActivity.AMOUNT,
                                                                                         STATUS               => recInvestmentRealignSellProcessingActivity.STATUS,
                                                                                         WORKGROUP            => recInvestmentRealignSellProcessingActivity.WORKGROUP,
                                                                                         TXN_CATEGORY         => '',
                                                                                         EFFECTIVE_DATE       => '');
      
      END IF;
    END LOOP;
  END IF;
  -- Direct Deposit Setup
  FOR recDirectDepositSetup IN curDirectDepositSetup(inEeId, inDays) LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Direct Deposit Setup',
                                                                                     SOURCE_ID            => recDirectDepositSetup.ID,
                                                                                     EE_ID                => recDirectDepositSetup.ID,
                                                                                     ACTIVITY_ON          => recDirectDepositSetup.ACTIVITY_ON,
                                                                                     OBJECT_NAME          => '',
                                                                                     SECTION              => '',
                                                                                     ACTP_CD              => '',
                                                                                     PROCESSING_DATE      => '',
                                                                                     PROCESSED_DATE       => '',
                                                                                     ACTIVITY_TYPE        => 'Direct Deposit Change',
                                                                                     ACTIVITY_DESCRIPTION => recDirectDepositSetup.ACTIVITY_DESCRIPTION,
                                                                                     AMOUNT               => '',
                                                                                     STATUS               => 'Updated',
                                                                                     WORKGROUP            => 'NA',
                                                                                     TXN_CATEGORY         => '',
                                                                                     EFFECTIVE_DATE       => '');
  
  END LOOP;

  RETURN tblAccountUpdateDetail;
EXCEPTION
  WHEN eNoInput THEN
    RETURN tblAccountUpdateDetail;
END Clm_GetAccountUpdatesDetails;


=========================================================================================
drop type tTab_AccountUpdateDetail;
/
drop type tRec_AccountUpdateDetail;
/

CREATE OR REPLACE TYPE tRec_AccountUpdateDetail AS OBJECT
(
  SOURCE               VARCHAR2(100),
  SOURCE_ID            VARCHAR2(200),
  EE_ID                NUMBER,
  ACTIVITY_ON          VARCHAR2(40),
  OBJECT_NAME          VARCHAR2(255),
  SECTION              VARCHAR2(20),
  ACTP_CD              VARCHAR2(20),
  ACTIVITY_TYPE        VARCHAR(255),
  ACTIVITY_DESCRIPTION VARCHAR(255),
  PROCESSING_DATE      VARCHAR2(40),
  PROCESSED_DATE       VARCHAR2(40),
  AMOUNT               VARCHAR2(255),
  STATUS               VARCHAR2(255),
  WORKGROUP            VARCHAR2(255),
  TXN_CATEGORY         VARCHAR2(255),
  EFFECTIVE_DATE       VARCHAR2(40),
  
  CONSTRUCTOR FUNCTION tRec_AccountUpdateDetail RETURN SELF AS RESULT
)
;
/
 
CREATE OR REPLACE TYPE tTab_AccountUpdateDetail AS TABLE OF tRec_AccountUpdateDetail;
/





===========================================================================================



-- Non claim activities
CREATE OR REPLACE VIEW VW_EE_JRA_ACCOUNTACTIVITY AS
SELECT 'JRANONCLAIMACTIVITY' group_type,
       d.id ID,
       d.elct_id elct_id,
       d.ee_id,
       nvl(d.created_on, ds.effective_date) activity_date,
       CASE
         WHEN dt.web_code = 'Contribution' AND dt.deposit_by = 'EE' THEN
          'Employee Contribution'
         WHEN dt.web_code = 'Contribution' AND dt.deposit_by = 'ER' THEN
          'Employer Contribution'
         ELSE
          dt.web_code
       END txn_type,
       'Processed' txn_status,
       NULL plan_year,
       (d.amt + d.adjustment_amt) amount,
       dt.deposit_type txn_category,
       nvl(d.created_on, ds.effective_date) processing_date,
       nvl(d.created_on, ds.effective_date) processed_date,
       ds.effective_date effective_date,
       el.erac_actp_cd
  FROM deposit          d,
       deposit_type     dt,
       deposit_file     dfl,
       deposit_schedule ds,
       election         el
 WHERE d.deposit_type = dt.deposit_type
   AND d.dpfl_id = dfl.id
   AND dfl.dpsc_id = ds.id
   AND el.id = d.elct_id

UNION ALL
-- Roll In /Roll Out activities
SELECT 'ROLLOVERINOUT' group_type,
       RD.id ID,
       CASE
         WHEN RT.Row_No = 1 THEN
          elct_id_from
         ELSE
          elct_id_to
       END elct_id,
       RD.ee_id,
       RD.transaction_date activity_date,
       CASE
         WHEN RT.Row_No = 1 THEN
          'Rollover Out'
         ELSE
          'Rollover In'
       END txn_type,
       'Processed' txn_status,
       CASE
         WHEN RT.Row_No = 1 THEN
          to_erac_ends
         ELSE
          from_erac_ends
       END plan_year,
       CASE
         WHEN RT.Row_No = 1 THEN
          amount * (-1)
         ELSE
          amount
       END amount,
       'ROLLOVERINOUT' txn_category,
       RD.transaction_date processing_date,
       RD.transaction_date PROCESSED_DATE,
       NULL effective_date,
       CASE
         WHEN RT.Row_No = 1 THEN
          to_erac_actp
         ELSE
          from_erac_actp
       END erac_actp_cd
  FROM (SELECT erd.id,
               TRUNC(erd.txn_dt) transaction_date,
               erd.elct_id_from,
               erd.elct_id_to,
               erd.amount,
               CASE
                 WHEN EXTRACT(YEAR FROM e1.election_date) !=
                      EXTRACT(YEAR FROM e1.erac_ends) THEN
                  EXTRACT(YEAR FROM e1.election_date) || '-' ||
                  TO_CHAR(e1.erac_ends, 'YY')
                 ELSE
                  TO_CHAR(EXTRACT(YEAR FROM e1.erac_ends))
               END from_erac_ends,
               CASE
                 WHEN EXTRACT(YEAR FROM e2.election_date) !=
                      EXTRACT(YEAR FROM e2.erac_ends) THEN
                  EXTRACT(YEAR FROM e2.election_date) || '-' ||
                  TO_CHAR(e2.erac_ends, 'YY')
                 ELSE
                  TO_CHAR(EXTRACT(YEAR FROM e2.erac_ends))
               END to_erac_ends,
               e1.ee_id,
               e1.erac_actp_cd from_erac_actp,
               e2.erac_actp_cd to_erac_actp
          FROM elct_roll_inout_dtl erd, election e1, election e2
         WHERE erd.elct_id_from = e1.id
           AND erd.elct_id_to = e2.id
           AND e1.ee_id = e2.ee_id
           AND erd.txn_type <> 'CarryOver') RD,
       (SELECT LEVEL row_no FROM dual CONNECT BY LEVEL < 3) RT
UNION ALL
-- Adhoc accout adjustments
SELECT 'ADHOCADJUSTMENTS' group_type,
       aa.ID,
       aa.elct_id,
       aa.ee_id,
       aa.adjustment_on activity_date,
       nvl(at.portal_description, at.description) txn_type,
       CASE
         WHEN aa.status = 'Confirmed' THEN
          'Processed'
         ELSE
          'Processsing'
       END txn_status,
       CASE
         WHEN at.adj_type = 'Forfeiture' THEN
          CASE
            WHEN EXTRACT(YEAR FROM el.election_date) !=
                 EXTRACT(YEAR FROM el.erac_ends) THEN
             EXTRACT(YEAR FROM el.election_date) || '-' ||
             TO_CHAR(el.erac_ends, 'YY')
            ELSE
             TO_CHAR(EXTRACT(YEAR FROM el.erac_ends))
          END
         ELSE
          NULL
       END plan_year,
       aa.adjustment_amt * (-1) amount,
       'ADHOCADJUSTMENTS' txn_category,
       aa.adjustment_on processing_date,
       aa.adjustment_on processed_date,
       aa.effective_date effective_date,
       el.erac_actp_cd
  FROM Adjustment_Type at, Account_Adjustment aa, election el
 WHERE at.adj_type = aa.adjustment_type
   AND at.source_ref = aa.source_ref
   AND aa.elct_id = el.id
   AND at.adj_type IN ('Premium Drawdown',
                       'Prior Paid Adjustments',
                       'Forfeiture',
                       'Admin Fees')

UNION ALL
-- Election overpayment recovery by check and Plan sponsor
SELECT CASE
         WHEN NVL(erf.trxn_type, 'NA') <> 'Plan Sponsor Collection' THEN
          'ELCTCHECKRECOVERY'
         ELSE
          'PLANSPONSOR'
       END group_type,
       eod.id,
       el.id elct_id,
       el.ee_id,
       ohd.offset_on activity_date,
       CASE
         WHEN NVL(erf.trxn_type, 'NA') <> 'Plan Sponsor Collection' THEN
          'Cash Overpayment Recovery'
         ELSE
          'Employer Collection'
       END txn_type,
       CASE
         WHEN NVL(erf.trxn_type, 'NA') <> 'Plan Sponsor Collection' THEN
          'Refunded'
         ELSE
          'Processed'
       END txn_status,
       NULL plan_year,
       eod.amt,
       CASE
         WHEN NVL(erf.trxn_type, 'NA') <> 'Plan Sponsor Collection' THEN
          'ELCTCHECKRECOVERY'
         ELSE
          'PLANSPONSOR'
       END txn_category,
       ohd.offset_on processing_date,
       ohd.offset_on processed_date,
       NULL effective_date,
       el.erac_actp_cd
  FROM election             el,
       elct_offset_dtl      eod,
       Offset_Hdr           ohd,
       ee_repayment_funding erf
 WHERE el.id = eod.elct_id
   AND eod.ee_repay_fund_id = erf.id(+)
   AND eod.reverted_on IS NULL
   AND eod.offset_id = ohd.id
   AND ohd.offset_type IN ('Overpayment-Elct-By-Check')
UNION ALL
-- Plan Sponsor and claim overpayment recovery
SELECT CASE
         WHEN NVL(erf.trxn_type, 'NA') <> 'Plan Sponsor Collection' THEN
          'CLAIMRECOVERY'
         ELSE
          'PLANSPONSOR'
       END group_type,
       cod.id,
       clm.elct_id elct_id,
       clm.ee_id,
       ohd.offset_on activity_date,
       CASE
         WHEN NVL(erf.trxn_type, 'NA') <> 'Plan Sponsor Collection' THEN
          clm.claim_category
         ELSE
          'Employer Collection'
       END txn_type,
       CASE
         WHEN ohd.offset_type = 'Overpayment-Claim-By-Claim' AND
              NVL(erf.trxn_type, 'NA') <> 'Plan Sponsor Collection' THEN
          'Paid'
         WHEN ohd.offset_type IN
              ('Overpayment-Claim-By-Check',
               'Substantiation',
               'Substantiation-By-Check') AND
              NVL(erf.trxn_type, 'NA') <> 'Plan Sponsor Collection' THEN
          'Refunded'
         WHEN NVL(erf.trxn_type, 'NA') = 'Plan Sponsor Collection' THEN
          'Processed'
         ELSE
          'Processed'
       END txn_status,
       NULL plan_year,
       cod.amt,
       CASE
         WHEN NVL(erf.trxn_type, 'NA') <> 'Plan Sponsor Collection' THEN
          'CLAIMRECOVERY'
         ELSE
          'PLANSPONSOR'
       END txn_category,
       ohd.offset_on processing_date,
       ohd.offset_on processed_date,
       NULL effective_date,
       el.erac_actp_cd
  FROM claim_offset_dtl     cod,
       Offset_Hdr           ohd,
       claim                clm,
       election             el,
       ee_repayment_funding erf
 WHERE cod.offset_id = ohd.id
   AND cod.ee_repay_fund_id = erf.id(+)
   AND cod.clm_id = clm.id
   AND clm.elct_id = el.id
   AND cod.reverted_on IS NULL
   AND ohd.offset_type IN ('Overpayment-Claim-By-Claim',
                           'Overpayment-Claim-By-Check',
                           'Substantiation',
                           'Substantiation-By-Check')
===============================================================================
CALL FUNCTION FROM JAVA WITH TABLE TYPE

public List<StatusUpdatesBn> getRecentTranxList(Connection conn, UserDetailsBn userDtlsBn) throws SQLException {
		List<StatusUpdatesBn> updatedRecentTransList = new ArrayList<>();
		String days = "30";
		try (CallableStatement cs = conn.prepareCall("{? = call Clm_GetAccountUpdatesDetails(?,?,?,?,?)}")) {

			@SuppressWarnings("deprecation")
			final StructDescriptor recDescriptor = StructDescriptor.createDescriptor("TREC_ACCOUNTUPDATEDETAIL",
					DatabaseUtils.getOracleConnection(conn));
			final ResultSetMetaData resultSetMetaDate = recDescriptor.getMetaData();
			cs.registerOutParameter(1, Types.ARRAY, "TTAB_ACCOUNTUPDATEDETAIL");
			cs.setLong(2, userDtlsBn.getEeID());
			cs.setLong(3, userDtlsBn.getErID());
			cs.setLong(4, userDtlsBn.getAdmnID());
			cs.setLong(5, userDtlsBn.getId());
			cs.setString(6, days);
			cs.execute();
			Object[] data = (Object[]) ((Array) cs.getObject(1)).getArray();
			if (data == null || data.length == 0) {
				return updatedRecentTransList;
			}
			updatedRecentTransList = createRecentTranxList(data, resultSetMetaDate);
		}

		return updatedRecentTransList;
	}

	private List<StatusUpdatesBn> createRecentTranxList(Object[] data, ResultSetMetaData resultSetMetaDate)
			throws SQLException {
		List<StatusUpdatesBn> recentTransList = new ArrayList<>();
		StatusUpdatesBn recentTrans;

		for (Object object : data) {
			Struct row = (Struct) object;
			recentTrans = new StatusUpdatesBn();
			int index = 1;
			for (Object attribute : row.getAttributes()) {
				switch (resultSetMetaDate.getColumnName(index).toUpperCase()) {
				case "SOURCE":
					recentTrans.setSource(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "SOURCE_ID":
					recentTrans.setSourceId(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "ACTIVITY_ON":
					recentTrans.setActivityOn(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "ACTP_CD":
					recentTrans.setActpCd(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "OBJECT_NAME":
					recentTrans.setObjectName(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "SECTION":
					recentTrans.setSection(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "ACTIVITY_TYPE":
					recentTrans.setActivityType(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "ACTIVITY_DESCRIPTION":
					recentTrans.setActivityDescription(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "AMOUNT":
					recentTrans.setAmount(
							AmountUtil.formattedAmount(ConversionUtil.stringNoNull(String.valueOf(attribute))));

					break;
				case "PROCESSING_DATE":
					recentTrans.setProcessingDate(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "PROCESSED_DATE":
					recentTrans.setProcessedDate(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "STATUS":
					recentTrans.setStatus(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					recentTrans.setLinkLabel(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "WORKGROUP":
					recentTrans.setWorkGroup(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "TXN_CATEGORY":
					recentTrans.setTxnCategory(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "EFFECTIVE_DATE":
					recentTrans.setEffectiveDate(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				default:
				}
				index++;
			}
			recentTransList.add(recentTrans);
		}

		return recentTransList;
	}
	
	
====================================================================================================

CREATE OR REPLACE PACKAGE GetActionNeededPortalRules3 AUTHID DEFINER IS

  -- Author  : Mainak Ghosh
  -- Created : 03/17/2017
  -- Purpose : To display different notification for Portal 3.0

  PROCEDURE processActionNeededPortalRules(ocresult          OUT VARCHAR2,
                                           ocerrorcategory   OUT VARCHAR2,
                                           onerrorcode       OUT NUMBER,
                                           ocErrorArea       OUT VARCHAR2,
                                           ocothermessage    OUT VARCHAR2,
                                           ottabNotification OUT ttab_notification,
                                           ------------
                                           inEe_Id    IN Employee.Id%TYPE,
                                           icRuleType IN rules.rule_type%TYPE,
                                           ------------
                                           icUserName IN VARCHAR2 DEFAULT 'System');

  FUNCTION VALIDATE_RULES(ocresult        OUT VARCHAR2,
                          ocerrorcategory OUT VARCHAR2,
                          onerrorcode     OUT NUMBER,
                          ocErrorArea     OUT VARCHAR2,
                          ocothermessage  OUT VARCHAR2,
                          --------------
                          inAdmin_Id         IN Administrator.Id%TYPE,
                          inEr_Id            IN Employer.Id%TYPE,
                          inEe_Id            IN Employee.Id%TYPE,
                          icUserName         IN VARCHAR2,
                          icAchAcct          IN VARCHAR2,
                          icAchISO           IN VARCHAR2,
                          icIsAchValid       IN VARCHAR2,
                          icDebitCardStatus  IN VARCHAR2,
                          icEmail            IN VARCHAR2,
                          icIsAddressInValid IN VARCHAR2,
                          icRuleType         IN rules.rule_type%TYPE)
    RETURN ttab_notification;

  -----------------Rules-------------------------------------

  PROCEDURE RecReqForDBCardsClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdmin_Id         NUMBER,
                                   inEr_Id            NUMBER,
                                   inEe_Id            NUMBER,
                                   icUserName         VARCHAR2,
                                   icAchAcct          VARCHAR2,
                                   icAchISO           VARCHAR2,
                                   icIsAchValid       VARCHAR2,
                                   icDebitCardStatus  VARCHAR2,
                                   icEmail            VARCHAR2,
                                   icIsAddressInValid VARCHAR2,
                                   icSeverity         VARCHAR2,
                                   inPriority         NUMBER,
                                   icRuleType         VARCHAR2);

  PROCEDURE NotApprovedClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                              inAdmin_Id         NUMBER,
                              inEr_Id            NUMBER,
                              inEe_Id            NUMBER,
                              icUserName         VARCHAR2,
                              icAchAcct          VARCHAR2,
                              icAchISO           VARCHAR2,
                              icIsAchValid       VARCHAR2,
                              icDebitCardStatus  VARCHAR2,
                              icEmail            VARCHAR2,
                              icIsAddressInValid VARCHAR2,
                              icSeverity         VARCHAR2,
                              inPriority         NUMBER,
                              icRuleType         VARCHAR2);

  PROCEDURE GetNotPaidPassThruClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                     inAdmin_Id         NUMBER,
                                     inEr_Id            NUMBER,
                                     inEe_Id            NUMBER,
                                     icUserName         VARCHAR2,
                                     icAchAcct          VARCHAR2,
                                     icAchISO           VARCHAR2,
                                     icIsAchValid       VARCHAR2,
                                     icDebitCardStatus  VARCHAR2,
                                     icEmail            VARCHAR2,
                                     icIsAddressInValid VARCHAR2,
                                     icSeverity         VARCHAR2,
                                     inPriority         NUMBER,
                                     icRuleType         VARCHAR2);

  PROCEDURE UnCashedChequePaymentTrxn(ottabNotification  IN OUT NOCOPY ttab_notification,
                                      inAdmin_Id         NUMBER,
                                      inEr_Id            NUMBER,
                                      inEe_Id            NUMBER,
                                      icUserName         VARCHAR2,
                                      icAchAcct          VARCHAR2,
                                      icAchISO           VARCHAR2,
                                      icIsAchValid       VARCHAR2,
                                      icDebitCardStatus  VARCHAR2,
                                      icEmail            VARCHAR2,
                                      icIsAddressInValid VARCHAR2,
                                      icSeverity         VARCHAR2,
                                      inPriority         NUMBER,
                                      icRuleType         VARCHAR2);

  PROCEDURE AddlRecptReqForDBCardsClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                         inAdmin_Id         NUMBER,
                                         inEr_Id            NUMBER,
                                         inEe_Id            NUMBER,
                                         icUserName         VARCHAR2,
                                         icAchAcct          VARCHAR2,
                                         icAchISO           VARCHAR2,
                                         icIsAchValid       VARCHAR2,
                                         icDebitCardStatus  VARCHAR2,
                                         icEmail            VARCHAR2,
                                         icIsAddressInValid VARCHAR2,
                                         icSeverity         VARCHAR2,
                                         inPriority         NUMBER,
                                         icRuleType         VARCHAR2);

  PROCEDURE OverpaymentClaim(ottabNotification  IN OUT NOCOPY ttab_notification,
                             inAdmin_Id         IN NUMBER,
                             inEr_Id            IN NUMBER,
                             inEe_Id            IN NUMBER,
                             icUserName         IN VARCHAR2,
                             icAchAcct          IN VARCHAR2,
                             icAchISO           IN VARCHAR2,
                             icIsAchValid       IN VARCHAR2,
                             icDebitCardStatus  IN VARCHAR2,
                             icEmail            IN VARCHAR2,
                             icIsAddressInValid IN VARCHAR2,
                             icSeverity         IN VARCHAR2,
                             inPriority         IN NUMBER,
                             icRuleType         VARCHAR2);

  PROCEDURE DirectDepositFailed(ottabNotification  IN OUT NOCOPY ttab_notification,
                                inAdmin_Id         IN NUMBER,
                                inEr_Id            IN NUMBER,
                                inEe_Id            IN NUMBER,
                                icUserName         IN VARCHAR2,
                                icAchAcct          IN VARCHAR2,
                                icAchISO           IN VARCHAR2,
                                icIsAchValid       IN VARCHAR2,
                                icDebitCardStatus  IN VARCHAR2,
                                icEmail            IN VARCHAR2,
                                icIsAddressInValid IN VARCHAR2,
                                icSeverity         IN VARCHAR2,
                                inPriority         IN NUMBER,
                                icRuleType         VARCHAR2);

  PROCEDURE AddBeneficiaries(ottabNotification  IN OUT NOCOPY ttab_notification,
                             inAdmin_Id         IN NUMBER,
                             inEr_Id            IN NUMBER,
                             inEe_Id            IN NUMBER,
                             icUserName         IN VARCHAR2,
                             icAchAcct          IN VARCHAR2,
                             icAchISO           IN VARCHAR2,
                             icIsAchValid       IN VARCHAR2,
                             icDebitCardStatus  IN VARCHAR2,
                             icEmail            IN VARCHAR2,
                             icIsAddressInValid IN VARCHAR2,
                             icSeverity         IN VARCHAR2,
                             inPriority         IN NUMBER,
                             icRuleType         VARCHAR2);

  PROCEDURE DBCardTurnedOff(ottabNotification  IN OUT NOCOPY ttab_notification,
                            inAdmin_Id         IN NUMBER,
                            inEr_Id            IN NUMBER,
                            inEe_Id            IN NUMBER,
                            icUserName         IN VARCHAR2,
                            icAchAcct          IN VARCHAR2,
                            icAchISO           IN VARCHAR2,
                            icIsAchValid       IN VARCHAR2,
                            icDebitCardStatus  IN VARCHAR2,
                            icEmail            IN VARCHAR2,
                            icIsAddressInValid IN VARCHAR2,
                            icSeverity         IN VARCHAR2,
                            inPriority         IN NUMBER,
                            icRuleType         VARCHAR2);

  PROCEDURE MissingEmail(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2);

  PROCEDURE EnrollOnline(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2);

  PROCEDURE UpdateMailingAddress(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2);

  PROCEDURE CompleteAccountOpening(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdminId          IN NUMBER,
                                   inErId             IN NUMBER,
                                   inEeId             IN NUMBER,
                                   icUserName         IN VARCHAR2,
                                   icAchAcct          IN VARCHAR2,
                                   icAchISO           IN VARCHAR2,
                                   icIsAchValid       IN VARCHAR2,
                                   icDebitCardStatus  IN VARCHAR2,
                                   icEmail            IN VARCHAR2,
                                   icIsAddressInValid IN VARCHAR2,
                                   icSeverity         IN VARCHAR2,
                                   inPriority         IN NUMBER,
                                   icRuleType         VARCHAR2);

  PROCEDURE ResolveReceiptReqdAct(ottabNotification  IN OUT NOCOPY ttab_notification,
                                  inAdminId          IN NUMBER,
                                  inErId             IN NUMBER,
                                  inEeId             IN NUMBER,
                                  icUserName         IN VARCHAR2,
                                  icAchAcct          IN VARCHAR2,
                                  icAchISO           IN VARCHAR2,
                                  icIsAchValid       IN VARCHAR2,
                                  icDebitCardStatus  IN VARCHAR2,
                                  icEmail            IN VARCHAR2,
                                  icIsAddressInValid IN VARCHAR2,
                                  icSeverity         IN VARCHAR2,
                                  inPriority         IN NUMBER,
                                  icRuleType         IN VARCHAR2);

  PROCEDURE RunOutOfTimeToUseBalanceCY(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         IN NUMBER,
                                       inEr_Id            IN NUMBER,
                                       inEe_Id            IN NUMBER,
                                       icUserName         IN VARCHAR2,
                                       icAchAcct          IN VARCHAR2,
                                       icAchISO           IN VARCHAR2,
                                       icIsAchValid       IN VARCHAR2,
                                       icDebitCardStatus  IN VARCHAR2,
                                       icEmail            IN VARCHAR2,
                                       icIsAddressInValid IN VARCHAR2,
                                       icSeverity         IN VARCHAR2,
                                       inPriority         IN NUMBER,
                                       icRuleType         VARCHAR2);

  PROCEDURE RunOutOfTimeToUseBalancePY(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         IN NUMBER,
                                       inEr_Id            IN NUMBER,
                                       inEe_Id            IN NUMBER,
                                       icUserName         IN VARCHAR2,
                                       icAchAcct          IN VARCHAR2,
                                       icAchISO           IN VARCHAR2,
                                       icIsAchValid       IN VARCHAR2,
                                       icDebitCardStatus  IN VARCHAR2,
                                       icEmail            IN VARCHAR2,
                                       icIsAddressInValid IN VARCHAR2,
                                       icSeverity         IN VARCHAR2,
                                       inPriority         IN NUMBER,
                                       icRuleType         VARCHAR2);

  PROCEDURE CashBalanceThreshold(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2);

  PROCEDURE UnderStandingAccount(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2);

  PROCEDURE GetMobileApp(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2);
						 
  PROCEDURE ExcessContribCheck(ottabNotification  IN OUT NOCOPY ttab_notification,
           inAdmin_Id         NUMBER,
           inEr_Id            NUMBER,
           inEe_Id            NUMBER,
           icUserName         VARCHAR2,
           icAchAcct          VARCHAR2,
           icAchISO           VARCHAR2,
           icIsAchValid       VARCHAR2,
           icDebitCardStatus  VARCHAR2,
           icEmail            VARCHAR2,
           icIsAddressInValid VARCHAR2,
           icSeverity         VARCHAR2,
           inPriority         NUMBER,
           icRuleType         VARCHAR2);						 

END GetActionNeededPortalRules3;
/
CREATE OR REPLACE PACKAGE BODY GetActionNeededPortalRules3 IS
  /*****************************************************************
   Activity             By              On                Version
   *****************************************************************
   Created          Mainak Ghosh      03/17/2017           1.0.0
   Jira:            PORTAL-332
  ******************************************************************/

  PROCEDURE processActionNeededPortalRules(ocresult          OUT VARCHAR2,
                                           ocerrorcategory   OUT VARCHAR2,
                                           onerrorcode       OUT NUMBER,
                                           ocErrorArea       OUT VARCHAR2,
                                           ocothermessage    OUT VARCHAR2,
                                           ottabNotification OUT ttab_notification,
                                           ------------
                                           inEe_Id    IN Employee.Id%TYPE,
                                           icRuleType IN rules.rule_type%TYPE,
                                           ------------
                                           icUserName IN VARCHAR2 DEFAULT 'System') IS
  
    -- Standard Variables
    cunitname      VARCHAR2(255) := 'GetActionNeededPortalRules3.processActionNeededPortalRules';
    cversion       VARCHAR2(255) := '1.0.0';
    cresult        VARCHAR2(255) := 'ERROR';
    cerrorcategory VARCHAR2(255) := 'OTHER';
    nerrorcode     NUMBER := 99999;
    cerrorarea     VARCHAR2(3200) := 'Init';
  
    -- Unit specific Variables
    nAdmin_Id         Administrator.Id%TYPE;
    nEe_Id            Employee.Id%TYPE;
    nEr_Id            Employer.Id%TYPE;
    cUserName         Login.user_name%TYPE;
    cAchAcct          Employee.Ach_Acct%TYPE;
    cAchISO           Employee.Ach_Iso%TYPE;
    cIsAchValid       Employee.Is_Ach_Valid%TYPE;
    cDebitCardStatus  Employee.Debit_Card_Status%TYPE;
    cEmail            Employee.Email%TYPE;
    cIsAddressInValid Employee.is_address_invalid%TYPE;
    cRuleType         rules.rule_type%TYPE := coalesce(icRuleType, 'NA');
    eInvalidInput EXCEPTION;
  BEGIN
    ocErrorArea := 'Get UserName';
    cUserName   := icUserName;
  
    ocErrorArea := 'Validate Ee. Id. for NULL';
    IF coalesce(inEe_Id, 0) = 0 THEN
      ocOtherMessage := 'Participant Id. cannot be blank';
      RAISE eInvalidInput;
    END IF;
  
    ocErrorArea := 'Get Admin and Er Id.';
    BEGIN
      SELECT er.admn_id, ee.pycl_er_id
        INTO nAdmin_Id, nEr_Id
        FROM employee ee, employer er
       WHERE ee.id = inEe_Id
         AND ee.pycl_er_id = er.id;
    EXCEPTION
      WHEN OTHERS THEN
        ocOtherMessage := 'Admin/Employer can not be found.';
        RAISE eInvalidInput;
    END;
  
    ocErrorArea := 'Validate Admin Id';
    IF coalesce(nAdmin_Id, 0) = 0 THEN
      ocOtherMessage := 'Admin Id. cannot be blank';
      RAISE eInvalidInput;
    END IF;
  
    ocErrorArea := 'Validate Er. Id';
    IF coalesce(nEr_Id, 0) = 0 THEN
      ocOtherMessage := 'Employer Id. cannot be blank';
      RAISE eInvalidInput;
    END IF;
  
    ocErrorArea := 'Get Employee';
    FOR rec_ee IN (SELECT * FROM employee WHERE id = inEe_Id) LOOP
      nEe_Id            := rec_ee.id;
      cAchAcct          := rec_ee.ach_acct;
      cAchISO           := rec_ee.ach_iso;
      cIsAchValid       := rec_ee.is_ach_valid;
      cDebitCardStatus  := rec_ee.debit_card_status;
      cEmail            := rec_ee.email;
      cIsAddressInValid := rec_ee.is_address_invalid;
      EXIT;
    END LOOP;
  
    ocErrorArea       := 'Calling VALIDATE_RULES function';
    ottabNotification := VALIDATE_RULES(ocresult        => cresult,
                                        ocerrorcategory => cerrorcategory,
                                        onerrorcode     => nerrorcode,
                                        ocErrorArea     => cErrorArea,
                                        ocothermessage  => ocothermessage,
                                        --------------
                                        inAdmin_Id         => nAdmin_Id,
                                        inEr_Id            => nEr_Id,
                                        inEe_Id            => nEe_Id,
                                        icUserName         => cUserName,
                                        icAchAcct          => cAchAcct,
                                        icAchISO           => cAchISO,
                                        icIsAchValid       => cIsAchValid,
                                        icDebitCardStatus  => cDebitCardStatus,
                                        icEmail            => cEmail,
                                        icIsAddressInValid => cIsAddressInValid,
                                        icRuleType         => cRuleType);
  
    IF UPPER(cresult) <> 'OK' THEN
      RAISE eInvalidInput;
    END IF;
  
    ocerrorarea    := 'ReturnOK';
    ocresult       := 'OK';
    ocothermessage := 'Successful';
  
  EXCEPTION
    WHEN eInvalidInput THEN
      ocresult        := cResult;
      ocerrorcategory := coalesce(ocErrorCategory, cErrorCategory);
      onerrorcode     := coalesce(onErrorCode, nErrorCode);
      IF coalesce(ocErrorArea, 'ReturnOK') != 'ReturnOK' THEN
        ocErrorArea := ocErrorArea || ':' || cErrorArea || '-' || cUnitName || '-' ||
                       cVersion;
      ELSE
        ocErrorArea := ocErrorArea || cUnitName || '-' || cVersion;
      END IF;
      IF ottabNotification.Count() > 0 THEN
        ottabNotification.Delete();
      END IF;
      ocothermessage := substr(ocOtherMessage || ' : ' || SQLERRM, 1, 4000);
    
    WHEN OTHERS THEN
      ocresult        := cResult;
      ocerrorcategory := coalesce(ocErrorCategory, cErrorCategory);
      onerrorcode     := coalesce(onErrorCode, nErrorCode);
      IF coalesce(ocErrorArea, 'ReturnOK') != 'ReturnOK' THEN
        ocErrorArea := ocErrorArea || ':' || cErrorArea || '-' || cUnitName || '-' ||
                       cVersion;
      ELSE
        ocErrorArea := ocErrorArea || cUnitName || '-' || cVersion;
      END IF;
      IF ottabNotification.Count() > 0 THEN
        ottabNotification.Delete();
      END IF;
      ocothermessage := substr(ocOtherMessage || ' : ' || SQLERRM, 1, 4000);
  END processActionNeededPortalRules;
  --------------------------------------------------------------------------------------------------------
  FUNCTION VALIDATE_RULES(ocresult        OUT VARCHAR2,
                          ocerrorcategory OUT VARCHAR2,
                          onerrorcode     OUT NUMBER,
                          ocErrorArea     OUT VARCHAR2,
                          ocothermessage  OUT VARCHAR2,
                          --------------
                          inAdmin_Id         IN Administrator.Id%TYPE,
                          inEr_Id            IN Employer.Id%TYPE,
                          inEe_Id            IN Employee.Id%TYPE,
                          icUserName         IN VARCHAR2,
                          icAchAcct          IN VARCHAR2,
                          icAchISO           IN VARCHAR2,
                          icIsAchValid       IN VARCHAR2,
                          icDebitCardStatus  IN VARCHAR2,
                          icEmail            IN VARCHAR2,
                          icIsAddressInValid IN VARCHAR2,
                          icRuleType         IN rules.rule_type%TYPE)
    RETURN ttab_notification IS
  
    --Standard Variables
    cunitname      VARCHAR2(255) := 'GetActionNeededPortalRules3.VALIDATE_RULES';
    cversion       VARCHAR2(255) := '1.0.0';
    cresult        VARCHAR2(255) := 'ERROR';
    cerrorcategory VARCHAR2(255) := 'OTHER';
    nerrorcode     NUMBER := 99999;
    cerrorarea     VARCHAR2(3200) := 'Init';
  
    CURSOR cur_Rule IS
      SELECT r.Id rules_Id,
             r.rule_name,
             r.rule_code,
             r.rule_type,
             r.fail_text_label,
             r.fail_text,
             epr.is_mandatory,
             epr.priority,
             epr.severity,
             epr.image_path
        FROM rules r, er_admin_rules epr
       WHERE r.id = epr.rules_id
         AND r.portal_layout = 'EEHOME3'
         AND r.rule_type = icRuleType
         AND epr.admin_id = inAdmin_Id
         AND epr.is_mandatory = 'Yes'
       ORDER BY epr.priority;
  
    CURSOR cur_Rule_super_admin IS
      SELECT r.Id rules_Id,
             r.rule_name,
             r.rule_code,
             r.rule_type,
             r.fail_text_label,
             r.fail_text,
             epr.is_mandatory,
             epr.priority,
             epr.severity,
             epr.image_path
        FROM rules r, er_admin_rules epr, administrator a
       WHERE r.id = epr.rules_id
         AND r.portal_layout = 'EEHOME3'
         AND r.rule_type = icRuleType
         AND epr.admin_id = a.id
         AND a.is_super_admin = 'Yes'
         AND epr.is_mandatory = 'Yes'
       ORDER BY epr.priority;
  
    CURSOR cur_Rule_exp IS
      SELECT r.Id rules_Id,
             r.rule_name,
             r.rule_code,
             r.rule_type,
             r.fail_text_label,
             r.fail_text,
             epr.is_mandatory,
             epr.priority,
             epr.severity,
             epr.image_path
        FROM rules r, er_admin_exception_rules epr
       WHERE r.id = epr.rules_id
         AND r.portal_layout = 'EEHOME3'
         AND r.rule_type = icRuleType
         AND epr.er_id = inEr_Id
         AND epr.is_mandatory = 'Yes'
       ORDER BY epr.priority;
  
    cRule VARCHAR2(32000);
    eException EXCEPTION;
    bIsException     BOOLEAN := FALSE;
    cSeverity        er_admin_rules.severity%TYPE;
    nPriority        er_admin_rules.priority%TYPE;
    cRuleType        rules.rule_type%TYPE;
    ttabNotification ttab_notification := ttab_notification();
  
  BEGIN
  
    ocErrorArea  := 'Calling rule engine for Exceptional Er. Setup';
    bIsException := FALSE;
    FOR rec_Rule_exp IN cur_Rule_exp LOOP
      bIsException := TRUE;
      cRule        := rec_Rule_exp.rule_code;
      cSeverity    := rec_Rule_exp.Severity;
      nPriority    := rec_rule_exp.priority;
      cRuleType    := rec_rule_exp.rule_type;
    
      ocErrorArea := 'Executing rule ' || cRule;
      EXECUTE IMMEDIATE 'BEGIN ' || cRule || '(' || ':ttabNotification,' ||
                        ':inAdmin_Id,' || ':inEr_Id,' || ':inEe_Id, ' ||
                        ':icUserName, ' || ':icAchAcct, ' || ':icAchISO, ' ||
                        ':icIsAchValid, ' || ':icDebitCardStatus, ' ||
                        ':icEmail, ' || ':icIsAddressInValid, ' ||
                        ':cSeverity, ' || ':nPriority, ' || ':cRuleType' ||
                        '); END;'
      
        USING IN OUT ttabNotification, IN inAdmin_Id, IN inEr_Id, IN inEe_Id, IN icUserName, IN icAchAcct, IN icAchISO, IN icIsAchValid, IN icDebitCardStatus, IN icEmail, IN icIsAddressInValid, IN cSeverity, IN nPriority, IN cRuleType;
    
    END LOOP;
  
    ocErrorArea := 'Calling rule engine for Normal Er. Setup';
    IF NOT bIsException THEN
      FOR rec_Rule IN cur_Rule LOOP
        bIsException := TRUE;
        cRule        := rec_Rule.rule_code;
        cSeverity    := rec_rule.severity;
        nPriority    := rec_rule.priority;
        cRuleType    := rec_rule.rule_type;
      
        ocErrorArea := 'Executing rule ' || cRule;
        EXECUTE IMMEDIATE 'BEGIN ' || cRule || '(' || ':ttabNotification,' ||
                          ':inAdmin_Id,' || ':inEr_Id,' || ':inEe_Id, ' ||
                          ':icUserName, ' || ':icAchAcct, ' ||
                          ':icAchISO, ' || ':icIsAchValid, ' ||
                          ':icDebitCardStatus, ' || ':icEmail, ' ||
                          ':icIsAddressInValid, ' || ':cSeverity, ' ||
                          ':nPriority, ' || ':cRuleType' || '); END;'
        
          USING IN OUT ttabNotification, IN inAdmin_Id, IN inEr_Id, IN inEe_Id, IN icUserName, IN icAchAcct, IN icAchISO, IN icIsAchValid, IN icDebitCardStatus, IN icEmail, IN icIsAddressInValid, IN cSeverity, IN nPriority, IN cRuleType;
      
      END LOOP;
    END IF;
  
    IF NOT bIsException THEN
      FOR rec_Rule IN cur_Rule_super_admin LOOP
        cRule     := rec_Rule.rule_code;
        cSeverity := rec_rule.severity;
        nPriority := rec_rule.priority;
        cRuleType := rec_rule.rule_type;
      
        ocErrorArea := 'Executing rule ' || cRule;
        EXECUTE IMMEDIATE 'BEGIN ' || cRule || '(' || ':ttabNotification,' ||
                          ':inAdmin_Id,' || ':inEr_Id,' || ':inEe_Id, ' ||
                          ':icUserName, ' || ':icAchAcct, ' ||
                          ':icAchISO, ' || ':icIsAchValid, ' ||
                          ':icDebitCardStatus, ' || ':icEmail, ' ||
                          ':icIsAddressInValid, ' || ':cSeverity, ' ||
                          ':nPriority, ' || ':cRuleType' || '); END;'
        
          USING IN OUT ttabNotification, IN inAdmin_Id, IN inEr_Id, IN inEe_Id, IN icUserName, IN icAchAcct, IN icAchISO, IN icIsAchValid, IN icDebitCardStatus, IN icEmail, IN icIsAddressInValid, IN cSeverity, IN nPriority, IN cRuleType;
      
      END LOOP;
    END IF;
  
    RETURN ttabNotification;
  
  EXCEPTION
    WHEN eException THEN
      ocresult        := cResult;
      ocerrorcategory := coalesce(ocErrorCategory, cErrorCategory);
      onerrorcode     := coalesce(onErrorCode, nErrorCode);
      IF coalesce(ocErrorArea, 'ReturnOK') != 'ReturnOK' THEN
        ocErrorArea := ocErrorArea || ':' || cErrorArea || '-' || cUnitName || '-' ||
                       cVersion;
      ELSE
        ocErrorArea := ocErrorArea || cUnitName || '-' || cVersion;
      END IF;
    
      ocothermessage := substr(ocOtherMessage || ' : ' || SQLERRM, 1, 4000);
    
      RETURN NULL;
    
    WHEN OTHERS THEN
      ocresult        := cResult;
      ocerrorcategory := coalesce(ocErrorCategory, cErrorCategory);
      onerrorcode     := coalesce(onErrorCode, nErrorCode);
      IF coalesce(ocErrorArea, 'ReturnOK') != 'ReturnOK' THEN
        ocErrorArea := ocErrorArea || ':' || cErrorArea || '-' || cUnitName || '-' ||
                       cVersion;
      ELSE
        ocErrorArea := ocErrorArea || cUnitName || '-' || cVersion;
      END IF;
    
      ocothermessage := substr(ocOtherMessage || ' : ' || SQLERRM, 1, 4000);
    
      RETURN NULL;
  END VALIDATE_RULES;

  PROCEDURE RecReqForDBCardsClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdmin_Id         NUMBER,
                                   inEr_Id            NUMBER,
                                   inEe_Id            NUMBER,
                                   icUserName         VARCHAR2,
                                   icAchAcct          VARCHAR2,
                                   icAchISO           VARCHAR2,
                                   icIsAchValid       VARCHAR2,
                                   icDebitCardStatus  VARCHAR2,
                                   icEmail            VARCHAR2,
                                   icIsAddressInValid VARCHAR2,
                                   icSeverity         VARCHAR2,
                                   inPriority         NUMBER,
                                   icRuleType         VARCHAR2) IS
  
    rNotification trec_notification := trec_notification();
  
  BEGIN
    rNotification.category    := 'INYA';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.DBCARD_CLAIM_RECEIPT_REQUIRED'),
                                          'Expense requires eligible receipt');
    rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.DBCARD_CLAIM_RESOLVE_ISSUE'),
                                          'RESOLVE ISSUE');
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'CLAIMS_ACTIVITY';
    rNotification.priority    := inPriority;
  
    FOR rec_DebitCardRecptReqd IN (SELECT cl.id,
                                          TRIM(to_char(cl.amt, '999990.00')) amt,
                                          el.erac_actp_cd actp_cd
                                     FROM claim        cl,
                                          claim_batch  cb,
                                          election     el,
                                          account_type at
                                    WHERE cl.clmbt_id = cb.id
                                      AND cl.claim_category = 'Debit Card'
                                      AND cl.elct_id = el.id
                                      AND el.erac_actp_cd = at.cd
                                      AND el.ee_id = inEe_Id
                                      AND at.receipt_reqd = 'Yes'
                                      AND cl.needs_substantiation = 'Yes'
                                      AND cl.substantiation_status != 'Pass'
                                      AND (coalesce(cl.ovrpmt_flag, 'No') = 'No')
                                      AND cl.is_pre_tax = 'No'
                                      AND cl.status IN ('Paid', 'Released')
                                      AND cl.amt > 0
                                      AND cl.service_begins >
                                          trunc(add_months(SYSDATE, -12),
                                                'RRRR')
                                         
                                      AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                              el.id,
                                                                              el.erac_er_id,
                                                                              el.erac_actp_cd) >=
                                          SYSDATE
                                         
                                      AND NOT EXISTS
                                    (SELECT 'B'
                                             FROM claims_image ci
                                            WHERE ci.clmbt_id = cb.id)) LOOP
      rNotification.reference_id := rec_DebitCardRecptReqd.Id;
      rNotification.amt          := rec_DebitCardRecptReqd.Amt;
      rNotification.dr_cr_ind    := 'DR';
      rNotification.note         := rec_DebitCardRecptReqd.Actp_Cd;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END LOOP;
  END RecReqForDBCardsClaims;
  ------------------------------------------------------------------------------------------------------------
  PROCEDURE NotApprovedClaims(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                              INADMIN_ID         NUMBER,
                              INER_ID            NUMBER,
                              INEE_ID            NUMBER,
                              ICUSERNAME         VARCHAR2,
                              ICACHACCT          VARCHAR2,
                              ICACHISO           VARCHAR2,
                              ICISACHVALID       VARCHAR2,
                              ICDEBITCARDSTATUS  VARCHAR2,
                              ICEMAIL            VARCHAR2,
                              ICISADDRESSINVALID VARCHAR2,
                              ICSEVERITY         VARCHAR2,
                              INPRIORITY         NUMBER,
                              ICRULETYPE         VARCHAR2) IS
  
    --------------------------------------------------------------------
    -- Activity      By                     On                Version --
    --------------------------------------------------------------------
    -- Created      Anand jajodia        07/12/2018        1.0.1
    /*
    Story id: PORTAL-854
    Not Approved Claims (Denied claims for which user can take action)
    will be shown immediately.
    */
    -------------------------------------------------------------------------------------------------------------
  
    NALLOWBLDAYS NUMBER := 0;
    CDEMOGTYPE   ER_ADMN_DEMOG.DEMOG_TYPE%TYPE := 'DENIED_CLAIM_ALERT_EXPIRY_DAYS';
    ENODEMGSETUP EXCEPTION;
    CRESULT        VARCHAR2(255);
    CERRORCATEGORY VARCHAR2(4000);
    NERRORCODE     NUMBER;
    CERRORAREA     VARCHAR2(4000);
    COTHERMESSAGE  VARCHAR2(4000);
    RNOTIFICATION  TREC_NOTIFICATION := TREC_NOTIFICATION();
  
  BEGIN
    BEGIN
      GET_ER_ADMN_DEMOG(OCRESULT        => CRESULT,
                        OCERRORCATEGORY => CERRORCATEGORY,
                        ONERRORCODE     => NERRORCODE,
                        OCERRORAREA     => CERRORAREA,
                        OCOTHERMESSAGE  => COTHERMESSAGE,
                        INADMN_ID       => INADMIN_ID,
                        INERID          => INER_ID,
                        ICDEMOG_TYPE    => CDEMOGTYPE,
                        OCDEMOG_VALUE   => NALLOWBLDAYS);
      IF CRESULT != 'OK' OR NALLOWBLDAYS IS NULL THEN
        RAISE ENODEMGSETUP;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NALLOWBLDAYS := 0;
    END;
    RNOTIFICATION.CATEGORY    := 'INYA';
    RNOTIFICATION.DESCRIPTION := COALESCE(PORTALUTIL.GETPORTALLABEL(INADMIN_ID => INADMIN_ID,
                                                                    INER_ID    => INER_ID,
                                                                    ICLABEL_CD => 'DASHBOARD.INYA.NOTAPPROVED_CLAIM'),
                                          'Not Approved Claims');
    RNOTIFICATION.LINK_LABEL  := COALESCE(PORTALUTIL.GETPORTALLABEL(INADMIN_ID => INADMIN_ID,
                                                                    INER_ID    => INER_ID,
                                                                    ICLABEL_CD => 'DASHBOARD.INYA.NOTAPPROVED'),
                                          'RESOLVE ISSUE');
    RNOTIFICATION.TYPE        := COALESCE(ICRULETYPE, ' Warning ');
    RNOTIFICATION.REC_SOURCE  := 'CLAIMS_ACTIVITY';
    RNOTIFICATION.PRIORITY    := INPRIORITY;
    FOR CCEEDENIED IN (SELECT DISTINCT C.ID,
                                       TRIM(TO_CHAR(C.AMT, '999990.00')) AMT,
                                       EL.Erac_Actp_Cd Actp_Cd
                         FROM CLAIM C, CLAIM_DENIAL_TEXT CDT, ELECTION EL
                        WHERE C.EE_ID = INEE_ID
                          AND C.STATUS = 'Denied'
                          AND C.ID = CDT.CLM_ID
                          AND C.ELCT_ID = EL.ID
                          AND CDT.LABEL
                        ! = 'Other'
                          AND CDT.LABEL IS NOT NULL
                          AND ISUSERACTIONABLE(INERID   => INER_ID,
                                               INADMNID => INADMIN_ID,
                                               ICLABEL  => CDT.LABEL,
                                               ICACTPCD => EL.ERAC_ACTP_CD) =
                              'Yes'
                          AND ((NALLOWBLDAYS > 0 AND C.APPEALED_ON IS NULL) OR
                              (NALLOWBLDAYS = 0))
                          AND ((NALLOWBLDAYS > 0 AND C.LINK_CLM_ID IS NULL) OR
                              (NALLOWBLDAYS = 0))
                          AND EXISTS
                        (SELECT 'x'
                                 FROM CLAIM_ACTIVITY CA
                                WHERE CA.ACTION = 'Denied'
                                  AND ((SYSDATE - CA.ACTION_ON) >= 0)
                                  AND ((NALLOWBLDAYS > 0 AND ((SYSDATE -
                                      COALESCE(C.DENIAL_NOTIFIED_ON,
                                                                        CA.ACTION_ON)) <=
                                      NALLOWBLDAYS)) OR (NALLOWBLDAYS = 0))
                                  AND C.ID = CA.CLM_ID)) LOOP
    
      RNOTIFICATION.REFERENCE_ID := CCEEDENIED.ID;
      RNOTIFICATION.AMT          := CCEEDENIED.AMT;
      IF TO_NUMBER(RNOTIFICATION.AMT) < 0 THEN
        RNOTIFICATION.AMT := REPLACE(RNOTIFICATION.AMT, '-', '');
      END IF;
      RNOTIFICATION.note := CCEEDENIED.Actp_Cd;
      OTTABNOTIFICATION.EXTEND();
      OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
    END LOOP;
  
  END NotApprovedClaims;

  ------------------------------------------------------------------------------------------------------------
  PROCEDURE GetNotPaidPassThruClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                     inAdmin_Id         NUMBER,
                                     inEr_Id            NUMBER,
                                     inEe_Id            NUMBER,
                                     icUserName         VARCHAR2,
                                     icAchAcct          VARCHAR2,
                                     icAchISO           VARCHAR2,
                                     icIsAchValid       VARCHAR2,
                                     icDebitCardStatus  VARCHAR2,
                                     icEmail            VARCHAR2,
                                     icIsAddressInValid VARCHAR2,
                                     icSeverity         VARCHAR2,
                                     inPriority         NUMBER,
                                     icRuleType         VARCHAR2) IS
  
    cResult              VARCHAR2(255) := 'ERROR';
    cErrorCategory       VARCHAR2(255) := 'OTHER';
    nErrorCode           NUMBER := 99999;
    cErrorArea           VARCHAR2(255) := 'Init';
    cOtherMessage        VARCHAR2(4000) := NULL;
    nuserid              NUMBER := NULL;
    cObjName             VARCHAR2(20) := 'EEPAYNOWPASSTHRU';
    cObjCD               VARCHAR2(20) := 'Page';
    occanview            VARCHAR2(3) := 'No';
    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';
    rNotification        trec_notification := trec_notification();
  
  BEGIN
    rNotification.category    := 'INYA';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.PAYMENT_OPTION_FOR_CLAIM'),
                                          'Select Payment Option for Claim Payment');
    rNotification.link_label  := 'Select Payment';
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'CLAIM_PENDING_PASSTHRU';
    rNotification.priority    := inPriority;
  
    SELECT id INTO nuserid FROM login WHERE user_name = icUserName;
  
    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);
    IF UPPER(occanexecute) = 'YES' THEN
      FOR rec_PassThru IN (SELECT c.id,
                                  TRIM(to_char(c.amt, '999990.00')) amt
                             FROM claim_pending_passthru c
                            WHERE ee_id = inEe_Id
                              AND coalesce(is_processed, 'No') <> 'Yes'
                              AND coalesce(amt, 0) > 0) LOOP
        rNotification.reference_id := rec_PassThru.Id;
        rNotification.amt          := rec_PassThru.Amt;
        rNotification.dr_cr_ind    := 'DR';
        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      END LOOP;
    END IF;
  
  END GetNotPaidPassThruClaims;
  ------------------------------------------------------------------------------------------------------------
  PROCEDURE UnCashedChequePaymentTrxn(ottabNotification  IN OUT NOCOPY ttab_notification,
                                      inAdmin_Id         NUMBER,
                                      inEr_Id            NUMBER,
                                      inEe_Id            NUMBER,
                                      icUserName         VARCHAR2,
                                      icAchAcct          VARCHAR2,
                                      icAchISO           VARCHAR2,
                                      icIsAchValid       VARCHAR2,
                                      icDebitCardStatus  VARCHAR2,
                                      icEmail            VARCHAR2,
                                      icIsAddressInValid VARCHAR2,
                                      icSeverity         VARCHAR2,
                                      inPriority         NUMBER,
                                      icRuleType         VARCHAR2) IS
  
    ocCanViewCashedInfo VARCHAR2(3) := 'No';
  
    nDisplayLagTime NUMBER := 10;
    nHideLagTime    NUMBER := 180;
    rNotification   trec_notification := trec_notification();
  BEGIN
    rNotification.category    := 'INYA';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.CHECKS_NOT_CASHED'),
                                          'IMPORTANT: Checks are uncashed');
    rNotification.link_label  := 'UNCASHED';
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'UNCASHED_CHECK';
    rNotification.priority    := inPriority;
    BEGIN
      ocCanViewCashedInfo := coalesce(apputil.GetErAdmnDemog('VIEW_CHECK_CASHED_INFO',
                                                             inAdmin_Id,
                                                             inEr_Id,
                                                             SYSDATE,
                                                             'Yes'),
                                      'No');
    EXCEPTION
      WHEN OTHERS THEN
        ocCanViewCashedInfo := 'No';
    END;
  
    IF ocCanViewCashedInfo = 'Yes' THEN
      nDisplayLagTime := coalesce(apputil.GetErAdmnDemog('UNCASHED_CHECK_LAGTIME',
                                                         inAdmin_Id,
                                                         inEr_Id,
                                                         SYSDATE,
                                                         'Yes'),
                                  10);
      nHideLagTime    := coalesce(apputil.GetErAdmnDemog('STALE_UNCASHED_CHECK_LAGTIME',
                                                         inAdmin_Id,
                                                         inEr_Id,
                                                         SYSDATE,
                                                         'Yes'),
                                  180);
      FOR rec_UncashedCheck IN (SELECT vw.PYFL_ID,
                                       el.Erac_Actp_Cd Actp_Cd,
                                       TRIM(REPLACE(vw.amt, '$', '')) amt
                                  FROM VW_EE_PAYMENTS VW, Election EL
                                 WHERE vw.EE_ID = inEe_Id
                                   AND vw.elct_id = el.ID
                                   AND vw.CLEARED_ON_DATE IS NULL
                                   AND vw.CHECK_NO IS NOT NULL
                                   AND vw.TYPECD = 'Check'
                                   AND TO_NUMBER(REPLACE(vw.AMT, '$', '')) > 0
                                   AND vw.VOID_ON IS NULL
                                   AND (SYSDATE BETWEEN
                                       (vw.INSTR_DATE + nDisplayLagTime) AND
                                       (vw.INSTR_DATE + nHideLagTime))
                                   AND vw.CHECK_STATUS = 'Issued') LOOP
        rNotification.reference_id := rec_UncashedCheck.PYFL_ID;
        rNotification.amt          := rec_UncashedCheck.amt;
        rNotification.dr_cr_ind    := 'DR';
        rNotification.note         := rec_UncashedCheck.Actp_Cd;
        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      END LOOP;
    
    END IF;
  
  END UnCashedChequePaymentTrxn;

  -------------------------------------------------------------------------------------------------

  PROCEDURE AddlRecptReqForDBCardsClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                         inAdmin_Id         NUMBER,
                                         inEr_Id            NUMBER,
                                         inEe_Id            NUMBER,
                                         icUserName         VARCHAR2,
                                         icAchAcct          VARCHAR2,
                                         icAchISO           VARCHAR2,
                                         icIsAchValid       VARCHAR2,
                                         icDebitCardStatus  VARCHAR2,
                                         icEmail            VARCHAR2,
                                         icIsAddressInValid VARCHAR2,
                                         icSeverity         VARCHAR2,
                                         inPriority         NUMBER,
                                         icRuleType         VARCHAR2) IS
  
    rNotification trec_notification := trec_notification();
  
  BEGIN
    rNotification.category    := 'INYA';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.DBCARD_CLAIM_INVALID_RECEIPT'),
                                          'Debit card receipt submitted was invalid. Please submit new receipt');
    rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.DBCARD_CLAIM_RECEIPT_INVALID'),
                                          'INVALID RECEIPT');
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'CLAIM';
    rNotification.priority    := inPriority;
    FOR rec_DebitCardRecptReqd IN (SELECT cl.id,
                                          el.Erac_Actp_Cd Actp_Cd,
                                          TRIM(to_char(cl.amt, '999990.00')) amt
                                     FROM claim        cl,
                                          claim_batch  cb,
                                          election     el,
                                          account_type at
                                    WHERE cl.clmbt_id = cb.id
                                         
                                      AND cl.claim_category = 'Debit Card'
                                      AND (coalesce(cl.ovrpmt_flag, 'No') = 'No')
                                      AND cl.elct_id = el.id
                                      AND el.erac_actp_cd = at.cd
                                      AND el.ee_id = inEe_Id
                                      AND at.receipt_reqd = 'Yes'
                                      AND cl.needs_substantiation = 'Yes'
                                      AND cl.substantiation_status != 'Pass'
                                      AND cl.is_pre_tax = 'No'
                                      AND cl.status IN ('Paid', 'Released')
                                      AND cl.amt > 0
                                      AND cl.service_begins >
                                          trunc(add_months(SYSDATE, -12),
                                                'RRRR')
                                         
                                      AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                              el.id,
                                                                              el.erac_er_id,
                                                                              el.erac_actp_cd) >=
                                          SYSDATE
                                         
                                      AND EXISTS
                                    (SELECT 'B'
                                             FROM claims_image ci
                                            WHERE ci.clmbt_id = cb.id
                                              AND ci.status = 'Complete')) LOOP
      rNotification.reference_id := rec_DebitCardRecptReqd.Id;
      rNotification.amt          := rec_DebitCardRecptReqd.Amt;
      rNotification.dr_cr_ind    := 'DR';
      rNotification.note         := rec_DebitCardRecptReqd.Actp_Cd;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END LOOP;
  
  END AddlRecptReqForDBCardsClaims;

  PROCEDURE OverpaymentClaim(ottabNotification  IN OUT NOCOPY ttab_notification,
                             inAdmin_Id         IN NUMBER,
                             inEr_Id            IN NUMBER,
                             inEe_Id            IN NUMBER,
                             icUserName         IN VARCHAR2,
                             icAchAcct          IN VARCHAR2,
                             icAchISO           IN VARCHAR2,
                             icIsAchValid       IN VARCHAR2,
                             icDebitCardStatus  IN VARCHAR2,
                             icEmail            IN VARCHAR2,
                             icIsAddressInValid IN VARCHAR2,
                             icSeverity         IN VARCHAR2,
                             inPriority         IN NUMBER,
                             icRuleType         VARCHAR2) IS
  
    rNotification trec_notification := trec_notification();
  
  BEGIN
    rNotification.category    := 'INYA';   
    
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.EXPENSE_OVERPAID'),
                                          'Expense Overpayment');
    rNotification.link_label  := 'Resolve';
      
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'CLAIM';
    rNotification.priority    := inPriority;
    FOR rec_OverpaidClaim IN (SELECT c.id,
                                     EL.Erac_Actp_Cd Actp_Cd,
                                     TRIM(to_char(c.amt, '999990.00')) amt
                                FROM claim c, election el
                               WHERE c.ovrpmt_flag = 'Yes'
                                 AND c.ee_id = inEe_Id
                                 AND c.ELCT_ID = el.ID
                                 AND c.status IN ('Paid', 'Released')
                                 AND coalesce(c.amt, 0) >
                                     coalesce(c.recovered_amt, 0)
                                 AND NOT EXISTS
                               (SELECT 1
                                        FROM claims_image ci
                                       WHERE ci.status IN
                                             ('Indexed', 'QAPending')
                                         AND ci.clmbt_id = c.clmbt_id)) LOOP
      rNotification.reference_id := rec_OverpaidClaim.Id;
      rNotification.amt          := rec_OverpaidClaim.Amt;
      rNotification.dr_cr_ind    := 'DR';
      rNotification.note         := rec_OverpaidClaim.Actp_Cd;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END LOOP;
  END OverpaymentClaim;

  PROCEDURE DirectDepositFailed(ottabNotification  IN OUT NOCOPY ttab_notification,
                                inAdmin_Id         IN NUMBER,
                                inEr_Id            IN NUMBER,
                                inEe_Id            IN NUMBER,
                                icUserName         IN VARCHAR2,
                                icAchAcct          IN VARCHAR2,
                                icAchISO           IN VARCHAR2,
                                icIsAchValid       IN VARCHAR2,
                                icDebitCardStatus  IN VARCHAR2,
                                icEmail            IN VARCHAR2,
                                icIsAddressInValid IN VARCHAR2,
                                icSeverity         IN VARCHAR2,
                                inPriority         IN NUMBER,
                                icRuleType         VARCHAR2) IS
    rNotification trec_notification := trec_notification();
  BEGIN
    rNotification.category    := 'INYA';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.DIRECT_DEPOSIT_FAILED'),
                                          'Direct Deposit Failed');
    rNotification.link_label  := 'Validate';
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'DIRECT_DEPOSIT_FAILED';
    rNotification.priority    := inPriority;
    IF icAchAcct IS NOT NULL AND icAchIsO IS NOT NULL AND
       icIsAchValid IN ('No', 'PrenoteERR') THEN
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END IF;
  END DirectDepositFailed;

  PROCEDURE AddBeneficiaries(ottabNotification  IN OUT NOCOPY ttab_notification,
                             inAdmin_Id         IN NUMBER,
                             inEr_Id            IN NUMBER,
                             inEe_Id            IN NUMBER,
                             icUserName         IN VARCHAR2,
                             icAchAcct          IN VARCHAR2,
                             icAchISO           IN VARCHAR2,
                             icIsAchValid       IN VARCHAR2,
                             icDebitCardStatus  IN VARCHAR2,
                             icEmail            IN VARCHAR2,
                             icIsAddressInValid IN VARCHAR2,
                             icSeverity         IN VARCHAR2,
                             inPriority         IN NUMBER,
                             icRuleType         VARCHAR2) IS
  
    cResult              VARCHAR2(255) := 'ERROR';
    cErrorCategory       VARCHAR2(255) := 'OTHER';
    nErrorCode           NUMBER := 99999;
    cErrorArea           VARCHAR2(255) := 'Init';
    cOtherMessage        VARCHAR2(4000) := NULL;
    cObjName             VARCHAR2(255) := 'HSAROLE';
    cObjCD               VARCHAR2(20) := 'Section';
    occanview            VARCHAR2(3) := 'No';
    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';
    nuserid              NUMBER := NULL;
  
    rNotification trec_notification := trec_notification();
  
  BEGIN
  
    SELECT id INTO nuserid FROM Login WHERE user_name = icUserName;
  
    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);
  
    IF upper(occanexecute) = 'YES' THEN
      FOR cceebene IN (SELECT 'x'
                         FROM dual
                        WHERE EXISTS
                        (SELECT 'X'
                                 FROM election el, stack_election se
                                WHERE se.elct_id = el.id
                                  AND el.ee_id = inEe_Id
                                  AND el.erac_actp_cd = 'HSA'
                                  AND (trunc(SYSDATE) BETWEEN se.start_date AND
                                      se.end_date)
                                  AND UPPER(el.enrollment_status) =
                                      'ENROLLED'
                                  AND NOT EXISTS
                                (SELECT 'x'
                                         FROM dependent dp
                                        WHERE dp.ee_id = el.ee_id
                                          AND dp.allocated_percentage IS NOT NULL
                                          AND dp.allocated_percentage > 0))) LOOP
      
        rNotification.category    := 'BLOCKER';
        rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                        inEr_Id    => inEr_Id,
                                                                        icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.BENEFICIARIES.MISSING.DESC'),
                                              'In your account we don''t see any beneficiaries added. Please add...');
        rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                        inEr_Id    => inEr_Id,
                                                                        icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.BENEFICIARIES.MISSING.NOTE'),
                                              'Missing Beneficiaries');
        rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                        inEr_Id    => inEr_Id,
                                                                        icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.BENEFICIARIES.MISSING.LABEL'),
                                              'Enter Beneficiaries');
        rNotification.TYPE        := coalesce(icRuleType, 'Alert');
        rNotification.rec_source  := 'MISSING_BENEFICIARIES';
        rNotification.priority    := inPriority;
      
        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      
      END LOOP;
    END IF;
  END AddBeneficiaries;

  PROCEDURE DBCardTurnedOff(ottabNotification  IN OUT NOCOPY ttab_notification,
                            inAdmin_Id         IN NUMBER,
                            inEr_Id            IN NUMBER,
                            inEe_Id            IN NUMBER,
                            icUserName         IN VARCHAR2,
                            icAchAcct          IN VARCHAR2,
                            icAchISO           IN VARCHAR2,
                            icIsAchValid       IN VARCHAR2,
                            icDebitCardStatus  IN VARCHAR2,
                            icEmail            IN VARCHAR2,
                            icIsAddressInValid IN VARCHAR2,
                            icSeverity         IN VARCHAR2,
                            inPriority         IN NUMBER,
                            icRuleType         VARCHAR2) IS
  
    isTurnedOffDBCard VARCHAR2(3) := 'No';
  
    rNotification trec_notification := trec_notification();
  
  BEGIN
  
    SELECT decode(icDebitCardStatus,
                  'Suspended',
                  decode(clm_bac_util.getcardsuspendclosereason(inEe_Id),
                         'SUBST_FAILURE',
                         'Yes',
                         'No'),
                  'No')
      INTO isTurnedOffDBCard
      FROM dual;
  
    IF (isTurnedOffDBCard = 'Yes') THEN
    
      rNotification.category    := 'BLOCKER';
      rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.DEBITCARD.SUSPENDED.DESC'),
                                            'Debit card has been suspended please take action.');
      rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.DEBITCARD.SUSPENDED.NOTE'),
                                            'Debit Card Suspended');
      rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.DEBITCARD.SUSPENDED.LABEL'),
                                            'TAKE ACTION');
      rNotification.TYPE        := coalesce(icRuleType, 'Alert');
      rNotification.rec_source  := 'DEBITCARD_MISSING';
      rNotification.priority    := inPriority;
    
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    
    END IF;
  
  END DBCardTurnedOff;

  PROCEDURE MissingEmail(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2) IS
  
    rNotification trec_notification := trec_notification();
  
  BEGIN
  
    IF icEmail IS NULL THEN
    
      rNotification.category    := 'BLOCKER';
      rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.EMAIL.MISSING.DESC'),
                                            'Email ID is missing for the account, Please update email.');
      rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.EMAIL.MISSING.NOTE'),
                                            'Missing EmailID');
      rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.EMAIL.MISSING.LABEL'),
                                            'TAKE ACTION');
      rNotification.TYPE        := coalesce(icRuleType, 'Alert');
      rNotification.rec_source  := 'EMAIL_MISSING';
      rNotification.priority    := inPriority;
    
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    
    END IF;
  
  END MissingEmail;

  PROCEDURE EnrollOnline(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2) IS
    --1.1.0
  
    bDummy BOOLEAN := FALSE;
  
    nUserId   NUMBER := NULL;
    cLink     VARCHAR2(4000) := '';
    cObjName  VARCHAR2(20) := 'EESMRY.EEELCTSMRY';
    cObjCD    VARCHAR2(20) := 'Section';
    occanview VARCHAR2(3) := 'No';
  
    cResult            VARCHAR2(255) := 'ERROR';
    cErrorCategory     VARCHAR2(255) := 'OTHER';
    nErrorCode         NUMBER := 99999;
    cErrorArea         VARCHAR2(255) := 'Init';
    cOtherMessage      VARCHAR2(4000) := NULL;
    cActpLabel         VARCHAR2(4000) := '';
    cElectionPeriod    VARCHAR2(4000) := '';
    cElectionStatus    VARCHAR2(4000) := '';
    cElectionAmount    VARCHAR2(4000) := '';
    cElectionEffective VARCHAR2(4000) := '';
    cElectionDate      VARCHAR2(4000) := '';
  
    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';
  
    rNotification trec_notification := trec_notification();
  
  BEGIN
    SELECT id INTO nuserid FROM Login WHERE user_name = icUserName;
  
    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);
  
    IF (occanview = 'Yes') THEN
      SELECT nvl(hyperlink, '')
        INTO clink
        FROM our_object
       WHERE NAME = cObjName
         AND typecd = cObjCD;
    
      IF (clink IS NOT NULL) THEN
        FOR rec_EnrollOnline IN (SELECT DISTINCT ea.actp_cd
                                   FROM employer_account ea
                                  WHERE ea.er_id = inEr_Id) LOOP
          cElectionStatus := '';
          cErrorArea      := 'GettingEeElctSmry';
          geteeelctsmrydata(cResult,
                            cErrorCategory,
                            nErrorcode,
                            cErrorarea,
                            cOthermessage,
                            inEe_Id,
                            inEr_Id,
                            rec_EnrollOnline.Actp_Cd,
                            cactplabel,
                            celectionperiod,
                            celectionstatus,
                            celectionamount,
                            celectioneffective,
                            celectiondate);
        
          IF (substr(cElectionStatus, 1, 6) = 'Elect|') THEN
            bDummy := TRUE;
            EXIT;
          END IF;
        
        END LOOP;
      END IF;
    END IF;
  
    IF bDummy THEN
    
      rNotification.category    := 'BLOCKER';
      rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.ENROLL.ONLINE.DESC'),
                                            'User has not been enrolled yet, Please enroll online.');
      rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.ENROLL.ONLINE.NOTE'),
                                            'Enroll Online');
      rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.ENROLL.ONLINE.LABEL'),
                                            'Enroll Online');
      rNotification.TYPE        := coalesce(icRuleType, 'Alert');
      rNotification.rec_source  := 'ENROLL_ONLINE';
      rNotification.priority    := inPriority;
    
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    
    END IF;
  
  END EnrollOnline;

  PROCEDURE UpdateMailingAddress(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2) IS
  
    rNotification         trec_notification := trec_notification();
    icIsResAddressInValid VARCHAR2(5);
  
  BEGIN
    BEGIN
      FOR ee_resi_address_invalid IN (SELECT nvl(is_resi_address_invalid,
                                                 'No') is_resi_address_invalid
                                        FROM employee ee
                                       WHERE ee.id = inEe_Id) LOOP
        icIsResAddressInValid := ee_resi_address_invalid.is_resi_address_invalid;
        EXIT;
      END LOOP;
    END;
  
    IF (icIsAddressInValid = 'Yes' OR icIsResAddressInValid = 'Yes') THEN
    
      rNotification.category    := 'BLOCKER';
      rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.INVALID.ADDRESS.DESC'),
                                            'We have mailed you important account information, but it was returned due to an invalid address. Please update your contact information. If you would like to receive electronic communications, check the "Go Paperless" checkbox.');
      rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.INVALID.ADDRESS.NOTE'),
                                            'Update Contact Information');
      rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.INVALID.ADDRESS.LABEL'),
                                            'TAKE ACTION');
      rNotification.TYPE        := coalesce(icRuleType, 'Alert');
      rNotification.rec_source  := 'INVALID_MAILING_ADDRESS';
      rNotification.priority    := inPriority;
    
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    
    END IF;
  
  END UpdateMailingAddress;

  PROCEDURE CompleteAccountOpening(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdminId          IN NUMBER,
                                   inErId             IN NUMBER,
                                   inEeId             IN NUMBER,
                                   icUserName         IN VARCHAR2,
                                   icAchAcct          IN VARCHAR2,
                                   icAchISO           IN VARCHAR2,
                                   icIsAchValid       IN VARCHAR2,
                                   icDebitCardStatus  IN VARCHAR2,
                                   icEmail            IN VARCHAR2,
                                   icIsAddressInValid IN VARCHAR2,
                                   icSeverity         IN VARCHAR2,
                                   inPriority         IN NUMBER,
                                   icRuleType         VARCHAR2) IS
  
    --------------------------------------------------------------------
    -- Activity      By                     On                Version --
    --------------------------------------------------------------------
    -- Modified      Gaurav Agarwal        06/19/2018        1.0.1
    /*
    Story id: PORTAL-519
      The blocker for asking documents against the CIP failure should not
      be shown to the user if some document is already uploaded by the
      participant.
    */
    ----------------------------------------------------------------------
  
    cStatus   VARCHAR2(50) := NULL;
    nUserId   NUMBER := NULL;
    cObjName  VARCHAR2(20) := 'HSAROLE';
    cObjCD    VARCHAR2(20) := 'Section';
    ocCanView VARCHAR2(3) := 'No';
  
    cResult        VARCHAR2(255) := 'ERROR';
    cErrorCategory VARCHAR2(255) := 'OTHER';
    nErrorCode     NUMBER := 99999;
    cErrorArea     VARCHAR2(255) := 'Init';
    cOtherMessage  VARCHAR2(4000) := NULL;
  
    ocCanExecute         VARCHAR2(3) := 'No';
    ocCanCreate          VARCHAR2(3) := 'No';
    ocCanDelete          VARCHAR2(3) := 'No';
    ocCanModify          VARCHAR2(3) := 'No';
    ocCanModifyIfNull    VARCHAR2(3) := 'No';
    ocCanModifyIfNotNull VARCHAR2(3) := 'No';
    ocCanModifyToNull    VARCHAR2(3) := 'No';
    cIdvStatus           VARCHAR2(50) := NULL;
    cCIPWorkGroup        VARCHAR2(255) := '';
    cClaimImgExist       VARCHAR2(3) := 'No';
  
    dSecurityCheckDate  DATE := SYSDATE;
    cSecurityCheckParam NUMBER;
  
    rNotification trec_notification := trec_notification();
  
    nTicketNo         NUMBER := 0;
    cCauseNote        VARCHAR2(4000) := '';
    bIsCIPDocRequired BOOLEAN := FALSE;
    bIsCIPDocReSubmit BOOLEAN := FALSE;
  
  BEGIN
  
    SELECT id INTO nUserId FROM Login WHERE user_name = icUserName;
  
    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cResult,
                 cErrorCategory,
                 nErrorCode,
                 cErrorArea,
                 cOtherMessage,
                 nUserId,
                 cObjName,
                 cObjCD,
                 ocCanView,
                 ocCanExecute,
                 ocCanCreate,
                 ocCanDelete,
                 ocCanModify,
                 ocCanModifyIfNull,
                 ocCanModifyIfNotNull,
                 ocCanModifyToNull);
  
    BEGIN
    
      SELECT elct.enrollment_status,
             elct.idv_status,
             trunc(elct.secutity_check_date)
        INTO cStatus, cIdvStatus, dSecurityCheckDate
        FROM (SELECT e.enrollment_status,
                     eea.idv_status,
                     eea.secutity_check_date
                FROM election e, elct_enrollment_activity eea
               WHERE e.id = eea.elct_id
                 AND e.erac_actp_cd = 'HSA'
                 AND eea.activity_type IN
                     ('Security_Check', 'Manual_Override')
                 AND e.ee_id = inEeId
                 AND e.erac_er_id = inErId
               ORDER BY eea.secutity_check_date DESC) elct
       WHERE rownum = 1;
    
      IF (cStatus = 'Security Fail' AND cIdvStatus = 'Failed' AND
         ocCanExecute = 'Yes') THEN
      
        BEGIN
          SELECT PARAM_VALUE
            INTO cSecurityCheckParam
            FROM PARTNER_PARAM PP, PARTNER P
           WHERE PP.PARTNER_ID = P.ID
             AND PP.PARAM_NAME = 'HSA_SECURITY_FAIL_AGEOUT_DAYS'
             AND SYSDATE BETWEEN PP.BEGINS AND PP.ENDS
             AND P.PARTNER_CODE = 'Idology-Acclaris';
        
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            cSecurityCheckParam := 90;
          WHEN OTHERS THEN
            cSecurityCheckParam := 90;
        END;
      
        IF (trunc(SYSDATE) - dSecurityCheckDate) <= cSecurityCheckParam THEN
          BEGIN
            SELECT ticketDetail.id, ticketDetail.cause_note
              INTO nTicketNo, cCauseNote
              FROM (SELECT t.id, t.cause_note
                      FROM ticket t, ticket_subtype ts
                     WHERE ts.id = t.tkt_subtype_id
                       AND t.created_for_id = inEeId
                       AND t.created_by != 'impl.automation.ksc'
                       AND ts.tkty_category = 'Employee'
                       AND ts.tkty_label = 'Enrollment/Eligibility'
                       AND ts.subtype = 'Enrollment Status'
                     ORDER BY t.created_on DESC) ticketDetail
             WHERE rownum = 1;
          
          EXCEPTION
            WHEN no_data_found THEN
              nTicketNo  := 0;
              cCauseNote := '';
          END;
        
          IF (nTicketNo > 0) THEN
            bIsCIPDocReSubmit := TRUE;
          ELSE
            cCIPWorkGroup := GETWORKGROUPFORCIPUPLOAD(inAdminId,
                                                      inErId,
                                                      inEeId);
            BEGIN
              SELECT 'Yes'
                INTO cClaimImgExist
                FROM claims_image
               WHERE workgroup = cCIPWorkGroup
                 AND status = 'Indexed'
                 AND ee_id = inEeId
                 AND rownum = 1;
            
            EXCEPTION
              WHEN no_data_found THEN
                cClaimImgExist := 'No';
            END;
            IF (nvl(cClaimImgExist, 'No') <> 'Yes') THEN
              bIsCIPDocRequired := TRUE;
            END IF;
          END IF;
        END IF;
      END IF;
    
      IF bIsCIPDocReSubmit THEN
        rNotification.category     := 'BLOCKER';
        rNotification.reference_id := nTicketNo;
        rNotification.note         := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                         inEr_Id    => inErId,
                                                                         icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.HEADERMSG'),
                                               'We Need More Information');
        rNotification.description  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                         inEr_Id    => inErId,
                                                                         icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.BODYMSG1'),
                                               'Apologies, but we still need some information to open your HSA.') || '~' ||
                                      coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                         inEr_Id    => inErId,
                                                                         icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.BODYMSG2'),
                                               'We''ve created a help ticket so you can see the specific document(s) you need to send.') || '~' ||
                                      cCauseNote;
      
        rNotification.link_label := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                       inEr_Id    => inErId,
                                                                       icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.LATERTHANKS'),
                                             'LATER, THANKS') || '~' ||
                                    coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                       inEr_Id    => inErId,
                                                                       icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.VIEWTICKET'),
                                             'VIEW HELP TICKET');
      
        rNotification.TYPE       := coalesce(icRuleType, 'Alert');
        rNotification.rec_source := 'COMPLETE_ACC_HT';
        rNotification.priority   := inPriority;
      
        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      
      ELSIF bIsCIPDocRequired THEN
      
        rNotification.category    := 'BLOCKER';
        rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                        inEr_Id    => inErId,
                                                                        icLabel_Cd => 'SECURITYCHECKMISSINGINFO.DESCRIPTION'),
                                              'Your application to open a HSA has been received but we need additional documentation before we can finish opening your account.Please upload, fax or mail the documents specified below within 90 days or your account will be redeemed and closed.');
        rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                        inEr_Id    => inErId,
                                                                        icLabel_Cd => 'SECURITYCHECKMISSINGINFO.NOTE'),
                                              'Required Documentation Needed');
        rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                        inEr_Id    => inErId,
                                                                        icLabel_Cd => 'SECURITYCHECKMISSINGINFO.PROVIDEDOCUMENTS'),
                                              'PROVIDE DOCUMENTS');
        rNotification.TYPE        := coalesce(icRuleType, 'Alert');
        rNotification.rec_source  := 'COMPLETE_ACC_OPENING';
        rNotification.priority    := inPriority;
      
        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
  
  END CompleteAccountOpening;

  PROCEDURE RESOLVERECEIPTREQDACT(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                                  INADMINID          IN NUMBER,
                                  INERID             IN NUMBER,
                                  INEEID             IN NUMBER,
                                  ICUSERNAME         IN VARCHAR2,
                                  ICACHACCT          IN VARCHAR2,
                                  ICACHISO           IN VARCHAR2,
                                  ICISACHVALID       IN VARCHAR2,
                                  ICDEBITCARDSTATUS  IN VARCHAR2,
                                  ICEMAIL            IN VARCHAR2,
                                  ICISADDRESSINVALID IN VARCHAR2,
                                  ICSEVERITY         IN VARCHAR2,
                                  INPRIORITY         IN NUMBER,
                                  ICRULETYPE         IN VARCHAR2) IS
  
    RNOTIFICATION      TREC_NOTIFICATION := TREC_NOTIFICATION();
    NADMNID            NUMBER;
    NERID              NUMBER;
    NEEID              NUMBER;
    CCLAIMDTLS         VARCHAR2(32767) := NULL;
    CDBTCARDSTATUS     VARCHAR2(50) := NULL;
    CTEMPDBTCARDSTATUS VARCHAR2(50) := NULL;
  BEGIN
  
    NADMNID := INADMINID;
    NERID   := INERID;
    NEEID   := INEEID;
  
    BEGIN
    
      IF ICDEBITCARDSTATUS != 'Suspended' THEN
        FOR CRCPTRQDCLM IN (SELECT EE.DEBIT_CARD_STATUS,
                                   CL.ID ID,
                                   TO_CHAR(CL.SERVICE_BEGINS, 'MM/DD/YYYY') SERVICE_BEGINS,
                                   REPLACE(REPLACE(CL.PROVIDER, '~', ' '),
                                           '|',
                                           ' ') PROVIDER,
                                   CL.AMT,
                                   CASE
                                     WHEN CI.STATUS = 'Complete' THEN
                                      'Invalid Receipt'
                                     ELSE
                                      'Receipt Required'
                                   END AS STATUS,
                                   EL.ERAC_ACTP_CD ACTP_CD
                              FROM CLAIM        CL,
                                   CLAIM_BATCH  CB,
                                   ELECTION     EL,
                                   ACCOUNT_TYPE AT,
                                   CLAIMS_IMAGE CI,
                                   EMPLOYEE     EE
                             WHERE EE.ID = NEEID
                               AND CL.CLMBT_ID = CB.ID
                               AND EE.ID = CL.EE_ID
                               AND CL.CLAIM_CATEGORY = 'Debit Card'
                               AND CL.ELCT_ID = EL.ID
                               AND EL.ERAC_ACTP_CD = AT.CD
                               AND UPPER(AT.RECEIPT_REQD) = 'YES'
                               AND CL.NEEDS_SUBSTANTIATION = 'Yes'
                               AND CL.SUBSTANTIATION_STATUS != 'Pass'
                               AND CL.IS_PRE_TAX = 'No'
                               AND CL.STATUS IN ('Paid', 'Released')
                               AND TRUNC(CLM_VALIDATECLAIMUTIL.GETRUNOFFDATE(CL.EE_ID,
                                                                             EL.ID,
                                                                             EL.ERAC_ER_ID,
                                                                             EL.ERAC_ACTP_CD)) >=
                                   TRUNC(SYSDATE)
                               AND CI.CLMBT_ID(+) = CB.ID
                               AND (CI.STATUS NOT IN
                                   ('Indexed', 'Review', 'QAPending') OR
                                   CI.STATUS IS NULL)
                               AND CL.SERVICE_BEGINS >
                                   TRUNC(ADD_MONTHS(SYSDATE, -12), 'RRRR')
                               AND CL.AMT > 0
                               AND CL.ID NOT IN
                                   (SELECT DCFO.CLM_ID
                                      FROM DBCARD_CLAIM_OFFSET     DCO,
                                           DBCARD_CLAIM_FOR_OFFSET DCFO
                                     WHERE DCO.EE_ID = EL.EE_ID
                                       AND DCO.ID = DCFO.DCCLMOFF_ID
                                       AND DCO.STATUS =
                                           'Online-Claim-Selected')
                             ORDER BY SERVICE_BEGINS DESC) LOOP
        
          CCLAIMDTLS     := CCLAIMDTLS || CRCPTRQDCLM.ID || '~' ||
                            CRCPTRQDCLM.SERVICE_BEGINS || '~' ||
                            COALESCE(CRCPTRQDCLM.PROVIDER, '') || '~' ||
                            CRCPTRQDCLM.AMT || '~' || CRCPTRQDCLM.STATUS || '~' ||
                            CRCPTRQDCLM.ACTP_CD || '|';
          CDBTCARDSTATUS := CRCPTRQDCLM.DEBIT_CARD_STATUS;
        END LOOP;
      
      ELSIF ICDEBITCARDSTATUS = 'Suspended' THEN
      
        FOR CSUSPRCPTRQDCLM IN (SELECT CL.ID ID,
                                       TO_CHAR(CL.SERVICE_BEGINS,
                                               'MM/DD/YYYY') SERVICE_BEGINS,
                                       CL.PROVIDER,
                                       CL.AMT,
                                       CL.EE_ID EE_ID,
                                       CASE
                                         WHEN CI.STATUS = 'Complete' THEN
                                          'Invalid Receipt'
                                         ELSE
                                          'Receipt Required'
                                       END AS STATUS,
                                       ELCT.ERAC_ACTP_CD ACTP_CD
                                  FROM CLAIM            CL,
                                       CLAIM_BATCH      CB,
                                       EMPLOYEE         EE,
                                       ELECTION         ELCT,
                                       EMPLOYER_ACCOUNT EAC,
                                       EMPLOYER         ER,
                                       ER_CLAIM_PARAM   ERCP,
                                       CLAIMS_IMAGE     CI
                                 WHERE CL.CLMBT_ID = CB.ID
                                   AND CI.CLMBT_ID(+) = CB.ID
                                   AND (CI.STATUS NOT IN
                                       ('Indexed', 'Review', 'QAPending') OR
                                       CI.STATUS IS NULL)
                                   AND CL.CLAIM_CATEGORY = 'Debit Card'
                                   AND CL.EE_ID = EE.ID
                                   AND EE.DEBIT_CARD_STATUS = 'Suspended'
                                   AND EE.ID = NEEID
                                   AND CL.ELCT_ID = ELCT.ID
                                   AND ELCT.EE_ID = EE.ID
                                   AND ELCT.ERAC_ER_ID = EAC.ER_ID
                                   AND ELCT.ERAC_ACTP_CD = EAC.ACTP_CD
                                   AND ELCT.ERAC_ENDS = EAC.ENDS
                                   AND ERCP.ER_ID = ER.ID
                                   AND CL.SUBSTANTIATION_STATUS IN
                                       (DECODE(EAC.SUBSTFAIL_NOTIFY3_DAYS,
                                               0,
                                               DECODE(EAC.SUBSTFAIL_NOTIFY2_DAYS,
                                                      0,
                                                      'Notified1',
                                                      'Notified2'),
                                               'Notified3'))
                                   AND ((ERCP.DEBIT_CARD_AUTO_UNSUSPEND =
                                       'Yes' AND
                                       ((EAC.ENDS =
                                       TO_DATE('12/31/2099 23:59:59',
                                                   'MM/DD/YYYY HH24:MI:SS') AND
                                       CL.SERVICE_ENDS BETWEEN
                                       TRUNC(SYSDATE, 'YYYY') AND TRUNC((ADD_MONTHS(TRUNC(SYSDATE,
                                                                                              'YYYY'),
                                                                                        12) - 1)) +
                                       .99999) OR
                                       (EAC.ENDS <>
                                       TO_DATE('12/31/2099 23:59:59',
                                                   'MM/DD/YYYY HH24:MI:SS') AND
                                       ((EAC.ENDS >= TRUNC(SYSDATE) AND
                                       SYSDATE BETWEEN EAC.BEGINS AND
                                       EAC.ENDS AND CL.SERVICE_ENDS BETWEEN
                                       EAC.BEGINS AND EAC.ENDS) OR
                                       (EAC.ENDS < TRUNC(SYSDATE) AND
                                       SYSDATE BETWEEN EAC.BEGINS AND
                                       GREATEST(EAC.ENDS,
                                                      CLM_BAC_UTIL.GETELCTENDDATEWITHGRACE(CL.ELCT_ID)) AND
                                       CL.SERVICE_ENDS BETWEEN
                                       EAC.BEGINS AND
                                       GREATEST(EAC.ENDS,
                                                      CLM_BAC_UTIL.GETELCTENDDATEWITHGRACE(CL.ELCT_ID))))))) OR
                                       (NVL(ERCP.DEBIT_CARD_AUTO_UNSUSPEND,
                                             'No') = 'No' AND
                                       ((EAC.ENDS =
                                       TO_DATE('12/31/2099 23:59:59',
                                                   'MM/DD/YYYY HH24:MI:SS') AND
                                       CL.SERVICE_ENDS BETWEEN
                                       ADD_MONTHS(TRUNC(SYSDATE, 'YYYY'),
                                                      -12) AND TRUNC((ADD_MONTHS(TRUNC(SYSDATE,
                                                                                           'YYYY'),
                                                                                     12) - 1)) +
                                       .99999) OR
                                       (EAC.ENDS <>
                                       TO_DATE('12/31/2099 23:59:59',
                                                   'MM/DD/YYYY HH24:MI:SS') AND
                                       ((SYSDATE BETWEEN EAC.BEGINS AND
                                       EAC.ENDS AND CL.SERVICE_ENDS BETWEEN
                                       EAC.BEGINS AND EAC.ENDS) OR
                                       (ADD_MONTHS(SYSDATE, -12) BETWEEN
                                       EAC.BEGINS AND EAC.ENDS AND
                                       CL.SERVICE_ENDS BETWEEN
                                       EAC.BEGINS AND
                                       GREATEST(EAC.ENDS,
                                                      CLM_BAC_UTIL.GETELCTENDDATEWITHGRACE(CL.ELCT_ID))))))))
                                   AND EE.PYCL_ER_ID = ER.ID) LOOP
        
          CCLAIMDTLS     := CCLAIMDTLS || CSUSPRCPTRQDCLM.ID || '~' ||
                            CSUSPRCPTRQDCLM.SERVICE_BEGINS || '~' ||
                            COALESCE(CSUSPRCPTRQDCLM.PROVIDER, '') || '~' ||
                            CSUSPRCPTRQDCLM.AMT || '~' ||
                            CSUSPRCPTRQDCLM.STATUS || '~' ||
                            CSUSPRCPTRQDCLM.ACTP_CD || '|';
          CDBTCARDSTATUS := ICDEBITCARDSTATUS;
        END LOOP;
      END IF;
    END;
  
    IF CCLAIMDTLS IS NOT NULL THEN
    
      RNOTIFICATION.CATEGORY    := 'BLOCKER';
      RNOTIFICATION.DESCRIPTION := CCLAIMDTLS;
      RNOTIFICATION.NOTE        := CDBTCARDSTATUS;
      RNOTIFICATION.LINK_LABEL  := 'TAKE ACTION';
      RNOTIFICATION.TYPE        := COALESCE(ICRULETYPE, 'Alert');
      RNOTIFICATION.REC_SOURCE  := 'RECEIPT REQUIRED';
      RNOTIFICATION.PRIORITY    := INPRIORITY;
    
      OTTABNOTIFICATION.EXTEND();
      OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
    END IF;
  END RESOLVERECEIPTREQDACT;

  PROCEDURE RunOutOfTimeToUseBalanceCY(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         IN NUMBER,
                                       inEr_Id            IN NUMBER,
                                       inEe_Id            IN NUMBER,
                                       icUserName         IN VARCHAR2,
                                       icAchAcct          IN VARCHAR2,
                                       icAchISO           IN VARCHAR2,
                                       icIsAchValid       IN VARCHAR2,
                                       icDebitCardStatus  IN VARCHAR2,
                                       icEmail            IN VARCHAR2,
                                       icIsAddressInValid IN VARCHAR2,
                                       icSeverity         IN VARCHAR2,
                                       inPriority         IN NUMBER,
                                       icRuleType         VARCHAR2) IS
  
    dEffective DATE := SYSDATE;
    nCutOffDays CONSTANT NUMBER := 30;
    cString             VARCHAR2(500) := 'Spend the funds on qualified expenses before the deadline to put them to good use!';
    cBalanceText        VARCHAR2(500) := 'Your balance from {{accType}} {{year}} must be used by {{endDate}}.';
    cBalanceUpdatedText VARCHAR2(4000) := '';
    bCutOffDaysPassed   BOOLEAN := FALSE;
    cResult             VARCHAR2(255);
    cErrorCategory      VARCHAR2(255);
    nErrorCode          NUMBER;
    cErrorArea          VARCHAR2(255);
    cOtherMessage       VARCHAR2(4000);
    cDemogValue         VARCHAR2(255);
    dEracEnds           DATE := SYSDATE;
    cYear               VARCHAR2(255);
    rNotification       trec_notification := trec_notification();
    cLabelBalanceText   VARCHAR2(500) := PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                   inEr_Id     => inEr_Id,
                                                                   icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.CY.BALANCEDESC',
                                                                   icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS');
  
  BEGIN
  
    IF jra_account_util.IsErJRA(inEr_Id) = 'No' THEN
      FOR rec_election IN (SELECT EL.ID ELCTID,
                                  EL.ERAC_ACTP_CD ACTPCD,
                                  EL.ERAC_ER_ID ELERACERID,
                                  EXTRACT(YEAR FROM EL.Erac_Ends) YEAR,
                                  EL.Erac_Ends AS ERAC_END,
                                  EL.Election_Effective AS ERAC_EFFECTIVE
                             FROM ELECTION EL
                            WHERE EL.ERAC_ACTP_CD NOT IN
                                  ('NON REIMBURSEMENT', 'NO ELECTION')
                              AND EL.EE_ID = inEe_Id
                              AND EXTRACT(YEAR FROM EL.Erac_Ends) < 2099
                              AND (SYSDATE BETWEEN EL.ELECTION_EFFECTIVE AND
                                  EL.ERAC_ENDS)
                            ORDER BY EL.Erac_Ends DESC) LOOP
      
        IF (TRUNC(rec_election.erac_end) - TRUNC(SYSDATE) BETWEEN 1 AND
           nCutOffDays) AND
           nvl(CLM_DISPLAYEEBALANCE(rec_election.ELCTID, 'No'), 0) > 0 THEN
          cYear      := rec_election.year;
          dEracEnds  := rec_election.erac_end;
          dEffective := rec_election.erac_effective;
          IF EXTRACT(YEAR FROM dEffective) != cYear THEN
            cBalanceUpdatedText := cBalanceUpdatedText ||
                                   REPLACE(REPLACE(REPLACE(coalesce(cLabelBalanceText,
                                                                    cBalanceText),
                                                           '{{year}}',
                                                           TO_CHAR(dEffective,
                                                                   'MM/DD/YYYY')),
                                                   
                                                   '{{endDate}}',
                                                   TO_CHAR(dEracEnds,
                                                           'MM/DD/YYYY')),
                                           '{{accType}}',
                                           PortalUtil.GetAccountLabel(inEe_Id,
                                                                      rec_election.actpcd)) || '~';
          ELSE
            cBalanceUpdatedText := cBalanceUpdatedText ||
                                   REPLACE(REPLACE(REPLACE(coalesce(cLabelBalanceText,
                                                                    cBalanceText),
                                                           '{{year}}',
                                                           cYear),
                                                   
                                                   '{{endDate}}',
                                                   TO_CHAR(dEracEnds,
                                                           'MM/DD/YYYY')),
                                           '{{accType}}',
                                           PortalUtil.GetAccountLabel(inEe_Id,
                                                                      rec_election.actpcd)) || '~';
          END IF;
          bCutOffDaysPassed := TRUE;
        
        END IF;
      END LOOP;
    
      IF bCutOffDaysPassed THEN
      
        rNotification.category := 'BLOCKER';
      
        rNotification.description := cBalanceUpdatedText ||
                                     coalesce(PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                        inEr_Id     => inEr_Id,
                                                                        icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.CY.DESC',
                                                                        icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS'),
                                              cString);
      
        rNotification.note := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                 inEr_Id     => inEr_Id,
                                                                 icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.CY.NOTE',
                                                                 icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS'),
                                       'Don''t Lose Your Money');
      
        BEGIN
          get_er_admn_demog(cResult,
                            cErrorCategory,
                            nErrorCode,
                            cErrorArea,
                            cOtherMessage,
                            inAdmin_Id,
                            inEr_Id,
                            'PAY_TYPE',
                            cDemogValue,
                            'System',
                            'No',
                            'No');
          IF cResult = 'OK' THEN
            IF nvl(cDemogValue, 'Self') = 'Both' THEN
              rNotification.link_label := 'PAGEBLOCKER.RUNOUTOFTIME.CY.ENTERREIMBURSEMENT' || '~' ||
                                          'Enabled' || '~' ||
                                          'PAGEBLOCKER.RUNOUTOFTIME.CY.PAYABILL' || '~' ||
                                          'Enabled';
            ELSIF nvl(cDemogValue, 'Self') = 'Self' THEN
              rNotification.link_label := 'PAGEBLOCKER.RUNOUTOFTIME.CY.ENTERREIMBURSEMENT' || '~' ||
                                          'Enabled' || '~' ||
                                          'PAGEBLOCKER.RUNOUTOFTIME.CY.PAYABILL' || '~' ||
                                          'Disabled';
            END IF;
          ELSE
            rNotification.link_label := '';
          END IF;
        
        END;
        rNotification.TYPE       := coalesce(icRuleType, 'Alert');
        rNotification.rec_source := 'RUN_OUTOF_TIME_CY';
        rNotification.priority   := inPriority;
      
        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      END IF;
    END IF;
  END RunOutOfTimeToUseBalanceCY;

  PROCEDURE RunOutOfTimeToUseBalancePY(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         IN NUMBER,
                                       inEr_Id            IN NUMBER,
                                       inEe_Id            IN NUMBER,
                                       icUserName         IN VARCHAR2,
                                       icAchAcct          IN VARCHAR2,
                                       icAchISO           IN VARCHAR2,
                                       icIsAchValid       IN VARCHAR2,
                                       icDebitCardStatus  IN VARCHAR2,
                                       icEmail            IN VARCHAR2,
                                       icIsAddressInValid IN VARCHAR2,
                                       icSeverity         IN VARCHAR2,
                                       inPriority         IN NUMBER,
                                       icRuleType         VARCHAR2) IS
  
    dSubmitEnds DATE := SYSDATE;
    dEffective  DATE := SYSDATE;
    nCutOffDays CONSTANT NUMBER := 30;
    cString             VARCHAR2(500) := 'Spend the funds on qualified expenses before the deadline to put them to good use!';
    cBalanceText        VARCHAR2(500) := 'Your balance from {{accType}} {{year}} must be used by {{endDate}}.';
    cBalanceUpdatedText VARCHAR2(4000) := '';
    bCutOffDaysPassed   BOOLEAN := FALSE;
    cResult             VARCHAR2(255);
    cErrorCategory      VARCHAR2(255);
    nErrorCode          NUMBER;
    cErrorArea          VARCHAR2(255);
    cOtherMessage       VARCHAR2(4000);
    cDemogValue         VARCHAR2(255);
    dEracEnds           DATE := SYSDATE;
    cYear               VARCHAR2(255);
    rNotification       trec_notification := trec_notification();
    cLabelBalanceText   VARCHAR2(500) := PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                   inEr_Id     => inEr_Id,
                                                                   icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.PY.BALANCEDESC',
                                                                   icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS');
  BEGIN
  
    IF jra_account_util.IsErJRA(inEr_Id) = 'No' THEN
      FOR rec_election IN (SELECT EL.ID ELCTID,
                                  EL.ERAC_ACTP_CD ACTPCD,
                                  EL.ERAC_ER_ID ELERACERID,
                                  EXTRACT(YEAR FROM EL.Erac_Ends) YEAR,
                                  EL.Erac_Ends AS ERAC_END,
                                  EL.Election_Effective AS ERAC_EFFECTIVE
                             FROM ELECTION EL
                            WHERE EL.ERAC_ACTP_CD NOT IN
                                  ('NON REIMBURSEMENT', 'NO ELECTION')
                              AND EL.EE_ID = inEe_Id
                              AND EXTRACT(YEAR FROM EL.Erac_Ends) < 2099
                              AND (SYSDATE > EL.Election_Effective AND SYSDATE > EL.Erac_Ends)
                            ORDER BY EL.Erac_Ends DESC) LOOP
      
        dSubmitEnds := Clm_Validateclaimutil.getRunOffDate(inEe_Id,
                                                           rec_election.ELCTID,
                                                           rec_election.ELERACERID,
                                                           rec_election.ACTPCD);
      
        IF (TRUNC(dSubmitEnds) - TRUNC(SYSDATE) BETWEEN 1 AND nCutOffDays) AND
           nvl(CLM_DISPLAYEEBALANCE(rec_election.ELCTID, 'No'), 0) > 0 THEN
          cYear      := rec_election.year;
          dEracEnds  := rec_election.erac_end;
          dEffective := rec_election.erac_effective;
          IF EXTRACT(YEAR FROM dEffective) != cYear THEN
            cBalanceUpdatedText := cBalanceUpdatedText ||
                                   REPLACE(REPLACE(REPLACE(coalesce(cLabelBalanceText,
                                                                    cBalanceText),
                                                           '{{year}}',
                                                           TO_CHAR(dEffective,
                                                                   'MM/DD/YYYY')),
                                                   
                                                   '{{endDate}}',
                                                   TO_CHAR(dSubmitEnds,
                                                           'MM/DD/YYYY')),
                                           '{{accType}}',
                                           PortalUtil.GetAccountLabel(inEe_Id,
                                                                      rec_election.actpcd)) || '~';
          ELSE
            cBalanceUpdatedText := cBalanceUpdatedText ||
                                   REPLACE(REPLACE(REPLACE(coalesce(cLabelBalanceText,
                                                                    cBalanceText),
                                                           '{{year}}',
                                                           cYear),
                                                   
                                                   '{{endDate}}',
                                                   TO_CHAR(dSubmitEnds,
                                                           'MM/DD/YYYY')),
                                           '{{accType}}',
                                           PortalUtil.GetAccountLabel(inEe_Id,
                                                                      rec_election.actpcd)) || '~';
          END IF;
          bCutOffDaysPassed := TRUE;
        
        END IF;
      END LOOP;
    
      IF bCutOffDaysPassed THEN
      
        rNotification.category    := 'BLOCKER';
        rNotification.description := cBalanceUpdatedText ||
                                     coalesce(PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                        inEr_Id     => inEr_Id,
                                                                        icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.PY.DESC',
                                                                        icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS'),
                                              cString);
      
        rNotification.note := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                 inEr_Id     => inEr_Id,
                                                                 icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.PY.NOTE',
                                                                 icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS'),
                                       'Don''t Lose Your Money');
      
        BEGIN
          get_er_admn_demog(cResult,
                            cErrorCategory,
                            nErrorCode,
                            cErrorArea,
                            cOtherMessage,
                            inAdmin_Id,
                            inEr_Id,
                            'PAY_TYPE',
                            cDemogValue,
                            'System',
                            'No',
                            'No');
          IF cResult = 'OK' THEN
            IF nvl(cDemogValue, 'Self') = 'Both' THEN
              rNotification.link_label := 'PAGEBLOCKER.RUNOUTOFTIME.PY.ENTERREIMBURSEMENT' || '~' ||
                                          'Enabled' || '~' ||
                                          'PAGEBLOCKER.RUNOUTOFTIME.PY.PAYABILL' || '~' ||
                                          'Enabled';
            ELSIF nvl(cDemogValue, 'Self') = 'Self' THEN
              rNotification.link_label := 'PAGEBLOCKER.RUNOUTOFTIME.PY.ENTERREIMBURSEMENT' || '~' ||
                                          'Enabled' || '~' ||
                                          'PAGEBLOCKER.RUNOUTOFTIME.PY.PAYABILL' || '~' ||
                                          'Disabled';
            END IF;
          ELSE
            rNotification.link_label := '';
          END IF;
        
        END;
        rNotification.TYPE       := coalesce(icRuleType, 'Alert');
        rNotification.rec_source := 'RUN_OUTOF_TIME_PY';
        rNotification.priority   := inPriority;
      
        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      END IF;
    END IF;
  END RunOutOfTimeToUseBalancePY;

  PROCEDURE CashBalanceThreshold(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2) IS
  
    rNotification trec_notification := trec_notification();
  
    nDummy               PLS_INTEGER := 0;
    cResult              VARCHAR2(255) := 'ERROR';
    cErrorCategory       VARCHAR2(255) := 'OTHER';
    nErrorCode           NUMBER := 99999;
    cErrorArea           VARCHAR2(255) := 'Init';
    cOtherMessage        VARCHAR2(4000);
    nUserId              NUMBER;
    cObjName             VARCHAR2(20) := 'HSAROLE';
    cObjCD               VARCHAR2(20) := 'Section';
    occanview            VARCHAR2(3) := 'No';
    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';
    cEntityType          VARCHAR2(3);
    oShouldDispInvLink   VARCHAR2(5) := 'Yes';
    nElctID              NUMBER := 0;
    nAvlBalance          NUMBER := 0;
    nThresholdLimit      NUMBER;
    cIsInvested          VARCHAR2(10);
  
  BEGIN
  
    SELECT id INTO nuserid FROM Login WHERE user_name = icUserName;
  
    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);
  
    IF UPPER(occanexecute) = 'YES' THEN
      BEGIN
        SELECT decode(eed.demog_value, 'Move Completed', 'No', 'Yes')
          INTO oShouldDispInvLink
          FROM ee_demog eed
         WHERE eed.ee_id = inEe_Id
           AND eed.demog_type = 'MIGRATION_STATUS';
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
      IF UPPER(oShouldDispInvLink) = 'YES' THEN
      
        SELECT nvl(GetElectionForHSA(inEe_Id), 0) INTO nElctID FROM dual;
      
        IF nvl(nElctID, 0) <> 0 THEN
          SELECT nvl(CLM_DISPLAYEEBALANCE(nElctID, 'No'), 0)
            INTO nAvlBalance
            FROM dual;
        END IF;
        BEGIN
          nThresholdLimit := nvl(to_number(apputil.GetErAdmnDemog('HSA_INVESTMENT_THRESHOLD',
                                                                  inAdmin_Id,
                                                                  inEr_Id,
                                                                  SYSDATE,
                                                                  'Yes')),
                                 0);
        EXCEPTION
          WHEN OTHERS THEN
            nThresholdLimit := 0;
        END;
        IF nvl(nAvlBalance, 0) > nvl(nThresholdLimit, 0) THEN
          rNotification.category    := 'DIDYOUKNOW';
          rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                          inEr_Id    => inEr_Id,
                                                                          icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.INVESTNOW.DESC'),
                                                'Dont be caught by suprise. Try our investment calculator.');
          rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                          inEr_Id    => inEr_Id,
                                                                          icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.INVESTNOW.NOTE'),
                                                'Are You on Track for Retirement?');
          rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                          inEr_Id    => inEr_Id,
                                                                          icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.INVESTNOW.LINKLABEL'),
                                                'INVESTMENT CALCULATOR');
          rNotification.TYPE        := coalesce(icRuleType, 'Notification');
          rNotification.rec_source  := 'INVESTMENT_CALCULATOR';
          rNotification.priority    := inPriority;
        
          ottabNotification.Extend();
          ottabNotification(ottabNotification.Last) := rNotification;
        END IF;
      END IF;
    END IF;
  END CashBalanceThreshold;

  PROCEDURE UnderStandingAccount(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2) IS
  
    rNotification trec_notification := trec_notification();
  
  BEGIN
  
    rNotification.category    := 'DIDYOUKNOW';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.UNDERSTAND.ACCOUNT.DESC'),
                                          'Having trouble understanding your account? We are here to help.');
    rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.UNDERSTAND.ACCOUNT.NOTE'),
                                          'Understanding Your Account');
    rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.UNDERSTAND.ACCOUNT.LINKLABEL'),
                                          'WATCH THE VIDEO');
    rNotification.TYPE        := coalesce(icRuleType, 'Notification');
    rNotification.rec_source  := 'UNDERSTAND_ACCOUNT';
    rNotification.priority    := inPriority;
  
    ottabNotification.Extend();
    ottabNotification(ottabNotification.Last) := rNotification;
  
  END UnderStandingAccount;

  PROCEDURE GetMobileApp(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2) IS
  
    rNotification trec_notification := trec_notification();
  
  BEGIN
  
    rNotification.category    := 'DIDYOUKNOW';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.GET.MOBILE.DESC'),
                                          'Upload your receipts on the go with our mobile app!');
    rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.GET.MOBILE.NOTE'),
                                          'Get the Mobile App');
    rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.GET.MOBILE.LINKLABEL'),
                                          'DOWNLOAD IT NOW');
    rNotification.TYPE        := coalesce(icRuleType, 'Notification');
    rNotification.rec_source  := 'GET_MOBILE';
    rNotification.priority    := inPriority;
  
    ottabNotification.Extend();
    ottabNotification(ottabNotification.Last) := rNotification;
  
  END GetMobileApp;
  
  PROCEDURE EXCESSCONTRIBCHECK(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                               INADMIN_ID         NUMBER,
                               INER_ID            NUMBER,
                               INEE_ID            NUMBER,
                               ICUSERNAME         VARCHAR2,
                               ICACHACCT          VARCHAR2,
                               ICACHISO           VARCHAR2,
                               ICISACHVALID       VARCHAR2,
                               ICDEBITCARDSTATUS  VARCHAR2,
                               ICEMAIL            VARCHAR2,
                               ICISADDRESSINVALID VARCHAR2,
                               ICSEVERITY         VARCHAR2,
                               INPRIORITY         NUMBER,
                               ICRULETYPE         VARCHAR2) IS
  
    --------------------------------------------------------------------
    -- Activity      By                     On                Version --
    --------------------------------------------------------------------
    -- Created       Titas Das         19/04/2019              1.0.1
    /*
    Story id: PORTAL-6370, PORTAL-6371
    Popup on excess contribution exceeding 100% or threshold value.
    */
    -------------------------------------------------------------------------------------------------------------                           
  
    cACTIVEHSACHECK              VARCHAR2(255) := NULL;
    nPYExcessContribAmt          NUMBER;
    nCYExcessContribAmt          NUMBER;
    bPriorYrTaxDeadlineNotPassed BOOLEAN;
    
    CURSOR CURHED_EXCESS_THRESHOLD_CY IS
     SELECT TO_CHAR(HED.CONTRIB_YEAR) AS CONTRIB_YEAR
       FROM HSA_EXCESS_DEPOSIT HED, DEPOSIT D                          
      WHERE HED.DPST_ID = D.ID AND D.EE_ID = INEE_ID 
        AND HED.EXCESS_LIMIT_TYPE IN
            ('ThresholdFamily',
             'ThresholdFamily+CatchUp',
             'ThresholdAverage',
             'ThresholdAverage+CatchUp',
             'ThresholdYrLastMonth',
             'ThresholdYrLastMonth+CatchUp')
        AND NOT EXISTS
      (SELECT 1
               FROM HSA_EXCESS_DEPOSIT HED1, DEPOSIT D1
			  WHERE HED1.DPST_ID = D1.ID AND D1.EE_ID = INEE_ID 
              AND HED1.EXCESS_LIMIT_TYPE IN
                    ('Family',
                     'Family+CatchUp',
                     'Average',
                     'Average+CatchUp',
                     'YrLastMonth',
                     'YrLastMonth+CatchUp')
                AND HED1.IS_REPORTED = 'Yes'
                AND HED1.CONTRIB_YEAR = EXTRACT(YEAR FROM SYSDATE))
        AND NOT EXISTS
      (SELECT 1
               FROM PREFERENCE_INFO PI, USER_PREFERENCE UP
              WHERE UP.PREF_ID = PI.ID
                AND PI.PREFERENCE_NAME =
                    'EXCESS_CONTRIBUTION_THRESHOLD_DONOTSHOW_FOR_YEAR'
                AND UP.EE_ID = INEE_ID
                AND UP.PREFFERED_CHOICE LIKE
                    '%' || TO_CHAR(EXTRACT(YEAR FROM SYSDATE)) || '%')
        AND HED.IS_REPORTED = 'Yes'
        AND HED.CONTRIB_YEAR = EXTRACT(YEAR FROM SYSDATE);
 
   CURSOR CURHED_EXCESS_THRESHOLD_PY IS
     SELECT TO_CHAR(HED.CONTRIB_YEAR) AS CONTRIB_YEAR
       FROM HSA_EXCESS_DEPOSIT HED, DEPOSIT D                          
      WHERE HED.DPST_ID = D.ID AND D.EE_ID = INEE_ID 
        AND HED.EXCESS_LIMIT_TYPE IN
            ('ThresholdFamily',
             'ThresholdFamily+CatchUp',
             'ThresholdAverage',
             'ThresholdAverage+CatchUp',
             'ThresholdYrLastMonth',
             'ThresholdYrLastMonth+CatchUp')
        AND NOT EXISTS
      (SELECT 1
               FROM HSA_EXCESS_DEPOSIT HED1, DEPOSIT D1
			  WHERE HED1.DPST_ID = D1.ID AND D1.EE_ID = INEE_ID 
                AND HED1.EXCESS_LIMIT_TYPE IN
                    ('Family',
                     'Family+CatchUp',
                     'Average',
                     'Average+CatchUp',
                     'YrLastMonth',
                     'YrLastMonth+CatchUp')
                AND HED1.IS_REPORTED = 'Yes'
                AND HED1.CONTRIB_YEAR = EXTRACT(YEAR FROM SYSDATE) - 1)
        AND NOT EXISTS
      (SELECT 1
               FROM PREFERENCE_INFO PI, USER_PREFERENCE UP
              WHERE UP.PREF_ID = PI.ID
                AND PI.PREFERENCE_NAME =
                    'EXCESS_CONTRIBUTION_THRESHOLD_DONOTSHOW_FOR_YEAR'
                AND UP.EE_ID = INEE_ID
                AND UP.PREFFERED_CHOICE LIKE
                    '%' || TO_CHAR(EXTRACT(YEAR FROM SYSDATE) - 1) || '%')
        AND HED.IS_REPORTED = 'Yes'
        AND HED.CONTRIB_YEAR = EXTRACT(YEAR FROM SYSDATE) - 1
           -- 1.0.1 Start
        AND TO_DATE(COALESCE(APPUTIL_DATACACHE.GETERADMNDEMOG(INADMIN_ID,
                                                              INER_ID,
                                                              'IRS_TAX_DEADLINE',
                                                              'Yes'),
                             '04/15/' || TO_CHAR(SYSDATE, 'yyyy')),
                    'mm/dd/yyyy') >= TRUNC(SYSDATE);
                    
    RNOTIFICATION TREC_NOTIFICATION := TREC_NOTIFICATION();
  
  BEGIN
  
    BEGIN
      SELECT EL.ID
        INTO CACTIVEHSACHECK
        FROM ELECTION EL, STACK_ELECTION SE
       WHERE SE.ELCT_ID = EL.ID
         AND EL.EE_ID = INEE_ID
         AND EL.ERAC_ACTP_CD = 'HSA'
         AND (TRUNC(SYSDATE) BETWEEN SE.START_DATE AND SE.END_DATE)
         AND UPPER(EL.ENROLLMENT_STATUS) = 'ENROLLED';
    
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        CACTIVEHSACHECK := NULL;
    END;
  
    IF CACTIVEHSACHECK IS NOT NULL THEN
    
      IF TO_DATE(COALESCE(APPUTIL_DATACACHE.GETERADMNDEMOG(INADMIN_ID,
                                                           INER_ID,
                                                           'IRS_TAX_DEADLINE',
                                                           'Yes'),
                          '04/15/' || TO_CHAR(SYSDATE, 'yyyy')),
                 'mm/dd/yyyy') >= TRUNC(SYSDATE) THEN
        bPriorYrTaxDeadlineNotPassed := TRUE;
      ELSE
        bPriorYrTaxDeadlineNotPassed := FALSE;
      END IF;
    
      IF bPriorYrTaxDeadlineNotPassed THEN
        nPYExcessContribAmt := RKP_ACCOUNT_UTIL.GETEXCESSCONTRBAMT(INEE_ID,
                                                                   'PY');
        IF nPYExcessContribAmt > 0 THEN
          RNOTIFICATION.CATEGORY   := 'BLOCKER';
          RNOTIFICATION.LINK_LABEL := 'EXCESSCONTRIBPY';
        
          RNOTIFICATION.NOTE     := EXTRACT(YEAR FROM SYSDATE) - 1;
          RNOTIFICATION.TYPE     := COALESCE(ICRULETYPE, 'Alert');
          RNOTIFICATION.PRIORITY := INPRIORITY;
          OTTABNOTIFICATION.EXTEND();
          OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
        END IF;
      END IF;
    
      IF RNOTIFICATION.LINK_LABEL IS NULL THEN
        nCYExcessContribAmt := RKP_ACCOUNT_UTIL.GETEXCESSCONTRBAMT(INEE_ID,
                                                                   'CY');
      
        IF nCYExcessContribAmt > 0 THEN
          RNOTIFICATION.CATEGORY   := 'BLOCKER';
          RNOTIFICATION.LINK_LABEL := 'EXCESSCONTRIBCY';
        
          RNOTIFICATION.NOTE     := EXTRACT(YEAR FROM SYSDATE);
          RNOTIFICATION.TYPE     := COALESCE(ICRULETYPE, 'Alert');
          RNOTIFICATION.PRIORITY := INPRIORITY;
          OTTABNOTIFICATION.EXTEND();
          OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
        END IF;
      
      END IF;
    
      IF RNOTIFICATION.LINK_LABEL IS NULL THEN
     
       FOR NDUMMY IN CURHED_EXCESS_THRESHOLD_PY LOOP
       
         RNOTIFICATION.CATEGORY    := 'BLOCKER';
         RNOTIFICATION.LINK_LABEL  := 'EXCESSCONTRIBTHRESHOLDPY';
         RNOTIFICATION.NOTE        := NDUMMY.CONTRIB_YEAR;
         RNOTIFICATION.DESCRIPTION := PORTALUTIL.GETPORTALLABEL(INADMIN_ID  => INADMIN_ID,
                                                                INER_ID     => INER_ID,
                                                                ICLABEL_CD  => 'PAGEBLOCKER.EXCESSCONTRIBTHRESHOLD.BODY1',
                                                                ICPORTAL_CD => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS') ||
                                      RNOTIFICATION.NOTE || ' ' ||
                                      PORTALUTIL.GETPORTALLABEL(INADMIN_ID  => INADMIN_ID,
                                                                INER_ID     => INER_ID,
                                                                ICLABEL_CD  => 'PAGEBLOCKER.EXCESSCONTRIBTHRESHOLD.BODY2',
                                                                ICPORTAL_CD => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS');
         RNOTIFICATION.TYPE        := COALESCE(ICRULETYPE, 'Alert');
         RNOTIFICATION.PRIORITY    := INPRIORITY;
         OTTABNOTIFICATION.EXTEND();
         OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
       
         EXIT;
       END LOOP;
     
     END IF;
   
     IF RNOTIFICATION.LINK_LABEL IS NULL THEN
     
       FOR NDUMMY IN CURHED_EXCESS_THRESHOLD_CY LOOP
       
         RNOTIFICATION.CATEGORY    := 'BLOCKER';
         RNOTIFICATION.LINK_LABEL  := 'EXCESSCONTRIBTHRESHOLDCY';
         RNOTIFICATION.NOTE        := NDUMMY.CONTRIB_YEAR;
         RNOTIFICATION.DESCRIPTION := PORTALUTIL.GETPORTALLABEL(INADMIN_ID  => INADMIN_ID,
                                                                INER_ID     => INER_ID,
                                                                ICLABEL_CD  => 'PAGEBLOCKER.EXCESSCONTRIBTHRESHOLD.BODY1',
                                                                ICPORTAL_CD => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS') ||
                                      RNOTIFICATION.NOTE || ' ' ||
                                      PORTALUTIL.GETPORTALLABEL(INADMIN_ID  => INADMIN_ID,
                                                                INER_ID     => INER_ID,
                                                                ICLABEL_CD  => 'PAGEBLOCKER.EXCESSCONTRIBTHRESHOLD.BODY2',
                                                                ICPORTAL_CD => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS');
         RNOTIFICATION.TYPE        := COALESCE(ICRULETYPE, 'Alert');
         RNOTIFICATION.PRIORITY    := INPRIORITY;
         OTTABNOTIFICATION.EXTEND();
         OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
       
         EXIT;
       END LOOP;
     
     END IF;
    
    END IF;
  
  END EXCESSCONTRIBCHECK;

END GetActionNeededPortalRules3;
/
==============================================================================================================
public List<NotificationBn> getAlertsAndNotificationsList(Connection conn, long eeID, String userName,
			String ruleType) throws SystemException {

		List<NotificationBn> pageBlockersAlertsList = Collections.emptyList();
		CallableStatement cst = null;

		try {
			final StructDescriptor recDescriptor = StructDescriptor.createDescriptor("TREC_NOTIFICATION",
					DatabaseUtils.getOracleConnection(conn));
			final ResultSetMetaData metaData = recDescriptor.getMetaData();

			cst = conn.prepareCall(
					"{call GetActionNeededPortalRules3.processActionNeededPortalRules(?, ?, ?, ?, ?, ?, ?, ?, ?)}");

			cst.registerOutParameter(1, Types.VARCHAR);
			cst.registerOutParameter(2, Types.VARCHAR);
			cst.registerOutParameter(3, Types.NUMERIC);
			cst.registerOutParameter(4, Types.VARCHAR);
			cst.registerOutParameter(5, Types.VARCHAR);
			cst.registerOutParameter(6, Types.ARRAY, "TTAB_NOTIFICATION");
			cst.setLong(7, eeID);
			cst.setString(8, ruleType);
			cst.setString(9, userName);

			cst.execute();

			if ("OK".equalsIgnoreCase(ConversionUtil.stringNoNull(cst.getString(1)))) {
				Object[] data = (Object[]) ((Array) cst.getObject(6)).getArray();

				pageBlockersAlertsList = createNotificationsList(data, metaData);
			} else {
				throw new SystemException(
						"GetActionNeededPortalRules3.processActionNeededPortalRules procedure didn't completed successfully");
			}

		} catch (SQLException ex) {
			throw new SystemException(ex);
		} finally {
			DatabaseUtils.closeQuietly(cst);
		}

		return pageBlockersAlertsList;

	}
