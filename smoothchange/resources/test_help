
package com.acclaris.transactions.bo;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.when;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import com.acclaris.accounts.api.bean.AccountCommonSettings;
import com.acclaris.accounts.api.bo.AccountDetailsService;
import com.acclaris.accounts.api.bo.FormsDetailsService;
import com.acclaris.accounts.api.dao.AccountDetailsDAO;
import com.acclaris.accounts.api.dto.AccountDTO;
import com.acclaris.accounts.api.dto.ActivityBreakdownDTO;
import com.acclaris.accounts.api.dto.DocumentDTO;
import com.acclaris.accounts.api.enums.AccountActivitySource;
import com.acclaris.accounts.api.enums.ClaimStatus;
import com.acclaris.card.dao.CardMgmtDAO;
import com.acclaris.common.bean.UserDetailsBn;
import com.acclaris.common.dao.CommonAccountDAO;
import com.acclaris.common.dao.ConfigDAO;
import com.acclaris.common.dao.UserDAO;
import com.acclaris.common.enums.DateIncrementUnits;
import com.acclaris.common.enums.TransactionType;
import com.acclaris.common.exceptions.SystemException;
import com.acclaris.common.util.ConfigUtil;
import com.acclaris.common.util.ConversionUtil;
import com.acclaris.common.util.DateUtil;
import com.acclaris.common.util.EncryptDecryptUtil;
import com.acclaris.common.util.ValidationUtil;
import com.acclaris.database.connection.DatabaseService;
import com.acclaris.image.api.bo.ImageDetailService;
import com.acclaris.image.api.dao.ImageDAO;
import com.acclaris.label.api.bo.LabelService;
import com.acclaris.logger.impl.AcclarisLogger;
import com.acclaris.logger.impl.Module;
import com.acclaris.payments.bo.PaymentsBO;
import com.acclaris.payments.dto.PaymentDetailDTO;
import com.acclaris.profile.api.bo.DependentsBO;
import com.acclaris.profile.api.dao.ServiceProviderDAO;
import com.acclaris.receipt.api.dao.ReceiptDetailsDAO;
import com.acclaris.receipt.api.dto.ReceiptDTO;
import com.acclaris.supportutility.api.bo.SupportUtilService;
import com.acclaris.transactions.dao.ClaimTransactionDAO;
import com.acclaris.transactions.dto.RecoveryDetailDTO;
import com.acclaris.transactions.dto.TransactionBreakdownDTO;
import com.acclaris.transactions.dto.TransactionDetailsDTO;
import com.acclaris.transactions.dto.TransactionTimelineDTO;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ EncryptDecryptUtil.class, ConfigDAO.class, UserDAO.class, ConversionUtil.class, ConfigUtil.class,
		CommonAccountDAO.class, DateUtil.class })
public class TestClaimTransaction {

	private static final AcclarisLogger LOGGER = AcclarisLogger.getLogger(Module.GEN3_PAYMENTS);
	private static final String DATE_FORMAT_WITH_FORWARD_SLASH = "MM/dd/yyyy";
	private static final String TIMESTAMP_FORMAT_WITH_FORWARD_SLASH = "MM/dd/yyyy HH:mm:ss";

	@InjectMocks
	ClaimTransaction claimTransaction;

	@Mock
	DatabaseService database;

	@Mock
	ClaimTransactionDAO claimTransactionDAO;

	@Mock
	CardMgmtDAO cardMgmtDAO;

	@Mock
	private ImageDetailService mockImageDetailService;

	@Mock
	private ReceiptDetailsDAO mockreceiptDetailsDAO;

	@Mock
	private DependentsBO mockprofileDependentsBO;

	@Mock
	private ImageDAO mockImageDao;

	@Mock
	private AccountDetailsDAO mockAccountDetailsDAO;

	@Mock
	private ServiceProviderDAO mockServiceProviderDAO;

	@Mock
	PaymentsBO paymentsBO;

	@Mock
	SupportUtilService supportUtilService;

	@Mock
	private AccountDetailsService accountDetailsService;

	@Mock
	private FormsDetailsService formsDetailsService;

	@Mock
	private LabelService mockLabelService;

	/*
	 * @Mock Splitter splitter;
	 */

	Connection conn = null;

	@Before
	public void setUpMock() throws Exception {

		LOGGER.info("########### Mock setUp started ###########");

		MockitoAnnotations.initMocks(this);
		conn = Mockito.mock(Connection.class);
		Mockito.when(database.getDBConnection()).thenReturn(conn);
		PowerMockito.mockStatic(EncryptDecryptUtil.class);
		PowerMockito.mockStatic(ConfigDAO.class);
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(CommonAccountDAO.class);
	}

	@Test
	public void testGetTransactionBreakdownNoSourceId() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = claimTransaction.getTransactionBreakdown(null, null,
					userDetailsBn, "No", null);
			Assert.assertTrue("testGetTransactionBreakdownNoSourceId success", transactionBreakdownDTO == null);
		} catch (SystemException e) {
			Assert.fail("testGetTransactionBreakdownNoSourceId fail with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownSqlException() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenThrow(new SQLException());
			claimTransaction.getTransactionBreakdown("23234234", AccountActivitySource.CLAIMS.getSource(),
					userDetailsBn, "No", "12345");
		} catch (SystemException e) {
			Assert.assertTrue("testGetTransactionBreakdownSqlException success", true);
		} catch (Exception e) {
			Assert.fail("testGetTransactionBreakdownSqlException faild with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownSuccess() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDown();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);
			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");
			Assert.assertTrue("testGetTransactionBreakdownSuccess success",
					null != transactionBreakdown.getAccountTypeCd());
			Assert.assertTrue("testGetTransactionBreakdownSuccess success", null != transactionBreakdown.getAmount());
			Assert.assertTrue("testGetTransactionBreakdownSuccess success", 0 != transactionBreakdown.getElectionId());
			Assert.assertTrue("testGetTransactionBreakdownSuccess success", null != transactionBreakdown.getTotalAmt());
		} catch (Exception e) {
			fail("### testGetTransactionBreakdownSuccess ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownWithRecoveryDetialsSuccess() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownWithRecoveryDetail();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);

			Mockito.when(claimTransactionDAO.isEmployerCollectionRecoveryExistForClaim(Mockito.any(Connection.class),
					Mockito.anyLong())).thenReturn(true);

			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");

			Assert.assertTrue("testGetTransactionBreakdownWithRecoveryDetialsSuccess success",
					null != transactionBreakdown.getAccountTypeCd());
			Assert.assertTrue("testGetTransactionBreakdownWithRecoveryDetialsSuccess success",
					null != transactionBreakdown.getAmount());
			Assert.assertTrue("testGetTransactionBreakdownWithRecoveryDetialsSuccess success",
					0 != transactionBreakdown.getElectionId());
			Assert.assertTrue("testGetTransactionBreakdownWithRecoveryDetialsSuccess success",
					null != transactionBreakdown.getTotalAmt());

			Assert.assertTrue("testGetTransactionBreakdownWithRecoveryDetialsSuccess success",
					!ValidationUtil.isNull(transactionBreakdown.getTransactionList().get(0).getRecoveryDetailList()));

			Assert.assertTrue("testGetTransactionBreakdownWithRecoveryDetialsSuccess success", transactionBreakdown
					.getTransactionList().get(0).getRecoveryDetailList().get(0).getAmt().equals("43.00"));
			Assert.assertTrue("testGetTransactionBreakdownWithRecoveryDetialsSuccess success", transactionBreakdown
					.getTransactionList().get(0).getRecoveryDetailList().get(0).getRecoveryType().equals("OFFSET"));

			Assert.assertTrue("testGetTransactionBreakdownWithRecoveryDetialsSuccess success", transactionBreakdown
					.getTransactionList().get(0).getRecoveryDetailList().get(0).getRecoveryIds()
					.equals("254674,254675,254676,254677,254678,254679,254680,254681,254682,254683,254684,254685"));

			Assert.assertTrue("testGetTransactionBreakdownWithRecoveryDetialsSuccess success",
					transactionBreakdown.isHasEmployerCollectionSetUp());

		} catch (Exception e) {
			fail("### testGetTransactionBreakdownWithRecoveryDetialsSuccess ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownWithRecoveryDetialsWithSqlException() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownWithRecoveryDetail();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);

			Mockito.when(claimTransactionDAO.isEmployerCollectionRecoveryExistForClaim(Mockito.any(Connection.class),
					Mockito.anyLong())).thenThrow(new SQLException());

			claimTransaction.getTransactionBreakdown("23234234", AccountActivitySource.CLAIMS.getSource(),
					userDetailsBn, "No", "12345");

			Assert.fail("testGetTransactionBreakdownWithRecoveryDetialsWithSqlException");

		} catch (SystemException se) {
			assertTrue("testGetTransactionBreakdownWithRecoveryDetialsWithSqlException ", true);
		} catch (Exception e) {
			fail("### testGetTransactionBreakdownWithRecoveryDetialsSuccess ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionPaymentDetailsNoSourceId() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			List<PaymentDetailDTO> paymentDetailsList = claimTransaction.getTransactionPaymentDetails("", "",
					userDetailsBn, "No", "");
			Assert.assertTrue("testGetTransactionPaymentDetailsNoSourceId", paymentDetailsList.isEmpty());
		} catch (Exception e) {
			fail("testGetTransactionPaymentDetailsNoSourceId fail  With the following error " + getStackTrace(e));
		}

	}

	@Test
	public void testGetTransactionPaymentDetailsSuccess() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			List<PaymentDetailDTO> paymentDetailList = getPaymentDetailList();
			Mockito.when(paymentsBO.getPaymentDetails(Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString(),Mockito.anyString())).thenReturn(paymentDetailList);
			List<PaymentDetailDTO> paymentDetailsList = claimTransaction.getTransactionPaymentDetails("54268545",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "");
			Assert.assertFalse("testGetTransactionPaymentDetailsSuccess", paymentDetailsList.isEmpty());
			Assert.assertTrue("testGetTransactionPaymentDetailsSuccess",
					null != paymentDetailsList.get(0).getActivityDate());
			Assert.assertTrue("testGetTransactionPaymentDetailsSuccess",
					null != paymentDetailsList.get(0).getBankAccountNo());
			Assert.assertTrue("testGetTransactionPaymentDetailsSuccess",
					null != paymentDetailsList.get(0).getDisplayBankAccountNo());
			Assert.assertTrue("testGetTransactionPaymentDetailsSuccess",
					null != paymentDetailsList.get(0).getActivityDate());
			Assert.assertTrue("testGetTransactionPaymentDetailsSuccess", null != paymentDetailsList.get(0).getStatus());
		} catch (Exception e) {
			fail("testGetTransactionPaymentDetailsSuccess fail  With the following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionTimelineDetailsSuccess() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			List<TransactionTimelineDTO> timeLineDetailList = getTransactiontimelineDto();
			Mockito.when(claimTransactionDAO.getClaimTimelineActivityDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn(timeLineDetailList);
			List<TransactionTimelineDTO> timelineDetailsList = claimTransaction.getTransactionTimeline("118971317",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");
			Assert.assertFalse("testGetTransactionTimelineDetailsSuccess", timelineDetailsList.isEmpty());
			Assert.assertTrue("testGetTransactionTimelineDetailsSuccess",
					null != timelineDetailsList.get(0).getActivityDate());
			Assert.assertTrue("testGetTransactionTimelineDetailsSuccess",
					null != timelineDetailsList.get(0).getActivityStatus());
			Assert.assertTrue("testGetTransactionTimelineDetailsSuccess",
					null != timelineDetailsList.get(0).getIsClmReprocessed());
			Assert.assertTrue("testGetTransactionTimelineDetailsSuccess",
					null != timelineDetailsList.get(0).getClaimStatus());
		} catch (Exception e) {
			fail("testGetTransactionTimelineDetailsSuccess fail  With the following error " + getStackTrace(e));
		}
	}

	@After
	public void tearDown() {
		database = null;
		claimTransaction = null;
		paymentsBO = null;
		conn = null;
		Assert.assertNull(database);
		Assert.assertNull(claimTransaction);
		Assert.assertNull(conn);
		Assert.assertNull(paymentsBO);
	}

	private UserDetailsBn getUserDetailBn() {
		UserDetailsBn userDetailsBn = new UserDetailsBn();
		userDetailsBn.setId(1058136L);
		userDetailsBn.setAdmnID(1000160L);
		userDetailsBn.setEeID(6131704L);
		userDetailsBn.setErID(1011035L);
		userDetailsBn.setUserType("AP");
		userDetailsBn.setName("Test User");
		return userDetailsBn;
	}

	private TransactionBreakdownDTO getTransactionBreakDown() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");
		return transactionBreakdown;
	}

	private TransactionBreakdownDTO getTransactionBreakDownWithRecoveryDetail() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");
		transactionBreakdown.setStatus("Recovered");

		List<RecoveryDetailDTO> recoveryDetailList = new ArrayList<>();
		RecoveryDetailDTO recoveryDetailDTO = new RecoveryDetailDTO();
		recoveryDetailDTO.setAmt("43.00");
		recoveryDetailDTO.setRecoveryType("OFFSET");
		recoveryDetailDTO
				.setRecoveryIds("254674,254675,254676,254677,254678,254679,254680,254681,254682,254683,254684,254685");
		recoveryDetailList.add(recoveryDetailDTO);

		TransactionBreakdownDTO transactionBreakdownDTO = new TransactionBreakdownDTO();
		transactionBreakdownDTO.setAccountTypeCd("HSA");
		transactionBreakdownDTO.setAmount("2422.00");
		transactionBreakdownDTO.setElectionId(255);
		transactionBreakdownDTO.setTotalAmt("2422.00");
		transactionBreakdownDTO.setStatus("Recovered");
		transactionBreakdownDTO.setStatusLabel("Recovered");
		transactionBreakdownDTO.setRecoveryDetailList(recoveryDetailList);

		List<TransactionBreakdownDTO> transactionBreakdownDTOList = new ArrayList<>();
		transactionBreakdownDTOList.add(transactionBreakdownDTO);

		transactionBreakdown.setTransactionList(transactionBreakdownDTOList);

		return transactionBreakdown;
	}

	private List<PaymentDetailDTO> getPaymentDetailList() {
		PaymentDetailDTO paymentDetailDTO = getPaymentDetailDto();
		List<PaymentDetailDTO> paymentDetailList = new ArrayList<>();
		paymentDetailList.add(paymentDetailDTO);
		return paymentDetailList;
	}

	private PaymentDetailDTO getPaymentDetailDto() {
		PaymentDetailDTO paymentDetailDTO = new PaymentDetailDTO();
		paymentDetailDTO.setBankAccountNo("4102101888316");
		paymentDetailDTO.setDisplayBankAccountNo("88316");
		paymentDetailDTO.setActivityDate("07/19/2018");
		paymentDetailDTO.setPaymentType("Direct Deposit");
		paymentDetailDTO.setStatus("DEPOSITED");
		return paymentDetailDTO;
	}

	private List<TransactionTimelineDTO> getTransactiontimelineDto() {
		TransactionTimelineDTO timelineDTO = new TransactionTimelineDTO();
		List<TransactionTimelineDTO> timelineListDTO = new ArrayList<>();
		timelineDTO.setActivityStatus("Expense Submitted");
		timelineDTO.setActivityDate("02/11/2009");
		timelineDTO.setClaimID("118971317");
		timelineDTO.setSubmitClaimId("12345678");
		timelineDTO.setClaimBatchID("23064270");
		timelineDTO.setClaimStatus("Denied");
		timelineDTO.setIsClmReprocessed("Yes");

		TransactionTimelineDTO timelineDTO1 = new TransactionTimelineDTO();
		timelineDTO1.setActivityStatus("On Hold");
		timelineDTO1.setActivityDate("02/11/2009");
		timelineDTO1.setClaimID("118971317");
		timelineDTO1.setSubmitClaimId("12345678");
		timelineDTO1.setClaimBatchID("23064270");
		timelineDTO1.setClaimStatus("Denied");
		timelineDTO1.setIsClmReprocessed("Yes");
		timelineDTO1.setNotes("Lumpsum");

		TransactionTimelineDTO timelineDTO2 = new TransactionTimelineDTO();
		timelineDTO2.setActivityStatus("Approved");
		timelineDTO2.setActivityDate("02/11/2009");
		timelineDTO2.setClaimID("118971317");
		timelineDTO2.setSubmitClaimId("12345678");
		timelineDTO2.setClaimBatchID("23064270");
		timelineDTO2.setClaimStatus("Denied");
		timelineDTO2.setIsClmReprocessed("Yes");

		timelineListDTO.add(timelineDTO);
		timelineListDTO.add(timelineDTO1);
		timelineListDTO.add(timelineDTO2);
		return timelineListDTO;
	}

	@Test
	public void testGetClaimActivityCardDetails() {

		try {
			UserDetailsBn userDtlsBn = getUserDetailBn();
			userDtlsBn.setJRAAccount(true);

			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");

			TransactionDetailsDTO mockClaimActivityDtls = getMockAcctActivityCardDetails();

			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);

			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("HSA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");

			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);

			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("180");

			TransactionDetailsDTO claimActivityDtls = claimTransaction.getTransactionDetails("119993190",
					AccountActivitySource.CLAIMS.getSource(), userDtlsBn, "No", "12345");

			assertTrue("Claim Category Validation Successful",
					"Debit Card".equalsIgnoreCase(claimActivityDtls.getCategory()));
			assertTrue("Date Of Service Validation Successful",
					"08/16/2017".equalsIgnoreCase(claimActivityDtls.getServiceBeginDate()));

			assertTrue("Provider name Validation Successful",
					"EXCESS CONTRIBUTION RETURN".equalsIgnoreCase(claimActivityDtls.getProvider()));
			assertTrue("Method of Claim Validation Successful",
					"Online".equalsIgnoreCase(claimActivityDtls.getMethod()));
			assertTrue("Check denied claim expiry days value", claimActivityDtls.getDeniedClmExpiryDays() == 180);

		} catch (Exception e) {
			fail("### testAcctActivityCardDetails ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClmActivityCardDtlsWhenSingleScheduledhClaimPresnt_JRA() {

		try {
			UserDetailsBn userDtlsBn = getUserDetailBn();
			userDtlsBn.setJRAAccount(true);

			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");

			TransactionDetailsDTO mockClaimActivityDtls = new TransactionDetailsDTO();
			mockClaimActivityDtls.setPremiumOccurenceType("Recurring");
			String firstDateOfMonth = DateUtil.getFirstDateOfTheMonth(DateUtil.getCurrentDateTimeAsFormat("yyyy/MM/dd"),
					"yyyy/MM/dd");
			String lastDateOfMonth = DateUtil.getLastDayOfMonth(DateUtil.getCurrentDateTimeAsFormat("yyyy/MM/dd"),
					"yyyy/MM/dd");
			String formattedLastDate = DateUtil.getFormattedDate(lastDateOfMonth, "yyyy/MM/dd", "yyyy/MM/dd");
			mockClaimActivityDtls.setServiceBeginDate(
					DateUtil.getFutureDate(firstDateOfMonth, "yyyy/MM/dd", DateIncrementUnits.MONTHS, 1));
			mockClaimActivityDtls.setServiceEndDate(
					DateUtil.getPastDate(formattedLastDate, "yyyy/MM/dd", DateIncrementUnits.MONTHS, 1));
			mockClaimActivityDtls.setStatus("Processing Scheduled");
			mockClaimActivityDtls.setAmount("5");

			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);

			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("RHRA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");

			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);

			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("180");

			TransactionDetailsDTO claimActivityDtls = claimTransaction.getTransactionDetails("119993190",
					AccountActivitySource.CLAIMS.getSource(), userDtlsBn, "No", "12345");

			assertTrue("Cancel scheduled payment - Validation Successful",
					claimActivityDtls.isWillShowCancelScheduledPayment());
		} catch (Exception e) {
			fail("### testGetClmActivityCardDtlsWhenSingleScheduledhClaimPresnt_JRA ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimActivityCardDetails_WithCancelScheduledPayments() {

		try {
			UserDetailsBn userDtlsBn = getUserDetailBn();
			userDtlsBn.setJRAAccount(true);

			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");

			TransactionDetailsDTO mockClaimActivityDtls = getMockAcctActivityCardDetails();

			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);

			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("HSA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");

			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);

			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("180");

			TransactionDetailsDTO claimActivityDtls = claimTransaction.getTransactionDetails("119993190",
					AccountActivitySource.CLAIMS.getSource(), userDtlsBn, "No", "12345");

			assertTrue("Cancel scheduled payment - Validation Successful",
					claimActivityDtls.isWillShowCancelScheduledPayment());
		} catch (Exception e) {
			fail("### testGetClaimActivityCardDetails_WithCancelScheduledPayments ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimActivityCardDetailsOverPaymentWithDocumentList() {

		try {

			UserDetailsBn userDtlsBn = getUserDetailBn();
			userDtlsBn.setJRAAccount(true);

			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");

			Map<String, Map<String, String>> mailAddress = new HashMap<>();

			Map<String, String> checkMailAddress = new HashMap<>();
			Map<String, String> receiptMailAddress = new HashMap<>();

			checkMailAddress.put("ADDR_LINE1", "ADDR_LINE1");
			receiptMailAddress.put("ADDR_LINE1", "ADDR_LINE1");

			mailAddress.put("receiptMailAddress", receiptMailAddress);
			mailAddress.put("checkMailAddress", checkMailAddress);

			DocumentDTO documentDTO = new DocumentDTO();
			documentDTO.setUrl(
					"https://documents.viabenefits.com/payment-instructions/Payment%20Instructions%20for%20Overpayments%20-%20retiree.pdf");
			List<DocumentDTO> listDoc = new ArrayList<>();
			listDoc.add(documentDTO);

			TransactionDetailsDTO mockClaimActivityDtls = getMockAcctActivityCardDetailsForOverpayment();

			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);
			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("HSA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");
			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);
			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("180");
			PowerMockito
					.when(UserDAO.getContactInfo(Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyString(),
							Mockito.anyString()))
					.thenReturn("ADDR_LINE1, ADDR_LINE2, ADDR_LINE3, ADDR_CITY, ADDR_STATE, ADDR_ZIP");
			when(formsDetailsService.getDocumentsList(Mockito.any(UserDetailsBn.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(listDoc);
			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(receiptMailAddress);

			TransactionDetailsDTO claimActivityDtls = claimTransaction.getTransactionDetails("119993190",
					AccountActivitySource.CLAIMS.getSource(), userDtlsBn, "No", "12345");

			assertTrue("testGetClaimActivityCardDetailsOverPayment",
					"Debit Card".equalsIgnoreCase(claimActivityDtls.getCategory()));
			assertTrue("testGetClaimActivityCardDetailsOverPayment",
					"08/16/2017".equalsIgnoreCase(claimActivityDtls.getServiceBeginDate()));

			assertTrue("testGetClaimActivityCardDetailsOverPayment",
					"EXCESS CONTRIBUTION RETURN".equalsIgnoreCase(claimActivityDtls.getProvider()));
			assertTrue("testGetClaimActivityCardDetailsOverPayment",
					"Online".equalsIgnoreCase(claimActivityDtls.getMethod()));
			assertTrue("testGetClaimActivityCardDetailsOverPayment", claimActivityDtls.getDeniedClmExpiryDays() == 180);
			assertTrue("testGetClaimActivityCardDetailsOverPayment",
					!ValidationUtil.isNull(claimActivityDtls.getResolveIssueInfo().getRepaymentSlipUrl()));

		} catch (Exception e) {
			fail("### testGetClaimActivityCardDetailsOverPayment ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimActivityCardDetailsOverPaymentNoDocumentList() {

		try {

			UserDetailsBn userDtlsBn = getUserDetailBn();
			userDtlsBn.setJRAAccount(true);

			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");

			Map<String, Map<String, String>> mailAddress = new HashMap<>();

			Map<String, String> checkMailAddress = new HashMap<>();
			Map<String, String> receiptMailAddress = new HashMap<>();

			checkMailAddress.put("ADDR_LINE1", "ADDR_LINE1");
			receiptMailAddress.put("ADDR_LINE1", "ADDR_LINE1");

			mailAddress.put("receiptMailAddress", receiptMailAddress);
			mailAddress.put("checkMailAddress", checkMailAddress);

			TransactionDetailsDTO mockClaimActivityDtls = getMockAcctActivityCardDetailsForOverpayment();

			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);
			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("HSA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");
			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);
			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("180");
			PowerMockito
					.when(UserDAO.getContactInfo(Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyString(),
							Mockito.anyString()))
					.thenReturn("ADDR_LINE1, ADDR_LINE2, ADDR_LINE3, ADDR_CITY, ADDR_STATE, ADDR_ZIP");
			when(formsDetailsService.getDocumentsList(Mockito.any(UserDetailsBn.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(null);
			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(receiptMailAddress);

			TransactionDetailsDTO claimActivityDtls = claimTransaction.getTransactionDetails("119993190",
					AccountActivitySource.CLAIMS.getSource(), userDtlsBn, "No", "12345");

			assertTrue("testGetClaimActivityCardDetailsOverPaymentNoDocumentList",
					"Debit Card".equalsIgnoreCase(claimActivityDtls.getCategory()));
			assertTrue("testGetClaimActivityCardDetailsOverPaymentNoDocumentList",
					"08/16/2017".equalsIgnoreCase(claimActivityDtls.getServiceBeginDate()));

			assertTrue("testGetClaimActivityCardDetailsOverPaymentNoDocumentList",
					"EXCESS CONTRIBUTION RETURN".equalsIgnoreCase(claimActivityDtls.getProvider()));
			assertTrue("testGetClaimActivityCardDetailsOverPaymentNoDocumentList",
					"Online".equalsIgnoreCase(claimActivityDtls.getMethod()));
			assertTrue("testGetClaimActivityCardDetailsOverPaymentNoDocumentList",
					claimActivityDtls.getDeniedClmExpiryDays() == 180);
			assertTrue("testGetClaimActivityCardDetailsOverPaymentNoDocumentList",
					ValidationUtil.isNull(claimActivityDtls.getResolveIssueInfo().getRepaymentSlipUrl()));

		} catch (Exception e) {
			fail("### testGetClaimActivityCardDetailsOverPaymentNoDocumentList ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimActivityCardDetailsDeniedClmExpiryNotSet() {

		try {
			UserDetailsBn userDtlsBn = getUserDetailBn();

			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");

			TransactionDetailsDTO mockClaimActivityDtls = getMockAcctActivityCardDetails();

			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);

			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("HSA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");

			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);

			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("");

			TransactionDetailsDTO claimActivityDtls = claimTransaction.getTransactionDetails("119993190",
					AccountActivitySource.CLAIMS.getSource(), userDtlsBn, "No", "12345");

			assertTrue("Claim Category Validation Successful",
					"Debit Card".equalsIgnoreCase(claimActivityDtls.getCategory()));
			assertTrue("Date Of Service Validation Successful",
					"08/16/2017".equalsIgnoreCase(claimActivityDtls.getServiceBeginDate()));

			assertTrue("Provider name Validation Successful",
					"EXCESS CONTRIBUTION RETURN".equalsIgnoreCase(claimActivityDtls.getProvider()));
			assertTrue("Method of Claim Validation Successful",
					"Online".equalsIgnoreCase(claimActivityDtls.getMethod()));

			assertTrue("Check denied claim expiry days value", claimActivityDtls.getDeniedClmExpiryDays() == 180);

		} catch (Exception e) {
			fail("### testGetClaimActivityCardDetailsDeniedClmExpiryNotSet ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimActivityCardDetailsForDCRA() {
		try {
			UserDetailsBn userDtlsBn = getUserDetailBn();

			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");

			TransactionDetailsDTO mockClaimActivityDtls = getMockAcctActivityCardDetails();
			mockClaimActivityDtls.setIndividualServiced("ABC");

			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);

			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("DCRA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");

			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);

			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("180");

			claimTransaction.getTransactionDetails("119993190", AccountActivitySource.CLAIMS.getSource(), userDtlsBn,
					"No", "12345");
			assertTrue("Claim Category Validation Successful",
					"Debit Card".equalsIgnoreCase(mockClaimActivityDtls.getCategory()));
			assertTrue("Date Of Service Validation Successful",
					"08/16/2017".equalsIgnoreCase(mockClaimActivityDtls.getServiceBeginDate()));

			assertTrue("Provider name Validation Successful",
					"EXCESS CONTRIBUTION RETURN".equalsIgnoreCase(mockClaimActivityDtls.getProvider()));
			assertTrue("Method of Claim Validation Successful",
					"Online".equalsIgnoreCase(mockClaimActivityDtls.getMethod()));

		} catch (Exception e) {
			fail("### testGetClaimActivityCardDetailsForDCRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testSaveDpndtAsServicedIndividual() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.when(EncryptDecryptUtil.decodeAndPellucidate(Mockito.anyString())).thenReturn("869585");
			claimTransaction.saveDpndtAsServicedIndividual("120001140", "MUVCKXREIARUKO3EER7DEJKAGAXDSOA=",
					userDetailsBn);
			Mockito.verify(claimTransactionDAO, Mockito.times(1)).updateDpdnt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.anyString());
		} catch (Exception e) {
			fail("### testSaveDpndtAsServicedIndividual ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test(expected = com.acclaris.common.exceptions.SystemException.class)
	public void testSaveDpndtAsServicedIndividualWhenSQLErrOccurred() throws SQLException, SystemException {
		UserDetailsBn userDetailsBn = getUserDetailBn();
		PowerMockito.when(EncryptDecryptUtil.decodeAndPellucidate(Mockito.anyString())).thenReturn("869585");
		PowerMockito.doThrow(new SQLException()).when(claimTransactionDAO).updateDpdnt(Mockito.any(Connection.class),
				Mockito.anyString(), Mockito.anyString());
		claimTransaction.saveDpndtAsServicedIndividual("120001140", "MUVCKXREIARUKO3EER7DEJKAGAXDSOA=", userDetailsBn);
	}

	private TransactionDetailsDTO getMockAcctActivityCardDetails() throws SystemException {
		TransactionDetailsDTO acctActivityDTO = new TransactionDetailsDTO();
		acctActivityDTO.setCategory("Debit Card");
		acctActivityDTO.setStatus("Paid");
		acctActivityDTO.setServiceBeginDate(("08/16/2017"));
		acctActivityDTO.setTransactionID("119993190");
		acctActivityDTO.setProvider("EXCESS CONTRIBUTION RETURN");
		acctActivityDTO.setMethod("Online");
		acctActivityDTO.setAppealStatus("Appealed");
		acctActivityDTO.setAppealReviewedBy("Test Reviewer");
		acctActivityDTO.setClaimSubmittedBy("System");
		acctActivityDTO.setAmount("12");

		ActivityBreakdownDTO activityBreakdownDTO = new ActivityBreakdownDTO();
		activityBreakdownDTO.setClaimId("120005294");
		activityBreakdownDTO.setSubmitClaimId("120005294");
		activityBreakdownDTO.setAccountType("PHRA");
		activityBreakdownDTO.setElctId("14480734");
		activityBreakdownDTO.setAmount("100");
		activityBreakdownDTO.setCategory("Medical");
		activityBreakdownDTO.setType("PREMIUM");
		activityBreakdownDTO.setStatus("Processing Payment");
		activityBreakdownDTO.setStatusInfo("");
		activityBreakdownDTO.setClmbtId("24788160");
		activityBreakdownDTO.setClmBtType("Pass Thru");
		activityBreakdownDTO.setServiceBeginDate("01/01/2019");
		activityBreakdownDTO.setServiceEndDate("01/31/2019");
		activityBreakdownDTO.setActivityDate("01/17/2019");
		activityBreakdownDTO.setProvider("TEST");
		activityBreakdownDTO.setExpectedPymtDate(null);

		ActivityBreakdownDTO activityBreakdownDTO1 = new ActivityBreakdownDTO();
		activityBreakdownDTO1.setClaimId("120005295");
		activityBreakdownDTO1.setSubmitClaimId("120005294");
		activityBreakdownDTO1.setAccountType("PHRA");
		activityBreakdownDTO1.setElctId("14480734");
		activityBreakdownDTO1.setAmount("100");
		activityBreakdownDTO1.setCategory("Medical");
		activityBreakdownDTO1.setType("PREMIUM");
		activityBreakdownDTO1.setStatus("Processing Scheduled");
		activityBreakdownDTO1.setStatusInfo("");
		activityBreakdownDTO1.setClmbtId("24788160");
		activityBreakdownDTO1.setClmBtType("Pass Thru");
		String firstDateOfMonth = DateUtil.getFirstDateOfTheMonth(
				DateUtil.getCurrentDateTimeAsFormat(DATE_FORMAT_WITH_FORWARD_SLASH), DATE_FORMAT_WITH_FORWARD_SLASH);
		String lastDateOfMonth = DateUtil.getLastDayOfMonth(
				DateUtil.getCurrentDateTimeAsFormat(DATE_FORMAT_WITH_FORWARD_SLASH), DATE_FORMAT_WITH_FORWARD_SLASH);
		String formattedLastDate = DateUtil.getFormattedDate(lastDateOfMonth, TIMESTAMP_FORMAT_WITH_FORWARD_SLASH,
				DATE_FORMAT_WITH_FORWARD_SLASH);
		activityBreakdownDTO1.setServiceBeginDate(
				DateUtil.getFutureDate(firstDateOfMonth, DATE_FORMAT_WITH_FORWARD_SLASH, DateIncrementUnits.MONTHS, 1));
		activityBreakdownDTO1.setServiceEndDate(
				DateUtil.getPastDate(formattedLastDate, DATE_FORMAT_WITH_FORWARD_SLASH, DateIncrementUnits.MONTHS, 1));
		activityBreakdownDTO1.setActivityDate("01/17/2019");
		activityBreakdownDTO1.setProvider("TEST");
		activityBreakdownDTO1.setExpectedPymtDate(null);

		ActivityBreakdownDTO activityBreakdownDTO2 = new ActivityBreakdownDTO();
		activityBreakdownDTO2.setClaimId("120005295");
		activityBreakdownDTO2.setSubmitClaimId("120005294");
		activityBreakdownDTO2.setAccountType("PHRA");
		activityBreakdownDTO2.setElctId("14480734");
		activityBreakdownDTO2.setAmount("100");
		activityBreakdownDTO2.setCategory("Medical");
		activityBreakdownDTO2.setType("PREMIUM");
		activityBreakdownDTO2.setStatus("On Hold");
		activityBreakdownDTO2.setStatusInfo("");
		activityBreakdownDTO2.setClmbtId("24788160");
		activityBreakdownDTO2.setClmBtType("Pass Thru");
		activityBreakdownDTO2.setServiceBeginDate("02/01/2019");
		activityBreakdownDTO2.setServiceEndDate("02/31/2019");
		activityBreakdownDTO2.setActivityDate("01/17/2019");
		activityBreakdownDTO2.setProvider("TEST");
		activityBreakdownDTO2.setExpectedPymtDate(null);

		List<ActivityBreakdownDTO> activityBreakdownDetails = new ArrayList<>();
		activityBreakdownDetails.add(activityBreakdownDTO);
		activityBreakdownDetails.add(activityBreakdownDTO1);
		activityBreakdownDetails.add(activityBreakdownDTO2);

		acctActivityDTO.setActivityBreakdownDetails(activityBreakdownDetails);
		acctActivityDTO.setInstallments(12);
		acctActivityDTO.setPremiumOccurenceType("Recurring");

		return acctActivityDTO;
	}

	private TransactionDetailsDTO getMockAcctActivityCardDetailsForOverpayment() {
		TransactionDetailsDTO acctActivityDTO = new TransactionDetailsDTO();
		acctActivityDTO.setCategory("Debit Card");
		acctActivityDTO.setStatus("Overpayment");
		acctActivityDTO.setServiceBeginDate(("08/16/2017"));
		acctActivityDTO.setTransactionID("119993190");
		acctActivityDTO.setProvider("EXCESS CONTRIBUTION RETURN");
		acctActivityDTO.setMethod("Online");
		acctActivityDTO.setAppealStatus("Appealed");
		acctActivityDTO.setAppealReviewedBy("Test Reviewer");
		acctActivityDTO.setClaimSubmittedBy("System");
		acctActivityDTO.setAmount("12");

		ActivityBreakdownDTO activityBreakdownDTO = new ActivityBreakdownDTO();
		activityBreakdownDTO.setClaimId("120005294");
		activityBreakdownDTO.setSubmitClaimId("120005294");
		activityBreakdownDTO.setAccountType("PHRA");
		activityBreakdownDTO.setElctId("14480734");
		activityBreakdownDTO.setAmount("100");
		activityBreakdownDTO.setCategory("Medical");
		activityBreakdownDTO.setType("PREMIUM");
		activityBreakdownDTO.setStatus("Processing Payment");
		activityBreakdownDTO.setStatusInfo("");
		activityBreakdownDTO.setClmbtId("24788160");
		activityBreakdownDTO.setClmBtType("Pass Thru");
		activityBreakdownDTO.setServiceBeginDate("01/01/2019");
		activityBreakdownDTO.setServiceEndDate("01/31/2019");
		activityBreakdownDTO.setActivityDate("01/17/2019");
		activityBreakdownDTO.setProvider("TEST");
		activityBreakdownDTO.setExpectedPymtDate(null);

		ActivityBreakdownDTO activityBreakdownDTO1 = new ActivityBreakdownDTO();
		activityBreakdownDTO1.setClaimId("120005295");
		activityBreakdownDTO1.setSubmitClaimId("120005294");
		activityBreakdownDTO1.setAccountType("PHRA");
		activityBreakdownDTO1.setElctId("14480734");
		activityBreakdownDTO1.setAmount("100");
		activityBreakdownDTO1.setCategory("Medical");
		activityBreakdownDTO1.setType("PREMIUM");
		activityBreakdownDTO1.setStatus("Processing Scheduled");
		activityBreakdownDTO1.setStatusInfo("");
		activityBreakdownDTO1.setClmbtId("24788160");
		activityBreakdownDTO1.setClmBtType("Pass Thru");
		activityBreakdownDTO1.setServiceBeginDate("02/01/2019");
		activityBreakdownDTO1.setServiceEndDate("02/31/2019");
		activityBreakdownDTO1.setActivityDate("01/17/2019");
		activityBreakdownDTO1.setProvider("TEST");
		activityBreakdownDTO1.setExpectedPymtDate(null);

		ActivityBreakdownDTO activityBreakdownDTO2 = new ActivityBreakdownDTO();
		activityBreakdownDTO2.setClaimId("120005295");
		activityBreakdownDTO2.setSubmitClaimId("120005294");
		activityBreakdownDTO2.setAccountType("PHRA");
		activityBreakdownDTO2.setElctId("14480734");
		activityBreakdownDTO2.setAmount("100");
		activityBreakdownDTO2.setCategory("Medical");
		activityBreakdownDTO2.setType("PREMIUM");
		activityBreakdownDTO2.setStatus("On Hold");
		activityBreakdownDTO2.setStatusInfo("");
		activityBreakdownDTO2.setClmbtId("24788160");
		activityBreakdownDTO2.setClmBtType("Pass Thru");
		activityBreakdownDTO2.setServiceBeginDate("02/01/2019");
		activityBreakdownDTO2.setServiceEndDate("02/31/2019");
		activityBreakdownDTO2.setActivityDate("01/17/2019");
		activityBreakdownDTO2.setProvider("TEST");
		activityBreakdownDTO2.setExpectedPymtDate(null);

		List<ActivityBreakdownDTO> activityBreakdownDetails = new ArrayList<>();
		activityBreakdownDetails.add(activityBreakdownDTO);
		activityBreakdownDetails.add(activityBreakdownDTO1);
		activityBreakdownDetails.add(activityBreakdownDTO2);

		acctActivityDTO.setActivityBreakdownDetails(activityBreakdownDetails);
		acctActivityDTO.setInstallments(12);
		acctActivityDTO.setPremiumOccurenceType("Recurring");

		return acctActivityDTO;
	}

	@Test
	public void testGetTransactionBreakdownGroupByDenied() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownGroupByStatusLabel();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);

			Mockito.when(mockLabelService.getAccountDisplayLabelByClaim(
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString()))
					.thenReturn("PRA");

			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");

			Assert.assertEquals(ClaimStatus.DENIED.getStatus(),
					transactionBreakdown.getTransactionList().get(0).getStatusLabel());
			Assert.assertTrue(
					"testGetTransactionBreakdownGroupByDenied----"
							+ transactionBreakdown.getTransactionList().get(0).getStatusLabel(),
					transactionBreakdown.getTransactionList().get(0).getStatusLabel()
							.equals(ClaimStatus.DENIED.getStatus()));

			Assert.assertTrue("testGetTransactionBreakdownGroupByDenied",
					transactionBreakdown.getTransactionList().get(0).getAmount().equals("202.0"));
			Assert.assertTrue("testGetTransactionBreakdownGroupByDenied",
					transactionBreakdown.getTransactionList().get(0).getPlanYear().equals("2018,2018,2018,2018"));
			Assert.assertTrue("testGetTransactionBreakdownGroupByDenied",
					transactionBreakdown.getTransactionList().get(0).getRecoveredAmt().equals("42.0"));
			Assert.assertTrue("testGetTransactionBreakdownGroupByDenied", transactionBreakdown.getTransactionList()
					.get(0).getReasonText().equals("Reason Text 1,Reason Text 2,Reason Text 4"));

		} catch (Exception e) {
			fail("### testGetTransactionBreakdownGroupByDenied ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownForApproved() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownForApproved();
			transactionBreakdownDTO.setStatusLabel(ClaimStatus.APPROVED.getStatus());
			transactionBreakdownDTO.setPlanYear("2018");
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);
			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");

			Assert.assertTrue("testGetTransactionBreakdownForApproved",
					ClaimStatus.APPROVED.getStatus().equals(transactionBreakdown.getStatusLabel()));

			Assert.assertTrue("testGetTransactionBreakdownForApproved",
					"2422.00".equals(transactionBreakdown.getAmount()));

			Assert.assertTrue("testGetTransactionBreakdownForApproved",
					"2018".equals(transactionBreakdown.getPlanYear()));
			Assert.assertTrue("testGetTransactionBreakdownForApproved",
					"2018".equals(transactionBreakdown.getPlanYear()));

		} catch (Exception e) {
			fail("### testGetTransactionBreakdownForApproved ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownSingleType() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownSingleType();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);
			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");
			Assert.assertTrue("testGetTransactionBreakdownSingleType : List has only one type Denied",
					transactionBreakdown.getTransactionList().size() == 1);

			Assert.assertEquals(ClaimStatus.DENIED.getStatus(),
					transactionBreakdown.getTransactionList().get(0).getStatusLabel());

			Assert.assertTrue("testGetTransactionBreakdownSingleType",
					transactionBreakdown.getTransactionList().get(0).getAmount().equals("50.50"));
			Assert.assertTrue("testGetTransactionBreakdownSingleType",
					transactionBreakdown.getTransactionList().get(0).getPlanYear().equals("2018"));
			Assert.assertTrue("testGetTransactionBreakdownSingleType",
					transactionBreakdown.getTransactionList().get(0).getRecoveredAmt().equals("10.5"));
			Assert.assertTrue("testGetTransactionBreakdownSingleType",
					transactionBreakdown.getTransactionList().get(0).getReasonText().equals("Reason Text 1"));

		} catch (Exception e) {
			fail("### testGetTransactionBreakdownSingleType ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownGroupByOverpayment() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownGroupByOverpayment();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);
			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");
			Assert.assertTrue("testGetTransactionBreakdownGroupByOverpayment : List has 4 Overpayment and 1 approved",
					transactionBreakdown.getTransactionList().size() == 2);

			Assert.assertEquals(ClaimStatus.OVERPAYMENT.getStatus(),
					transactionBreakdown.getTransactionList().get(0).getStatusLabel());

			Assert.assertTrue(
					"testGetTransactionBreakdownGroupByOverpayment----"
							+ transactionBreakdown.getTransactionList().get(0).getAmount(),
					transactionBreakdown.getTransactionList().get(0).getAmount().equals("202.0"));

			Assert.assertTrue("testGetTransactionBreakdownGroupByOverpayment", transactionBreakdown.getTransactionList()
					.get(0).getReasonText().equals("Reason Text 1,Reason Text 2,Reason Text 4"));

		} catch (Exception e) {
			fail("### testGetTransactionBreakdownGroupByOverpayment ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownGroupByNotApproved() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownGroupByNotApproved();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);
			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");

			Assert.assertEquals(ClaimStatus.NOT_APPROVED.getStatus(),
					transactionBreakdown.getTransactionList().get(0).getStatusLabel());

			Assert.assertTrue("testGetTransactionBreakdownGroupByNotApproved",
					transactionBreakdown.getTransactionList().get(0).getAmount().equals("202.0"));
			Assert.assertTrue("testGetTransactionBreakdownGroupByNotApproved",
					transactionBreakdown.getTransactionList().get(0).getRecoveredAmt().equals("42.0"));
			Assert.assertTrue("testGetTransactionBreakdownGroupByNotApproved", transactionBreakdown.getTransactionList()
					.get(0).getReasonText().equals("Reason Text 1,Reason Text 2,Reason Text 4"));

		} catch (Exception e) {
			fail("### testGetTransactionBreakdownGroupByNotApproved ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownGroupByUsedToOffset() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownGroupByUsedToOffset();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);
			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");
			Assert.assertEquals(ClaimStatus.USED_TO_OFFSET.getStatus(),
					transactionBreakdown.getTransactionList().get(0).getStatusLabel());

			Assert.assertTrue("testGetTransactionBreakdownGroupByUsedToOffset",
					transactionBreakdown.getTransactionList().get(0).getAmount().equals("202.0"));
			Assert.assertTrue("testGetTransactionBreakdownGroupByUsedToOffset",
					transactionBreakdown.getTransactionList().get(0).getRecoveredAmt().equals("42.0"));
			Assert.assertTrue("testGetTransactionBreakdownGroupByUsedToOffset", transactionBreakdown
					.getTransactionList().get(0).getReasonText().equals("Reason Text 1,Reason Text 2,Reason Text 4"));
		} catch (Exception e) {
			fail("### testGetTransactionBreakdownGroupByUsedToOffset ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownGroupByPaymentProcessing() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownGroupByPaymentProcessing();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);
			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");
			Assert.assertEquals(ClaimStatus.USED_TO_OFFSET.getStatus(),
					transactionBreakdown.getTransactionList().get(0).getStatusLabel());

			Assert.assertTrue("testGetTransactionBreakdownGroupByPaymentProcessing",
					transactionBreakdown.getTransactionList().get(0).getAmount().equals("151.5"));
			Assert.assertTrue("testGetTransactionBreakdownGroupByPaymentProcessing",
					transactionBreakdown.getTransactionList().get(0).getRecoveredAmt().equals("31.5"));
		} catch (Exception e) {
			fail("### testGetTransactionBreakdownGroupByPaymentProcessing ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownGroupByUsedToOffsetAmountIsNull() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownGroupByUsedToOffsetAmountIsNull();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);
			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");

			Assert.assertEquals(ClaimStatus.USED_TO_OFFSET.getStatus(),
					transactionBreakdown.getTransactionList().get(0).getStatusLabel());

			Assert.assertTrue("testGetTransactionBreakdownGroupByUsedToOffsetAmountIsNull",
					transactionBreakdown.getTransactionList().get(0).getAmount().equals("0.0"));
			Assert.assertTrue("testGetTransactionBreakdownGroupByUsedToOffsetAmountIsNull",
					transactionBreakdown.getTransactionList().get(0).getRecoveredAmt().equals("42.0"));
			Assert.assertTrue("testGetTransactionBreakdownGroupByUsedToOffsetAmountIsNull", transactionBreakdown
					.getTransactionList().get(0).getReasonText().equals("Reason Text 1,Reason Text 2,Reason Text 4"));

		} catch (Exception e) {
			fail("### testGetTransactionBreakdownGroupByUsedToOffsetAmountIsNull ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownReasonTextwithNullvalue() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownwithMergevalue();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);

			Mockito.when(cardMgmtDAO.getDBCardStatus(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("OK");

			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");

			Assert.assertTrue(
					"testGetTransactionBreakdownReasonTextwithNullvalue : List has resontext element with null value",
					transactionBreakdown.getTransactionList().size() == 1);

			Assert.assertEquals(ClaimStatus.DENIED.getStatus(),
					transactionBreakdown.getTransactionList().get(0).getStatusLabel());
			Assert.assertTrue("testGetTransactionBreakdownReasonTextwithNullvalue",
					transactionBreakdown.getTransactionList().get(0).getReasonText().equals("Reason Text 1"));

		} catch (Exception e) {
			fail("### testGetTransactionBreakdownReasonTextwithNullvalue ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimResolveIssueInfoWhenCategoryNotDebitCard() {

		try {
			UserDetailsBn userDtlsBn = getUserDetailBn();

			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");

			TransactionDetailsDTO mockClaimActivityDtls = getMockResolveIssueInfo();
			mockClaimActivityDtls.setMethod("Medicine");

			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);

			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("HSA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");

			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);

			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("180").thenReturn("Self");
			PowerMockito.when(UserDAO.getContactInfo(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn("TEST");
			when(mockreceiptDetailsDAO.isUnusedReceiptAvailable(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(false);

			TransactionDetailsDTO transactionDetailsDTO = claimTransaction.getTransactionDetails("119993190",
					AccountActivitySource.CLAIMS.getSource(), userDtlsBn, "No", "12345");

			Assert.assertNotSame(TransactionType.DEBITCARD.getTransactionType(), transactionDetailsDTO.getMethod());
			assertFalse("testGetClaimResolveIssueInfoWhenCategoryNotDebitCard",
					transactionDetailsDTO.getResolveIssueInfo().getAccountCommonSettings().isGetReimbursedBtnEnabled());
			assertFalse("testGetClaimResolveIssueInfoWhenCategoryNotDebitCard",
					transactionDetailsDTO.getResolveIssueInfo().getAccountCommonSettings().isPayABillBtnEnabled());
		} catch (Exception e) {
			fail("### testGetClaimResolveIssueInfoWhenCategoryNotDebitCard ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testGetClaimResolveIssueInfoWhenDemogBoth() {

		try {
			UserDetailsBn userDtlsBn = getUserDetailBn();
			Map<String, Map<String, String>> mailAddress = new HashMap<>();

			Map<String, String> checkMailAddress = new HashMap<>();
			Map<String, String> receiptMailAddress = new HashMap<>();

			checkMailAddress.put("TEST", "TEST");
			receiptMailAddress.put("TEST", "TEST");

			mailAddress.put("receiptMailAddress", receiptMailAddress);
			mailAddress.put("checkMailAddress", checkMailAddress);

			List<String> key = new ArrayList<>();
			key.add("KEY");
			List<String> value = new ArrayList<>();
			value.add("value");
			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");

			TransactionDetailsDTO mockClaimActivityDtls = getMockResolveIssueInfo();
			mockClaimActivityDtls.setMethod("Debit Card");
			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);

			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("HSA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");

			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);
			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("180").thenReturn("Both")
					.thenReturn("OneExchange");
			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(receiptMailAddress);

			PowerMockito.when(UserDAO.getAdminPartnerContactInfo(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(checkMailAddress);

			when(mockreceiptDetailsDAO.isUnusedReceiptAvailable(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(false);

			TransactionDetailsDTO transactionDetailsDTO = claimTransaction.getTransactionDetails("119993190",
					AccountActivitySource.CLAIMS.getSource(), userDtlsBn, "No", "12345");

			Assert.assertEquals(TransactionType.DEBITCARD.getTransactionType(), transactionDetailsDTO.getCategory());
			assertTrue("testGetClaimResolveIssueInfoWhenDemogBoth",
					transactionDetailsDTO.getResolveIssueInfo().getAccountCommonSettings().isGetReimbursedBtnEnabled());
			assertTrue("testGetClaimResolveIssueInfoWhenDemogBoth",
					transactionDetailsDTO.getResolveIssueInfo().getAccountCommonSettings().isPayABillBtnEnabled());
			assertFalse("testGetClaimResolveIssueInfoWhenDemogBoth",
					transactionDetailsDTO.getResolveIssueInfo().isUnusedReceipt());
			Assert.assertEquals("TEST",
					transactionDetailsDTO.getResolveIssueInfo().getMailAddress().get("checkMailAddress").get("TEST"));
			Assert.assertEquals("TEST",
					transactionDetailsDTO.getResolveIssueInfo().getMailAddress().get("receiptMailAddress").get("TEST"));

		} catch (Exception e) {
			fail("### testGetClaimResolveIssueInfoWhenDemogBoth ### Failed with following error: " + getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testGetClaimResolveIssueInfoWhenDemogSelfWithAdminPartnerContactInfo() {

		try {
			UserDetailsBn userDtlsBn = getUserDetailBn();

			Map<String, Map<String, String>> mailAddress = new HashMap<>();

			Map<String, String> checkMailAddress = new HashMap<>();
			Map<String, String> receiptMailAddress = new HashMap<>();

			checkMailAddress.put("TEST", "TEST");
			receiptMailAddress.put("TEST", "TEST");

			mailAddress.put("receiptMailAddress", receiptMailAddress);
			mailAddress.put("checkMailAddress", checkMailAddress);

			List<String> key = new ArrayList<>();
			key.add("KEY");
			List<String> value = new ArrayList<>();
			value.add("value");
			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");

			TransactionDetailsDTO mockClaimActivityDtls = getMockResolveIssueInfo();
			mockClaimActivityDtls.setMethod("Debit Card");
			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);

			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("HSA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");

			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);
			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("180").thenReturn("Self")
					.thenReturn("OneExchange");

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(receiptMailAddress);

			PowerMockito.when(UserDAO.getAdminPartnerContactInfo(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(checkMailAddress);

			when(mockreceiptDetailsDAO.isUnusedReceiptAvailable(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(false);

			TransactionDetailsDTO transactionDetailsDTO = claimTransaction.getTransactionDetails("119993190",
					AccountActivitySource.CLAIMS.getSource(), userDtlsBn, "No", "12345");

			Assert.assertEquals(TransactionType.DEBITCARD.getTransactionType(), transactionDetailsDTO.getCategory());
			assertTrue("testGetClaimResolveIssueInfoWhenDemogSelf",
					transactionDetailsDTO.getResolveIssueInfo().getAccountCommonSettings().isGetReimbursedBtnEnabled());
			assertFalse("testGetClaimResolveIssueInfoWhenDemogSelf",
					transactionDetailsDTO.getResolveIssueInfo().getAccountCommonSettings().isPayABillBtnEnabled());
			assertFalse("testGetClaimResolveIssueInfoWhenDemogSelf",
					transactionDetailsDTO.getResolveIssueInfo().isUnusedReceipt());
			Assert.assertEquals("TEST",
					transactionDetailsDTO.getResolveIssueInfo().getMailAddress().get("checkMailAddress").get("TEST"));
			Assert.assertEquals("TEST",
					transactionDetailsDTO.getResolveIssueInfo().getMailAddress().get("receiptMailAddress").get("TEST"));

		} catch (Exception e) {
			fail("### testGetClaimResolveIssueInfoWhenDemogSelf ### Failed with following error: " + getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testGetClaimResolveIssueInfoWhenDemogSelfWithContactInfo() {

		try {
			PowerMockito.mockStatic(ConversionUtil.class);
			UserDetailsBn userDtlsBn = getUserDetailBn();

			Map<String, Map<String, String>> mailAddress = new HashMap<>();

			Map<String, String> checkMailAddress = new HashMap<>();
			Map<String, String> receiptMailAddress = new HashMap<>();

			checkMailAddress.put("TEST", "TEST");
			receiptMailAddress.put("TEST", "TEST");

			mailAddress.put("receiptMailAddress", receiptMailAddress);
			mailAddress.put("checkMailAddress", checkMailAddress);

			List<String> key = new ArrayList<>();
			key.add("KEY");
			List<String> value = new ArrayList<>();
			value.add("value");
			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");

			TransactionDetailsDTO mockClaimActivityDtls = getMockResolveIssueInfo();
			mockClaimActivityDtls.setMethod("Debit Card");
			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);

			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("HSA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");

			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);
			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("180").thenReturn("Self")
					.thenReturn("OneExchange");

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(receiptMailAddress);

			PowerMockito.when(UserDAO.getAdminPartnerContactInfo(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(new HashMap<String, String>());
			PowerMockito.when(UserDAO.getContactInfo(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn("TEST,TEST");
			PowerMockito.when(ConversionUtil.convertListsToMap(Mockito.anyList(), Mockito.anyList()))
					.thenReturn(checkMailAddress);

			when(mockreceiptDetailsDAO.isUnusedReceiptAvailable(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(false);

			TransactionDetailsDTO transactionDetailsDTO = claimTransaction.getTransactionDetails("119993190",
					AccountActivitySource.CLAIMS.getSource(), userDtlsBn, "No", "12345");

			Assert.assertEquals(TransactionType.DEBITCARD.getTransactionType(), transactionDetailsDTO.getCategory());

			assertFalse(
					"testGetClaimResolveIssueInfoWhenDemogSelfWithAdminPartnerContactInfo" + transactionDetailsDTO
							.getResolveIssueInfo().getAccountCommonSettings().isPayABillBtnEnabled(),
					transactionDetailsDTO.getResolveIssueInfo().getAccountCommonSettings().isPayABillBtnEnabled());
			assertFalse("testGetClaimResolveIssueInfoWhenDemogSelfWithAdminPartnerContactInfo",
					transactionDetailsDTO.getResolveIssueInfo().isUnusedReceipt());
			Assert.assertEquals("TEST",
					transactionDetailsDTO.getResolveIssueInfo().getMailAddress().get("checkMailAddress").get("TEST"));
			Assert.assertEquals("TEST",
					transactionDetailsDTO.getResolveIssueInfo().getMailAddress().get("receiptMailAddress").get("TEST"));

		} catch (Exception e) {
			fail("### testGetClaimResolveIssueInfoWhenDemogSelfWithAdminPartnerContactInfo ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimResolveIssueInfoSQLException() {

		try {
			UserDetailsBn userDtlsBn = getUserDetailBn();

			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");

			TransactionDetailsDTO mockClaimActivityDtls = getMockResolveIssueInfo();
			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenThrow(new SQLException());
			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);

			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("HSA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");

			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);

			when(mockreceiptDetailsDAO.isUnusedReceiptAvailable(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(false);

			TransactionDetailsDTO transactionDetailsDTO = claimTransaction.getTransactionDetails("119993190",
					AccountActivitySource.CLAIMS.getSource(), userDtlsBn, "No", "12345");

		} catch (SystemException e) {
			Assert.assertTrue("testGetClaimResolveIssueInfoSQLException success", true);
		} catch (Exception e) {
			Assert.fail("testGetClaimResolveIssueInfoSQLException faild with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownGroupByPaid() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownGroupByStatusLabelPaid();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);
			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");
			Assert.assertTrue(
					"testGetTransactionBreakdownGroupByPaid: List has 2 paid with same year and another one different----------"
							+ transactionBreakdown.getTransactionList().size(),
					transactionBreakdown.getTransactionList().size() == 2);

			Assert.assertTrue("testGetTransactionBreakdownGroupByPaid", transactionBreakdown.getTransactionList().get(0)
					.getStatusLabel().equals(ClaimStatus.PAID.getStatus()));
			Assert.assertTrue("testGetTransactionBreakdownGroupByPaid", transactionBreakdown.getTransactionList().get(1)
					.getStatusLabel().equals(ClaimStatus.PAID.getStatus()));

			Assert.assertTrue(
					"testGetTransactionBreakdownGroupByPaid-------------------------"
							+ transactionBreakdown.getTransactionList().get(0).getAmount(),
					transactionBreakdown.getTransactionList().get(0).getAmount().equals("101.0"));
			Assert.assertTrue("testGetTransactionBreakdownGroupByPaid",
					transactionBreakdown.getTransactionList().get(1).getAmount().equals("50.50"));

		} catch (Exception e) {
			fail("### testGetTransactionBreakdownGroupByPaid ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetTransactionBreakdownGroupByReleased() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			TransactionBreakdownDTO transactionBreakdownDTO = getTransactionBreakDownGroupByStatusLabelReleased();
			Mockito.when(claimTransactionDAO.getPaymentBreakdownDetails(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString())).thenReturn(transactionBreakdownDTO);
			TransactionBreakdownDTO transactionBreakdown = claimTransaction.getTransactionBreakdown("23234234",
					AccountActivitySource.CLAIMS.getSource(), userDetailsBn, "No", "12345");
			Assert.assertTrue(
					"testGetTransactionBreakdownGroupByReleased: List has 2 paid with same year and another one different----------"
							+ transactionBreakdown.getTransactionList().size(),
					transactionBreakdown.getTransactionList().size() == 2);

			Assert.assertTrue("testGetTransactionBreakdownGroupByReleased", transactionBreakdown.getTransactionList()
					.get(0).getStatusLabel().equals(ClaimStatus.RELEASED.getStatus()));
			Assert.assertTrue(
					"testGetTransactionBreakdownGroupByReleased-----"
							+ transactionBreakdown.getTransactionList().get(1).getStatusLabel(),
					transactionBreakdown.getTransactionList().get(1).getStatusLabel()
							.equals(ClaimStatus.RELEASED.getStatus()));

			Assert.assertTrue(
					"testGetTransactionBreakdownGroupByReleased-------"
							+ transactionBreakdown.getTransactionList().get(1).getAmount(),
					transactionBreakdown.getTransactionList().get(1).getAmount().equals("50.50"));
			Assert.assertTrue(
					"testGetTransactionBreakdownGroupByReleased----"
							+ transactionBreakdown.getTransactionList().get(0).getAmount(),
					transactionBreakdown.getTransactionList().get(0).getAmount().equals("101.0"));

		} catch (Exception e) {
			fail("### testGetTransactionBreakdownGroupByReleased ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testCancelScheduledPayments() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			Mockito.when(claimTransactionDAO.cancelScheduledPayments(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("OK~OK");
			claimTransaction.cancelScheduledPayments("12345~11122~", userDetailsBn);
		} catch (Exception e) {
			fail("### testCancelScheduledPayments ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test(expected = com.acclaris.common.exceptions.SystemException.class)
	public void testCancelScheduledPaymentsWhenExceptionOccured1() throws Exception {
		UserDetailsBn userDetailsBn = getUserDetailBn();
		Mockito.when(claimTransactionDAO.cancelScheduledPayments(Mockito.any(Connection.class),
				Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("ERROR~ERROR");
		claimTransaction.cancelScheduledPayments("12345~11122~", userDetailsBn);
	}

	@Test(expected = com.acclaris.common.exceptions.SystemException.class)
	public void testCancelScheduledPaymentsWhenExceptionOccured2() throws Exception {
		UserDetailsBn userDetailsBn = getUserDetailBn();
		PowerMockito.doThrow(new SQLException()).when(claimTransactionDAO).cancelScheduledPayments(
				Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class), Mockito.anyString());
		claimTransaction.cancelScheduledPayments("12345~11122~", userDetailsBn);
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testGetClaimResolveIssueInfoJRA() {

		try {
			PowerMockito.mockStatic(ConversionUtil.class);
			UserDetailsBn userDtlsBn = getUserDetailBn();

			Map<String, Map<String, String>> mailAddress = new HashMap<>();

			Map<String, String> checkMailAddress = new HashMap<>();
			Map<String, String> receiptMailAddress = new HashMap<>();

			checkMailAddress.put("TEST", "TEST");
			receiptMailAddress.put("TEST", "TEST");

			mailAddress.put("receiptMailAddress", receiptMailAddress);
			mailAddress.put("checkMailAddress", checkMailAddress);

			List<String> key = new ArrayList<>();
			key.add("KEY");
			List<String> value = new ArrayList<>();
			value.add("value");
			ReceiptDTO rcptbn = new ReceiptDTO();
			rcptbn.setUploadDateTime("10/15/2018");
			rcptbn.setProcessedDate("10/15/2018");
			Map<String, List<AccountDTO>> activeElections = new HashMap<>();
			List<AccountDTO> listAccountDTO = new ArrayList<>();
			activeElections.put("RHRA", listAccountDTO);
			AccountDTO accountDTO = new AccountDTO(2L);
			listAccountDTO.add(accountDTO);
			AccountCommonSettings accountCommonSettings = new AccountCommonSettings();
			accountCommonSettings.setOutOfPocketReimbursementBtnDisplayed(true);
			accountCommonSettings.setOutOfPocketReimbursementBtnEnabled(true);
			accountCommonSettings.setPremiumReimbursementBtnEnabled(true);
			TransactionDetailsDTO mockClaimActivityDtls = getMockResolveIssueInfo();
			mockClaimActivityDtls.setMethod("Debit Card");
			when(claimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(mockClaimActivityDtls);

			when(mockreceiptDetailsDAO.populateReceiptDetails(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(rcptbn);
			when(claimTransactionDAO.getActpcdForClaim(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("HSA");
			when(claimTransactionDAO.isDBCardSubstantiationRequired(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("No", "12345");

			when(mockServiceProviderDAO.getServiceProviderAddressByClmID(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn(null);
			when(mockImageDetailService.getThumbnailFromClaimId(Mockito.anyString(), Mockito.any(UserDetailsBn.class),
					Mockito.anyLong())).thenReturn(null);
			when(accountDetailsService.getActiveElections(Mockito.any(UserDetailsBn.class)))
					.thenReturn(activeElections);
			when(accountDetailsService.displayDashboardButtonsForJRA(Mockito.any(UserDetailsBn.class), Mockito.anyMap(),
					Mockito.anyBoolean())).thenReturn(accountCommonSettings);

			PowerMockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn("180").thenReturn("Self")
					.thenReturn("OneExchange");

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(receiptMailAddress);

			PowerMockito.when(UserDAO.getAdminPartnerContactInfo(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(new HashMap<String, String>());
			PowerMockito.when(UserDAO.getContactInfo(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString())).thenReturn("TEST,TEST");
			PowerMockito.when(ConversionUtil.convertListsToMap(Mockito.anyList(), Mockito.anyList()))
					.thenReturn(checkMailAddress);
			PowerMockito.when(CommonAccountDAO.isJRA(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(true);

			when(mockreceiptDetailsDAO.isUnusedReceiptAvailable(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(false);

			TransactionDetailsDTO transactionDetailsDTO = claimTransaction.getTransactionDetails("119993190",
					AccountActivitySource.CLAIMS.getSource(), userDtlsBn, "No", "12345");

			Assert.assertTrue(transactionDetailsDTO.getResolveIssueInfo().getAccountCommonSettings()
					.isOutOfPocketReimbursementBtnDisplayed());

		} catch (Exception e) {
			fail("### testGetClaimResolveIssueInfoJRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	private TransactionDetailsDTO getMockResolveIssueInfo() {
		TransactionDetailsDTO acctActivityDTO = new TransactionDetailsDTO();
		acctActivityDTO.setCategory("Debit Card");
		acctActivityDTO.setStatus("Paid");
		acctActivityDTO.setServiceBeginDate(("08/16/2017"));
		acctActivityDTO.setTransactionID("119993190");
		acctActivityDTO.setProvider("EXCESS CONTRIBUTION RETURN");
		acctActivityDTO.setMethod("Online");
		acctActivityDTO.setAppealStatus("Appealed");
		acctActivityDTO.setAppealReviewedBy("Test Reviewer");
		return acctActivityDTO;
	}

	private TransactionBreakdownDTO getTransactionBreakDownGroupByNotApproved() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		TransactionBreakdownDTO transactionBreakdownNew = null;
		List<TransactionBreakdownDTO> transactionBreakdownlist = new ArrayList<>();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Not Approved");
		transactionBreakdownNew.setStatusLabel("Not Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental2");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 2");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Not Approved");
		transactionBreakdownNew.setStatusLabel("Not Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental3");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Not Approved");
		transactionBreakdownNew.setStatusLabel("Not Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental4");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 4");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Not Approved");
		transactionBreakdownNew.setStatusLabel("Not Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental1");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Approved");
		transactionBreakdownNew.setStatusLabel("Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdown.setTransactionList(transactionBreakdownlist);
		return transactionBreakdown;
	}

	private TransactionBreakdownDTO getTransactionBreakDownGroupByUsedToOffsetAmountIsNull() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		TransactionBreakdownDTO transactionBreakdownNew = null;
		List<TransactionBreakdownDTO> transactionBreakdownlist = new ArrayList<>();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount(null);
		transactionBreakdownNew.setCategory("Dental");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Used to Offset");
		transactionBreakdownNew.setStatusLabel("Used to Offset");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount(null);
		transactionBreakdownNew.setCategory("Dental2");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 2");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Used to Offset");
		transactionBreakdownNew.setStatusLabel("Used to Offset");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount(null);
		transactionBreakdownNew.setCategory("Dental3");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Used to Offset");
		transactionBreakdownNew.setStatusLabel("Used to Offset");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount(null);
		transactionBreakdownNew.setCategory("Dental4");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 4");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Used to Offset");
		transactionBreakdownNew.setStatusLabel("Used to Offset");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental1");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Approved");
		transactionBreakdownNew.setStatusLabel("Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdown.setTransactionList(transactionBreakdownlist);
		return transactionBreakdown;
	}

	private TransactionBreakdownDTO getTransactionBreakDownGroupByUsedToOffset() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		TransactionBreakdownDTO transactionBreakdownNew = null;
		List<TransactionBreakdownDTO> transactionBreakdownlist = new ArrayList<>();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Used to Offset");
		transactionBreakdownNew.setStatusLabel("Used to Offset");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental2");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 2");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Used to Offset");
		transactionBreakdownNew.setStatusLabel("Used to Offset");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental3");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Used to Offset");
		transactionBreakdownNew.setStatusLabel("Used to Offset");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental4");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 4");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Used to Offset");
		transactionBreakdownNew.setStatusLabel("Used to Offset");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental1");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Approved");
		transactionBreakdownNew.setStatusLabel("Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdown.setTransactionList(transactionBreakdownlist);
		return transactionBreakdown;
	}

	private TransactionBreakdownDTO getTransactionBreakDownGroupByPaymentProcessing() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		TransactionBreakdownDTO transactionBreakdownNew = null;
		List<TransactionBreakdownDTO> transactionBreakdownlist = new ArrayList<>();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Used to Offset");
		transactionBreakdownNew.setStatusLabel("Used to Offset");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental2");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 2");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Used to Offset");
		transactionBreakdownNew.setStatusLabel("Used to Offset");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental3");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Used to Offset");
		transactionBreakdownNew.setStatusLabel("Payment Processing");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental4");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 4");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Used to Offset");
		transactionBreakdownNew.setStatusLabel("Used to Offset");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental1");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Approved");
		transactionBreakdownNew.setStatusLabel("Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdown.setTransactionList(transactionBreakdownlist);
		return transactionBreakdown;
	}

	private TransactionBreakdownDTO getTransactionBreakDownSingleType() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		TransactionBreakdownDTO transactionBreakdownNew = null;
		List<TransactionBreakdownDTO> transactionBreakdownlist = new ArrayList<>();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Denied");
		transactionBreakdownNew.setStatusLabel("Denied");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdown.setTransactionList(transactionBreakdownlist);
		return transactionBreakdown;
	}

	private TransactionBreakdownDTO getTransactionBreakDownwithMergevalue() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		TransactionBreakdownDTO transactionBreakdownNew = null;
		List<TransactionBreakdownDTO> transactionBreakdownlist = new ArrayList<>();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Denied");
		transactionBreakdownNew.setStatusLabel("Denied");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText(null);
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Denied");
		transactionBreakdownNew.setStatusLabel("Denied");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdown.setTransactionList(transactionBreakdownlist);
		return transactionBreakdown;
	}

	private TransactionBreakdownDTO getTransactionBreakDownGroupByOverpayment() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		TransactionBreakdownDTO transactionBreakdownNew = null;
		List<TransactionBreakdownDTO> transactionBreakdownlist = new ArrayList<>();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Overpayment");
		transactionBreakdownNew.setStatusLabel("Overpayment");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental2");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 2");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Overpayment");
		transactionBreakdownNew.setStatusLabel("Overpayment");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental3");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Overpayment");
		transactionBreakdownNew.setStatusLabel("Overpayment");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental4");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 4");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Overpayment");
		transactionBreakdownNew.setStatusLabel("Overpayment");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental1");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Approved");
		transactionBreakdownNew.setStatusLabel("Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdown.setTransactionList(transactionBreakdownlist);
		return transactionBreakdown;
	}

	private TransactionBreakdownDTO getTransactionBreakDownGroupByStatusLabel() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		TransactionBreakdownDTO transactionBreakdownNew = null;
		List<TransactionBreakdownDTO> transactionBreakdownlist = new ArrayList<>();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Denied");
		transactionBreakdownNew.setStatusLabel("Denied");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental2");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 2");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Denied");
		transactionBreakdownNew.setStatusLabel("Denied");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental3");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Denied");
		transactionBreakdownNew.setStatusLabel("Denied");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental4");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 4");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Denied");
		transactionBreakdownNew.setStatusLabel("Denied");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental1");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Approved");
		transactionBreakdownNew.setStatusLabel("Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental2");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 2");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Approved");
		transactionBreakdownNew.setStatusLabel("Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdown.setTransactionList(transactionBreakdownlist);
		return transactionBreakdown;
	}

	private TransactionBreakdownDTO getTransactionBreakDownForApproved() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		TransactionBreakdownDTO transactionBreakdownNew = null;
		List<TransactionBreakdownDTO> transactionBreakdownlist = new ArrayList<>();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental1");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Approved");
		transactionBreakdownNew.setStatusLabel("Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental2");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 2");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Approved");
		transactionBreakdownNew.setStatusLabel("Approved");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdown.setTransactionList(transactionBreakdownlist);
		return transactionBreakdown;
	}

	private TransactionBreakdownDTO getTransactionBreakDownGroupByStatusLabelPaid() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		TransactionBreakdownDTO transactionBreakdownNew = null;
		List<TransactionBreakdownDTO> transactionBreakdownlist = new ArrayList<>();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Paid");
		transactionBreakdownNew.setStatusLabel("Paid");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental2");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 2");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Paid");
		transactionBreakdownNew.setStatusLabel("Paid");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental3");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2017");
		transactionBreakdownNew.setReasonText("");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Paid");
		transactionBreakdownNew.setStatusLabel("Paid");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdown.setTransactionList(transactionBreakdownlist);
		return transactionBreakdown;
	}

	private TransactionBreakdownDTO getTransactionBreakDownGroupByStatusLabelReleased() {
		TransactionBreakdownDTO transactionBreakdown = new TransactionBreakdownDTO();
		TransactionBreakdownDTO transactionBreakdownNew = null;
		List<TransactionBreakdownDTO> transactionBreakdownlist = new ArrayList<>();
		transactionBreakdown.setAccountTypeCd("HSA");
		transactionBreakdown.setAmount("2422.00");
		transactionBreakdown.setElectionId(255);
		transactionBreakdown.setTotalAmt("2422.00");

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 1");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Released");
		transactionBreakdownNew.setStatusLabel("Released");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental2");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2018");
		transactionBreakdownNew.setReasonText("Reason Text 2");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Released");
		transactionBreakdownNew.setStatusLabel("Released");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdownNew = new TransactionBreakdownDTO();
		transactionBreakdownNew.setAccountTypeCd("PHRA");
		transactionBreakdownNew.setAmount("50.50");
		transactionBreakdownNew.setCategory("Dental3");
		transactionBreakdownNew.setElectionId(0);
		transactionBreakdownNew.setPlanYear("2017");
		transactionBreakdownNew.setReasonText("");
		transactionBreakdownNew.setRecoveredAmt("10.5");
		transactionBreakdownNew.setStatus("Released");
		transactionBreakdownNew.setStatusLabel("Released");
		transactionBreakdownlist.add(transactionBreakdownNew);

		transactionBreakdown.setTransactionList(transactionBreakdownlist);
		return transactionBreakdown;
	}

	private String getStackTrace(Throwable aThrowable) {
		LOGGER.info("########### getStackTrace() Started ###########");

		final Writer result = new StringWriter();
		final PrintWriter printWriter = new PrintWriter(result);
		aThrowable.printStackTrace(printWriter);

		LOGGER.info("########### getStackTrace() Completed ###########");
		return result.toString();
	}

}
=====================
package com.acclaris.image.api;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.when;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.IOUtils;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunner;
import org.powermock.reflect.Whitebox;

import com.acclaris.common.bean.FileDTO;
import com.acclaris.common.bean.UserDetailsBn;
import com.acclaris.common.dao.ConfigDAO;
import com.acclaris.common.enums.ReqType;
import com.acclaris.common.exceptions.BusinessLogicException;
import com.acclaris.common.exceptions.SystemException;
import com.acclaris.common.util.ConfigUtil;
import com.acclaris.common.util.DateUtil;
import com.acclaris.common.util.ValidationUtil;
import com.acclaris.database.connection.DatabaseService;
import com.acclaris.image.api.bean.ImageBn;
import com.acclaris.image.api.bo.ImageDetailService;
import com.acclaris.image.api.dao.ImageDAO;
import com.acclaris.image.api.dto.ImageDTO;
import com.acclaris.image.conversion.utils.PDFToImageUtils;
import com.acclaris.image.util.ImageUploadUtil;
import com.acclaris.logger.impl.AcclarisLogger;
import com.acclaris.logger.impl.Module;
import com.acclaris.properties.PropertiesHelper;

@RunWith(PowerMockRunner.class)
@PrepareForTest({DatabaseService.class, PropertiesHelper.class,
		ImageUploadUtil.class,
		PDFToImageUtils.class, ValidationUtil.class, ConfigUtil.class,
		ConfigDAO.class, IOUtils.class,DateUtil.class})
@SuppressStaticInitializationFor({"com.acclaris.image.util.ImageUploadUtil",
		"com.acclaris.pdf2image.PDFToImageUtils",
		"com.acclaris.common.util.ValidationUtil"})
public class TestImageDetailService {

	private static final AcclarisLogger LOGGER = AcclarisLogger
			.getLogger(Module.GEN3_COMMON);

	@InjectMocks
	private ImageDetailService imageDetailService;

	@Mock
	private ImageDetailService mockImageDetailService;
	
	@Mock
	private ImageDAO mockImageDao;	
	
	@Mock
	private DatabaseService databaseService;

	private Connection conn = null;

	@Before
	public void setUpMock() {
		LOGGER.info("########### Moke setUp started ###########");

		conn = Mockito.mock(Connection.class);

		PowerMockito.mockStatic(ConfigDAO.class);
		PowerMockito.mockStatic(IOUtils.class);

		MockitoAnnotations.initMocks(this);

		LOGGER.info("########### Moke setUp completed ###########");
	}

	@SuppressWarnings("unused")
	@Test
	public void testGetImageInByte() {

		LOGGER.info("########### testGetImageInByte() Test method started ###########");

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			UserDetailsBn userDetailsBn = getUserDetailBn();

			ImageBn imageBn = new ImageBn(123, 125, 0);
			ImageDTO imageDTO = new ImageDTO();

			InputStream input = TestImageDetailService.class.getClass()
					.getResourceAsStream("/imagefile" + "/" + "testimage.png");
			File file = File.createTempFile("testimage", ".png");
			OutputStream out = new FileOutputStream(file);
			int read;
			byte[] bytes = new byte[1024];

			while ((read = input.read(bytes)) != -1) {
				out.write(bytes, 0, read);
			}
			out.close();
			file.deleteOnExit();
			imageDTO.setImagePath(file.getCanonicalPath());
			List<ImageDTO> imgDtoList = new ArrayList<>();
			imgDtoList.add(imageDTO);
			when(mockImageDao.getImagePathFromExpenseImage(Mockito.any(Connection.class), Mockito.any(ImageBn.class)))
					.thenReturn(imgDtoList);

			ByteArrayOutputStream buffer = Mockito.mock(ByteArrayOutputStream.class);
			PowerMockito.whenNew(ByteArrayOutputStream.class).withNoArguments().thenReturn(buffer);

			PowerMockito.doNothing().when(IOUtils.class, "write", Mockito.any(), Mockito.any(OutputStream.class));

			List<ImageDTO> respImageDTO = imageDetailService.getImageInByte(imageBn, userDetailsBn);
		} catch (BusinessLogicException e) {
			Assert.assertTrue(true);
		} catch (Exception e) {
			LOGGER.error(getStackTrace(e));
			fail("### testGetImageInByte ### Failed with following error: " + getStackTrace(e));
		}

		LOGGER.info("########### testGetImageInByte() Test method completed ###########");
	}
	
	@SuppressWarnings("unused")
	@Test
	public void testGetImageInByteSetImagePath() {

		LOGGER.info("########### testGetImageInByteSetImagePath() Test method started ###########");

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			UserDetailsBn userDetailsBn = getUserDetailBn();

			ImageBn imageBn = new ImageBn(123, 0, 0);
			ImageDTO imageDTO = new ImageDTO();

			InputStream input = TestImageDetailService.class.getClass()
					.getResourceAsStream("/imagefile" + "/" + "testimage.png");
			File file = File.createTempFile("testimage", ".png");
			OutputStream out = new FileOutputStream(file);
			int read;
			byte[] bytes = new byte[1024];

			while ((read = input.read(bytes)) != -1) {
				out.write(bytes, 0, read);
			}
			out.close();
			file.deleteOnExit();
			imageDTO.setImagePath(file.getCanonicalPath());
			List<ImageDTO> imgDtoList = new ArrayList<>();
			imgDtoList.add(imageDTO);
			when(mockImageDao.getImagePathFromClaimImage(Mockito.any(Connection.class), Mockito.any(ImageBn.class)))
					.thenReturn(imgDtoList);
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Fax~Fax");
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("NCSFX");

			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("imageReceivedThru", "FTP");

			when(mockImageDao.getClaimsImageDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);

			ByteArrayOutputStream buffer = Mockito.mock(ByteArrayOutputStream.class);
			PowerMockito.whenNew(ByteArrayOutputStream.class).withNoArguments().thenReturn(buffer);

			PowerMockito.doNothing().when(IOUtils.class, "write", Mockito.any(), Mockito.any(OutputStream.class));

			List<ImageDTO> respImageDTO = imageDetailService.getImageInByte(imageBn, userDetailsBn);
			assertTrue(true);

		} catch (BusinessLogicException e) {
			assertTrue(true);
		} catch (Exception e) {
			LOGGER.error(getStackTrace(e));
			fail("### testGetImageInByteSetImagePath ### Failed with following error: " + getStackTrace(e));
		}

		LOGGER.info("########### testGetImageInByteSetImagePath() Test method completed ###########");
	}
	
	@SuppressWarnings("unused")
	@Test
	public void testGetClaimImageInByteSetImage() {

		LOGGER.info("########### testGetImageInByteSetImagePath() Test method started ###########");
		  long claimsId=12;
		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(PDFToImageUtils.class);
			UserDetailsBn userDetailsBn = getUserDetailBn();

			ImageBn imageBn = new ImageBn(123, 0, 0);
			ImageDTO imageDTO = new ImageDTO();

			InputStream input = TestImageDetailService.class.getClass()
					.getResourceAsStream("/imagefile" + "/" + "testimage.png");
			File file = File.createTempFile("testimage", ".pdf");
			OutputStream out = new FileOutputStream(file);
			int read;
			byte[] bytes = new byte[1024];

			while ((read = input.read(bytes)) != -1) {
				out.write(bytes, 0, read);
			}
			byte[] buffer = new byte[8192];
			int bytesRead;
			ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

			while ((bytesRead = input.read(buffer)) != -1) {
				outputStream.write(buffer, 0, bytesRead);
			}	
			
			out.close();
			file.deleteOnExit();
			imageDTO.setImagePath(file.getCanonicalPath());
			List<ImageDTO> imgDtoList = new ArrayList<>();
			imageDTO.setClaimsImageID("12");
			imgDtoList.add(imageDTO);
			String fileExtension = "pdf";
			String imagePath = imageDTO.getImagePath();
			
			List<String> listOfImages = new ArrayList<>();
			String orifinalFileName = "orifinalFileName.pdf";
			
			String outputPrefix = imagePath.substring(0,
					imagePath.lastIndexOf('.'));
			String imageFileName = String.format("%s%d.jpg", outputPrefix, 1);
			listOfImages.add(imageFileName);
			when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(outputStream);	
			when(ImageUploadUtil.getImagePath(Mockito.anyString())).thenReturn(imagePath);
			when(ImageUploadUtil.getFileExtension(Mockito.anyString())).thenReturn(fileExtension);	
			when(ImageUploadUtil.convertPDFtoJPEG(Mockito.anyString())).thenReturn(listOfImages);		
			
			when(ImageUploadUtil.convertTIFFtoJPEG(Mockito.anyString())).thenReturn(listOfImages);
			when(PDFToImageUtils.isPDFPasswordProtected(Mockito.anyString()))
			.thenReturn(false);		
			when(mockImageDao.getImagePathFromClaimImageFile(Mockito.any(Connection.class),Mockito.anyLong()))
			.thenReturn(imgDtoList);
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Fax~Fax");
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("NCSFX");
			PowerMockito.mockStatic(ConfigUtil.class);
			when(ConfigUtil.getStaticImagesPath())
					.thenReturn("C:" + File.separator + "test");
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("imageReceivedThru", "FTP");

			when(mockImageDao.getClaimsImageDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);

			ByteArrayOutputStream buffer1 = Mockito.mock(ByteArrayOutputStream.class);
			PowerMockito.whenNew(ByteArrayOutputStream.class).withNoArguments().thenReturn(buffer1);
			PowerMockito.doNothing().when(IOUtils.class, "write", Mockito.any(), Mockito.any(OutputStream.class));

			List<ImageDTO> respImageDTO = imageDetailService.getClaimImageFileDetails(claimsId, userDetailsBn);
			assertTrue(true);

		} catch (BusinessLogicException e) {
			assertTrue(true);
		} catch (Exception e) {
			LOGGER.error(getStackTrace(e));
			fail("### testGetImageInByteSetImagePath ### Failed with following error: " + getStackTrace(e));
		}

		LOGGER.info("########### testGetImageInByteSetImagePath() Test method completed ###########");
	}
	
	
	@SuppressWarnings("unused")
	@Test
	public void testGetClaimsImageInByteSetImagePath() {

		LOGGER.info("########### testGetClaimsImageInByteSetImagePath() Test method started ###########");
        long claimsId=12;
		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			UserDetailsBn userDetailsBn = getUserDetailBn();

			ImageBn imageBn = new ImageBn(123, 0, 0);
			ImageDTO imageDTO = new ImageDTO();

			InputStream input = TestImageDetailService.class.getClass()
					.getResourceAsStream("/imagefile" + "/" + "testimage.png");
			File file = File.createTempFile("testimage", ".png");
			OutputStream out = new FileOutputStream(file);
			int read;
			byte[] bytes = new byte[1024];

			while ((read = input.read(bytes)) != -1) {
				out.write(bytes, 0, read);
			}
			out.close();
			file.deleteOnExit();
			imageDTO.setImagePath(file.getCanonicalPath());
			imageDTO.setClaimsImageID("12");
			List<ImageDTO> imgDtoList = new ArrayList<>();
			imgDtoList.add(imageDTO);
			
			InputStream input1 = TestImageDetailService.class.getClass()
					.getResourceAsStream("/imagefile" + "/" + "testimage.png");
			byte[] buffer = new byte[8192];
			int bytesRead;
			ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

			while ((bytesRead = input1.read(buffer)) != -1) {
				outputStream.write(buffer, 0, bytesRead);
			}	

			when(mockImageDao.getImagePathFromClaimImageFile(Mockito.any(Connection.class),Mockito.anyLong()))
					.thenReturn(imgDtoList);
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Fax~Fax");
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("NCSFX");

			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("imageReceivedThru", "FTP");

			when(mockImageDao.getClaimsImageDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);
			when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(outputStream);			

			PowerMockito.doNothing().when(IOUtils.class, "write", Mockito.any(), Mockito.any(OutputStream.class));

			List<ImageDTO> respImageDTO = imageDetailService.getClaimImageFileDetails(claimsId, userDetailsBn);
			assertTrue(true);

		} catch (BusinessLogicException e) {
			assertTrue(true);
		} catch (Exception e) {
			LOGGER.error(getStackTrace(e));
			fail("### testGetClaimsImageInByteSetImagePath ### Failed with following error: " + getStackTrace(e));
		}

		LOGGER.info("########### testGetClaimsImageInByteSetImagePath() Test method completed ###########");
	}
	
	@SuppressWarnings("unused")
	@Test
	public void testGetClaimsImageInByteSetImagePathException() {

		LOGGER.info("########### testGetImageInByteSetImagePath() Test method started ###########");
		long claimsId = 12;
		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			UserDetailsBn userDetailsBn = getUserDetailBn();

			ImageBn imageBn = new ImageBn(123, 0, 0);
			ImageDTO imageDTO = new ImageDTO();

			InputStream input = TestImageDetailService.class.getClass()
					.getResourceAsStream("/imagefile" + "/" + "testimage.png");
			File file = File.createTempFile("testimage", ".png");
			OutputStream out = new FileOutputStream(file);
			int read;
			byte[] bytes = new byte[1024];

			while ((read = input.read(bytes)) != -1) {
				out.write(bytes, 0, read);
			}
			out.close();
			file.deleteOnExit();
			imageDTO.setImagePath(file.getCanonicalPath());
			imageDTO.setClaimsImageID("12");
			List<ImageDTO> imgDtoList = new ArrayList<>();
			imgDtoList.add(imageDTO);
			when(mockImageDao.getImagePathFromClaimImageFile(Mockito.any(Connection.class),Mockito.anyLong()))
			.thenThrow(new SQLException());

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Fax~Fax");
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("NCSFX");

			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("imageReceivedThru", "FTP");

			when(mockImageDao.getClaimsImageDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);

			ByteArrayOutputStream buffer = Mockito.mock(ByteArrayOutputStream.class);
			PowerMockito.whenNew(ByteArrayOutputStream.class).withNoArguments().thenReturn(buffer);

			PowerMockito.doNothing().when(IOUtils.class, "write", Mockito.any(), Mockito.any(OutputStream.class));

			List<ImageDTO> respImageDTO = imageDetailService.getClaimImageFileDetails(claimsId, userDetailsBn);

		} catch (SystemException e) {
			assertTrue(true);
		} catch (Exception ex) {
			LOGGER.error(getStackTrace(ex));
			fail("### testGetClaimsImageInByteSetImagePathException ### Failed with following error: " + getStackTrace(ex));
		}

LOGGER.info("########### testGetImageInByteSQLException() Test method completed ###########");
	}
	
	@SuppressWarnings({ "unchecked", "unused" })
	@Test
	public void testGetImageInByteImgTypeThumbnail() {

		LOGGER.info("########### testGetImageInByteImgTypeThumbnail() Test method started ###########");

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			UserDetailsBn userDetailsBn = getUserDetailBn();

			ImageBn imageBn = new ImageBn(123, 125, 0);
			imageBn.setImageType("THUMBNAIL");
			ImageDTO imageDTO = new ImageDTO();

			InputStream input = TestImageDetailService.class.getClass()
					.getResourceAsStream("/imagefile" + "/" + "testimage.png");
			File file = File.createTempFile("testimage", ".png");
			OutputStream out = new FileOutputStream(file);
			int read;
			byte[] bytes = new byte[1024];

			while ((read = input.read(bytes)) != -1) {
				out.write(bytes, 0, read);
			}
			out.close();
			file.deleteOnExit();
			List<ImageDTO> imgDtoList = new ArrayList<>();
			imgDtoList.add(imageDTO);
			when(mockImageDao.getThumbnailImagePath(Mockito.any(Connection.class), Mockito.any(ImageBn.class)))
					.thenReturn(imageDTO);
			when(mockImageDetailService.applyPdfTiffImageFormat(Mockito.anyList())).thenReturn(imgDtoList);

			List<ImageDTO> respImageDTO = imageDetailService.getImageInByte(imageBn, userDetailsBn);
			
		} catch (BusinessLogicException e) {
			assertTrue(true);
		} catch (Exception ex) {
			LOGGER.error(getStackTrace(ex));
			fail("### testGetImageInByteImgTypeThumbnail ### Failed with following error: " + getStackTrace(ex));
		}

		LOGGER.info("########### testGetImageInByteImgTypeThumbnail() Test method completed ###########");
	}
	
	@SuppressWarnings("unused")
	@Test
	public void testGetImageInByteSQLException() {

		LOGGER.info("########### testGetImageInByteSQLException() Test method started ###########");

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			UserDetailsBn userDetailsBn = getUserDetailBn();

			ImageBn imageBn = new ImageBn(123, 125, 0);

			InputStream input = TestImageDetailService.class.getClass()
					.getResourceAsStream("/imagefile" + "/" + "testimage.png");
			File file = File.createTempFile("testimage", ".png");
			OutputStream out = new FileOutputStream(file);
			int read;
			byte[] bytes = new byte[1024];

			while ((read = input.read(bytes)) != -1) {
				out.write(bytes, 0, read);
			}
			out.close();
			file.deleteOnExit();
			PowerMockito.doThrow(new SQLException()).when(mockImageDao)
					.getImagePathFromExpenseImage(Mockito.any(Connection.class), Mockito.any(ImageBn.class));

			List<ImageDTO> respImageDTO = imageDetailService.getImageInByte(imageBn, userDetailsBn);

		} catch (SystemException e) {
			assertTrue(true);
		} catch (Exception ex) {
			LOGGER.error(getStackTrace(ex));
			fail("### testGetImageInByteSQLException ### Failed with following error: " + getStackTrace(ex));
		}

		LOGGER.info("########### testGetImageInByteSQLException() Test method completed ###########");
	}

	@Test
	public void testGetImageInByteWithImagePathEmpty() {

		LOGGER.info("########### testGetImageInByte() Test method started ###########");

		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();

			ImageBn imageBn = new ImageBn(123, 125, 0);

			imageDetailService.getImageInByte(imageBn, userDetailsBn);

			fail("BusinessLogicException was not thrown, this is not expected for this test...");

		} catch (BusinessLogicException businessLogicException) {

			assertTrue("Apologies. We're experiencing a technical issue and are working to resolve it right now. Please come back later today."
					.equals(businessLogicException.getErrorBn().getMessage()));

		} catch (Exception e) {
			LOGGER.error(getStackTrace(e));
			fail("### testGetImageInByteWithImagePathEmpty ### Failed with following error: "
					+ getStackTrace(e));
		}

		LOGGER.info("########### testGetImageInByte() Test method completed ###########");
	}
	
	@Test
	public void testHideClaimsImageFileDemogValueNotPresent(){
		
		try{
		when(databaseService.getDBConnection()).thenReturn(conn);
		String demogValue = "NA";
		boolean returnValue = true;
		UserDetailsBn userDetailsBn = getUserDetailBn();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
							.thenReturn(demogValue);
			returnValue = imageDetailService.hideClaimsImageFile(conn, userDetailsBn, 53462, 87537);
			assertFalse("testHideClaimsImageFileDemogValueNotPresent ", returnValue);
		}catch(Exception e){
			fail("fail testHideClaimsImageFileDemogValueNotPresent fail" + e.getMessage());
		}
	}
	
	@Test
	public void testGetReceiptDetailsByClaimIdOtherImagesWithPdfFormat(){		
		
		try
		{					
			UserDetailsBn userDtlsBn=new UserDetailsBn();
			userDtlsBn.setId(1059963L);
			userDtlsBn.setEeID(6108014);
			userDtlsBn.setUserType("EE");
			userDtlsBn.setErID(1000440L);
			userDtlsBn.setAdmnID(1000080);
			userDtlsBn.setName("Nagesh Nalla");
			userDtlsBn.setReqType(ReqType.WEB);			
			
			PowerMockito.mockStatic(PropertiesHelper.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(PDFToImageUtils.class);
			PowerMockito.mockStatic(ValidationUtil.class);
						
			List<ImageDTO> imagesList = new ArrayList<>();
						
									
			List<Long> claimImageList = new ArrayList<>();			
			claimImageList.add(Long.parseLong("13179067"));			
			
			when(mockImageDao.getClaimsImageListByClaim(Mockito.any(Connection.class),Mockito.anyLong())).thenReturn(claimImageList);
						
			ImageDTO imageDTO = new ImageDTO(); 
			
			imageDTO.setImageName("image_icon");
			imageDTO.setImagePath("C:" + File.separator + "test"
					+ File.separator
					+ "image_icon.jpg");
			imageDTO.setImageId(13179067L);
			imageDTO.setClaimsImageFileId("13179067");			
			imageDTO.setClaimsImageID("13179067");
			imageDTO.setExtension("pdf");
			List<ImageDTO> imageDTOList = new ArrayList<>();			
			imageDTOList.add(imageDTO);
			String thumbnailImagePath = "C:" + File.separator + "test" + File.separator + "thumbnail_icon.jpg";						
			imagesList.add(imageDTO);
			
			when(databaseService.getDBConnection()).thenReturn(conn);
			
			when(mockImageDao.getImagePathFromClaimImage(Mockito.any(Connection.class), Mockito.any(ImageBn.class))).thenReturn(imagesList);
			
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
							.thenReturn("NA");
			
			String fileExtension = "pdf";
			String imagePath = imageDTO.getImagePath();
			
			when(ImageUploadUtil.getImagePath(Mockito.anyString())).thenReturn(imagePath);
			when(ImageUploadUtil.getFileExtension(Mockito.anyString())).thenReturn(fileExtension);						
			when(PDFToImageUtils.isPDFPasswordProtected(Mockito.anyString()))
					.thenReturn(false);			
			List<String> listOfImages = new ArrayList<>();
			String orifinalFileName = "orifinalFileName.pdf";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "[Image File]");
			claimImageDetailMap.put("imageReceivedThru", "Web");
			String outputPrefix = imagePath.substring(0,
					imagePath.lastIndexOf('.'));
			String imageFileName = String.format("%s%d.jpg", outputPrefix, 1);
			listOfImages.add(imageFileName);
			
			when(ImageUploadUtil.convertPDFtoJPEG(Mockito.anyString())).thenReturn(listOfImages);			
				
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			bOutput.write("test".getBytes());		
			
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);		
			
			when(mockImageDao.getThumbnailImagePathFromClaimId(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(imageDTOList);

			when(mockImageDetailService.hideClaimsImageFile(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyLong(), Mockito.anyLong())).thenReturn(false);

			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(true);

			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn(thumbnailImagePath);
			when(ImageUploadUtil.convertTIFFtoJPEG(Mockito.anyString())).thenReturn(listOfImages);
			when(mockImageDao.updateThumbnailImagePathAndReturn(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(new ImageDTO());
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(
					Mockito.any(Connection.class), Mockito.anyLong()))
							.thenReturn(orifinalFileName);
			when(mockImageDao.getClaimsImageDetails(
					Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);

			PowerMockito.mockStatic(ConfigUtil.class);
			when(ConfigUtil.getStaticImagesPath())
					.thenReturn("C:" + File.separator + "test");
								
			imagesList = imageDetailService.getReceiptDetailsByClaimId(userDtlsBn,"13179067");			
			
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			
			String expectedImagePath = "C:" + File.separator + "test"
					+ File.separator + "image_icon1.jpg";

			assertTrue("testGetReceiptDetailsByClaimIdOtherImagesWithPdfFormat"+" images List Size > 0 "+imagesList.size(),(imagesList.size()>0));
			assertTrue("testGetReceiptDetailsByClaimIdOtherImagesWithPdfFormat"+" Image Name "+imagesList.get(0).getImageName(),"image_icon".equalsIgnoreCase(imagesList.get(0).getImageName()));
			assertTrue("testGetReceiptDetailsByClaimIdOtherImagesWithPdfFormat"
					+ " Image Extension " + imagesList.get(0).getExtension(),
					"jpg".equalsIgnoreCase(imagesList.get(0).getExtension()));
			assertTrue(
					"testGetReceiptDetailsByClaimIdOtherImagesWithPdfFormat"
							+ " Image Path " + imagesList.get(0).getImagePath(),
					expectedImagePath.equalsIgnoreCase(
							imagesList.get(0).getImagePath()));
						
		} catch (Exception e) {
			fail("### testGetReceiptDetailsByClaimIdOtherImagesWithPdfFormat ### failed with following error: " + getStackTrace(e));
		}
	}
	
	@Test
	public void testGetFileByImageFileIdForExpenseImageSuccess(){		
		
		final FileDTO mockFileDTO = getMockFileDTO();
		
		try {
			
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(false).thenReturn(true).thenReturn(false);
			when(databaseService.getDBConnection()).thenReturn(conn);
			when(mockImageDao.getExpenseImageFileByFildId(
					Mockito.any(Connection.class), 
					Mockito.anyLong()))
			.thenReturn(mockFileDTO);
			
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream();
			bOutput.write("dummyContent".getBytes());		
			
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);	
			
			FileDTO fileDTO = imageDetailService.getFileByImageFileId("1043", null);
			
			assertTrue("Success. File stream fetched by expense image file id.", (fileDTO.getFileStream() != null && fileDTO.getFileStream().length != 0));
			
		} catch(Exception e) {
			fail("### testGetFileByImageFileIdForExpenseImageSuccess ### Failed with following error: " + getStackTrace(e));
		}

	}
	
	@Test
	public void testGetFileByImageFileIdForClaimsImageSuccess(){		
		
		final FileDTO mockFileDTO = getMockFileDTO();
		
		try {
			
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(true).thenReturn(false).thenReturn(false);
			when(databaseService.getDBConnection()).thenReturn(conn);
			when(mockImageDao.getClaimsImageFileByFildId(
					Mockito.any(Connection.class), 
					Mockito.anyLong()))
			.thenReturn(mockFileDTO);
			
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream();
			bOutput.write("dummyContent".getBytes());		
			
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);	
			
			FileDTO fileDTO = imageDetailService.getFileByImageFileId(null, "1043");
			
			assertTrue("Success. File stream fetched by claims image file id.", (fileDTO.getFileStream() != null && fileDTO.getFileStream().length != 0));
			
		} catch(Exception e) {
			fail("### testGetFileByImageFileIdForClaimsImageSuccess ### Failed with following error: " + getStackTrace(e));
		}

	}
	
	@Test
	public void testGetFileByImageFileIdForClaimsImageWithPathNotExists(){		
		
		final FileDTO mockFileDTO = getMockFileDTO();
		mockFileDTO.setFilePath("");
		
		try {
			
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(true).thenReturn(false).thenReturn(true);
			when(databaseService.getDBConnection()).thenReturn(conn);
			when(mockImageDao.getClaimsImageFileByFildId(
					Mockito.any(Connection.class), 
					Mockito.anyLong()))
			.thenReturn(mockFileDTO);
			
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(null);	
			
			FileDTO fileDTO = imageDetailService.getFileByImageFileId(null, "1043");
			
			assertTrue("Success. File stream fetched by claims image file id with file path not existing.", fileDTO != null && fileDTO.getFilePath().isEmpty());
			
		} catch(Exception e) {
			fail("### testGetFileByImageFileIdForClaimsImageSuccess ### Failed with following error: " + getStackTrace(e));
		}

	}
	
	@Test
	public void testGetFileByImageFileIdFailed(){		
		
		try {
			
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(true).thenReturn(false).thenReturn(false);
			when(databaseService.getDBConnection()).thenReturn(conn);
			when(mockImageDao.getClaimsImageFileByFildId(
					Mockito.any(Connection.class), 
					Mockito.anyLong()))
			.thenThrow(new SQLException("Exception occured while fetching file path."));
			
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream();
			bOutput.write("dummyContent".getBytes());		
			
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);	
			
			FileDTO fileDTO = imageDetailService.getFileByImageFileId(null, "1043");
			
			assertFalse("Failed. File stream not fetched by claims image file id.", (fileDTO.getFileStream() != null && fileDTO.getFileStream().length != 0));
			
		} catch (SystemException sysEx) {
			assertTrue("### testGetFileByImageFileIdFailed: expected SystemException ###-", sysEx.getCause() instanceof SQLException);
		} catch (Exception e) {
			fail("### testGetFileByImageFileIdFailed ### Failed with following error: " + getStackTrace(e));
		}

	}
	
	private FileDTO getMockFileDTO () {
		final FileDTO mockFileDTO = new FileDTO();
		mockFileDTO.setFileId(1043L);
		mockFileDTO.setFileFormat("PDF");
		mockFileDTO.setFilePath("/u01/images_ns1//Receipt/Feb2015/WEBUPLD_Shoebox20150225072703709_1470655.PDF|/u01/images_ns6//Receipt/Feb2015/WEBUPLD_Shoebox20150225072703709_1470655.PDF|");
		mockFileDTO.setFileName("Optical Designs receipt 2014_1424867223528_1470654.pdf");
		mockFileDTO.setMimeType("application/pdf");
		return mockFileDTO;
	}
	
	@SuppressWarnings("unused")
	@Test
	public void testGetReceiptDetailsByClaimIdSQLException(){		
		
		try
		{					
			UserDetailsBn userDtlsBn=new UserDetailsBn();
			userDtlsBn.setId(1059963L);
			userDtlsBn.setEeID(6108014);
			userDtlsBn.setUserType("EE");
			userDtlsBn.setErID(1000440L);
			userDtlsBn.setAdmnID(1000080);
			userDtlsBn.setName("Nagesh Nalla");
			userDtlsBn.setReqType(ReqType.WEB);			
			
			PowerMockito.mockStatic(PropertiesHelper.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(PDFToImageUtils.class);
						
			List<Long> claimImageList = new ArrayList<>();			
			claimImageList.add(Long.parseLong("13179067"));			
			
			PowerMockito.doThrow(new SQLException()).when(mockImageDao).getClaimsImageListByClaim(Mockito.any(Connection.class),Mockito.anyLong());
						
			List<ImageDTO> imagesList = imageDetailService.getReceiptDetailsByClaimId(userDtlsBn,"13179067");			
			
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			
			} catch (SystemException e) {
			Assert.assertTrue(true);
		} catch (Exception e) {
			fail("### testGetReceiptDetailsByClaimIdSQLException ### failed with following error: " + getStackTrace(e));
		}
	}
	
	@Test
	public void testGetReceiptDetailsByClaimIdOtherImagesWithTiffFormat(){		
		
		try
		{					
			UserDetailsBn userDtlsBn=new UserDetailsBn();
			userDtlsBn.setId(1059963L);
			userDtlsBn.setEeID(6108014);
			userDtlsBn.setUserType("EE");
			userDtlsBn.setErID(1000440L);
			userDtlsBn.setAdmnID(1000080);
			userDtlsBn.setName("Nagesh Nalla");
			userDtlsBn.setReqType(ReqType.WEB);			
			
			PowerMockito.mockStatic(PropertiesHelper.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(PDFToImageUtils.class);
			PowerMockito.mockStatic(ValidationUtil.class);
			
			List<ImageDTO> imagesList = new ArrayList<>();
						
									
			List<Long> claimImageList = new ArrayList<>();			
			claimImageList.add(Long.parseLong("13179067"));			
			
			when(mockImageDao.getClaimsImageListByClaim(Mockito.any(Connection.class),Mockito.anyLong())).thenReturn(claimImageList);
						
			ImageDTO imageDTO = new ImageDTO(); 
			
			imageDTO.setImageName("image_icon");
			imageDTO.setImagePath(
					"C:" + File.separator + "test" + File.separator
					+ "image_icon.jpg");
			imageDTO.setImageId(13179067L);
			imageDTO.setClaimsImageID("13179067L");
			imageDTO.setExtension("tif");
			imageDTO.setClaimsImageFileId("13179067");			
			imageDTO.setClaimsImageID("13179067");
			List<ImageDTO> imageDTOList = new ArrayList<>();			
			imageDTOList.add(imageDTO);
			String thumbnailImagePath = "C:" + File.separator + "test" + File.separator + "thumbnail_icon.jpg";	
						
			imagesList.add(imageDTO);
			
			when(databaseService.getDBConnection()).thenReturn(conn);
			
			when(mockImageDao.getImagePathFromClaimImage(Mockito.any(Connection.class), Mockito.any(ImageBn.class))).thenReturn(imagesList);
			
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
							.thenReturn("NA");
			
			String fileExtension = "tif";
			String imagePath = imageDTO.getImagePath();
			
			when(ImageUploadUtil.getImagePath(Mockito.anyString())).thenReturn(imagePath);
			when(ImageUploadUtil.getFileExtension(Mockito.anyString())).thenReturn(fileExtension);	

			List<String> listOfImages = new ArrayList<>();
			String orifinalFileName = "orifinalFileName.tif";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "[Image File]");
			claimImageDetailMap.put("imageReceivedThru", "Web");
			
			String outputPrefix = imagePath.substring(0,
					imagePath.lastIndexOf('.'));
			String imageFileName = String.format("%s%d.jpg", outputPrefix, 1);
			listOfImages.add(imageFileName);
			
			when(ImageUploadUtil.convertTIFFtoJPEG(Mockito.anyString())).thenReturn(listOfImages);			
						
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			bOutput.write("test".getBytes());		
			
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);	
			when(mockImageDao.getThumbnailImagePathFromClaimId(Mockito.any(Connection.class), Mockito.anyString()))
			.thenReturn(imageDTOList);

			when(mockImageDetailService.hideClaimsImageFile(Mockito.any(Connection.class),
			Mockito.any(UserDetailsBn.class), Mockito.anyLong(), Mockito.anyLong())).thenReturn(false);

			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(true);

			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
			Mockito.any(Connection.class))).thenReturn(thumbnailImagePath);
			when(ImageUploadUtil.convertTIFFtoJPEG(Mockito.anyString())).thenReturn(listOfImages);
			when(mockImageDao.updateThumbnailImagePathAndReturn(Mockito.any(Connection.class), Mockito.anyLong(),
			Mockito.anyString())).thenReturn(new ImageDTO());
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(
			Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(orifinalFileName);
			when(mockImageDao.getClaimsImageDetails(
			Mockito.any(Connection.class), Mockito.anyLong(),
			Mockito.anyLong())).thenReturn(claimImageDetailMap);

			PowerMockito.mockStatic(ConfigUtil.class);
			when(ConfigUtil.getStaticImagesPath())
			.thenReturn("C:" + File.separator + "test");
						
								
			imagesList = imageDetailService.getReceiptDetailsByClaimId(userDtlsBn,"13179067");			
			
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			
			String expectedImagePath = "C:" + File.separator + "test"
					+ File.separator + "image_icon1.jpg";

			assertTrue("testGetReceiptDetailsByClaimIdOtherImagesWithTiffFormat"+" images List Size > 0 "+imagesList.size(),(imagesList.size()>0));
			assertTrue("testGetReceiptDetailsByClaimIdOtherImagesWithTiffFormat"+" Image Name "+imagesList.get(0).getImageName(),"image_icon".equalsIgnoreCase(imagesList.get(0).getImageName()));
			assertTrue("testGetReceiptDetailsByClaimIdOtherImagesWithTiffFormat"+" Image Extension "+imagesList.get(0).getExtension(),"jpg".equalsIgnoreCase(imagesList.get(0).getExtension()));
			assertTrue(
					"testGetReceiptDetailsByClaimIdOtherImagesWithTiffFormat"
							+ " Image Path " + imagesList.get(0).getImagePath(),
					expectedImagePath.equalsIgnoreCase(
							imagesList.get(0).getImagePath()));
						
		} catch (Exception e) {
			fail("### testGetReceiptDetailsByClaimIdOtherImagesWithTiffFormat ### failed with following error: " + getStackTrace(e));
		}
	}
	
	
	@Test
	public void testGetReceiptDetailsByClaimIdOtherImagesWithOtherFormat(){		
		
		try
		{					
			UserDetailsBn userDtlsBn=new UserDetailsBn();
			userDtlsBn.setId(1059963L);
			userDtlsBn.setEeID(6108014);
			userDtlsBn.setUserType("EE");
			userDtlsBn.setErID(1000440L);
			userDtlsBn.setAdmnID(1000080);
			userDtlsBn.setName("Nagesh Nalla");
			userDtlsBn.setReqType(ReqType.WEB);			
			
			PowerMockito.mockStatic(PropertiesHelper.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(PDFToImageUtils.class);
			PowerMockito.mockStatic(ValidationUtil.class);
			
			List<ImageDTO> imagesList = new ArrayList<>();
						
									
			List<Long> claimImageList = new ArrayList<>();			
			claimImageList.add(Long.parseLong("13179067"));			
			
			when(mockImageDao.getClaimsImageListByClaim(Mockito.any(Connection.class),Mockito.anyLong())).thenReturn(claimImageList);
						
			ImageDTO imageDTO = new ImageDTO(); 
			
			imageDTO.setImageName("image_icon");
			imageDTO.setImagePath(
					"C:" + File.separator + "test" + File.separator
					+ "image_icon.jpg");
			imageDTO.setImageId(13179067L);
			imageDTO.setClaimsImageFileId("13179067");			
			imageDTO.setClaimsImageID("13179067");			
			imageDTO.setExtension("png");			
			List<ImageDTO> imageDTOList = new ArrayList<>();			
			imageDTOList.add(imageDTO);
			String thumbnailImagePath = "C:" + File.separator + "test" + File.separator + "thumbnail_icon.jpg";				
			imagesList.add(imageDTO);			
			
			
			when(databaseService.getDBConnection()).thenReturn(conn);
			
			when(mockImageDao.getImagePathFromClaimImage(Mockito.any(Connection.class), Mockito.any(ImageBn.class))).thenReturn(imagesList);
			
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
							.thenReturn("NA");
			
			String fileExtension = "png";
			String imagePath = imageDTO.getImagePath();
			
			when(ImageUploadUtil.getImagePath(Mockito.anyString())).thenReturn(imagePath);
			when(ImageUploadUtil.getFileExtension(Mockito.anyString())).thenReturn(fileExtension);	
			
			List<String> listOfImages = new ArrayList<>();
			String orifinalFileName = "orifinalFileName.pdf";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "[Image File]");
			claimImageDetailMap.put("imageReceivedThru", "Web");

			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			bOutput.write("test".getBytes());		
			
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);		
			when(mockImageDao.getThumbnailImagePathFromClaimId(Mockito.any(Connection.class), Mockito.anyString()))
			.thenReturn(imageDTOList);

			when(mockImageDetailService.hideClaimsImageFile(Mockito.any(Connection.class),
			Mockito.any(UserDetailsBn.class), Mockito.anyLong(), Mockito.anyLong())).thenReturn(false);

			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(true);

			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
			Mockito.any(Connection.class))).thenReturn(thumbnailImagePath);
			when(ImageUploadUtil.convertTIFFtoJPEG(Mockito.anyString())).thenReturn(listOfImages);
			when(mockImageDao.updateThumbnailImagePathAndReturn(Mockito.any(Connection.class), Mockito.anyLong(),
			Mockito.anyString())).thenReturn(new ImageDTO());
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(
			Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(orifinalFileName);
			when(mockImageDao.getClaimsImageDetails(
			Mockito.any(Connection.class), Mockito.anyLong(),
			Mockito.anyLong())).thenReturn(claimImageDetailMap);

			PowerMockito.mockStatic(ConfigUtil.class);
			when(ConfigUtil.getStaticImagesPath())
			.thenReturn("C:" + File.separator + "test");
						
								
			imagesList = imageDetailService.getReceiptDetailsByClaimId(userDtlsBn,"13179067");			
			
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			
			String expectedImagePath = "C:" + File.separator + "test"
					+ File.separator + "image_icon.jpg";

			assertTrue("testGetReceiptDetailsByClaimIdOtherImagesWithOtherFormat"+" images List Size > 0 "+imagesList.size(),(imagesList.size()>0));
			assertTrue("testGetReceiptDetailsByClaimIdOtherImagesWithOtherFormat"+" Image Name "+imagesList.get(0).getImageName(),"image_icon".equalsIgnoreCase(imagesList.get(0).getImageName()));
			assertTrue("testGetReceiptDetailsByClaimIdOtherImagesWithOtherFormat"+" Image Extension "+imagesList.get(0).getExtension(),"png".equalsIgnoreCase(imagesList.get(0).getExtension()));
			assertTrue(
					"testGetReceiptDetailsByClaimIdOtherImagesWithOtherFormat"
							+ " Image Path " + imagesList.get(0).getImagePath(),
					expectedImagePath.equalsIgnoreCase(
							imagesList.get(0).getImagePath()));
						
		} catch (Exception e) {
			fail("### testGetReceiptDetailsByClaimIdOtherImagesWithOtherFormat ### failed with following error: " + getStackTrace(e));
		}
	}
	
	@Test
	public void testGetReceiptDetailsByClaimIdWithCommonError(){	
		
		try
		{					
			UserDetailsBn userDtlsBn=new UserDetailsBn();
			userDtlsBn.setId(1059963L);
			userDtlsBn.setEeID(6108014);
			userDtlsBn.setUserType("EE");
			userDtlsBn.setErID(1000440L);
			userDtlsBn.setAdmnID(1000080);
			userDtlsBn.setName("Nagesh Nalla");
			userDtlsBn.setReqType(ReqType.WEB);	
			
			
			PowerMockito.mockStatic(ValidationUtil.class);

			List<ImageDTO> imagesList = new ArrayList<>();
						
			List<Long> claimImageList = new ArrayList<>();			
			claimImageList.add(Long.parseLong("13179067"));			
			
			ImageDTO imageDTO = new ImageDTO(); 
			
			imageDTO.setImageName("image_icon");
			imageDTO.setImagePath("C:" + File.separator + "test"
					+ File.separator
					+ "image_icon.jpg");
			imageDTO.setImageId(13179067L);
			imageDTO.setClaimsImageFileId("13179067");			
			imageDTO.setClaimsImageID("13179067");
			imageDTO.setExtension("png");
			List<ImageDTO> imageDTOList = new ArrayList<>();			
			imageDTOList.add(imageDTO);
			String thumbnailImagePath = "C:" + File.separator + "test" + File.separator + "thumbnail_icon.jpg";					
			imagesList.add(imageDTO);
			List<String> listOfImages = new ArrayList<>();
			String orifinalFileName = "orifinalFileName.pdf";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "[Image File]");
			claimImageDetailMap.put("imageReceivedThru", "Web");
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			bOutput.write("test".getBytes());	
			when(mockImageDao.getClaimsImageListByClaim(Mockito.any(Connection.class),Mockito.anyLong())).thenReturn(claimImageList);			
			
			when(databaseService.getDBConnection()).thenReturn(conn);
			
			when(mockImageDao.getImagePathFromClaimImage(Mockito.any(Connection.class), Mockito.any(ImageBn.class))).thenReturn(imagesList);						
				
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
							.thenReturn("NA");
			when(mockImageDao.getThumbnailImagePathFromClaimId(Mockito.any(Connection.class), Mockito.anyString()))
			.thenReturn(imageDTOList);
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);		
			when(mockImageDao.getThumbnailImagePathFromClaimId(Mockito.any(Connection.class), Mockito.anyString()))
			.thenReturn(imageDTOList);

	        when(mockImageDetailService.hideClaimsImageFile(Mockito.any(Connection.class),
			Mockito.any(UserDetailsBn.class), Mockito.anyLong(), Mockito.anyLong())).thenReturn(false);

	       when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(true);

	       when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
			Mockito.any(Connection.class))).thenReturn(thumbnailImagePath);
	       
	       when(ImageUploadUtil.convertTIFFtoJPEG(Mockito.anyString())).thenReturn(listOfImages);
	       when(mockImageDao.updateThumbnailImagePathAndReturn(Mockito.any(Connection.class), Mockito.anyLong(),
			Mockito.anyString())).thenReturn(new ImageDTO());
	       when(mockImageDao.getOriginalFileNameOfClaimImageFile(
			Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(orifinalFileName);
	       when(mockImageDao.getClaimsImageDetails(
			Mockito.any(Connection.class), Mockito.anyLong(),
			Mockito.anyLong())).thenReturn(claimImageDetailMap);

	       PowerMockito.mockStatic(ConfigUtil.class);
	       when(ConfigUtil.getStaticImagesPath())
			.thenReturn("C:" + File.separator + "test");
			
			imagesList = imageDetailService.getReceiptDetailsByClaimId(userDtlsBn,"13179067");				
						
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			
			fail("### testGetReceiptDetailsByClaimIdWithCommonError ### Failed with Business Exception Not Triggered: "+imagesList.size());
		
		} 
		catch (BusinessLogicException ex) 
		{
			assertTrue("### testGetReceiptDetailsByClaimIdWithCommonError ###"+(ex.getErrorBn().getCode()),1001 == ex.getErrorBn().getCode());
			assertTrue(
					"### testGetReceiptDetailsByClaimIdWithCommonError ###"
							+ (ex.getErrorBn().getMessage()),
					"Apologies. We're experiencing a technical issue and are working to resolve it right now. Please come back later today."
							.equalsIgnoreCase(ex.getErrorBn().getMessage()));
			
		}catch (Exception e) {
			fail("### testGetReceiptDetailsByClaimIdWithCommonError ### failed with following error: " + getStackTrace(e));
		}
	}
	
	@Test
	public void testGetReceiptDetailsByClaimIdWithNoClaimsData(){		
		try
		{	
			UserDetailsBn userDtlsBn=new UserDetailsBn();
			userDtlsBn.setId(1059963L);
			userDtlsBn.setEeID(6108014);
			userDtlsBn.setUserType("EE");
			userDtlsBn.setErID(1000440L);
			userDtlsBn.setAdmnID(1000080);
			userDtlsBn.setName("Nagesh Nalla");
			userDtlsBn.setReqType(ReqType.WEB);
			
			List<Long> claimImageList = new ArrayList<>();
			
			when(mockImageDao.getClaimsImageListByClaim(Mockito.any(Connection.class),Mockito.anyLong())).thenReturn(claimImageList);
			
			List<ImageDTO> imagesList = imageDetailService.getReceiptDetailsByClaimId(userDtlsBn,"13179067");
			
			assertTrue("testGetReceiptDetailsByClaimIdWithNoClaimsData"+" images List Size == 0 "+imagesList.size(),(imagesList.size()==0));
		} 
		catch (Exception e) 
		{
			fail("### testGetReceiptDetailsByClaimIdWithNoClaimsData ### failed with following error: " + getStackTrace(e));
		}
	}	


	@Test
	public void testHideClaimsImageFileForImageReceiveThroughWeb() {

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			String demogValue = "Web~Mobile~Conversion";
			String orifinalFileName = "ncsfxorifinalFileName.tif";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "[Image File]");
			claimImageDetailMap.put("imageReceivedThru", "Web");

			boolean returnValue = true;
			UserDetailsBn userDetailsBn = getUserDetailBn();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
							.thenReturn(demogValue);
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(orifinalFileName);

			when(mockImageDao.getClaimsImageDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);

			returnValue = imageDetailService.hideClaimsImageFile(conn, userDetailsBn, 53462, 87537);
			assertTrue("testHideClaimsImageFileForImageReceiveThroughWeb ", returnValue);
		} catch (Exception e) {
			fail("testHideClaimsImageFileForImageReceiveThroughWeb fail " + e.getMessage());
		}
	}
	
	@Test
	public void testHideClaimsImageFileNoCondtnSatsfd() {

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			String demogValue = "Web~Mobile~Conversion";
			String orifinalFileName = "ncsfxorifinalFileName.tif";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "[Image File]");
			claimImageDetailMap.put("imageReceivedThru", "Fax");

			boolean returnValue = true;
			UserDetailsBn userDetailsBn = getUserDetailBn();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(demogValue);
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(orifinalFileName);

			when(mockImageDao.getClaimsImageDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);

			returnValue = imageDetailService.hideClaimsImageFile(conn, userDetailsBn, 53462, 87537);
			assertFalse(returnValue);
		} catch (Exception e) {
			fail("testHideClaimsImageFileNoCondtnSatsfd fail " + e.getMessage());
		}
	}

	@Test
	public void testHideClaimsImageFileForImageReceiveThroughMobile() {

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			String demogValue = "Web~Mobile~Conversion";
			String orifinalFileName = "ncsfxorifinalFileName.tif";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "[Image File]");
			claimImageDetailMap.put("imageReceivedThru", "Mobile");

			boolean returnValue = true;
			UserDetailsBn userDetailsBn = getUserDetailBn();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
							.thenReturn(demogValue);
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(orifinalFileName);

			when(mockImageDao.getClaimsImageDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);

			returnValue = imageDetailService.hideClaimsImageFile(conn, userDetailsBn, 53462, 87537);
			assertTrue("testHideClaimsImageFileForImageReceiveThroughMobile ", returnValue);
		} catch (Exception e) {
			fail("testHideClaimsImageFileForImageReceiveThroughMobile fail" + e.getMessage());
		}
	}

	@Test
	public void testHideClaimsImageFileForImageReceiveThroughConversion() {

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			String demogValue = "Web~Mobile~Conversion";
			String orifinalFileName = "ncsfxorifinalFileName.tif";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "[Image File]");
			claimImageDetailMap.put("imageReceivedThru", "Conversion");

			boolean returnValue = true;
			UserDetailsBn userDetailsBn = getUserDetailBn();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
							.thenReturn(demogValue);
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(orifinalFileName);
			when(mockImageDao.getClaimsImageDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);
			returnValue = imageDetailService.hideClaimsImageFile(conn, userDetailsBn, 53462, 87537);
			assertTrue("testHideClaimsImageFileForImageReceiveThroughConversion ", returnValue);
		} catch (Exception e) {
			fail("testHideClaimsImageFileForImageReceiveThroughConversion fail" + e.getMessage());
		}
	}

	@Test
	public void testHideClaimsImageFileForImageReceiveThroughMailOrFaxSourcePaper() {

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			String demogValue = "Paper";
			String orifinalFileName = "orifinalFileName.tif";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "[Image File]");
			claimImageDetailMap.put("imageReceivedThru", "Ftp");

			boolean returnValue = true;
			UserDetailsBn userDetailsBn = getUserDetailBn();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
							.thenReturn(demogValue);
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(orifinalFileName);
			when(mockImageDao.getClaimsImageDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);
			returnValue = imageDetailService.hideClaimsImageFile(conn, userDetailsBn, 53462, 87537);
			assertTrue("testHideClaimsImageFileForImageReceiveThroughMailOrFaxSourcePaper ", returnValue);
		} catch (Exception e) {
			fail("fail testHideClaimsImageFileForImageReceiveThroughMailOrFaxSourcePaper " + e.getMessage());
		}
	}
	
	@Test
	public void testHideClaimsImageFileForImageReceiveThroughMailOrFaxSourcePaperAndUploadSourceFAX() {

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			String demogValue = "Paper";
			String orifinalFileName = "ncsfxorifinalFileName.tif";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "[Image File]");
			claimImageDetailMap.put("imageReceivedThru", "Ftp");

			boolean returnValue = true;
			UserDetailsBn userDetailsBn = getUserDetailBn();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
							.thenReturn(demogValue);
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(orifinalFileName);
			when(mockImageDao.getClaimsImageDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);
			returnValue = imageDetailService.hideClaimsImageFile(conn, userDetailsBn, 53462, 87537);
			assertTrue("testHideClaimsImageFileForImageReceiveThroughMailOrFaxSourcePaper ", returnValue);
		} catch (Exception e) {
			fail("fail testHideClaimsImageFileForImageReceiveThroughMailOrFaxSourcePaper " + e.getMessage());
		}
	}

	@Test
	public void testHideClaimsImageFileForImageReceiveThroughMailOrFaxSourceFax() {

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			String demogValue = "Fax";
			String orifinalFileName = "orifinalFileName.tif";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "FAXCOM");
			claimImageDetailMap.put("imageReceivedThru", "Ftp");

			boolean returnValue = true;
			UserDetailsBn userDetailsBn = getUserDetailBn();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
							.thenReturn(demogValue);
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(orifinalFileName);
			when(mockImageDao.getClaimsImageDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);
			returnValue = imageDetailService.hideClaimsImageFile(conn, userDetailsBn, 53462, 87537);
			assertTrue("testHideClaimsImageFileForImageReceiveThroughMailOrFaxSourceFax ", returnValue);
		} catch (Exception e) {
			fail("fail testHideClaimsImageFileForImageReceiveThroughMailOrFaxSourceFax " + e.getMessage());
		}
	}
		
	@SuppressWarnings("unchecked")
	@Test
	public void testHideClaimsImageFileForSQLException() {
		LOGGER.info("########### testHideClaimsImageFileForSQLException() Test method started ###########");
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			long claimImageId= 13179067L;
			long claimImageFileId= 13179067L;

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
								.thenThrow(SQLException.class);
			
			imageDetailService.hideClaimsImageFile(conn, userDetailsBn, claimImageId, claimImageFileId);
			fail("### testHideClaimsImageFileForSQLException ### Failed with following error: expected exception has not occurred.");
			
		} catch (SystemException systemException) {
			assertTrue("### testHideClaimsImageFileForSQLException: expected SystemException ###-"+systemException, true);
			assertTrue("### testApplyPdfTiffImageFormatForIOException: expected SystemException ###-"+systemException,
					systemException.getMessage().contains("SQLException"));
		} catch (Exception e) {
			LOGGER.error(getStackTrace(e));
			fail("### testHideClaimsImageFileForSQLException ### Failed with following error: "
					+ getStackTrace(e));
		}
		LOGGER.info("########### testHideClaimsImageFileForSQLException() Test method completed ###########");
	}
	
	@Test
	public void testGetHeaderDivWithBarcode(){
		try{
		Map<String, String> labelMap = new HashMap<>();
		labelMap.put("TITLE", "Barcode Print");
		PowerMockito.mockStatic(ImageUploadUtil.class);
		String filePath = new java.io.File(".").getCanonicalPath();
		Whitebox.setInternalState(ImageUploadUtil.class,
				"TEMP_FILE_LOCATION", filePath);
		
		FileDTO fileDTO = new FileDTO();
		fileDTO.setFileFormat(".png");
		fileDTO.setFileStream(new byte[12]);
		PowerMockito.doNothing().when(ImageUploadUtil.class,"writeFile" ,Mockito.any(ByteArrayInputStream.class),Mockito.anyString());			
		String result = ImageDetailService.getHeaderDivWithBarcode(labelMap, "logo.png", "200009670237302", fileDTO);
		assertTrue(result.contains("Barcode Print"));
		}catch(Exception e){
			fail("testGetHeaderDivWithBarcode fail with the following error "+getStackTrace(e));
		}
	}
		
	@Test
	public void testGetDefaultImage(){
		String currentFilePath;
		try {
			currentFilePath = new java.io.File(".").getCanonicalPath();
			PowerMockito.mockStatic(ConfigUtil.class);
			String filePath = currentFilePath;
			when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			ImageDTO imageDTO = imageDetailService.getDefaultImage();
			assertTrue("testGetDefaultImage:" + " imageDTO is not null- " + imageDTO, imageDTO != null);
			assertTrue("testGetDefaultImage:" + " image path is not null- " + imageDTO.getImagePath(),
					imageDTO.getImagePath() != null);
			assertTrue("testGetDefaultImage:" + " image name equals pdf_icon.jpg- "+imageDTO.getImageName(),
					imageDTO.getImageName().equals("no-receipt-image.jpg"));
		} catch (Exception e) {
			fail("### testGetDefaultImage ### Failed with following error: " + getStackTrace(e));
		}
	}
	
	@Test
	public void testApplyPdfTiffImageFormatListPDFAndPasswordProtected(){
		LOGGER.info("########### testApplyPdfTiffImageFormatListPDFAndPasswordProtected() Test method started ###########");
		try{
			
		List<ImageDTO> imagesList = new ArrayList<>();		
					
		ImageDTO imageDTO = new ImageDTO(); 
		
		imageDTO.setImagePath(
				"C:" + File.separator + "test" + File.separator
				+ "pdf_icon.pdf");
		imageDTO.setImageId(13179067L);
		imageDTO.setClaimsImageID("13179067");
					
		imagesList.add(imageDTO);
		
			PowerMockito.mockStatic(PDFToImageUtils.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		
			when(PDFToImageUtils.isPDFPasswordProtected(Mockito.anyString()))
					.thenReturn(true);
		
		String filePath = new java.io.File(".").getCanonicalPath();
		when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);
		
		List<ImageDTO> filteredList = imageDetailService.applyPdfTiffImageFormat(imagesList);
		
		assertTrue((filteredList != null & !filteredList.isEmpty()));		
		assertTrue("testApplyPdfTiffImageFormatTif:" + " image extension should be jpg- " 
				+ filteredList.get(0).getExtension(), "jpg".equals(filteredList.get(0).getExtension()));
		assertTrue("testApplyPdfTiffImageFormatTif:" + " image path is not null and contains \"jpg\"- " 
				+ filteredList.get(0).getImagePath(), null!=filteredList.get(0).getImagePath() 
						&& filteredList.get(0).getImagePath().contains("jpg"));
		
		} catch(Exception e){
			LOGGER.error(getStackTrace(e));
			fail("### testApplyPdfTiffImageFormatListPDFAndPasswordProtected ### Failed with following error: "
					+ getStackTrace(e));
		}
		LOGGER.info("########### testApplyPdfTiffImageFormatListPDFAndPasswordProtected() Test method completed ###########");
	}
	
	@Test
	public void testApplyPdfTiffImageFormatListPDFAndNotPasswordProtected(){
		LOGGER.info("########### testApplyPdfTiffImageFormatListPDFAndNotPasswordProtected() Test method started ###########");
		try{
			
		List<ImageDTO> imagesList = new ArrayList<>();		
					
		ImageDTO imageDTO = new ImageDTO(); 
		
		imageDTO.setImagePath(
				"C:" + File.separator + "test" + File.separator
				+ "pdf_icon.pdf");
		imageDTO.setImageId(13179067L);
		imageDTO.setClaimsImageID("13179067");
					
		imagesList.add(imageDTO);
		
			PowerMockito.mockStatic(PDFToImageUtils.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);
		
		String fileExtension = "pdf";
		String imagePath = imageDTO.getImagePath();
		
		when(ImageUploadUtil.getImagePath(Mockito.anyString())).thenReturn(imagePath);
		when(ImageUploadUtil.getFileExtension(Mockito.anyString())).thenReturn(fileExtension);	
		
			when(PDFToImageUtils.isPDFPasswordProtected(Mockito.anyString()))
					.thenReturn(false);
		
		String filePath = "C:" + File.separator + "test" + File.separator
				+ "pdf_icon.pdf";
		
		when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);
		
		List<String> tempImagesList = Arrays.asList(
				"C:" + File.separator + "test" + File.separator+"pdf_icon1.jpg",
				"C:" + File.separator + "test" + File.separator+"pdf_icon2.jpg");
		
		when(ImageUploadUtil.convertPDFtoJPEG(filePath))
				.thenReturn(tempImagesList);
		
		List<ImageDTO> filteredList = imageDetailService.applyPdfTiffImageFormat(imagesList);
		assertTrue((filteredList != null & !filteredList.isEmpty()));
		
		assertTrue("testApplyPdfTiffImageFormatTif:" + " image extension should be jpg- " 
				+ filteredList.get(0).getExtension(), "jpg".equals(filteredList.get(0).getExtension()));
		assertTrue("testApplyPdfTiffImageFormatTif:" + " image path is not null and contains \"jpg\"- " 
				+ filteredList.get(0).getImagePath(), null!=filteredList.get(0).getImagePath() 
						&& filteredList.get(0).getImagePath().contains("jpg"));
		
		} catch(Exception e){
			LOGGER.error(getStackTrace(e));
			fail("### testApplyPdfTiffImageFormatListPDFAndNotPasswordProtected ### Failed with following error: "
					+ getStackTrace(e));
		}
		LOGGER.info("########### testApplyPdfTiffImageFormatListPDFAndNotPasswordProtected() Test method completed ###########");
	}
	
	@Test
	public void testApplyPdfTiffImageFormatListTif(){
		LOGGER.info("########### testApplyPdfTiffImageFormatListTif() Test method started ###########");
		try{
			
		List<ImageDTO> imagesList = new ArrayList<>();		
					
		ImageDTO imageDTO = new ImageDTO(); 
		
		imageDTO.setImagePath(
				"C:" + File.separator + "test" + File.separator
				+ "tif_icon.tif");
		imageDTO.setImageId(13179067L);
		imageDTO.setClaimsImageID("13179067");
					
		imagesList.add(imageDTO);
		
			PowerMockito.mockStatic(PDFToImageUtils.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);
		
		
		String filePath = "C:" + File.separator + "test" + File.separator
				+ "tif_icon.tif";
		
		List<String> tempImagesList = Arrays.asList(
				"C:" + File.separator + "test" + File.separator+"tif_icon1.jpg",
				"C:" + File.separator + "test" + File.separator+"tif_icon2.jpg");
		
		String fileExtension = "tif";
		String imagePath = imageDTO.getImagePath();
		
		when(ImageUploadUtil.getImagePath(Mockito.anyString())).thenReturn(imagePath);
		when(ImageUploadUtil.getFileExtension(Mockito.anyString())).thenReturn(fileExtension);	
		
			when(PDFToImageUtils.isPDFPasswordProtected(Mockito.anyString()))
					.thenReturn(true);
				
		when(ImageUploadUtil.convertTIFFtoJPEG(filePath))
			.thenReturn(tempImagesList);

		List<ImageDTO> filteredList = imageDetailService.applyPdfTiffImageFormat(imagesList);
		assertTrue((filteredList != null & !filteredList.isEmpty()));
		
		assertTrue("testApplyPdfTiffImageFormatTif:" + " image extension should be jpg- " 
				+ filteredList.get(0).getExtension(), "jpg".equals(filteredList.get(0).getExtension()));
		assertTrue("testApplyPdfTiffImageFormatTif:" + " image path is not null and contains \"jpg\"- " 
				+ filteredList.get(0).getImagePath(), null!=filteredList.get(0).getImagePath() 
						&& filteredList.get(0).getImagePath().contains("jpg"));
		
		} catch(Exception e){
			LOGGER.error(getStackTrace(e));
			fail("### testApplyPdfTiffImageFormatListTif ### Failed with following error: "
					+ getStackTrace(e));
		}
		LOGGER.info("########### testApplyPdfTiffImageFormatListTif() Test method completed ###########");
	}
	
	@SuppressWarnings("unchecked")
	@Test
	public void testApplyPdfTiffImageFormatForIOException() {
		LOGGER.info("########### testApplyPdfTiffImageFormatForIOException() Test method started ###########");
		try {
			
			List<ImageDTO> imagesList = new ArrayList<>();		
			
			ImageDTO imageDTO = new ImageDTO(); 			
			imageDTO.setImagePath(
					"C:" + File.separator + "test" + File.separator
					+ "tif_icon.pdf");
			imageDTO.setImageId(13179067L);
			imageDTO.setClaimsImageID("13179067");
						
			imagesList.add(imageDTO);
			
			PowerMockito.mockStatic(PDFToImageUtils.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);			
			
			String fileExtension = "pdf";
			String imagePath = imageDTO.getImagePath();
			
			when(ImageUploadUtil.getImagePath(Mockito.anyString())).thenReturn(imagePath);
			when(ImageUploadUtil.getFileExtension(Mockito.anyString())).thenReturn(fileExtension);	
			when(PDFToImageUtils.isPDFPasswordProtected(Mockito.anyString()))
				.thenThrow(IOException.class);
			
			imageDetailService.applyPdfTiffImageFormat(imagesList);
			fail("### testApplyPdfTiffImageFormatForIOException ### Failed with following error: expected exception has not occurred.");
		
		} catch (SystemException systemException) {
		assertTrue("### testApplyPdfTiffImageFormatForIOException: expected SystemException ###-"+systemException, true);
		assertTrue("### testApplyPdfTiffImageFormatForIOException: expected SystemException ###-"+systemException,
				systemException.getMessage().contains("IOException"));
		} catch (Exception e) {
			LOGGER.error(getStackTrace(e));
			fail("### testApplyPdfTiffImageFormatForIOException ### Failed with following error: "
					+ getStackTrace(e));
		}
		LOGGER.info("########### testApplyPdfTiffImageFormatForIOException() Test method completed ###########");
	}	
	
	@Test
	public void testGetThumbnailExpenseIdNot0(){
		LOGGER.info("########### testGetThumbnailExpenseIdNot0() Test method started ###########");
		try{
		when(databaseService.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(databaseService).closeDBConnection();
		UserDetailsBn userDetailsBn = getUserDetailBn();
		ImageBn imageBn = new ImageBn(123, 125, 0);
				
		ImageDTO imageDTO = new ImageDTO();
		imageDTO.setImagePath("C:" + File.separator + "test" + File.separator + "pdf_icon.jpg");
		imageDTO.setImageName("pdf_icon.jpg");	
		
		when(mockImageDao.getThumbnailImagePath(Mockito.any(Connection.class), Mockito.any(ImageBn.class)))
			.thenReturn(imageDTO);
		
		List<ImageDTO> actualResult = imageDetailService.getThumbnail(imageBn, userDetailsBn);
		assertTrue((actualResult != null & !actualResult.isEmpty()));
		
		} catch(Exception e){
			LOGGER.error(getStackTrace(e));
			fail("### testGetThumbnailExpenseIdNot0 ### Failed with following error: "
					+ getStackTrace(e));
		}
		LOGGER.info("########### testGetThumbnailExpenseIdNot0() Test method completed ###########");
	}
	
	@Test
	public void testGetThumbnailExpenseId0(){
		LOGGER.info("########### testGetThumbnailExpenseId0() Test method started ###########");
		try{
		when(databaseService.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(databaseService).closeDBConnection();
		UserDetailsBn userDetailsBn = getUserDetailBn();
		ImageBn imageBn = new ImageBn(123, 0, 0);
				
		ImageDTO imageDTO = new ImageDTO();
		imageDTO.setImagePath("C:" + File.separator + "test" + File.separator + "pdf_icon.jpg");
		imageDTO.setImageName("pdf_icon.jpg");	
		
		when(mockImageDetailService.getThumbnailForClaimImage(Mockito.any(Connection.class),
				Mockito.any(ImageBn.class), Mockito.any(UserDetailsBn.class)))
							.thenReturn(imageDTO);	
		
		List<ImageDTO> actualResult = imageDetailService.getThumbnail(imageBn, userDetailsBn);
		assertTrue((actualResult != null & !actualResult.isEmpty()));
		
		} catch(Exception e){
			LOGGER.error(getStackTrace(e));
			fail("### testGetThumbnailExpenseId0 ### Failed with following error: "
					+ getStackTrace(e));
		}
		LOGGER.info("########### testGetThumbnailExpenseId0() Test method completed ###########");
	}	
	
	@SuppressWarnings("unchecked")
	@Test
	public void testGetThumbnailForSQLException() {
		LOGGER.info("########### testGetThumbnailForSQLException() Test method started ###########");
		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			UserDetailsBn userDetailsBn = getUserDetailBn();
			ImageBn imageBn = new ImageBn(123, 125, 0);
					
			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImagePath("C:" + File.separator + "test" + File.separator + "pdf_icon.jpg");
			imageDTO.setImageName("pdf_icon.jpg");	
						
			when(mockImageDao.getThumbnailImagePath(Mockito
					.any(Connection.class), Mockito.any(ImageBn.class)))
						.thenThrow(SQLException.class);
			
			imageDetailService.getThumbnail(imageBn, userDetailsBn);
			fail("### testGetThumbnailForSQLException ### Failed with following error: expected exception has not occurred.");
			
		} catch (SystemException systemException) {
			assertTrue("### testGetThumbnailForSQLException: expected SystemException ###-"+systemException, true);
			assertTrue("### testGetThumbnailForSQLException: expected SystemException ###-"+systemException,
					systemException.getMessage().contains("SQLException"));
		} catch (Exception e) {
			LOGGER.error(getStackTrace(e));
			fail("### testGetThumbnailForSQLException ### Failed with following error: "
					+ getStackTrace(e));
		}
		LOGGER.info("########### testGetThumbnailForSQLException() Test method completed ###########");
	}
	
	@Test
	public void testGetThumbnailForClaimImageDefaultImage(){
		
		LOGGER.info("########### testGetThumbnailForClaimImageDefaultImage() Test method started ###########");
		try{		
			ImageBn imageBn = new ImageBn(123, 125, 0);
			ImageDTO imageFileDTO = new ImageDTO();
			UserDetailsBn userDetailsBn = getUserDetailBn();			
			
			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImagePath("C:" + File.separator + "test" + File.separator + "no-receipt-image.jpg");
			imageDTO.setImageName("no-receipt-image.jpg");			
			
			when(mockImageDao.getImageFileIdFromClaimImage(Mockito.any(Connection.class), Mockito.any(ImageBn.class)))
					.thenReturn(imageFileDTO);
			String demogValue = "Fax";
			String orifinalFileName = "orifinalFileName.tif";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "FAXCOM");
			claimImageDetailMap.put("imageReceivedThru", "Ftp");

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString()))
							.thenReturn(demogValue);
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(
					Mockito.any(Connection.class), Mockito.anyLong()))
							.thenReturn(orifinalFileName);
			when(mockImageDao.getClaimsImageDetails(
					Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);

			PowerMockito.mockStatic(ConfigUtil.class);
			when(ConfigUtil.getStaticImagesPath())
					.thenReturn("C:" + File.separator + "test");
			
			ImageDTO actualImageDTO = imageDetailService.getThumbnailForClaimImage(conn,
					imageBn, userDetailsBn);			
			
			assertTrue("testGetThumbnailForClaimImageDefaultImage:" + " imageDTO is not null- " + actualImageDTO, actualImageDTO != null);
			assertTrue("testGetThumbnailForClaimImageDefaultImage:" + " image path match with default- " + actualImageDTO.getImagePath(),
					imageDTO.getImagePath().equals(actualImageDTO.getImagePath()));
			assertTrue("testGetThumbnailForClaimImageDefaultImage:" + " image name match with default- "+actualImageDTO.getImageName(),
					imageDTO.getImageName().equals(actualImageDTO.getImageName()));
			
			
		} catch (Exception e) { 
			LOGGER.error(getStackTrace(e));
			fail("### testGetThumbnailForClaimImageDefaultImage ### Failed with following error: "
					+ getStackTrace(e));
		}
		LOGGER.info("########### testGetThumbnailForClaimImageDefaultImage() Test method completed ###########");
		
	}
	
	@Test
	public void testGetThumbnailForClaimImageThumbnailImage(){
		
		LOGGER.info("########### testGetThumbnailForClaimImageThumbnailImage() Test method started ###########");
		
		String currentFilePath;
		try {
		ImageDTO imageFileDTO = new ImageDTO();
		ImageBn imageBn = new ImageBn(123, 125, 0);
		UserDetailsBn userDetailsBn = getUserDetailBn();	
		
		currentFilePath = new java.io.File(".").getCanonicalPath();
		
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);
		
		String filePath = currentFilePath;
		when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);
		
		when(mockImageDao.getImageFileIdFromClaimImage(Mockito.any(Connection.class), 
				Mockito.any(ImageBn.class)))
					.thenReturn(imageFileDTO);
		
		when(mockImageDetailService.hideClaimsImageFile(Mockito.any(Connection.class), 
				Mockito.any(UserDetailsBn.class), Mockito.anyLong(), Mockito.anyLong()))
					.thenReturn(false);
		
		ImageDTO imageDTO = new ImageDTO();
		String thumbnailImagePath = "C:" + File.separator + "THUMBNAIL_" + "Image" + "." +"jpg";
		
		when(mockImageDao.getThumbnailImagePathFromClaimsImage(Mockito.any(Connection.class), 
				Mockito.any(ImageBn.class)))
					.thenReturn(imageDTO);	
		when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(),
				Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn(thumbnailImagePath);
		when(mockImageDao.updateThumbnailImagePathAndReturn(Mockito.any(Connection.class),
				Mockito.anyLong(), Mockito.anyString()))
					.thenReturn(imageDTO);
		
		ImageDTO actualImageDTO = imageDetailService.getThumbnailForClaimImage(conn, imageBn, userDetailsBn);
		assertTrue("testGetThumbnailForClaimImageThumbnailImage:" + " imageDTO is not null- " + imageFileDTO, actualImageDTO != null);
		
		} catch (Exception e) {
			fail("### testGetThumbnailForClaimImageThumbnailImage ### Failed with following error: " + getStackTrace(e));
		}
		
		LOGGER.info("########### testGetThumbnailForClaimImageThumbnailImage() Test method completed ###########");
	}
	
	@Test
	public void testGetThumbnailFromClaimIdDefaultImage() {
		LOGGER.info("########### testGetThumbnailFromClaimIdDefaultImage() Test method started ###########");

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			UserDetailsBn userDetailsBn = getUserDetailBn();

			List<ImageDTO> imageBnList = new ArrayList<>();
			ImageDTO imageBn = getImageDTO();
			imageBn.setClaimsImageID("13179067");
			imageBn.setClaimsImageFileId("1234555");
			String claimId = "117026078";
			imageBnList.add(imageBn);

			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImagePath("C:" + File.separator + "test" + File.separator + "no-receipt-image.jpg");
			imageDTO.setImageName("no-receipt-image.jpg");

			when(mockImageDao.getThumbnailImagePathFromClaimId(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(imageBnList);

			String demogValue = "Fax";
			String orifinalFileName = "orifinalFileName.tif";
			Map<String, String> claimImageDetailMap = new HashMap<>();
			claimImageDetailMap.put("emailFrom", "donotreply@acclaris.com");
			claimImageDetailMap.put("emailSubject", "FAXCOM");
			claimImageDetailMap.put("imageReceivedThru", "Ftp");

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(demogValue);
			when(mockImageDao.getOriginalFileNameOfClaimImageFile(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(orifinalFileName);
			when(mockImageDao.getClaimsImageDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(claimImageDetailMap);

			PowerMockito.mockStatic(ConfigUtil.class);
			when(ConfigUtil.getStaticImagesPath()).thenReturn("C:" + File.separator + "test");

			PowerMockito.mockStatic(ImageUploadUtil.class);
			InputStream input = TestImageDetailService.class.getClass()
					.getResourceAsStream("/imagefile" + "/" + "testimage.png");
			byte[] buffer = new byte[8192];
			int bytesRead;
			ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

			while ((bytesRead = input.read(buffer)) != -1) {
				outputStream.write(buffer, 0, bytesRead);
			}

			when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(outputStream);
			List<ImageDTO> actualImageDTOList = imageDetailService.getThumbnailFromClaimId(claimId, userDetailsBn);

			assertTrue("testGetThumbnailFromClaimIdDefaultImage:" + " imageDTO is not null- " + actualImageDTOList,
					actualImageDTOList != null);
			assertTrue(
					"testGetThumbnailFromClaimIdDefaultImage:" + " image path match with default- "
							+ actualImageDTOList.stream().findFirst().get().getImagePath(),
					imageDTO.getImagePath().equals(actualImageDTOList.stream().findFirst().get().getImagePath()));
			assertTrue(
					"testGetThumbnailFromClaimIdDefaultImage:" + " image name match with default- "
							+ actualImageDTOList.stream().findFirst().get().getImagePath(),
					imageDTO.getImageName().equals(actualImageDTOList.stream().findFirst().get().getImageName()));

		} catch (Exception e) {
			fail("### testGetThumbnailFromClaimId ### Failed with following error: " + getStackTrace(e));
		}
		LOGGER.info("########### testGetThumbnailFromClaimIdDefaultImage() Test method completed ###########");
	}
	
	@Test
	public void testGetThumbnailFromClaimIdForUpdateThumbnailImagePath() {
		LOGGER.info(
				"########### testGetThumbnailFromClaimIdForUpdateThumbnailImagePath() Test method started ###########");

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			UserDetailsBn userDetailsBn = getUserDetailBn();

			ImageDTO imageBn = getImageDTO();
			imageBn.setClaimsImageID("13179067");
			imageBn.setClaimsImageFileId("1234555");

			String thumbnailImagePath = "C:" + File.separator + "test" + File.separator + "thumbnail_icon.jpg";

			String claimId = "117026078";

			List<ImageDTO> imageDTOList = new ArrayList<>();
			ImageDTO imageDTO = getImageDTO();
			imageDTOList.add(imageDTO);

			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);

			when(mockImageDao.getThumbnailImagePathFromClaimId(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(imageDTOList);

			when(mockImageDetailService.hideClaimsImageFile(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyLong(), Mockito.anyLong())).thenReturn(false);

			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(true);

			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn(thumbnailImagePath);

			when(mockImageDao.updateThumbnailImagePathAndReturn(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(new ImageDTO());

			when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(new ByteArrayOutputStream());

			List<ImageDTO> actualImageDTOList = imageDetailService.getThumbnailFromClaimId(claimId, userDetailsBn);

			assertTrue("testGetThumbnailFromClaimIdForUpdateThumbnailImagePath:" + " imageDTO is not null- "
					+ actualImageDTOList, actualImageDTOList != null);
			assertTrue(
					"testGetThumbnailFromClaimIdForUpdateThumbnailImagePath:" + " ThumbnailImagePath is not null- "
							+ actualImageDTOList.stream().findFirst().get().getThumbnailImagePath(),
					imageDTO.getImagePath().equals(actualImageDTOList.stream().findFirst().get().getImagePath()));

		} catch (Exception e) {
			fail("### testGetThumbnailFromClaimIdForUpdateThumbnailImagePath ### Failed with following error: "
					+ getStackTrace(e));
		}
		LOGGER.info(
				"########### testGetThumbnailFromClaimIdUpdateThumbnailImagePath() Test method completed ###########");
	}
	
	@SuppressWarnings("unused")
	@Test
	public void testGetThumbnailFromClaimIdSQLException() {
		LOGGER.info("########### testGetThumbnailFromClaimIdSQLException() Test method started ###########");

		try {
			when(databaseService.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(databaseService).closeDBConnection();
			UserDetailsBn userDetailsBn = getUserDetailBn();

			PowerMockito.doThrow(new SQLException()).when(mockImageDao)
					.getThumbnailImagePathFromClaimId(Mockito.any(Connection.class), Mockito.anyString());
			List<ImageDTO> actualImageDTOList = imageDetailService.getThumbnailFromClaimId("117026078", userDetailsBn);
		} catch (SystemException e) {
			Assert.assertTrue(true);
		} catch (Exception e) {
			fail("### testGetThumbnailFromClaimIdSQLException ### Failed with following error: " + getStackTrace(e));
		}
		LOGGER.info("########### testGetThumbnailFromClaimIdSQLException() Test method completed ###########");
	}
	
	@Test
	public void testGenerateCoverSheetPdf() {
		FileDTO fileDTO = new FileDTO();
		fileDTO.setMimeType("application/pdf");
		PowerMockito.mockStatic(ImageUploadUtil.class);
		UserDetailsBn userDetailsBn = getUserDetailBn();
		try {
			String filePath;
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			bOutput.write("test".getBytes());

			PowerMockito
					.when(ImageUploadUtil.getImageInByte(Mockito.anyString()))
					.thenReturn(bOutput);
			filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class,
					"TEMP_FILE_LOCATION", filePath);
			imageDetailService.generateCoverSheetPdf(getUserDetailBn(), "CIP",
					"<html><head></head><body><div></div></body></html>",
					".headerdiv{width:99%;height:80px;position:relative;background-color:#ffffff;top:1px;left:1px;}");
			Assert.assertEquals("application/pdf", fileDTO.getMimeType());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	@Test
	public void testGenerateCoverSheetPdfException() {
		FileDTO fileDTO = new FileDTO();
		fileDTO.setMimeType("application/pdf");
		UserDetailsBn userDetailsBn = getUserDetailBn();
		try {
			String filePath;
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			bOutput.write("test".getBytes());

			PowerMockito
					.when(ImageUploadUtil.getImageInByte(Mockito.anyString()))
					.thenReturn(bOutput);

			imageDetailService.generateCoverSheetPdf(getUserDetailBn(), "CIP",
					"<html><head></head><body></body></html>",
					".headerdiv{width:99%;height:80px;position:relative;background-color:#ffffff;top:1px;left:1px;}");
		} catch (BusinessLogicException e) {
			Assert.assertTrue(true);
		} catch (Exception e) {
			fail("### testGenerateCoverSheetPdfException ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetHeaderDiv() {
		Map<String, String> labelMap = new HashMap<>();
		labelMap.put("TITLE", "CIPTITLE");
		String result = imageDetailService.getHeaderDiv(labelMap, "logo.png");
		assertTrue(result.contains("CIPTITLE"));

	}
	@Test
	public void testGetFaxDiv() {
		Map<String, String> labelMap = new HashMap<>();
		labelMap.put("FAXHEADING", "FAXHEADING");
		labelMap.put("FAXCONTENTONE", "FAXCONTENTONE");
		labelMap.put("FAXCONTENTTWO", "FAXCONTENTTWO");
		String result = imageDetailService.getFaxDiv(labelMap, "123456");
		assertTrue(result.contains("123456"));

	}
	@Test
	public void testGetMailDiv() {
		Map<String, String> labelMap = new HashMap<>();
		labelMap.put("MAILHEADING", "MAILHEADING");
		labelMap.put("MAILCONTENTONE", "MAILCONTENTONE");
		labelMap.put("MAILCONTENTTWO", "MAILCONTENTTWO");
		Map<String, String> mailCheck = new HashMap<>();
		mailCheck.put("ADDR_LINE1", "ADDR_LINE1");
		mailCheck.put("ADDR_LINE2", "ADDR_LINE2");
		mailCheck.put("ADDR_LINE3", "ADDR_LINE3");
		mailCheck.put("ADDR_CITY", "ADDR_CITY");
		mailCheck.put("ADDR_STATE", "ADDR_STATE");
		mailCheck.put("ADDR_ZIP", "ADDR_ZIP");
		mailCheck.put("ADDR_COUNTRY", "ADDR_COUNTRY");
		String result = imageDetailService.getMailDiv(labelMap, mailCheck);
		assertTrue(result.contains("ADDR_COUNTRY"));

	}
	@Test
	public void testGetMailDivAddressNull() {
		Map<String, String> labelMap = new HashMap<>();
		labelMap.put("MAILHEADING", "MAILHEADING");
		labelMap.put("MAILCONTENTONE", "MAILCONTENTONE");
		labelMap.put("MAILCONTENTTWO", "MAILCONTENTTWO");
		Map<String, String> mailCheck = new HashMap<>();
		mailCheck.put("ADDR_LINE1", null);
		mailCheck.put("ADDR_LINE2", null);
		mailCheck.put("ADDR_LINE3", null);
		mailCheck.put("ADDR_CITY", "ADDR_CITY");
		mailCheck.put("ADDR_STATE", "ADDR_STATE");
		mailCheck.put("ADDR_ZIP", "ADDR_ZIP");
		mailCheck.put("ADDR_COUNTRY", "ADDR_COUNTRY");
		String result = imageDetailService.getMailDiv(labelMap, mailCheck);
		assertTrue(result.contains("ADDR_COUNTRY"));

	}
	
		
   private ImageDTO getImageDTO(){

		ImageDTO imageDTO = new ImageDTO();

		imageDTO.setImageName("image_icon");
		imageDTO.setImagePath("C:" + File.separator + "test" + File.separator + "image_icon.jpg");
		imageDTO.setImageId(13179067L);
		imageDTO.setClaimsImageID("13179067");
		imageDTO.setClaimsImageFileId("1234555");
		imageDTO.setExtension("pdf");
		return imageDTO;
	}
	
	private UserDetailsBn getUserDetailBn() {

		UserDetailsBn userDtlsBn = new UserDetailsBn();
		userDtlsBn.setId(1059963L);
		userDtlsBn.setEeID(6108014);
		userDtlsBn.setUserType("EE");
		userDtlsBn.setErID(1000440L);
		userDtlsBn.setAdmnID(1000080);
		userDtlsBn.setName("Gaurav Agarwal");
		userDtlsBn.setReqType(ReqType.WEB);
		return userDtlsBn;

	}

	@After
	public void tearDown() {

		LOGGER.info("########### tearDown() Started ###########");
		conn = null;

		assertNull(conn);
		LOGGER.info("########### tearDown() Completed ###########");

	}

	private String getStackTrace(Throwable aThrowable) {
		LOGGER.info("########### getStackTrace() Started ###########");

		final Writer result = new StringWriter();
		final PrintWriter printWriter = new PrintWriter(result);
		aThrowable.printStackTrace(printWriter);

		LOGGER.info("########### getStackTrace() Completed ###########");
		return result.toString();
	}

}
=================================================================================================================================

package com.acclaris.claims.api.bo;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.when;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.sql.Connection;
import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.IOUtils;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunner;
import org.powermock.reflect.Whitebox;

import com.acclaris.accounts.api.bo.AccountDetailsService;
import com.acclaris.accounts.api.dao.AccountDetailsDAO;
import com.acclaris.accounts.api.dto.AccountDTO;
import com.acclaris.accounts.api.dto.ActivityBreakdownDTO;
import com.acclaris.accounts.api.dto.BalanceDTO;
import com.acclaris.accounts.api.dto.CashBalanceDTO;
import com.acclaris.accounts.api.enums.AccountActivitySource;
import com.acclaris.accounts.api.enums.ClaimStatus;
import com.acclaris.accounts.api.util.AccountBalanceUtil;
import com.acclaris.card.bo.CardMgmtBO;
import com.acclaris.card.dao.CardMgmtDAO;
import com.acclaris.card.dto.CardGenericInputDTO;
import com.acclaris.card.dto.TransactionDTO;
import com.acclaris.card.enums.AdjustmentType;
import com.acclaris.card.enums.ClaimTypes;
import com.acclaris.card.enums.DbCardTrxnRequestTypes;
import com.acclaris.card.integration.CardIntegrationFactory;
import com.acclaris.card.integration.CardInterface;
import com.acclaris.claims.api.bean.AccountBn;
import com.acclaris.claims.api.bean.AccountTypeBn;
import com.acclaris.claims.api.bean.AppealDTO;
import com.acclaris.claims.api.bean.CategoryDTO;
import com.acclaris.claims.api.bean.ClaimBn;
import com.acclaris.claims.api.bean.ClaimBnWrapper;
import com.acclaris.claims.api.bean.ClaimConfigurationBn;
import com.acclaris.claims.api.bean.ClaimFormDTO;
import com.acclaris.claims.api.bean.ClaimImageFileDTO;
import com.acclaris.claims.api.bean.ClaimTypeBn;
import com.acclaris.claims.api.bean.DebitCardExpenseDetail;
import com.acclaris.claims.api.bean.DuplicateClaimDetailsBn;
import com.acclaris.claims.api.bean.PayeeDTO;
import com.acclaris.claims.api.bean.TransactionDtlsBn;
import com.acclaris.claims.api.dao.ClaimDAO;
import com.acclaris.claims.api.dao.PayeeDAO;
import com.acclaris.claims.api.enums.AppealStatus;
import com.acclaris.common.bean.ApprovedClaimDetailsBn;
import com.acclaris.common.bean.ClaimNoteDTO;
import com.acclaris.common.bean.ErrorBn;
import com.acclaris.common.bean.FileDTO;
import com.acclaris.common.bean.PhoneDTO;
import com.acclaris.common.bean.UserDetailsBn;
import com.acclaris.common.dao.CommonAccountDAO;
import com.acclaris.common.dao.ConfigDAO;
import com.acclaris.common.dao.SendMailDAO;
import com.acclaris.common.dao.UserDAO;
import com.acclaris.common.exceptions.BusinessLogicException;
import com.acclaris.common.exceptions.PortalError;
import com.acclaris.common.exceptions.ServiceUnavailableException;
import com.acclaris.common.exceptions.SystemException;
import com.acclaris.common.util.ConfigUtil;
import com.acclaris.common.util.ConversionUtil;
import com.acclaris.common.util.DateUtil;
import com.acclaris.common.util.ValidationUtil;
import com.acclaris.database.connection.DatabaseService;
import com.acclaris.database.connection.DatabaseUtils;
import com.acclaris.image.api.bo.ImageDetailService;
import com.acclaris.image.api.dao.ImageDAO;
import com.acclaris.image.api.dto.ImageBn;
import com.acclaris.image.api.dto.ImageDTO;
import com.acclaris.image.dto.ImageUploadInputDto;
import com.acclaris.image.util.ImageUploadUtil;
import com.acclaris.label.api.dto.LabelDTO;
import com.acclaris.logger.impl.AcclarisLogger;
import com.acclaris.logger.impl.Module;
import com.acclaris.profile.api.bo.BankingInfoBO;
import com.acclaris.profile.api.bo.ServiceProviderBO;
import com.acclaris.profile.api.dao.PersonalDAO;
import com.acclaris.profile.api.dao.ServiceProviderDAO;
import com.acclaris.profile.api.dto.ServiceProviderDTO;
import com.acclaris.properties.PropertiesHelper;
import com.acclaris.receipt.api.dao.ReceiptDetailsDAO;
import com.acclaris.receipt.api.dto.ImageItemDTO;
import com.acclaris.supportutility.api.bean.DependentInfoBn;
import com.acclaris.supportutility.api.bean.IndividualServicedDTO;
import com.acclaris.supportutility.api.bo.SupportUtilService;
import com.acclaris.supportutility.api.dao.SupportUtilityDAO;
import com.acclaris.transactions.bo.ClaimTransaction;
import com.acclaris.transactions.bo.TransactionFactory;
import com.acclaris.transactions.dao.ClaimTransactionDAO;
import com.acclaris.transactions.dto.RecoveryDetailDTO;
import com.acclaris.transactions.dto.TransactionBreakdownDTO;
import com.acclaris.transactions.dto.TransactionDetailsDTO;

import net.sourceforge.barbecue.Barcode;
import net.sourceforge.barbecue.BarcodeException;
import net.sourceforge.barbecue.BarcodeFactory;
import net.sourceforge.barbecue.BarcodeImageHandler;
import net.sourceforge.barbecue.output.OutputException;
import oracle.jdbc.driver.OracleConnection;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ PropertiesHelper.class, ConfigUtil.class, ConfigDAO.class, DatabaseUtils.class,
		CommonAccountDAO.class, CardIntegrationFactory.class, ImageUploadUtil.class, ImageDAO.class,
		ValidationUtil.class, SendMailDAO.class, SupportUtilityDAO.class, UserDAO.class, Barcode.class,
		BarcodeFactory.class, BarcodeImageHandler.class, OutputException.class, BarcodeException.class,
		ConfigUtil.class, ConversionUtil.class, ImageDetailService.class, DateUtil.class })
@SuppressStaticInitializationFor({ "com.acclaris.image.util.ImageUploadUtil", "com.acclaris.common.dao.SendMailDAO" })
public class TestClaimBO {

	private static final AcclarisLogger LOGGER = AcclarisLogger.getLogger(Module.GEN3_CLAIMS);
	private static final String PROVIDER_NAME = "George";
	private static final String GET_REIMBURSED = "GetReimbursed";
	private static final String OPT_NO = "Opt|No";
	private static final String PAY_A_BILL = "PayABill";
	private static final String SERVICE_ENDS = "01/06/2018";
	private static final String PAYEE_NAME = "Harry";

	@InjectMocks
	private ClaimBO mockClaimBO;

	@Mock
	private ClaimDAO mockOnlineClaimDAO;

	@Mock
	ServiceProviderDAO serviceProviderDAO;

	@Mock
	SupportUtilityDAO supportUtilityDAO;

	@Mock
	ClaimTransactionDAO mockClaimTransactionDAO;

	@Mock
	AccountDetailsService accountDetailsService;

	@Mock
	AccountBalanceUtil balanceUtil;

	@Mock
	BankingInfoBO profileBankingInfoBO;

	@Mock
	private PersonalDAO mockProfilePersonalDAO;

	@Mock
	SupportUtilService supportUtilService;

	@Mock
	ServiceProviderBO serviceProvider;

	@Mock
	PayeeDAO payeeDAO;

	@Mock
	PayeeBO payeeBo;

	@Mock
	AccountDetailsDAO mockAccountDetailsDAO;

	@Mock
	ReceiptDetailsDAO receiptDetailsDAO;

	@Mock
	ImageDAO imageDAO;

	@Mock
	CardMgmtDAO cardMgmtDAO;

	@Mock
	CardMgmtBO cardMgmtBO;

	@Mock
	CardInterface cardInterface;

	@Mock
	ClaimBn mockClaimBn;

	@Mock
	private DatabaseService mockDatabase;

	@Mock
	ClaimTransaction mockClaimTransaction;

	@Mock
	TransactionFactory mockTransactionFactory;

	private Connection conn = null;
	private OracleConnection oracleConn = null;
	private ErrorBn errorBn;
	private List<ImageDTO> imageDtoList;
	private ImageDTO imageDTO;

	@Before
	public void setUpMock() throws IOException {

		LOGGER.info("########### Moke setUp started ###########");
		conn = Mockito.mock(Connection.class);
		oracleConn = Mockito.mock(OracleConnection.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ConfigDAO.class);
		PowerMockito.mockStatic(DatabaseUtils.class);
		PowerMockito.mockStatic(CommonAccountDAO.class);
		PowerMockito.mockStatic(CardIntegrationFactory.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);
		PowerMockito.mockStatic(BarcodeFactory.class);
		PowerMockito.mockStatic(BarcodeImageHandler.class);

		MockitoAnnotations.initMocks(this);

		String str = "File1";
		InputStream inputStream = new ByteArrayInputStream(str.getBytes());

		imageDtoList = new ArrayList<>();
		imageDTO = new ImageDTO();
		imageDTO.setImageStream(IOUtils.toByteArray(inputStream));
		imageDTO.setImageName("File1.jpg");
		imageDtoList.add(imageDTO);

		LOGGER.info("########### Moke setUp completed ###########");
	}

	@Test
	public void testGetClaimcategoriesForSRA() {
		try {
			// Dental|Yes|Dental|Yes~Medical|Yes|Medical|No~Medical-OTC|Yes|Medical-OTC|Yes~Medical-Preventative|Yes|Medical-Preventative|Yes~Vision|Yes|Vision|Yes~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental|Yes");
			clmCategoryList.add("Medical|No|Medical|No");
			clmCategoryList.add("Medical-OTC|No|Medical-OTC|No");
			clmCategoryList.add("Medical-Preventative|No|Medical-Preventative|Yes");
			clmCategoryList.add("Vision|No|Vision|Yes");
			when(mockDatabase.getDBConnection()).thenReturn(conn);

			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);
			PowerMockito.doNothing().when(PropertiesHelper.class, "loadProperties");
			when(mockOnlineClaimDAO.getDefaultClaimTypeByCategoryForSRA(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn("WITHDRAWAL");
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "");
			assertTrue("testGetClaimcategoriesForSRA -> Checking length of Claim Categories List",
					categoriesList.size() == 5);
		} catch (Exception e) {
			fail("### testGetClaimcategoriesForSRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategoriesForJRA_OUTOFPOCKET() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);

			PowerMockito.when(CommonAccountDAO.isJRA(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(true);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);
			List<ClaimTypeBn> lstClaimTypes = getClaimTypesByCategory();
			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(lstClaimTypes, lstClaimTypes, lstClaimTypes);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "OUTOFPOCKET");
			assertTrue("testGetClaimcategoriesForJRA_OUTOFPOCKET -> Checking length of Claim Categories List",
					categoriesList.size() == 3);
			assertTrue("testGetClaimcategoriesForJRA_OUTOFPOCKET -> Checking claim type for each category",
					categoriesList.stream().filter(o -> !o.getLstClaimTypes().isEmpty()).count() == 3);

			assertTrue("testGetClaimcategoriesForJRA_OUTOFPOCKET -> Checking claim type order for each category",
					"OTC MEDICATION".equalsIgnoreCase(categoriesList.get(0).getLstClaimTypes().get(0).getLabel()));

		} catch (Exception e) {
			fail("### testGetClaimcategoriesForJRA_OUTOFPOCKET ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategories_OUTOFPOCKET_WhenSingleNonPremiumTypeSupported() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);

			PowerMockito.when(CommonAccountDAO.isJRA(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(true);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);
			List<ClaimTypeBn> clmType = new ArrayList<>();
			ClaimTypeBn bn2 = new ClaimTypeBn();
			bn2.setLabel("EQUIPMENT");
			bn2.setName("EQUIPMENT");
			bn2.setSequence(2);
			clmType.add(bn2);
			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(clmType, clmType, clmType);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "OUTOFPOCKET");
			assertTrue(
					"testGetClaimcategories_OUTOFPOCKET_WhenSingleNonPremiumTypeSupported -> Checking length of Claim Categories List",
					categoriesList.size() == 3);
			assertTrue(
					"testGetClaimcategories_OUTOFPOCKET_WhenSingleNonPremiumTypeSupported -> Checking claim type order for each category",
					"EQUIPMENT".equalsIgnoreCase(categoriesList.get(0).getLstClaimTypes().get(0).getLabel()));

		} catch (Exception e) {
			fail("### testGetClaimcategories_OUTOFPOCKET_WhenSingleNonPremiumTypeSupported ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategories_OUTOFPOCKET_WhenSinglePremiumTypeSupported() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);

			PowerMockito.when(CommonAccountDAO.isJRA(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(true);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);
			List<ClaimTypeBn> clmType = new ArrayList<>();
			ClaimTypeBn bn2 = new ClaimTypeBn();
			bn2.setLabel("PREMIUM");
			bn2.setName("PREMIUM");
			bn2.setSequence(2);
			clmType.add(bn2);
			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(clmType, clmType, clmType);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "OUTOFPOCKET");
			assertTrue(
					"testGetClaimcategories_OUTOFPOCKET_WhenSinglePremiumTypeSupported -> Checking length of Claim Categories List",
					categoriesList.size() == 0);
		} catch (Exception e) {
			fail("### testGetClaimcategories_OUTOFPOCKET_WhenSinglePremiumTypeSupported ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategoriesForJRA_PREMIUM() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);

			List<String> premiumTypeSet = new ArrayList<>();
			premiumTypeSet.add("One-Time Premium");
			premiumTypeSet.add("Recurring Premium");

			when(accountDetailsService.getPremiumTypeSetForJRA(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean(), Mockito.anyBoolean()))
							.thenReturn(premiumTypeSet);
			List<ClaimTypeBn> lstClaimTypes = getClaimTypesByCategory();
			ClaimTypeBn bn4 = new ClaimTypeBn();
			bn4.setLabel("PREMIUM");
			bn4.setName("PREMIUM");
			bn4.setSequence(4);
			lstClaimTypes.add(bn4);

			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(lstClaimTypes, lstClaimTypes, lstClaimTypes);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "PREMIUM");

			assertTrue("testGetClaimcategoriesForJRA_PREMIUM -> Checking length of Claim Categories List",
					categoriesList.size() == 3);
			assertTrue("testGetClaimcategoriesForJRA_PREMIUM -> Checking occurrence type for each category",
					categoriesList.stream().filter(o -> !o.getOccurrence().isEmpty()).count() == 3);
			assertTrue("testGetClaimcategoriesForJRA_PREMIUM -> Checking occurrence order type for each category",
					"One-Time Premium".equals(categoriesList.get(0).getOccurrence().get(0))
							&& "Recurring Premium".equals(categoriesList.get(0).getOccurrence().get(1)));
		} catch (Exception e) {
			fail("### testGetClaimcategoriesForJRA_PREMIUM ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategoriesForJRAWhenPremiumTypeNotSupported() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);
			List<String> premiumTypeSet = new ArrayList<>();
			premiumTypeSet.add("One-Time Premium");
			premiumTypeSet.add("Recurring Premium");

			when(accountDetailsService.getPremiumTypeSetForJRA(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean(), Mockito.anyBoolean()))
							.thenReturn(premiumTypeSet);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);

			List<ClaimTypeBn> lstClaimTypes = getClaimTypesByCategory();

			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(lstClaimTypes, lstClaimTypes, lstClaimTypes);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "PREMIUM");
			assertTrue(
					"testGetClaimcategoriesForJRAWhenPremiumTypeNotSupported -> Checking length of Claim Categories List",
					categoriesList.size() == 0);
		} catch (Exception e) {
			fail("### testGetClaimcategoriesForJRAWhenPremiumTypeNotSupported ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategoriesForJRAWhenSingleNonPremiumTypeSupported() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);
			List<String> premiumTypeSet = new ArrayList<>();
			premiumTypeSet.add("One-Time Premium");
			premiumTypeSet.add("Recurring Premium");

			when(accountDetailsService.getPremiumTypeSetForJRA(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean(), Mockito.anyBoolean()))
							.thenReturn(premiumTypeSet);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);

			List<ClaimTypeBn> clmType = new ArrayList<>();
			ClaimTypeBn bn2 = new ClaimTypeBn();
			bn2.setLabel("OTC SUPPLIES");
			bn2.setName("OTC SUPPLIES");
			bn2.setSequence(2);
			clmType.add(bn2);

			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(clmType, clmType, clmType);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "PREMIUM");
			assertTrue(
					"testGetClaimcategoriesForJRAWhenSingleNonPremiumTypeSupported -> Checking length of Claim Categories List",
					categoriesList.size() == 0);
		} catch (Exception e) {
			fail("### testGetClaimcategoriesForJRAWhenSingleNonPremiumTypeSupported ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategoriesForJRAWhenSinglePremiumTypeSupported() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);
			List<String> premiumTypeSet = new ArrayList<>();
			premiumTypeSet.add("One-Time Premium");
			premiumTypeSet.add("Recurring Premium");

			when(accountDetailsService.getPremiumTypeSetForJRA(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean(), Mockito.anyBoolean()))
							.thenReturn(premiumTypeSet);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);

			List<ClaimTypeBn> clmType = new ArrayList<>();
			ClaimTypeBn bn2 = new ClaimTypeBn();
			bn2.setLabel("PREMIUM");
			bn2.setName("PREMIUM");
			bn2.setSequence(2);
			clmType.add(bn2);

			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(clmType, clmType, clmType);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "PREMIUM");
			assertTrue(
					"testGetClaimcategoriesForJRAWhenSingleNonPremiumTypeSupported -> Checking length of Claim Categories List",
					categoriesList.size() == 3);
		} catch (Exception e) {
			fail("### testGetClaimcategoriesForJRAWhenSingleNonPremiumTypeSupported ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	private List<ClaimTypeBn> getClaimTypesByCategory() {
		List<ClaimTypeBn> clmType = new ArrayList<>();
		ClaimTypeBn bn2 = new ClaimTypeBn();
		bn2.setLabel("OTC SUPPLIES");
		bn2.setName("OTC SUPPLIES");
		bn2.setSequence(2);
		clmType.add(bn2);
		ClaimTypeBn bn = new ClaimTypeBn();
		bn.setLabel("OTC MEDICATION");
		bn.setName("OTC MEDICATION");
		bn.setSequence(1);

		ClaimTypeBn bn3 = new ClaimTypeBn();
		bn3.setLabel("PRESCRIPTION");
		bn3.setName("PRESCRIPTION");
		bn3.setSequence(3);
		clmType.add(bn);
		return clmType;
	}

	@Test
	public void testGetClaimConfiguration_NANA_HRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("NA|NA");
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("NA|NA");
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), true);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), false);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_NANA_HRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_YesYes() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("DCRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|Yes");
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|Yes");
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), true);
			assertEquals(resultBn.isAllowAddDependent(), true);
			assertEquals(resultBn.isShowDependentDropdown(), true);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), true);
			assertEquals(resultBn.isAllowAddProvider(), true);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_YesYes ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_YesNo_HRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|No");
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|No");
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), true);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), true);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_YesNo_HRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_YesNo_HCRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HCRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|No");
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|No");
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), false);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), true);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_YesNo_HCRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_OptYes_HRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Opt|Yes");
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Opt|Yes");
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), true);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), true);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_OptYes_HRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_OptNo_HRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), true);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_OptNo_HRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_OptNo_HCRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HCRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), false);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_OptNo_HRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetAvailableHSABalance() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HSA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(20.00d));
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			when(receiptDetailsDAO.isUnusedReceiptAvailable(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(false);
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), false);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
			assertEquals(resultBn.isShowPickFromReceiptButton(), false);
		} catch (Exception e) {
			fail("### testGetAvailableHSABalance ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfigurationSQLException() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HSA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			PowerMockito.doThrow(new SQLException()).when(payeeBo).getPayeeDetails(Mockito.anyString());
			mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, PAY_A_BILL);
		} catch (Exception e) {
			assertTrue(e.getMessage().contains("java.sql.SQLException"));
		}
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidServiceDate1() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setServiceBegins("01/08/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidServiceDate2() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setServiceBegins(null);
		claimBn.setServiceEnds(SERVICE_ENDS);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidServiceDateFormat()
			throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setServiceBegins("15/01/2019");
		claimBn.setServiceEnds("15/01/2019");
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithFutureDateMoreThanMaxDate()
			throws BusinessLogicException, SystemException {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			claimBn.setServiceBegins("06/12/2019");
			claimBn.setServiceEnds("06/12/2019");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			/*
			 * Current Year Account string
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA"
			 * "HCRA(Health FSA)=HCRA~2368023~~FSH"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Account (HSA)=DCRA~2368000~~HAS"
			 */

			String accStr = "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH~31-JAN-19#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA~31-JAN-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);

			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
		} catch (SQLException e) {
			fail("### testValidateInitialClaimDtlsWithFutureDateMoreThanMaxDate ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidServiceDate4() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setServiceBegins("06/05/2018");
		claimBn.setServiceEnds("12/31/3001");
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidAmount1() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setClaimAmount("-1212.25");
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidAmount2() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setClaimAmount("$12121");
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidAmount3() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setClaimAmount(null);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidAmount4() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setClaimAmount("1212.121");
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidAmount5() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setClaimAmount("1212as$.121");
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test
	public void testValidateInitialClaimDtls() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			boolean isAcntBnPopulated = true;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			/*
			 * Current Year Account string
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA"
			 * "HCRA(Health FSA)=HCRA~2368023~~FSH"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Account (HSA)=DCRA~2368000~~HAS"
			 */

			String accStr = "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH~31-DEC-19#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA~31-DEC-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);

			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);

			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue("testValidateInitialClaimDtls -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);

			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAdded -> Checking if map for account type with dummy claim sequence id is generated",
					newClaimBnWrapper.getAccntTypeMapForClaimId() != null
							&& newClaimBnWrapper.getAccntTypeMapForClaimId().size() > 0
							&& newClaimBnWrapper.getCurrentYrBalanceForElections() != null
							&& newClaimBnWrapper.getCurrentYrBalanceForElections().size() > 0);
		} catch (Exception e) {
			fail("### testValidateInitialClaimDtls ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testValidateInitialClaimDtlsForDCRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			boolean isAcntBnPopulated = true;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			String accStr = "Health Savings Account (HSA)=DCRA~2368000~~HAS~31-DEC-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);
			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2099");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(0d));

			when(mockAccountDetailsDAO.getAvailableBal(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(1d);

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}

			assertTrue("testValidateInitialClaimDtlsForDCRA -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);
			assertTrue("testValidateInitialClaimDtlsForDCRA -> Checking if ClaimBnWrapper is populated correctly",
					newClaimBnWrapper != null);

		} catch (Exception e) {
			fail("### testValidateInitialClaimDtlsForDCRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testValidateInitialClaimDtlsForHSA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			boolean isAcntBnPopulated = true;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			String accStr = "DCRA(DC FSA)=DCRA~20929902~~DA6C~31-DEC-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);
			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(0d));

			when(mockAccountDetailsDAO.getAvailableBal(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(1d);

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}

			assertTrue("testValidateInitialClaimDtlsForHSA -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);
			assertTrue("testValidateInitialClaimDtlsForHSA -> Checking if ClaimBnWrapper is populated correctly",
					newClaimBnWrapper != null);

		} catch (Exception e) {
			fail("### testValidateInitialClaimDtlsForHSA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testValidateInitialClaimDtlsWhenNewExpenseAdded() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();

			HashMap<String, Double> priorYrBalanceForElections = new HashMap<>();
			HashMap<String, Double> currentYrBalanceForElections = new HashMap<>();
			priorYrBalanceForElections.put("HRA+HCRA+HSA", 100.0);
			currentYrBalanceForElections.put("HRA+HCRA+HSA", 100.0);
			claimBnWrapper.setPriorYrBalanceForElections(priorYrBalanceForElections);
			claimBnWrapper.setCurrentYrBalanceForElections(currentYrBalanceForElections);

			boolean isAcntBnPopulated = true;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			/*
			 * Current Year Account string
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA"
			 * "HCRA(Health FSA)=HCRA~2368023~~FSH"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Account (HSA)=DCRA~2368000~~HAS"
			 */

			String accStr = "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH~31-DEC-19|HRA~2368019~~HRA~31-DEC-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);
			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAdded -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);

			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAdded -> Checking if map for account type with dummy claim sequence id is generated",
					newClaimBnWrapper.getAccntTypeMapForClaimId() != null
							&& newClaimBnWrapper.getAccntTypeMapForClaimId().size() > 0
							&& newClaimBnWrapper.getPriorYrBalanceForElections() != null
							&& newClaimBnWrapper.getCurrentYrBalanceForElections().get("HRA+HCRA+HSA") == 99.25);
		} catch (Exception e) {
			fail("### testValidateInitialClaimDtlsWhenNewExpenseAdded ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			claimBn.setClaimAmount("110");

			HashMap<String, Double> priorYrBalanceForElections = new HashMap<>();
			HashMap<String, Double> currentYrBalanceForElections = new HashMap<>();
			HashMap<String, Double> perpetualBalance = new HashMap<>();
			priorYrBalanceForElections.put("HRA+HCRA+HSA", 100.0);
			currentYrBalanceForElections.put("HRA+HCRA+HSA", 100.0);
			perpetualBalance.put("HSA", 100.0);
			claimBnWrapper.setPriorYrBalanceForElections(priorYrBalanceForElections);
			claimBnWrapper.setCurrentYrBalanceForElections(currentYrBalanceForElections);
			claimBnWrapper.setPerpetualAcntBalance(perpetualBalance);

			boolean isAcntBnPopulated = true;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			/*
			 * Current Year Account string
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA"
			 * "HCRA(Health FSA)=HCRA~2368023~~FSH"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Account (HSA)=DCRA~2368000~~HAS"
			 */

			String accStr = "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH~31-DEC-19|HRA~2368019~~HRA~31-DEC-19|HSA~2368020~~HSA~31-DEC-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);
			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(true, true, false, false, false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2018");
			List<String> planYearList1 = new ArrayList<>();
			planYearList1.add("2019");
			List<String> planYearList2 = new ArrayList<>();
			planYearList2.add("2099");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList, planYearList1, planYearList2);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);

			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr -> Checking if map for account type with dummy claim sequence id is generated",
					newClaimBnWrapper.getAccntTypeMapForClaimId() != null
							&& newClaimBnWrapper.getAccntTypeMapForClaimId().size() > 0
							&& newClaimBnWrapper.getPriorYrBalanceForElections().get("HRA+HCRA+HSA") == 0);
		} catch (Exception e) {
			fail("### testValidateInitialClaimDtlsWhenNewExpenseAdded ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr2() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			claimBn.setClaimAmount("210");

			HashMap<String, Double> priorYrBalanceForElections = new HashMap<>();
			HashMap<String, Double> currentYrBalanceForElections = new HashMap<>();
			HashMap<String, Double> perpetualBalance = new HashMap<>();
			priorYrBalanceForElections.put("HRA+HCRA+HSA", 100.0);
			currentYrBalanceForElections.put("HRA+HCRA+HSA", 100.0);
			perpetualBalance.put("perpetualElct", 100.0);
			claimBnWrapper.setPriorYrBalanceForElections(priorYrBalanceForElections);
			claimBnWrapper.setCurrentYrBalanceForElections(currentYrBalanceForElections);
			claimBnWrapper.setPerpetualAcntBalance(perpetualBalance);

			boolean isAcntBnPopulated = true;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			/*
			 * Current Year Account string
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA"
			 * "HCRA(Health FSA)=HCRA~2368023~~FSH"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Account (HSA)=DCRA~2368000~~HAS"
			 */

			String accStr = "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH~31-DEC-19|HRA~2368019~~HRA~31-DEC-19|HSA~2368020~~HSA~31-DEC-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);
			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(true, true, false, false, false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2018");
			List<String> planYearList1 = new ArrayList<>();
			planYearList1.add("2019");
			List<String> planYearList2 = new ArrayList<>();
			planYearList2.add("2099");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList, planYearList1, planYearList2);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr2 -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);

			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr2 -> Checking if map for account type with dummy claim sequence id is generated",
					newClaimBnWrapper.getAccntTypeMapForClaimId() != null
							&& newClaimBnWrapper.getAccntTypeMapForClaimId().size() > 0
							&& newClaimBnWrapper.getPriorYrBalanceForElections().get("HRA+HCRA+HSA") == 0
							&& newClaimBnWrapper.getCurrentYrBalanceForElections().get("HRA+HCRA+HSA") == 0
							&& newClaimBnWrapper.getPerpetualAcntBalance().get("perpetualElct") == 90);
		} catch (Exception e) {
			fail("### testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr2 ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testValidateInitialClaimDtlsWhenPriorYear() {
		try {
			boolean isAcntBnPopulated = true;
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapperWhenPriorYearSelected();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			/*
			 * Current Year Account string
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Aaccount (HSA)=HSA~2368000~~HSA"
			 * );
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368016~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368017~~HRA"
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368016~~FSH"
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368016~~FSH"
			 */

			/*
			 * Prior Year Account string
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Account (HSA)=HSA~2368000~~HAS"
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368018~~FSH"
			 */

			String accStr = "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH~31-DEC-19|HRA~2368019~~HRA~31-DEC-19#Health Savings Aaccount (HSA)=HSA~2368000~~HSA~31-DEC-19";
			String accStrPrev = "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH~31-MAR-19#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA~31-MAR-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			AccountTypeBn acctypeDtoPrev = new AccountTypeBn();
			acctypeDtoPrev.setAccountTypes(accStrPrev);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto, acctypeDtoPrev);

			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(true, true);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);

			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue(
					"testValidateInitialClaimDtlsWhenPriorYear -> Checking if account bean list is populated correctly for prior year",
					isAcntBnPopulated);

			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAdded -> Checking if map for account type with dummy claim sequence id is generated",
					newClaimBnWrapper.getAccntTypeMapForClaimId() != null
							&& newClaimBnWrapper.getAccntTypeMapForClaimId().size() > 0
							&& newClaimBnWrapper.getPriorYrBalanceForElections() != null
							&& newClaimBnWrapper.getPriorYrBalanceForElections().size() > 0);
		} catch (Exception e) {
			fail("### testValidateInitialClaimDtlsWhenPriorYear ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWhenNoElections()
			throws SQLException, SystemException, BusinessLogicException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("No");
		AccountTypeBn acctypeDto = new AccountTypeBn();
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWhenNoElections_PriorYear()
			throws SQLException, SystemException, BusinessLogicException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapperWhenPriorYearSelected();
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("Yes");
		AccountTypeBn acctypeDto = new AccountTypeBn();
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithErrorCode1()
			throws SQLException, SystemException, BusinessLogicException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("No");
		AccountTypeBn acctypeDto = new AccountTypeBn();
		acctypeDto.setErrorCode("300001");
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithErrorCode2()
			throws SQLException, SystemException, BusinessLogicException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("No");
		AccountTypeBn acctypeDto = new AccountTypeBn();
		acctypeDto.setErrorCode("300011");
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWhenInsufficientBalance()
			throws SQLException, SystemException, BusinessLogicException, ServiceUnavailableException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setServiceEnds("");
		claimBn.setClaimAmount("5454");
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("No");
		AccountTypeBn acctypeDto = new AccountTypeBn();
		acctypeDto.setAccountTypes(
				"HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH~31-DEC-19|HRA~2368019~~HRA~31-DEC-19#Health Savings Aaccount (HSA)=HSA~2368000~~HSA~31-DEC-19");
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);
		when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
				Mockito.anyString())).thenReturn(false, false);
		List<String> planYearList = new ArrayList<>();
		planYearList.add("2019");
		when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
				.thenReturn(planYearList);
		when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);
		when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
				.thenReturn(getBalanceBn(200d));

		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWhenZeroBalance()
			throws SQLException, SystemException, BusinessLogicException, ServiceUnavailableException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setClaimAmount("5454");
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("No");
		AccountTypeBn acctypeDto = new AccountTypeBn();
		acctypeDto.setAccountTypes(
				"HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH~31-DEC-19|HRA~2368019~~HRA~31-DEC-19#Health Savings Aaccount (HSA)=HSA~2368000~~HSA~31-DEC-19");
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);
		when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
				Mockito.anyString())).thenReturn(false, false);
		List<String> planYearList = new ArrayList<>();
		planYearList.add("2019");
		when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
				.thenReturn(planYearList);
		when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);
		when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
				.thenReturn(getBalanceBn(0.0d));

		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test
	public void testGetClaimConfiguration_PayABill() {
		try {
			ClaimBn claimBn = getClaimBn();
			claimBn.setClaimAmount("56");
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			PayeeDTO payee = new PayeeDTO();
			payee.setPayeeId(3);
			payee.setPayeeName(PAYEE_NAME);
			List<PayeeDTO> payeeDetails = new ArrayList<>();
			payeeDetails.add(payee);
			when(payeeDAO.getPayeeDetails(Mockito.any(Connection.class), Mockito.anyString())).thenReturn(payeeDetails);
			when(payeeBo.getPayeeDetails(Mockito.anyString())).thenReturn(payeeDetails);
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("Yes");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, PAY_A_BILL);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), true);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getPayeeDetails().get(0).getPayeeName(), PAYEE_NAME);
			assertEquals(resultBn.getIsReceiptRequired(), "Yes");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_PayABill ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_DCRA() {
		try {
			ClaimBn claimBn = getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("DCRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|Yes");
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			PayeeDTO payee = new PayeeDTO();
			payee.setPayeeId(3);
			payee.setPayeeName(PAYEE_NAME);
			List<PayeeDTO> payeeDetails = new ArrayList<>();
			payeeDetails.add(payee);
			when(payeeDAO.getPayeeDetails(Mockito.any(Connection.class), Mockito.anyString())).thenReturn(payeeDetails);
			when(payeeBo.getPayeeDetails(Mockito.anyString())).thenReturn(payeeDetails);
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("Yes");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, PAY_A_BILL);
			assertEquals(resultBn.isDependentMandatory(), true);
			assertEquals(resultBn.isAllowAddDependent(), true);
			assertEquals(resultBn.isShowDependentDropdown(), true);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getPayeeDetails().get(0).getPayeeName(), PAYEE_NAME);
			assertEquals(resultBn.getIsReceiptRequired(), "Yes");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_DCRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetItemizedReceiptCustomTextSRA() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<p class=\"mb-0 mt-4\">What is an Itemized Receipt?</p>\n\t<span>An itemized receipt provides the following information:</span>\n\t<ul class=\"mt-4\">\n\t  <li>Provider name</li>\n\t  <li>Date of service</li>\n\t  <li>Description of each service provided</li>\n\t  <li>Dollar amount of each service</li>\n\t</ul>\n\n\t<h3 class=\"mb-0 mt-4\">How can I get an \"Itemized Receipt\"?</h3>\n\t<span>If you weren't provided an itemized receipt when you left your doctor's office, here are a few ways you can go about obtaining one:</span>\n\t<div class=\"row mt-4\">\n\t\t1. Call your doctor's office and request one to be   mailed to you\n\t</div>\n\t<div class=\"row\">\n\t\t2. Go to your doctor's office and have one printed\n\t</div>");
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			String itemizedReceiptCustomText = mockClaimBO.getItemizedReceiptCustomText(usrDtlsBn, "");
			assertTrue("####### testGetItemizedReceiptCustomText #######",
					itemizedReceiptCustomText.contains("What is an Itemized Receipt"));
		} catch (Exception e) {
			fail("####### testGetItemizedReceiptCustomText() ####### Failed with following error: " + getStackTrace(e));
		}
	}
	
	@Test
	public void testGetItemizedReceiptCustomTextJRA() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<p class=\"mb-0 mt-4\">What is an Itemized Receipt?</p>\n\t<span>An itemized receipt provides the following information:</span>\n\t<ul class=\"mt-4\">\n\t  <li>Provider name</li>\n\t  <li>Date of service</li>\n\t  <li>Description of each service provided</li>\n\t  <li>Dollar amount of each service</li>\n\t</ul>\n\n\t<h3 class=\"mb-0 mt-4\">How can I get an \"Itemized Receipt\"?</h3>\n\t<span>If you weren't provided an itemized receipt when you left your doctor's office, here are a few ways you can go about obtaining one:</span>\n\t<div class=\"row mt-4\">\n\t\t1. Call your doctor's office and request one to be   mailed to you\n\t</div>\n\t<div class=\"row\">\n\t\t2. Go to your doctor's office and have one printed\n\t</div>");
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			String itemizedReceiptCustomText = mockClaimBO.getItemizedReceiptCustomText(usrDtlsBn, "");
			assertTrue("####### testGetItemizedReceiptCustomText #######",
					itemizedReceiptCustomText.contains("What is an Itemized Receipt"));
		} catch (Exception e) {
			fail("####### testGetItemizedReceiptCustomText() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetItemizedReceiptCustomTex_PREMIUM() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<div class=\"row\">  <div class=\"col-12 col-md-7\">    <div class=\"row\">    <div class=\"col\">      <h5>What is an Itemized Receipt?</h5>      <p>An itemized receipt provides the following information:</p>      <ul>        <li>Individual Serviced</li>        <li>Provider/Carrier Name</li>        <li>Category/Description </li>        <li>Date of Service(s)</li>        <li>Dollar Amount</li>      </ul>    </div>    </div>    <div class=\"row\">    <div class=\"col\">"
									+ "<h5>How can I get an \"Itemized Receipt\"?</h5>      <p>After you make your premium payment(s) to your insurance provider, your insurance provider will send you an itemized receipt confirming your premium payment(s) have been made. For questions regarding your receipt or obtaining a receipt, contact your carrier.</p>    </div>    </div>    <div class=\"row\">    <div class=\"col\">      <h5>What about \"recurring\" premium receipts?</h5>      <p>For recurring premium payments, provide the receipt from your carrier that lists the premium payments made for each month during the plan year.</p>    </div>    </div>  </div>  <div class=\"col-12 col-md-5\">    <div class=\"row bg-gray\">    <div class=\"col\">      <div class=\"row\">"
									+ "<div class=\"col-6 pl-0 sample-left-icon\">        <span></span>        <span></span>        <span></span>        <span></span>        <span></span>      </div>      <div class=\"col-6 text-right pt-2 pr-0\"><img src=\"assets/images/mail_icon.png\" alt=\"close\"></div>      </div>      <div class=\"row mt-4\">      <div class=\"col pl-0\">        <h5>Individual Serviced</h5>        <p>Colleen Schultz</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">        <h5>Provider/Carrier Name</h5>        <p>CIGNA</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">        <h5>Description</h5>        <p>Premium</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">"
									+ "<h5>Date of Service</h5>        <p>01/01/2019</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">        <h5>Amount</h5>        <p>$600.00</p>      </div>      </div>    </div>    </div>  </div>  </div>");
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			String itemizedReceiptCustomText = mockClaimBO.getItemizedReceiptCustomText(usrDtlsBn, "PREMIUM");
			assertTrue("####### testGetItemizedReceiptCustomTex_PREMIUM #######", itemizedReceiptCustomText
					.contains("After you make your premium payment(s) to your insurance provider"));
		} catch (Exception e) {
			fail("####### testGetItemizedReceiptCustomTex_PREMIUM() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}
	
	@Test
	public void testGetItemizedReceiptCustomTex_OOP() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<div class=\"row\">  <div class=\"col-12 col-md-7\">    <div class=\"row\">    <div class=\"col\">      <h5>What is an Itemized Receipt?</h5>      <p>An itemized receipt provides the following information:</p>      <ul>        <li>Individual Serviced</li>        <li>Provider/Carrier Name</li>        <li>Category/Description </li>        <li>Date of Service(s)</li>        <li>Dollar Amount</li>      </ul>    </div>    </div>    <div class=\"row\">    <div class=\"col\">"
									+ "<h5>How can I get an \"Itemized Receipt\"?</h5>      <p>After you make your premium payment(s) to your insurance provider, your insurance provider will send you an itemized receipt confirming your premium payment(s) have been made. For questions regarding your receipt or obtaining a receipt, contact your carrier.</p>    </div>    </div>    <div class=\"row\">    <div class=\"col\">      <h5>What about \"recurring\" premium receipts?</h5>      <p>For recurring premium payments, provide the receipt from your carrier that lists the premium payments made for each month during the plan year.</p>    </div>    </div>  </div>  <div class=\"col-12 col-md-5\">    <div class=\"row bg-gray\">    <div class=\"col\">      <div class=\"row\">"
									+ "<div class=\"col-6 pl-0 sample-left-icon\">        <span></span>        <span></span>        <span></span>        <span></span>        <span></span>      </div>      <div class=\"col-6 text-right pt-2 pr-0\"><img src=\"assets/images/mail_icon.png\" alt=\"close\"></div>      </div>      <div class=\"row mt-4\">      <div class=\"col pl-0\">        <h5>Individual Serviced</h5>        <p>Colleen Schultz</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">        <h5>Provider/Carrier Name</h5>        <p>CIGNA</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">        <h5>Description</h5>        <p>Premium</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">"
									+ "<h5>Date of Service</h5>        <p>01/01/2019</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">        <h5>Amount</h5>        <p>$600.00</p>      </div>      </div>    </div>    </div>  </div>  </div>");
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			String itemizedReceiptCustomText = mockClaimBO.getItemizedReceiptCustomText(usrDtlsBn, "OUTOFPOCKET");
			assertTrue("####### testGetItemizedReceiptCustomTex_PREMIUM #######", itemizedReceiptCustomText
					.contains("After you make your premium payment(s) to your insurance provider"));
		} catch (Exception e) {
			fail("####### testGetItemizedReceiptCustomTex_PREMIUM() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBO() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());

			ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
			approvedClaimDetailsBn.setPayeeId(0);
			when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(true);

			when(cardMgmtDAO.getEEDebitCardVendorName(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn("TSYS");

			when(mockAccountDetailsDAO.getAccountAttributesByActpcd(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString(), Mockito.anyString())).thenReturn("Yes");

			when(cardMgmtDAO.isDebitCardActiveForElection(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn(true);
			when(mockAccountDetailsDAO.isAchActive(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("Yes");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOnlineClaimTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOtherDistributionTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());

			when(cardMgmtDAO.getCardBalanceForHSA(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(200d);
			TransactionDTO claimDTO = getClaimDTOForBalOverride();
			when(cardMgmtBO.submitTxnThruWS(Mockito.any(Connection.class), Mockito.any(CardGenericInputDTO.class),
					Mockito.any(TransactionDTO.class))).thenReturn(claimDTO);

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
			ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
			claimBn2.setClaimAmount("100");
			clmBn.add(claimBn1);
			clmBn.add(claimBn2);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBO() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBOForJRA() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
			claimBn1.setIsReceiptRequired("");
			ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
			claimBn2.setIsReceiptRequired("");
			claimBn2.setClaimAmount("100");
			clmBn.add(claimBn1);
			clmBn.add(claimBn2);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			userDetailsBn.setJRAAccount(true);
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBOForJRA() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForHSA() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck();
			bnWrapper.getClaimBnList().get(Integer.parseInt(bnWrapper.getCurrentSeqNo()) - 1).getAccbnList().get(0)
					.setAccountTypeCD("HSA");
			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
			Mockito.verify(mockOnlineClaimDAO, Mockito.times(0)).populateBnIfDuplicateClaim(
					Mockito.any(Connection.class), Mockito.any(ClaimBn.class), Mockito.any(UserDetailsBn.class));
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForHSA() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForNonHSA_WhenSubmitted() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("AMBULANCE");
			claimBn.setCategoryDTO(categoryDTO);
			DuplicateClaimDetailsBn bn = new DuplicateClaimDetailsBn();
			bn.setDupClmAmt("50");
			bn.setDupClmCategory("Medical");
			bn.setDupClmStatus("01/05/2018");
			bn.setDupClmStatus("Paid");
			claimBn.setDuplicateClaimDetailsBn(bn);

			when(mockOnlineClaimDAO.populateBnIfDuplicateClaim(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForNonHSA_WhenSubmitted() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForJRA_WhenSubmitted() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck_JRA();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("Premium");
			claimBn.setCategoryDTO(categoryDTO);
			DuplicateClaimDetailsBn bn = new DuplicateClaimDetailsBn();
			bn.setDupClmId("1");
			bn.setDupActpCd("RHRA");
			claimBn.setDuplicateClaimDetailsBn(bn);

			when(mockOnlineClaimDAO.isJraDuplicateClaim(Mockito.any(Connection.class), Mockito.any(ClaimBn.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			TransactionDetailsDTO mockClaimActivityDtls = getMockAcctActivityCardDetails();
			mockClaimActivityDtls.setIndividualServiced("ABC");

			when(mockClaimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(mockClaimActivityDtls);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			userDetailsBn.setJRAAccount(true);
			ClaimBn newClmBn = mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
			assertTrue("testCheckIfDuplicateClaimRaisedForJRA_WhenSubmitted - Check if duplicate claimBn is populated",
					newClmBn.getDuplicateClaimDetailsBn() != null
							&& "200.32".equals(newClmBn.getDuplicateClaimDetailsBn().getDupClmAmt()));
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForJRA_WhenSubmitted() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForJRA_WhenNotSubmitted() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck_JRA();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("Premium");
			claimBn.setCategoryDTO(categoryDTO);

			when(mockOnlineClaimDAO.isJraDuplicateClaim(Mockito.any(Connection.class), Mockito.any(ClaimBn.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			userDetailsBn.setJRAAccount(true);
			ClaimBn newClmBn = mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
			assertTrue("testCheckIfDuplicateClaimRaisedForJRA_WhenSubmitted - Check if duplicate claimBn is populated",
					newClmBn.getDuplicateClaimDetailsBn() != null
							&& "50.00".equals(newClmBn.getDuplicateClaimDetailsBn().getDupClmAmt()));
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForNonHSA_WhenSubmitted() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForJRA_WhenNoDuplicatePresent() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck_JRA();
			bnWrapper.getClaimBnList().get(0).setClaimAmount("30");
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("Premium");
			claimBn.setCategoryDTO(categoryDTO);

			when(mockOnlineClaimDAO.isJraDuplicateClaim(Mockito.any(Connection.class), Mockito.any(ClaimBn.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			userDetailsBn.setJRAAccount(true);
			ClaimBn newClmBn = mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
			assertTrue("testCheckIfDuplicateClaimRaisedForJRA_WhenSubmitted - Check if duplicate claimBn is populated",
					newClmBn.getDuplicateClaimDetailsBn() == null);
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForJRA_WhenNoDuplicatePresent() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForNonHSA_WhenNotSubmitted() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("AMBULANCE");
			claimBn.setCategoryDTO(categoryDTO);
			when(mockOnlineClaimDAO.populateBnIfDuplicateClaim(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			when(mockOnlineClaimDAO.checkClmCategoryForDuplicate(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(ClaimBn.class), Mockito.anyLong())).thenReturn(true);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForNonHSA_WhenNotSubmitted() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForNonHSA_WhenNotSubmitted_DCRA() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck_DCRA();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("AMBULANCE");
			claimBn.setCategoryDTO(categoryDTO);
			when(mockOnlineClaimDAO.populateBnIfDuplicateClaim(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			when(mockOnlineClaimDAO.checkClmCategoryForDuplicate(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(ClaimBn.class), Mockito.anyLong())).thenReturn(true);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForNonHSA_WhenNotSubmitted_DCRA() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForNonHSA_WhenNotSubmitted2() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("AMBULANCE");
			claimBn.setCategoryDTO(categoryDTO);
			when(mockOnlineClaimDAO.populateBnIfDuplicateClaim(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			when(mockOnlineClaimDAO.checkClmCategoryForDuplicate(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(ClaimBn.class), Mockito.anyLong())).thenReturn(false);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForNonHSA_WhenNotSubmitted2() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBOWhenNotHSA() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());

			ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
			approvedClaimDetailsBn.setPayeeId(0);
			when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOnlineClaimTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOtherDistributionTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			when(cardMgmtDAO.getCardBalanceForHSA(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(200d);
			TransactionDTO claimDTO = getClaimDTOForClaim();
			claimDTO.setApprovedAuthAmount("50");
			claimDTO.setClaimStatus("WaitingAuth");
			when(cardMgmtBO.submitClmToVendor(Mockito.any(Connection.class), Mockito.any(ApprovedClaimDetailsBn.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean())).thenReturn(claimDTO);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).splitClaim(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.anyDouble(), Mockito.anyDouble(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimStatus(Mockito.any(Connection.class),
					Mockito.anyInt(), Mockito.anyString());

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
			clmBn.add(claimBn1);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBOWhenNotHSA() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBOWhenNotHSAWithDuplicateClaims() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO)
					.delReferenceForDupOnlineClaim(Mockito.any(Connection.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());

			ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
			approvedClaimDetailsBn.setPayeeId(0);
			when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOnlineClaimTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOtherDistributionTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			when(cardMgmtDAO.getCardBalanceForHSA(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(200d);
			TransactionDTO claimDTO = getClaimDTOForClaim();
			claimDTO.setApprovedAuthAmount("50");
			claimDTO.setClaimStatus("WaitingAuth");
			when(cardMgmtBO.submitClmToVendor(Mockito.any(Connection.class), Mockito.any(ApprovedClaimDetailsBn.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean())).thenReturn(claimDTO);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).splitClaim(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.anyDouble(), Mockito.anyDouble(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimStatus(Mockito.any(Connection.class),
					Mockito.anyInt(), Mockito.anyString());

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
			ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
			claimBn2.setRefNo("1111");
			claimBn2.setNote("Note");
			clmBn.add(claimBn1);
			clmBn.add(claimBn2);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBOWhenNotHSAWithDuplicateClaims() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBOWhenDebitCardInactive() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());

			ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
			approvedClaimDetailsBn.setPayeeId(0);
			when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(true);

			when(cardMgmtDAO.getEEDebitCardVendorName(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn("TSYS");
			when(mockAccountDetailsDAO.getAccountAttributesByActpcd(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString(), Mockito.anyString())).thenReturn("Yes");
			when(cardMgmtDAO.isDebitCardActiveForElection(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn(false);
			when(mockAccountDetailsDAO.isAchActive(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("Yes");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOnlineClaimTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOtherDistributionTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			when(cardMgmtDAO.getCardBalanceForHSA(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(200d);
			TransactionDTO claimDTO = getClaimDTOForBalOverride();
			when(cardMgmtBO.submitTxnThruWS(Mockito.any(Connection.class), Mockito.any(CardGenericInputDTO.class),
					Mockito.any(TransactionDTO.class))).thenReturn(claimDTO);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).splitClaim(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.anyDouble(), Mockito.anyDouble(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimStatus(Mockito.any(Connection.class),
					Mockito.anyInt(), Mockito.anyString());

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
			ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
			claimBn2.setClaimAmount("100");
			clmBn.add(claimBn1);
			clmBn.add(claimBn2);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBOWhenDebitCardInactive() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBOWithClaimNote() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());

			ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
			approvedClaimDetailsBn.setPayeeId(0);
			when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOnlineClaimTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOtherDistributionTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			when(cardMgmtDAO.getCardBalanceForHSA(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(200d);
			TransactionDTO claimDTO = getClaimDTOForBalOverride();
			claimDTO.setApprovedAuthAmount("100");
			when(cardMgmtBO.submitClmToVendor(Mockito.any(Connection.class), Mockito.any(ApprovedClaimDetailsBn.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean())).thenReturn(claimDTO);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).splitClaim(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.anyDouble(), Mockito.anyDouble(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimStatus(Mockito.any(Connection.class),
					Mockito.anyInt(), Mockito.anyString());

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
			claimBn1.setNote("~Please approve the claim");
			ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
			claimBn2.setClaimAmount("100");
			claimBn2.setNote("~Please approve the claim~Claim is for test purpose");
			clmBn.add(claimBn1);
			clmBn.add(claimBn2);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBOWithClaimNote() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test(expected = com.acclaris.common.exceptions.SystemException.class)
	public void testSubmitClaimBOWhenNoImagesUploaded()
			throws SystemException, SQLException, BusinessLogicException, ServiceUnavailableException {
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
		when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
				.thenReturn(getBalanceBn(200d));
		when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
		when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
				Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
				Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
		PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
				Mockito.anyString());

		ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
		approvedClaimDetailsBn.setClaimID(0);
		when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
				Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);

		PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
				Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
		when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

		List<ImageItemDTO> imageItemsList = null;
		when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
				Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
						.thenReturn(imageItemsList);

		when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
				.thenReturn("/thumbnailPath");

		PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
				Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

		List<ClaimBn> clmBn = new ArrayList<>();
		ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
		claimBn1.setNote("~Please approve the claim");
		ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
		claimBn2.setClaimAmount("100");
		claimBn2.setNote("~Please approve the claim~Claim is for test purpose");
		clmBn.add(claimBn1);
		clmBn.add(claimBn2);

		UserDetailsBn userDetailsBn = getCommonUserDetails();
		mockClaimBO.submitClaim(userDetailsBn, clmBn);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testSubmitClaimBOWithClaimNoteWhenErrorReturned()
			throws SystemException, SQLException, BusinessLogicException, ServiceUnavailableException {
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
		when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
				.thenReturn(getBalanceBn(200d));
		when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
		when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
				Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
				Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Error~Failed to create~");

		List<ClaimBn> clmBn = new ArrayList<>();
		ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
		claimBn1.setNote("~Please approve the claim");
		ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
		claimBn2.setClaimAmount("100");
		claimBn2.setNote("~Please approve the claim~Claim is for test purpose");
		clmBn.add(claimBn1);
		clmBn.add(claimBn2);

		UserDetailsBn userDetailsBn = getCommonUserDetails();
		mockClaimBO.submitClaim(userDetailsBn, clmBn);
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBO_PayABill() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());

			ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
			when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(true);

			when(cardMgmtDAO.getEEDebitCardVendorName(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn("TSYS");

			when(mockAccountDetailsDAO.getAccountAttributesByActpcd(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString(), Mockito.anyString())).thenReturn("Yes");

			when(cardMgmtDAO.isDebitCardActiveForElection(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn(true);
			when(mockAccountDetailsDAO.isAchActive(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("Yes");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOnlineClaimTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOtherDistributionTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			when(cardMgmtDAO.getCardBalanceForHSA(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(200d);
			TransactionDTO claimDTO = getClaimDTOForBalOverride();
			when(cardMgmtBO.submitTxnThruWS(Mockito.any(Connection.class), Mockito.any(CardGenericInputDTO.class),
					Mockito.any(TransactionDTO.class))).thenReturn(claimDTO);

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission_PayABill();
			claimBn1.setIsReceiptRequired("No");
			claimBn1.setNote("~Please approve the claim");
			ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission_PayABill();
			claimBn2.setClaimAmount("100");
			claimBn2.setIsReceiptRequired("");
			claimBn2.setNote("~Please approve the claim~Claim is for test purpose");
			clmBn.add(claimBn1);
			clmBn.add(claimBn2);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBO_PayABill() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	////////////// Test methods related to submitAppeal ---------- begins
	@Test
	public void testValidateAppealDetailsForAppealTextMoreThan500Char() {
		try {
			AppealDTO appealDTO = new AppealDTO();
			String message = String.join("", Collections.nCopies(501, "x"));
			appealDTO.setMessage(message);
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(23710294);

			Whitebox.invokeMethod(mockClaimBO, "validateAppealDetails", appealDTO);

		} catch (BusinessLogicException e) {
			List<ErrorBn> errorList = e.getErrorBn().getErrorLists();
			assertTrue("testValidateAppealDetailsForAppealTextMoreThan500Char 1", !errorList.isEmpty());

			assertTrue("testValidateAppealDetailsForAppealTextMoreThan500Char 2",
					PortalError.APPEAL_TEXT_LENGTH_INCORRECT.getMessage()
							.equalsIgnoreCase(errorList.get(0).getMessage()));

			assertTrue("testValidateAppealDetailsForAppealTextMoreThan500Char 3",
					PortalError.APPEAL_TEXT_LENGTH_INCORRECT.getCode() == errorList.get(0).getCode());
		} catch (Exception e) {
			fail("### testValidateAppealDetails ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testValidateAppealDetailsForClaimID() {
		try {
			AppealDTO appealDTO = new AppealDTO();
			String message = String.join("", Collections.nCopies(420, "x"));
			appealDTO.setMessage(message);
			appealDTO.setClmbtId(23710294);

			Whitebox.invokeMethod(mockClaimBO, "validateAppealDetails", appealDTO);

		} catch (BusinessLogicException e) {
			List<ErrorBn> errorList = e.getErrorBn().getErrorLists();
			assertTrue("testValidateAppealDetailsForClaimID 1", !errorList.isEmpty());

			assertTrue("testValidateAppealDetailsForClaimID 2",
					PortalError.CLAIM_ID_NOT_PROVIDED.getMessage().equalsIgnoreCase(errorList.get(0).getMessage()));

			assertTrue("testValidateAppealDetailsForClaimID 3",
					PortalError.CLAIM_ID_NOT_PROVIDED.getCode() == errorList.get(0).getCode());
		} catch (Exception e) {
			fail("### testValidateAppealDetails ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testValidateAppealDetailsForClaimBatchID() {
		try {
			AppealDTO appealDTO = new AppealDTO();
			String message = String.join("", Collections.nCopies(420, "x"));
			appealDTO.setMessage(message);
			appealDTO.setClaimId(118965349);

			Whitebox.invokeMethod(mockClaimBO, "validateAppealDetails", appealDTO);

		} catch (BusinessLogicException e) {
			List<ErrorBn> errorList = e.getErrorBn().getErrorLists();
			assertTrue("testValidateAppealDetailsForClaimBatchID 1", !errorList.isEmpty());

			assertTrue("testValidateAppealDetailsForClaimBatchID 2", PortalError.CLAIM_BATCH_ID_NOT_PROVIDED
					.getMessage().equalsIgnoreCase(errorList.get(0).getMessage()));

			assertTrue("testValidateAppealDetailsForClaimBatchID 3",
					PortalError.CLAIM_BATCH_ID_NOT_PROVIDED.getCode() == errorList.get(0).getCode());
		} catch (Exception e) {
			fail("### testValidateAppealDetails ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testSubmitAppealForAllDetailsWithAppealAttachements() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
			AppealDTO appealDTO = new AppealDTO();
			appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(14078050);

			List<Long> appealAttchmentsIdList = new ArrayList<Long>();
			appealAttchmentsIdList.add(700L);
			appealAttchmentsIdList.add(701L);
			appealAttchmentsIdList.add(702L);
			appealAttchmentsIdList.add(703L);
			appealDTO.setExpImageIdList(appealAttchmentsIdList);

			UserDetailsBn userDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(14078050L);
			when(ValidationUtil.validateLength(Mockito.anyString(), Mockito.anyInt())).thenReturn(true);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					Mockito.any(ImageUploadInputDto.class));
			when(mockOnlineClaimDAO.getWrkGroupForClmBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("workgroup");
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(false);
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("tempPath");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(InputStream.class),
					Mockito.anyString());
			errorBn = Mockito.mock(ErrorBn.class);
			PowerMockito.whenNew(ErrorBn.class).withAnyArguments().thenReturn(errorBn);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName");
			ImageBn imageBn = new ImageBn();
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ValidationUtil.isNull(errorBn.getErrorLists())).thenReturn(true);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("thumbnailPath");
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).submitAppeal(Mockito.any(Connection.class),
					Mockito.any(AppealDTO.class), Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(conn).commit();
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");
			mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 1L, appealDTO);
		} catch (Exception e) {
			fail("### testSubmitAppealForAllDetailsWithAppealAttachements ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testProcessSubmitAppeallDocumentsSQLException() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
			AppealDTO appealDTO = new AppealDTO();
			appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(14078050);

			List<Long> appealAttchmentsIdList = new ArrayList<Long>();
			appealAttchmentsIdList.add(700L);
			appealAttchmentsIdList.add(701L);
			appealAttchmentsIdList.add(702L);
			appealAttchmentsIdList.add(703L);
			appealDTO.setExpImageIdList(appealAttchmentsIdList);

			UserDetailsBn userDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(14078050L);
			when(ValidationUtil.validateLength(Mockito.anyString(), Mockito.anyInt())).thenReturn(true);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					Mockito.any(ImageUploadInputDto.class));
			when(mockOnlineClaimDAO.getWrkGroupForClmBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("workgroup");
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(false);
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			PowerMockito.doThrow(new SQLException()).when(ImageUploadUtil.class, "getTempLocationPath",
					Mockito.anyString(), Mockito.any(Connection.class));
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");
			mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 1L, appealDTO);
		} catch (BusinessLogicException e) {
			assertTrue(true);
		} catch (Exception e) {
			fail("### testProcessSubmitAppeallDocumentsSQLException  ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testSubmitAppealBusinessLogicException() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
			AppealDTO appealDTO = new AppealDTO();
			appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(14078050);

			List<Long> appealAttchmentsIdList = new ArrayList<Long>();
			appealAttchmentsIdList.add(700L);
			appealAttchmentsIdList.add(701L);
			appealAttchmentsIdList.add(702L);
			appealAttchmentsIdList.add(703L);
			appealDTO.setExpImageIdList(appealAttchmentsIdList);

			UserDetailsBn userDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(14078050L);
			when(ValidationUtil.validateLength(Mockito.anyString(), Mockito.anyInt())).thenReturn(true);
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					Mockito.any(ImageUploadInputDto.class));
			when(mockOnlineClaimDAO.getWrkGroupForClmBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("");
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(true);

			mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 1L, appealDTO);
		} catch (BusinessLogicException e) {
			assertTrue(true);
		} catch (Exception e) {
			fail("### testSubmitAppealBusinessLogicException ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testSubmitAppealZeroClaimImgId() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
			AppealDTO appealDTO = new AppealDTO();
			appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(14078050);

			List<Long> appealAttchmentsIdList = new ArrayList<Long>();
			appealAttchmentsIdList.add(700L);
			appealAttchmentsIdList.add(701L);
			appealAttchmentsIdList.add(702L);
			appealAttchmentsIdList.add(703L);
			appealDTO.setExpImageIdList(appealAttchmentsIdList);

			UserDetailsBn userDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(14078050L);
			when(ValidationUtil.validateLength(Mockito.anyString(), Mockito.anyInt())).thenReturn(true);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					Mockito.any(ImageUploadInputDto.class));
			when(mockOnlineClaimDAO.getWrkGroupForClmBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("workgroup");
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(false);
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("tempPath");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(InputStream.class),
					Mockito.anyString());
			errorBn = Mockito.mock(ErrorBn.class);
			PowerMockito.whenNew(ErrorBn.class).withAnyArguments().thenReturn(errorBn);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName");
			ImageBn imageBn = new ImageBn();
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ValidationUtil.isNull(errorBn.getErrorLists())).thenReturn(true);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("thumbnailPath");
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(0L);
			when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenReturn(1L);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).saveClaimImageWithClaimBtchDetails(Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.any(Connection.class));
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).submitAppeal(Mockito.any(Connection.class),
					Mockito.any(AppealDTO.class), Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(conn).commit();
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");
			mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 0L, appealDTO);
			assertTrue(true);
		} catch (Exception e) {
			fail("### testSubmitAppealZeroClaimImgId ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testSubmitAppealZeroClaimImgIdUpdateClaimsImage() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
			AppealDTO appealDTO = new AppealDTO();
			appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(14078050);

			List<Long> appealAttchmentsIdList = new ArrayList<Long>();
			appealAttchmentsIdList.add(700L);
			appealAttchmentsIdList.add(701L);
			appealAttchmentsIdList.add(702L);
			appealAttchmentsIdList.add(703L);
			appealDTO.setExpImageIdList(appealAttchmentsIdList);

			UserDetailsBn userDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(14078050L);
			when(ValidationUtil.validateLength(Mockito.anyString(), Mockito.anyInt())).thenReturn(true);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					Mockito.any(ImageUploadInputDto.class));
			when(mockOnlineClaimDAO.getWrkGroupForClmBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("workgroup");
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(false);
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("tempPath");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(InputStream.class),
					Mockito.anyString());
			errorBn = Mockito.mock(ErrorBn.class);
			PowerMockito.whenNew(ErrorBn.class).withAnyArguments().thenReturn(errorBn);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName");
			ImageBn imageBn = new ImageBn();
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ValidationUtil.isNull(errorBn.getErrorLists())).thenReturn(true);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("thumbnailPath");
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(1L);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimsImageWithoutThumbnailPath(Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(),
					Mockito.any(Connection.class));
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).submitAppeal(Mockito.any(Connection.class),
					Mockito.any(AppealDTO.class), Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(conn).commit();

			mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 0L, appealDTO);
			assertTrue(true);
		} catch (Exception e) {
			fail("### testSubmitAppealZeroClaimImgIdUpdateClaimsImage ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test(expected = SystemException.class)
	public void testSubmitAppealForSQLException() throws Exception {
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
		AppealDTO appealDTO = new AppealDTO();
		appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
		appealDTO.setClaimId(118965349);
		appealDTO.setClmbtId(14078050);

		UserDetailsBn userDtlsBn = getCommonUserDetails();

		PowerMockito.doThrow(new SQLException()).when(mockOnlineClaimDAO)
				.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong());
		when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
				.thenReturn(13421414l);
		when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
				.thenReturn("OLNL_IMG_UPLOAD_NC");
		mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 1L, appealDTO);
	}

	@Test
	public void testSubmitAppealForUpdateWithoutAttachments() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
			AppealDTO appealDTO = new AppealDTO();
			appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(14078050);

			UserDetailsBn userDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(14078050L);
			when(ValidationUtil.validateLength(Mockito.anyString(), Mockito.anyInt())).thenReturn(true);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					Mockito.any(ImageUploadInputDto.class));
			when(mockOnlineClaimDAO.getWrkGroupForClmBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("workgroup");
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(false);
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("tempPath");
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(InputStream.class),
					Mockito.anyString());
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName");
			ImageBn imageBn = new ImageBn();
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ValidationUtil.isNull(Mockito.anyList())).thenReturn(true);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("thumbnailPath");
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).submitAppeal(Mockito.any(Connection.class),
					Mockito.any(AppealDTO.class), Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(conn).commit();

			mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 1L, appealDTO);
		} catch (Exception e) {
			fail("### testSubmitAppealForUpdateWithoutAttachments ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	////////////// Test methods related to submitAppeal() ---------- ends

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimWhenBatchIdisNull() {
		try {

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(0L);
			boolean result = mockClaimBO.uploadUnusedReceiptsForSubmittedClaim("123,124", userDetailsBn, "117024747",
					"Online");
			assertFalse("testUploadUnusedReceiptsForSubmittedClaimWhenBatchIdisNull success", result);
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimWhenBatchIdisNull failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimWhenExpenseImageIdsNull() {
		try {
			List<ImageDTO> imageDTOs = new ArrayList<>();
			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImageName("testImage.jpg");
			imageDTOs.add(imageDTO);

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(117024747L);
			boolean result = mockClaimBO.uploadUnusedReceiptsForSubmittedClaim(null, userDetailsBn, "117024747",
					"Online");
			assertFalse("testUploadUnusedReceiptsForSubmittedClaimWhenExpenseImageIdsNull success ", result);
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimWhenExpenseImageIdsNull failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimHasExpenseImageIdsClaimImageNotPresent() {
		try {
			List<ImageItemDTO> imageItemDTOs = new ArrayList<>();
			ImageItemDTO imageDTO = new ImageItemDTO();
			imageDTO.setImageFormat("JPG");
			imageDTO.setOriginalFileName("TEST.JPG");
			imageDTO.setImageSize(1234l);
			imageDTO.setImagePath("c:\test");
			imageDTO.setNoOfPages(1);
			imageItemDTOs.add(imageDTO);

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(1L);
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");

			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));

			when(receiptDetailsDAO.getLatestThumbnailImagePath(Mockito.any(Connection.class), Mockito.any()))
					.thenReturn("TEST");
			when(receiptDetailsDAO.getReceiptsExpImageDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(imageItemDTOs);

			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(0l);

			when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenReturn(75875849l);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).insertIntoClaimImage(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));

			PowerMockito.doNothing().when(receiptDetailsDAO).updateMultipleReceiptsDetails(
					Mockito.any(Connection.class), Mockito.any(), Mockito.anyLong(), Mockito.anyString());

			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");

			when(mockOnlineClaimDAO.isEmailSentForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("Y");
			when(mockOnlineClaimDAO.sendNotification(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn("");
			PowerMockito.doNothing().when(SendMailDAO.class, "setUserSession", Mockito.any(Connection.class),
					Mockito.anyString());

			boolean result = mockClaimBO.uploadUnusedReceiptsForSubmittedClaim("123,124", userDetailsBn, "117024747",
					"Online");
			assertTrue("testUploadUnusedReceiptsForSubmittedClaimHasExpenseImageIds success ", result);
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimHasExpenseImageIds failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimHasExpenseImageIdsClaimImageIdAlreadyPresent() {
		try {
			List<ImageItemDTO> imageItemDTOs = new ArrayList<>();
			ImageItemDTO imageDTO = new ImageItemDTO();
			imageDTO.setImageFormat("JPG");
			imageDTO.setOriginalFileName("TEST.JPG");
			imageDTO.setImageSize(1234l);
			imageDTO.setImagePath("c:\test");
			imageDTO.setNoOfPages(1);
			imageItemDTOs.add(imageDTO);

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(1L);
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");

			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));

			when(receiptDetailsDAO.getLatestThumbnailImagePath(Mockito.any(Connection.class), Mockito.any()))
					.thenReturn("TEST");

			when(receiptDetailsDAO.getReceiptsExpImageDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(imageItemDTOs);

			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");

			when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenReturn(75875849l);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimsImageWithoutThumbnailPath(Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(),
					Mockito.any(Connection.class));

			PowerMockito.doNothing().when(receiptDetailsDAO).updateMultipleReceiptsDetails(
					Mockito.any(Connection.class), Mockito.any(), Mockito.anyLong(), Mockito.anyString());

			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");

			when(mockOnlineClaimDAO.isEmailSentForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("Y");
			when(mockOnlineClaimDAO.sendNotification(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn("");
			PowerMockito.doNothing().when(SendMailDAO.class, "setUserSession", Mockito.any(Connection.class),
					Mockito.anyString());

			boolean result = mockClaimBO.uploadUnusedReceiptsForSubmittedClaim("123,124", userDetailsBn, "117024747",
					"Online");
			assertTrue("testUploadUnusedReceiptsForSubmittedClaimHasExpenseImageIds success ", result);
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimHasExpenseImageIds failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimThumbnailPathIsNull() {
		try {
			List<ImageItemDTO> imageItemDTOs = new ArrayList<>();
			ImageItemDTO imageDTO = new ImageItemDTO();
			imageDTO.setImageFormat("JPG");
			imageDTO.setOriginalFileName("TEST.JPG");
			imageDTO.setImageSize(1234l);
			imageDTO.setImagePath("c:\test");
			imageDTO.setNoOfPages(1);
			imageItemDTOs.add(imageDTO);

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(1L);
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");

			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));

			when(receiptDetailsDAO.getLatestThumbnailImagePath(Mockito.any(Connection.class), Mockito.any()))
					.thenReturn(null);

			when(receiptDetailsDAO.getReceiptsExpImageDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(imageItemDTOs);

			PowerMockito.when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("");

			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(0l);

			when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenReturn(75875849l);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).insertIntoClaimImage(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));

			PowerMockito.doNothing().when(receiptDetailsDAO).updateMultipleReceiptsDetails(
					Mockito.any(Connection.class), Mockito.any(), Mockito.anyLong(), Mockito.anyString());

			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");

			when(mockOnlineClaimDAO.isEmailSentForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("Y");
			when(mockOnlineClaimDAO.sendNotification(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn("");
			PowerMockito.doNothing().when(SendMailDAO.class, "setUserSession", Mockito.any(Connection.class),
					Mockito.anyString());

			boolean result = mockClaimBO.uploadUnusedReceiptsForSubmittedClaim("123,124", userDetailsBn, "117024747",
					"Online");
			assertTrue(result);
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimThumbnailPathIsNull failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimSystemException() {
		try {
			List<ImageItemDTO> imageItemDTOs = new ArrayList<>();
			ImageItemDTO imageDTO = new ImageItemDTO();
			imageDTO.setImageFormat("JPG");
			imageDTO.setOriginalFileName("TEST.JPG");
			imageDTO.setImageSize(1234l);
			imageDTO.setImagePath("c:\test");
			imageDTO.setNoOfPages(1);
			imageItemDTOs.add(imageDTO);

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(1L);
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");

			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));

			when(receiptDetailsDAO.getLatestThumbnailImagePath(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(null);

			when(receiptDetailsDAO.getReceiptsExpImageDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(imageItemDTOs);

			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(0l);

			when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenThrow(new SQLException());

			mockClaimBO.uploadUnusedReceiptsForSubmittedClaim("123,124", userDetailsBn, "117024747", "Online");

		} catch (SystemException e) {
			assertTrue("testUploadUnusedReceiptsForSubmittedClaimSystemException success" + e.getErrorBn().getMessage(),

					true);
			assertEquals(PortalError.COMMON_ERROR.getMessage(), e.getErrorBn().getMessage());
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimSystemException faild with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimBusinessException() {
		try {
			List<ImageItemDTO> imageItemDTOs = new ArrayList<>();
			ImageItemDTO imageDTO = new ImageItemDTO();
			imageDTO.setImageFormat("JPG");
			imageDTO.setOriginalFileName("TEST.JPG");
			imageDTO.setImageSize(1234l);
			imageDTO.setImagePath("c:\test");
			imageDTO.setNoOfPages(1);
			imageItemDTOs.add(imageDTO);

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(1L);
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(null);

			mockClaimBO.uploadUnusedReceiptsForSubmittedClaim("123,124", userDetailsBn, "117024747", "Online");
		} catch (BusinessLogicException e) {
			assertTrue("testUploadUnusedReceiptsForSubmittedClaimBusinessException success", true);
			assertEquals(PortalError.DEFAULT_WORK_GROUP_NOT_FOUND.getMessage(), e.getErrorBn().getMessage());
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimBusinessException faild with following error "
					+ getStackTrace(e));
		}
	}

	private UserDetailsBn getCommonUserDetails() {
		UserDetailsBn userDtlBn = new UserDetailsBn();
		userDtlBn.setId(10574588L);
		userDtlBn.setEeID(5962526);
		userDtlBn.setUserType("EE");
		userDtlBn.setName("HELEN E CARTER");
		userDtlBn.setErID(1001274L);
		userDtlBn.setAdmnID(1L);
		userDtlBn.setErID(1L);
		userDtlBn.setJRAAccount(false);
		return userDtlBn;
	}

	private UserDetailsBn getJRAUserDetails() {
		UserDetailsBn userDtlBn = new UserDetailsBn();
		userDtlBn.setId(10574588L);
		userDtlBn.setEeID(5962526);
		userDtlBn.setUserType("EE");
		userDtlBn.setName("HELEN E CARTER");
		userDtlBn.setErID(1001274L);
		userDtlBn.setAdmnID(1L);
		userDtlBn.setErID(1L);
		userDtlBn.setJRAAccount(true);
		return userDtlBn;
	}

	private ClaimBnWrapper getClaimBnWrapper() {
		ClaimBnWrapper claimBnWrapper = new ClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("+.75");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("No");
		categoryDTO.setIsPriorYearAcctActive("No");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);

		claimBnWrapper.setClaimBn(claimBn);
		return claimBnWrapper;
	}

	private ClaimBnWrapper getClaimBnWrapperForDuplicateCheck() {
		List<AccountBn> accbnList;
		AccountBn accountBn;
		ClaimBnWrapper claimBnWrapper = new ClaimBnWrapper();
		List<ClaimBn> claimBns = new ArrayList<>();

		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("50");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("No");
		categoryDTO.setIsPriorYearAcctActive("No");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);
		claimBn.setDummyClaimSeqNo("1");

		accbnList = new ArrayList<>();
		accountBn = new AccountBn();
		accountBn.setAccountNO("235");
		accountBn.setAccountTypeCD("HCRA");
		accountBn.setElctID("14078043");
		accountBn.setServiceBegins("01/05/2018");
		accountBn.setCategory("Medical");
		accountBn.setNeedLeastBalance(true);
		accbnList.add(accountBn);
		claimBn.setAccbnList(accbnList);
		claimBns.add(claimBn);

		ClaimBn claimBn1 = new ClaimBn();
		claimBn1.setPriorYearCheckStatus(false);
		claimBn1.setServiceBegins("01/05/2018");
		claimBn1.setServiceEnds(SERVICE_ENDS);
		claimBn1.setClaimAmount("50");
		CategoryDTO categoryDTO1 = new CategoryDTO();
		categoryDTO1.setCategory("Medical");
		categoryDTO1.setClaimtype("AMBULANCE");
		categoryDTO1.setIsPriorYear("No");
		categoryDTO1.setIsPriorYearAcctActive("No");
		categoryDTO1.setWillAllowLimited("Yes");
		claimBn1.setCategoryDTO(categoryDTO1);
		claimBn1.setDummyClaimSeqNo("2");

		accbnList = new ArrayList<>();
		accountBn = new AccountBn();
		accountBn.setAccountNO("235");
		accountBn.setAccountTypeCD("HCRA");
		accountBn.setElctID("14078043");
		accountBn.setServiceBegins("01/05/2018");
		accountBn.setCategory("Medical");
		accountBn.setNeedLeastBalance(true);
		accbnList.add(accountBn);
		claimBn1.setAccbnList(accbnList);
		claimBns.add(claimBn1);

		claimBnWrapper.setClaimBnList(claimBns);
		claimBnWrapper.setCurrentSeqNo("2");

		return claimBnWrapper;
	}

	private ClaimBnWrapper getClaimBnWrapperForDuplicateCheck_DCRA() {
		List<AccountBn> accbnList;
		AccountBn accountBn;
		ClaimBnWrapper claimBnWrapper = new ClaimBnWrapper();
		List<ClaimBn> claimBns = new ArrayList<>();

		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("50");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Adult Care");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("No");
		categoryDTO.setIsPriorYearAcctActive("No");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);
		claimBn.setDummyClaimSeqNo("1");
		claimBn.setDependentID("1");

		accbnList = new ArrayList<>();
		accountBn = new AccountBn();
		accountBn.setAccountNO("235");
		accountBn.setAccountTypeCD("DCRA");
		accountBn.setElctID("14078043");
		accountBn.setServiceBegins("01/05/2018");
		accountBn.setCategory("Medical");
		accountBn.setNeedLeastBalance(true);
		accbnList.add(accountBn);
		claimBn.setAccbnList(accbnList);
		claimBns.add(claimBn);

		ClaimBn claimBn1 = new ClaimBn();
		claimBn1.setPriorYearCheckStatus(false);
		claimBn1.setServiceBegins("01/05/2018");
		claimBn1.setServiceEnds(SERVICE_ENDS);
		claimBn1.setClaimAmount("50");
		CategoryDTO categoryDTO1 = new CategoryDTO();
		categoryDTO1.setCategory("Medical");
		categoryDTO1.setClaimtype("AMBULANCE");
		categoryDTO1.setIsPriorYear("No");
		categoryDTO1.setIsPriorYearAcctActive("No");
		categoryDTO1.setWillAllowLimited("Yes");
		claimBn1.setCategoryDTO(categoryDTO1);
		claimBn1.setDummyClaimSeqNo("2");
		claimBn1.setDependentID("2");

		accbnList = new ArrayList<>();
		accountBn = new AccountBn();
		accountBn.setAccountNO("235");
		accountBn.setAccountTypeCD("HCRA");
		accountBn.setElctID("14078043");
		accountBn.setServiceBegins("01/05/2018");
		accountBn.setCategory("Medical");
		accountBn.setNeedLeastBalance(true);
		accbnList.add(accountBn);
		claimBn1.setAccbnList(accbnList);
		claimBns.add(claimBn1);

		claimBnWrapper.setClaimBnList(claimBns);
		claimBnWrapper.setCurrentSeqNo("2");

		return claimBnWrapper;
	}

	private ClaimBnWrapper getClaimBnWrapperForDuplicateCheck_JRA() {
		ClaimBnWrapper claimBnWrapper = new ClaimBnWrapper();
		List<ClaimBn> claimBns = new ArrayList<>();

		ClaimBn claimBn = new ClaimBn();
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("50");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("Premium");
		categoryDTO.setSelectedOccurrence(ClaimTypes.ONETIME.getValue());
		claimBn.setCategoryDTO(categoryDTO);
		claimBn.setDummyClaimSeqNo("1");
		claimBn.setDependentID("1");
		claimBns.add(claimBn);

		ClaimBn claimBn1 = new ClaimBn();
		claimBn1.setServiceBegins("01/05/2018");
		claimBn1.setServiceEnds(SERVICE_ENDS);
		claimBn1.setClaimAmount("50");
		CategoryDTO categoryDTO1 = new CategoryDTO();
		categoryDTO1.setCategory("Medical");
		categoryDTO1.setClaimtype("Premium");
		claimBn1.setCategoryDTO(categoryDTO1);
		claimBn1.setDummyClaimSeqNo("2");
		claimBn1.setDependentID("2");
		claimBns.add(claimBn1);

		claimBnWrapper.setClaimBnList(claimBns);
		claimBnWrapper.setCurrentSeqNo("2");
		return claimBnWrapper;
	}

	private ClaimBn getClaimBn() {
		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("+.75");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("No");
		categoryDTO.setIsPriorYearAcctActive("No");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);
		return claimBn;
	}

	private ClaimBnWrapper getClaimBnWrapperWhenPriorYearSelected() {
		ClaimBnWrapper claimBnWrapper = new ClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(true);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("112.34");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("Yes");
		categoryDTO.setIsPriorYearAcctActive("Yes");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);
		return claimBnWrapper;
	}

	private ClaimBn getClaimBnBeforeClaimSubmission() {
		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("84");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("No");
		categoryDTO.setIsPriorYearAcctActive("No");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);
		claimBn.setBundleLabel("");

		AccountBn accountBn = new AccountBn();
		accountBn.setAccountNO("235");
		accountBn.setAccountTypeCD("HSA");
		accountBn.setElctID("14078043");
		accountBn.setServiceBegins("01/05/2018");
		accountBn.setCategory("Medical");
		accountBn.setNeedLeastBalance(true);
		List<AccountBn> accbnList = new ArrayList<>();
		accbnList.add(accountBn);
		claimBn.setAccbnList(accbnList);

		claimBn.setProviderID("123456");
		claimBn.setIsReceiptRequired("Yes");
		List<Long> recptIdsList = new ArrayList<>();
		recptIdsList.add(1L);
		recptIdsList.add(2L);
		claimBn.setRecptIdsList(recptIdsList);
		claimBn.setClaimId("12345");
		return claimBn;
	}

	private TransactionDTO getClaimDTOForBalOverride() {
		TransactionDTO claimDTO = new TransactionDTO();
		claimDTO.setClaimBatchType("Online");
		claimDTO.setClaimID("12345");
		claimDTO.setAdjustmentType(AdjustmentType.BAL_OVERRIDE.getValue());
		claimDTO.setClaimAmt("100");
		claimDTO.setRequestType(DbCardTrxnRequestTypes.BAL_OVERRIDE.getValue());
		return claimDTO;
	}

	private TransactionDTO getClaimDTOForClaim() {
		TransactionDTO claimDTO = new TransactionDTO();
		claimDTO.setClaimBatchType("Online");
		claimDTO.setClaimID("12345");
		claimDTO.setAdjustmentType(AdjustmentType.CLAIM.getValue());
		claimDTO.setClaimAmt("84");
		claimDTO.setRequestType(DbCardTrxnRequestTypes.CLAIM.getValue());
		claimDTO.setActpCd("HSA");
		claimDTO.setClaimStatus("Approved");
		return claimDTO;
	}

	private ClaimBn getClaimBnBeforeClaimSubmission_PayABill() {
		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("84");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("No");
		categoryDTO.setIsPriorYearAcctActive("No");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);
		claimBn.setBundleLabel("");

		AccountBn accountBn = new AccountBn();
		accountBn.setAccountNO("235");
		accountBn.setAccountTypeCD("HSA");
		accountBn.setElctID("14078043");
		accountBn.setServiceBegins("01/05/2018");
		accountBn.setCategory("Medical");
		accountBn.setNeedLeastBalance(true);
		List<AccountBn> accbnList = new ArrayList<>();
		accbnList.add(accountBn);
		claimBn.setAccbnList(accbnList);

		claimBn.setProviderID("123456");
		claimBn.setPayeeId("12345");
		claimBn.setPaymentreference("Payment Reference");
		claimBn.setInvoice("XYZ123");
		claimBn.setAccount("XYZ12345");

		claimBn.setIsReceiptRequired("Yes");
		List<Long> recptIdsList = new ArrayList<>();
		recptIdsList.add(1L);
		recptIdsList.add(2L);
		claimBn.setRecptIdsList(recptIdsList);
		claimBn.setClaimId("12345");
		return claimBn;
	}

	@Test
	public void testGetPopupTextPremium() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<p class=\"mb-0 mt-4\">What is an Itemized Receipt?</p>\n\t<span>An itemized receipt provides the following information:</span>\n\t<ul class=\"mt-4\">\n\t  <li>Provider name</li>\n\t  <li>Date of service</li>\n\t  <li>Description of each service provided</li>\n\t  <li>Dollar amount of each service</li>\n\t</ul>\n\n\t<h3 class=\"mb-0 mt-4\">How can I get an \"Itemized Receipt\"?</h3>\n\t<span>If you weren't provided an itemized receipt when you left your doctor's office, here are a few ways you can go about obtaining one:</span>\n\t<div class=\"row mt-4\">\n\t\t1. Call your doctor's office and request one to be   mailed to you\n\t</div>\n\t<div class=\"row\">\n\t\t2. Go to your doctor's office and have one printed\n\t</div>");
			UserDetailsBn usrDtlsBn = getJRAUserDetails();
			String claimEntryMode = "Premium";
			when(mockOnlineClaimDAO.checkFutureClaimPeriod(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(true);

			String text = mockClaimBO.getPopupText(usrDtlsBn, claimEntryMode);
			assertNotNull(text);
		} catch (Exception e) {
			fail("####### testGetPopupText() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetPopupTextForOutOfPocket() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<p class=\"mb-0 mt-4\">What is an Itemized Receipt?</p>\n\t<span>An itemized receipt provides the following information:</span>\n\t<ul class=\"mt-4\">\n\t  <li>Provider name</li>\n\t  <li>Date of service</li>\n\t  <li>Description of each service provided</li>\n\t  <li>Dollar amount of each service</li>\n\t</ul>\n\n\t<h3 class=\"mb-0 mt-4\">How can I get an \"Itemized Receipt\"?</h3>\n\t<span>If you weren't provided an itemized receipt when you left your doctor's office, here are a few ways you can go about obtaining one:</span>\n\t<div class=\"row mt-4\">\n\t\t1. Call your doctor's office and request one to be   mailed to you\n\t</div>\n\t<div class=\"row\">\n\t\t2. Go to your doctor's office and have one printed\n\t</div>");
			UserDetailsBn usrDtlsBn = getJRAUserDetails();
			String claimEntryMode = "OutofPocket";
			when(mockOnlineClaimDAO.checkFutureClaimPeriod(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(true);

			String text = mockClaimBO.getPopupText(usrDtlsBn, claimEntryMode);
			assertNotNull(text);
		} catch (Exception e) {
			fail("####### testGetPopupText() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetPopupTextNonJRAAccount() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<p class=\"mb-0 mt-4\">What is an Itemized Receipt?</p>\n\t<span>An itemized receipt provides the following information:</span>\n\t<ul class=\"mt-4\">\n\t  <li>Provider name</li>\n\t  <li>Date of service</li>\n\t  <li>Description of each service provided</li>\n\t  <li>Dollar amount of each service</li>\n\t</ul>\n\n\t<h3 class=\"mb-0 mt-4\">How can I get an \"Itemized Receipt\"?</h3>\n\t<span>If you weren't provided an itemized receipt when you left your doctor's office, here are a few ways you can go about obtaining one:</span>\n\t<div class=\"row mt-4\">\n\t\t1. Call your doctor's office and request one to be   mailed to you\n\t</div>\n\t<div class=\"row\">\n\t\t2. Go to your doctor's office and have one printed\n\t</div>");
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			String claimEntryMode = "OutofPocket";

			AccountDTO accountDTO = new AccountDTO(usrDtlsBn.getEeID());
			accountDTO.setActpcd("DCRA");
			accountDTO.setElectID("111");
			List<String> planYears = new ArrayList<>();
			planYears.add("2019");
			accountDTO.setPlanYears(planYears);
			accountDTO.setHSAEnrollmentStatus("");
			accountDTO.setSequence(1);
			List<AccountDTO> accountsList = new ArrayList<>();
			accountsList.add(accountDTO);
			Map<String, List<AccountDTO>> activeAcct = new HashMap<>();
			activeAcct.put("DCRA", accountsList);
			when(accountDetailsService.getActiveElections(Mockito.any(UserDetailsBn.class))).thenReturn(activeAcct);

			when(mockOnlineClaimDAO.checkFutureClaimPeriod(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(true);

			String text = mockClaimBO.getPopupText(usrDtlsBn, claimEntryMode);
			assertNotNull(text);
		} catch (Exception e) {
			fail("####### testGetPopupText() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testIsEnrolledForDirectDeposit() {
		try {
			when(profileBankingInfoBO.hasUserSignedUpForDirectDeposit(Mockito.any(UserDetailsBn.class)))
					.thenReturn(true);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			boolean isDirectDepositEnabled = mockClaimBO.isEnrolledForDirectDeposit(usrDtlsBn);
			assertTrue("####### testIsEnrolledForDirectDeposit #######", isDirectDepositEnabled);
		} catch (Exception e) {
			fail("####### testIsEnrolledForDirectDeposit() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetAppealHistoryOfClaimWithNoAppealData() {
		try {

			UserDetailsBn userDtlBn = new UserDetailsBn();
			userDtlBn.setId(10574588L);
			userDtlBn.setEeID(5962521);
			userDtlBn.setUserType("EE");
			userDtlBn.setName("HELEN E CARTER");
			userDtlBn.setErID(1001274L);
			userDtlBn.setAdmnID(1L);
			userDtlBn.setErID(1L);

			List<AppealDTO> appealDetailsList = new ArrayList<>();

			when(mockDatabase.getDBConnection()).thenReturn(conn);

			when(mockOnlineClaimDAO.getAppealDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(appealDetailsList);

			List<AppealDTO> appealDTOList = mockClaimBO.getAppealHistoryOfClaim(userDtlBn, 118250955);

			assertTrue("####### testGetAppealHistoryOfClaimWithNoAppealData ####### Appeal Data No Records ",
					appealDTOList.size() == 0);

		} catch (Exception e) {
			fail("####### testGetAppealHistoryOfClaimWithNoAppealData ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetAppealHistoryOfClaimWithAppealSubmitted() {
		try {

			UserDetailsBn userDtlBn = new UserDetailsBn();
			userDtlBn.setId(10574588L);
			userDtlBn.setEeID(5962522);
			userDtlBn.setUserType("EE");
			userDtlBn.setName("Ben Ten Gun");
			userDtlBn.setErID(1001274L);
			userDtlBn.setAdmnID(1L);
			userDtlBn.setErID(1L);

			List<AppealDTO> appealDetailsList = new ArrayList<>();

			AppealDTO appealclaimData = new AppealDTO();

			appealclaimData.setActionOn("03/21/2011 09:33 AM");
			appealclaimData.setMessage(
					" I have uploaded another legible receipt with this claim. [Images uploaded - HIPAA_1440755968322_78481.pdf, TC-01.2_1473334855310_78795.jpg ] ");
			appealclaimData.setClaimId(118250955);
			appealclaimData.setClmbtId(23694156);
			appealclaimData.setStatus(AppealStatus.APPEAL_SUBMITTED.getAppealStatus());

			List<ImageDTO> appealAttachmentsList = new ArrayList<>();

			ImageDTO appealImageData1 = new ImageDTO();
			appealImageData1.setClaimsImageFileId("10898838");
			appealImageData1.setImageName("hipaa_1440755968322_78481.pdf");

			ImageDTO appealImageData2 = new ImageDTO();
			appealImageData2.setClaimsImageFileId("10898842");
			appealImageData2.setImageName("tc-01.2_1473334855310_78795.jpg");

			appealAttachmentsList.add(appealImageData1);
			appealAttachmentsList.add(appealImageData2);

			appealDetailsList.add(appealclaimData);

			when(mockDatabase.getDBConnection()).thenReturn(conn);

			when(mockOnlineClaimDAO.getAttachedFileForClaimAppeal(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(appealAttachmentsList);

			when(mockOnlineClaimDAO.getAppealDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(appealDetailsList);

			List<AppealDTO> appealDTOList = mockClaimBO.getAppealHistoryOfClaim(userDtlBn,
					appealDetailsList.get(0).getClaimId());

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted get action by "
							+ appealDTOList.get(0).getActionBy(),
					"Ben Ten Gun".equalsIgnoreCase(appealDTOList.get(0).getActionBy()));
			assertTrue("####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal status is submitted ",
					AppealStatus.APPEAL_SUBMITTED.getAppealStatus().equalsIgnoreCase(appealDTOList.get(0).getStatus()));

			assertTrue("####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted claim id "
					+ appealDTOList.get(0).getClaimId(), 118250955 == appealDTOList.get(0).getClaimId());

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted attachment details size equal to two"
							+ appealDTOList.get(0).getAppealAttachmentDetails().size(),
					2 == appealDTOList.get(0).getAppealAttachmentDetails().size());

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted attachment details claims image file id 1"
							+ appealDTOList.get(0).getAppealAttachmentDetails().get(0).getClaimsImageFileId(),
					"10898838".equalsIgnoreCase(
							appealDTOList.get(0).getAppealAttachmentDetails().get(0).getClaimsImageFileId()));

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted attachment details image name 1"
							+ appealDTOList.get(0).getAppealAttachmentDetails().get(0).getImageName(),
					"hipaa_1440755968322_78481.pdf"
							.equalsIgnoreCase(appealDTOList.get(0).getAppealAttachmentDetails().get(0).getImageName()));

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted attachment details claims image file id 2"
							+ appealDTOList.get(0).getAppealAttachmentDetails().get(1).getClaimsImageFileId(),
					"10898842".equalsIgnoreCase(
							appealDTOList.get(0).getAppealAttachmentDetails().get(1).getClaimsImageFileId()));

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted attachment details image name 2"
							+ appealDTOList.get(0).getAppealAttachmentDetails().get(1).getImageName(),
					"tc-01.2_1473334855310_78795.jpg"
							.equalsIgnoreCase(appealDTOList.get(0).getAppealAttachmentDetails().get(1).getImageName()));
			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted message with substring [Images uploaded - HIPAA_1440755968322_78481.pdf ] removed and only trailing space removed. "
							+ appealDTOList.get(0).getMessage(),
					" I have uploaded another legible receipt with this claim."
							.equalsIgnoreCase(appealDTOList.get(0).getMessage()));

		} catch (Exception e) {
			fail("####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetAppealHistoryOfClaimWithAppealProcessed() {
		try {

			UserDetailsBn userDtlBn = new UserDetailsBn();
			userDtlBn.setId(10574588L);
			userDtlBn.setEeID(5962523);
			userDtlBn.setUserType("EE");
			userDtlBn.setName("Phantom A Philips");
			userDtlBn.setErID(1001274L);
			userDtlBn.setAdmnID(1L);
			userDtlBn.setErID(1L);

			List<AppealDTO> appealDetailsList = new ArrayList<>();

			AppealDTO appealclaimData = new AppealDTO();
			AppealDTO appealclaimData2 = new AppealDTO();

			appealclaimData.setActionOn("03/21/2018 09:33 AM");
			appealclaimData.setMessage(
					"Please provide us with the documentationfor this denial, last time we checked we still had about $250 available for payment.");
			appealclaimData.setClaimId(118278029);
			appealclaimData.setClmbtId(23705074);
			appealclaimData.setStatus(AppealStatus.APPEAL_SUBMITTED.getAppealStatus());

			appealDetailsList.add(appealclaimData);

			appealclaimData2.setActionOn("03/22/2018 09:30 AM");
			appealclaimData2.setMessage(
					"***\nDear Kathleen Black,\n\nThank you for contacting Crosby Benefit Systems.\n\nPlease be informed that as per records your 2010 HCRA account has been exhausted. So no more reimbursement is eligible from this account. You are requested to kindly submit claims for 2011 HCRA account for further reimbursement.\n\nIf your claim was denied for missing/incorrect information, you may re-submit by providing the missing/correct information.  All submissions must be received prior to the end of the run out date to be eligible. \n \nYou may appeal our decision by sending a written request to Crosby Benefit Systems within 180 days of the date of this notice.  The appeal request must include the following: Participant's and employer's name, participant's Social Security Number or employee ID number, date(s) of service, provider name, claim amounts, a copy of the Explanation of Unreimbursed Claims or the claim number, a description of the problem, steps previously attempted to reach resolution, and any additional documentation or explanation in support of your request.\n \nThe appeal should be sent to:\nClaims Appeal Coordinator\nCrosby Benefit Systems, Inc.\nP. O. Box 25172\nLehigh Valley, PA 18002-5172 \n       \n Please refer to our Reimbursement Request Forms or our website for guidance on eligible expenses and claim filing instructions.  If you have questions about this denial, please call 866-918-9711 or email: servicecenter@crosbybenefits.com.\n\nSincerely \nCustomer Care \nCrosby Benefit Systems\n***");
			appealclaimData2.setClaimId(118278029);
			appealclaimData2.setClmbtId(23705074);

			appealDetailsList.add(appealclaimData2);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getAppealDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(appealDetailsList);

			List<AppealDTO> appealDTOList = mockClaimBO.getAppealHistoryOfClaim(userDtlBn,
					appealDetailsList.get(0).getClaimId());

			assertTrue("####### testGetAppealHistoryOfClaimWithAppealProcessed ####### appeal submitted claim id "
					+ appealDTOList.get(0).getClaimId(), 118278029 == appealDTOList.get(0).getClaimId());

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealProcessed ####### appeal status submitted action by "
							+ appealDTOList.get(0).getActionBy(),
					"Phantom A Philips".equalsIgnoreCase(appealDTOList.get(0).getActionBy()));

			assertTrue("####### testGetAppealHistoryOfClaimWithAppealProcessed ####### appeal status is submitted ",
					AppealStatus.APPEAL_SUBMITTED.getAppealStatus().equalsIgnoreCase(appealDTOList.get(0).getStatus()));

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealProcessed ####### appeal status denied action by "
							+ appealDTOList.get(1).getActionBy(),
					"Appeal Process Team".equalsIgnoreCase(appealDTOList.get(1).getActionBy()));

			assertTrue("####### testGetAppealHistoryOfClaimWithAppealProcessed ####### appeal status processed ",
					AppealStatus.APPEAL_PROCESSED.getAppealStatus().equalsIgnoreCase(appealDTOList.get(1).getStatus()));

			assertTrue("####### testGetAppealHistoryOfClaimWithAppealProcessed ####### Appeal Claim Data Size ",
					appealDTOList.size() == 2);

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealProcessed ####### appeal submitted attachment details is null"
							+ ValidationUtil.isNull(appealDTOList.get(0).getAppealAttachmentDetails()),
					ValidationUtil.isNull(appealDTOList.get(0).getAppealAttachmentDetails()));

		} catch (Exception e) {
			fail("####### testGetAppealHistoryOfClaimWithAppealProcessed ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetAppealHistoryOfClaimWithNoReviewMessage() {
		try {

			UserDetailsBn userDtlBn = new UserDetailsBn();
			userDtlBn.setId(10574588L);
			userDtlBn.setEeID(5962523);
			userDtlBn.setUserType("EE");
			userDtlBn.setName("Phantom A Philips");
			userDtlBn.setErID(1001274L);
			userDtlBn.setAdmnID(1L);
			userDtlBn.setErID(1L);

			List<AppealDTO> appealDetailsList = new ArrayList<>();

			AppealDTO appealclaimData = new AppealDTO();
			AppealDTO appealclaimData2 = new AppealDTO();

			appealclaimData.setActionOn("03/21/2018 09:33 AM");
			appealclaimData.setMessage(
					"Please provide us with the documentationfor this denial, last time we checked we still had about $250 available for payment.");
			appealclaimData.setClaimId(118278029);
			appealclaimData.setClmbtId(23705074);
			appealclaimData.setStatus(AppealStatus.APPEAL_SUBMITTED.getAppealStatus());

			appealDetailsList.add(appealclaimData);

			appealclaimData2.setActionOn("03/22/2018 09:30 AM");
			appealclaimData2.setMessage("");
			appealclaimData2.setClaimId(118278029);
			appealclaimData2.setClmbtId(23705074);

			appealDetailsList.add(appealclaimData2);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getAppealDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(appealDetailsList);

			List<AppealDTO> appealDTOList = mockClaimBO.getAppealHistoryOfClaim(userDtlBn,
					appealDetailsList.get(0).getClaimId());

			assertTrue("####### testGetAppealHistoryOfClaimWithNoReviewMessage ####### appeal submitted claim id "
					+ appealDTOList.get(0).getClaimId(), 118278029 == appealDTOList.get(0).getClaimId());

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithNoReviewMessage ####### appeal status submitted action by "
							+ appealDTOList.get(0).getActionBy(),
					"Phantom A Philips".equalsIgnoreCase(appealDTOList.get(0).getActionBy()));

			assertTrue("####### testGetAppealHistoryOfClaimWithNoReviewMessage ####### appeal status is submitted ",
					AppealStatus.APPEAL_SUBMITTED.getAppealStatus().equalsIgnoreCase(appealDTOList.get(0).getStatus()));

			assertTrue("####### testGetAppealHistoryOfClaimWithNoReviewMessage ####### Appeal Claim Data Size ",
					appealDTOList.size() == 1);

		} catch (Exception e) {
			fail("####### testGetAppealHistoryOfClaimWithNoReviewMessage ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unused")
	@Test
	public void testGetAppealHistoryOfClaimWithSQLException() {
		try {
			UserDetailsBn userDtlBn = new UserDetailsBn();
			userDtlBn.setId(10574588L);
			userDtlBn.setEeID(5962525);
			userDtlBn.setUserType("EE");
			userDtlBn.setName("Thomas B Cook");
			userDtlBn.setErID(1001274L);
			userDtlBn.setAdmnID(1L);
			userDtlBn.setErID(1L);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doThrow(new SQLException()).when(mockOnlineClaimDAO)
					.getAppealDetails(Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong());

			List<AppealDTO> appealDTOList = mockClaimBO.getAppealHistoryOfClaim(userDtlBn, 118250955);

			fail("####### testGetAppealHistoryOfClaimWithSQLException ####### failed with no SQl Exception Error: ");
		} catch (SystemException se1) {
			assertTrue("####### testGetAppealHistoryOfClaimWithSQLException ####### System Exception Thrown ", true);
		} catch (Exception e) {
			fail("####### testGetAppealHistoryOfClaimWithSQLException ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadReceiptsForSubmittedClaimNoImage() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			mockClaimBO.uploadReceiptsForSubmittedClaim(null, userDetailsBn, 0, 0, 0, "Online");
			fail("testUploadReceiptsForClaimNoImage fail");
		} catch (BusinessLogicException be) {
			assertTrue("testUploadReceiptsForSubmittedClaimNoImage success",
					be.getErrorBn().getMessage().equals("Please attach document(s)."));
		} catch (Exception e) {
			fail("testUploadReceiptsForSubmittedClaimNoImage failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testUploadReceiptsForSubmittedClaimWorkGroupNotPresent() {
		try {
			String fileStream = "JVBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9MZW5ndGggNTY0L0ZpbHRlci9GbGF0ZURlY29kZT4+c3RyZWFtCniclZRPb9pAEMXv/hRzyKGVGtgdr/9xI0BTtWqUgNVKvbnGpFuBTYxNxbfvrrOi8TJLQSBhed5v/Gae2RfvLvX8EGIWQrr0GNwmQl/MUu/Je/HYIGA8CcH+rZ+9OBoEECUIAhlwAXXhrf6vj+Lr9KG4Th+w6/Rq9DC4RM4DNProovaIeFV/PPpJLurvR9f5F4LwoyNG+Kxiv9cs/FFX+jO/p+JduHW9WM/oenGe0fViPKN7Ow4pI2IjdURctO40JlJHxEPqiFje6l6fhqKroql2FTOYKunBeiUzC0XhsWFiU8YxRRmTVOm1n7rnMqhuugxSFB4bugxSlDHYLz3po413i+YQJ93rrM62jTf8yIEzSFfeu8esbmQut1nZwEO2KWAEi3T2bfYAP2A2/T6eTxfv09/6NDzpFTOrV1pn5S7LG1mV8Enumqo+uNgwtNh5W06zRj+e+bcobnkELB6xZCRCV48ArR7jPK9aNUd62OpG08l87GL9+IRt5F42B9AuTikeCBLrPFcrWBT1XuYEiEiDEwU+kwtCh8PHutrLZVEP79qdLIvd7hT1IxpdNFnTEnoRMXoZG71H1+7QZIcQd2qOQ/SHyHjg3BuFBA7EbMxGJr/kegmTrKaWTBv7Ktfroixlu4Evcunel81Ni1IWS2Jd5uyw5DdiwJhrWVz0xYwP1ffs5DYyqcqmlj9b/b9yzm5Ds812XR0KYllmaBtQr1euXipy7siniBv+gTH2b/a/mHb5QQplbmRzdHJlYW0KZW5kb2JqCjUgMCBvYmoKPDwvUGFyZW50IDQgMCBSL0NvbnRlbnRzIDMgMCBSL1R5cGUvUGFnZS9SZXNvdXJjZXM8PC9Gb250PDwvRjEgMSAwIFIvRjIgMiAwIFI+Pj4+L01lZGlhQm94WzAgMCA1OTUgODQyXT4+CmVuZG9iagoxIDAgb2JqCjw8L0Jhc2VGb250L1RpbWVzLUJvbGQvVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjIgMCBvYmoKPDwvQmFzZUZvbnQvVGltZXMtUm9tYW4vVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjQgMCBvYmoKPDwvVHlwZS9QYWdlcy9Db3VudCAxL0tpZHNbNSAwIFJdPj4KZW5kb2JqCjYgMCBvYmoKPDwvVHlwZS9DYXRhbG9nL1BhZ2VzIDQgMCBSPj4KZW5kb2JqCjcgMCBvYmoKPDwvUHJvZHVjZXIoaVRleHSuIDUuNS42IKkyMDAwLTIwMTUgaVRleHQgR3JvdXAgTlYgXChBY2NsYXJpcywgSW5jLiA7IGxpY2Vuc2VkIHZlcnNpb25cKSkvTW9kRGF0ZShEOjIwMTcwMzI0MDgwOTQ2LTA0JzAwJykvQ3JlYXRpb25EYXRlKEQ6MjAxNzAzMjQwODA5NDYtMDQnMDAnKT4+CmVuZG9iagp4cmVmCjAgOAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDA3NjcgMDAwMDAgbiAKMDAwMDAwMDg1NiAwMDAwMCBuIAowMDAwMDAwMDE1IDAwMDAwIG4gCjAwMDAwMDA5NDYgMDAwMDAgbiAKMDAwMDAwMDY0NiAwMDAwMCBuIAowMDAwMDAwOTk3IDAwMDAwIG4gCjAwMDAwMDEwNDIgMDAwMDAgbiAKdHJhaWxlcgo8PC9Sb290IDYgMCBSL0lEIFs8ODE0MGZkZGQ3NjZjOWUxZGRlMGU5OTE5YTE0YjI0MGQ+PDgxNDBmZGRkNzY2YzllMWRkZTBlOTkxOWExNGIyNDBkPl0vSW5mbyA3IDAgUi9TaXplIDg+PgolNDdiNmYtZWFhYWYtOWY3OTktYmIwMWQtNS41LjYKc3RhcnR4cmVmCjEyMjAKJSVFT0YK==";
			List<ImageDTO> imageDTOs = new ArrayList<>();
			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImageName("testImage.jpg");
			imageDTO.setImageStream(fileStream.getBytes());
			imageDTOs.add(imageDTO);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			UserDetailsBn userDetailsBn = getUserDetailBn();
			// ImageUploadInputDto imageUploadInputDto =
			// getImageUploadInputDto();
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					(Mockito.any(ImageUploadInputDto.class)));
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("");
			mockClaimBO.uploadReceiptsForSubmittedClaim(imageDTOs, userDetailsBn, 947493652, 185733, 342456, "Online");
			fail("testUploadReceiptsForClaimWorkGroupNotPresent");
		} catch (BusinessLogicException be) {
			assertTrue("testUploadReceiptsForSubmittedClaimWorkGroupNotPresent success",
					be.getErrorBn().getMessage().equals("Default work group not found."));
		} catch (Exception e) {
			fail("testUploadReceiptsForSubmittedClaimWorkGroupNotPresent failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentSuccessClaimImagePresent() {
		try {

			String fileStream = "JVBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9MZW5ndGggNTY0L0ZpbHRlci9GbGF0ZURlY29kZT4+c3RyZWFtCniclZRPb9pAEMXv/hRzyKGVGtgdr/9xI0BTtWqUgNVKvbnGpFuBTYxNxbfvrrOi8TJLQSBhed5v/Gae2RfvLvX8EGIWQrr0GNwmQl/MUu/Je/HYIGA8CcH+rZ+9OBoEECUIAhlwAXXhrf6vj+Lr9KG4Th+w6/Rq9DC4RM4DNProovaIeFV/PPpJLurvR9f5F4LwoyNG+Kxiv9cs/FFX+jO/p+JduHW9WM/oenGe0fViPKN7Ow4pI2IjdURctO40JlJHxEPqiFje6l6fhqKroql2FTOYKunBeiUzC0XhsWFiU8YxRRmTVOm1n7rnMqhuugxSFB4bugxSlDHYLz3po413i+YQJ93rrM62jTf8yIEzSFfeu8esbmQut1nZwEO2KWAEi3T2bfYAP2A2/T6eTxfv09/6NDzpFTOrV1pn5S7LG1mV8Enumqo+uNgwtNh5W06zRj+e+bcobnkELB6xZCRCV48ArR7jPK9aNUd62OpG08l87GL9+IRt5F42B9AuTikeCBLrPFcrWBT1XuYEiEiDEwU+kwtCh8PHutrLZVEP79qdLIvd7hT1IxpdNFnTEnoRMXoZG71H1+7QZIcQd2qOQ/SHyHjg3BuFBA7EbMxGJr/kegmTrKaWTBv7Ktfroixlu4Evcunel81Ni1IWS2Jd5uyw5DdiwJhrWVz0xYwP1ffs5DYyqcqmlj9b/b9yzm5Ds812XR0KYllmaBtQr1euXipy7siniBv+gTH2b/a/mHb5QQplbmRzdHJlYW0KZW5kb2JqCjUgMCBvYmoKPDwvUGFyZW50IDQgMCBSL0NvbnRlbnRzIDMgMCBSL1R5cGUvUGFnZS9SZXNvdXJjZXM8PC9Gb250PDwvRjEgMSAwIFIvRjIgMiAwIFI+Pj4+L01lZGlhQm94WzAgMCA1OTUgODQyXT4+CmVuZG9iagoxIDAgb2JqCjw8L0Jhc2VGb250L1RpbWVzLUJvbGQvVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjIgMCBvYmoKPDwvQmFzZUZvbnQvVGltZXMtUm9tYW4vVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjQgMCBvYmoKPDwvVHlwZS9QYWdlcy9Db3VudCAxL0tpZHNbNSAwIFJdPj4KZW5kb2JqCjYgMCBvYmoKPDwvVHlwZS9DYXRhbG9nL1BhZ2VzIDQgMCBSPj4KZW5kb2JqCjcgMCBvYmoKPDwvUHJvZHVjZXIoaVRleHSuIDUuNS42IKkyMDAwLTIwMTUgaVRleHQgR3JvdXAgTlYgXChBY2NsYXJpcywgSW5jLiA7IGxpY2Vuc2VkIHZlcnNpb25cKSkvTW9kRGF0ZShEOjIwMTcwMzI0MDgwOTQ2LTA0JzAwJykvQ3JlYXRpb25EYXRlKEQ6MjAxNzAzMjQwODA5NDYtMDQnMDAnKT4+CmVuZG9iagp4cmVmCjAgOAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDA3NjcgMDAwMDAgbiAKMDAwMDAwMDg1NiAwMDAwMCBuIAowMDAwMDAwMDE1IDAwMDAwIG4gCjAwMDAwMDA5NDYgMDAwMDAgbiAKMDAwMDAwMDY0NiAwMDAwMCBuIAowMDAwMDAwOTk3IDAwMDAwIG4gCjAwMDAwMDEwNDIgMDAwMDAgbiAKdHJhaWxlcgo8PC9Sb290IDYgMCBSL0lEIFs8ODE0MGZkZGQ3NjZjOWUxZGRlMGU5OTE5YTE0YjI0MGQ+PDgxNDBmZGRkNzY2YzllMWRkZTBlOTkxOWExNGIyNDBkPl0vSW5mbyA3IDAgUi9TaXplIDg+PgolNDdiNmYtZWFhYWYtOWY3OTktYmIwMWQtNS41LjYKc3RhcnR4cmVmCjEyMjAKJSVFT0YK==";
			List<ImageDTO> imageDTOs = new ArrayList<>();
			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImageName("testImage.jpg");
			imageDTO.setImageStream(fileStream.getBytes());
			imageDTOs.add(imageDTO);
			ImageBn imageBn = getImageBn();
			Map<String, String> resultMapForNotification = new HashMap<>();
			resultMapForNotification.put("result", "OK");
			// imageBnList.add(imageBn);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(SendMailDAO.class);
			UserDetailsBn userDetailsBn = getUserDetailBn();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					(Mockito.any(ImageUploadInputDto.class)));
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("/u01/imageupload/imgupldtempdir/convertedFileName.jpg");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(ByteArrayInputStream.class),
					Mockito.anyString());
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName.jpg");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("/u01/imageupload/Thumbnail/imgupldtempdir");
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			when(mockOnlineClaimDAO.isEmailSentForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("N");
			when(mockOnlineClaimDAO.sendNotification(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn("OK");
			PowerMockito.doNothing().when(SendMailDAO.class, "setUserSession", Mockito.any(Connection.class),
					Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO)
					.updateNotificationStatusForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong());
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			Map<String, Long> resultMap = mockClaimBO.uploadReceiptsForSubmittedClaim(imageDTOs, userDetailsBn,
					947493652, 18573368, 342456, "Online");
			assertTrue("testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentSuccess ",
					resultMap.get("transactionId") == 947493652);
			assertTrue("testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentSuccess ",
					resultMap.get("claimImageId") == 18573368);
		} catch (Exception e) {
			fail("testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentSuccess failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadReceiptsForClaimTransactionIdClaimsImageIdNotPresentSuccess() {
		try {

			String fileStream = "JVBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9MZW5ndGggNTY0L0ZpbHRlci9GbGF0ZURlY29kZT4+c3RyZWFtCniclZRPb9pAEMXv/hRzyKGVGtgdr/9xI0BTtWqUgNVKvbnGpFuBTYxNxbfvrrOi8TJLQSBhed5v/Gae2RfvLvX8EGIWQrr0GNwmQl/MUu/Je/HYIGA8CcH+rZ+9OBoEECUIAhlwAXXhrf6vj+Lr9KG4Th+w6/Rq9DC4RM4DNProovaIeFV/PPpJLurvR9f5F4LwoyNG+Kxiv9cs/FFX+jO/p+JduHW9WM/oenGe0fViPKN7Ow4pI2IjdURctO40JlJHxEPqiFje6l6fhqKroql2FTOYKunBeiUzC0XhsWFiU8YxRRmTVOm1n7rnMqhuugxSFB4bugxSlDHYLz3po413i+YQJ93rrM62jTf8yIEzSFfeu8esbmQut1nZwEO2KWAEi3T2bfYAP2A2/T6eTxfv09/6NDzpFTOrV1pn5S7LG1mV8Enumqo+uNgwtNh5W06zRj+e+bcobnkELB6xZCRCV48ArR7jPK9aNUd62OpG08l87GL9+IRt5F42B9AuTikeCBLrPFcrWBT1XuYEiEiDEwU+kwtCh8PHutrLZVEP79qdLIvd7hT1IxpdNFnTEnoRMXoZG71H1+7QZIcQd2qOQ/SHyHjg3BuFBA7EbMxGJr/kegmTrKaWTBv7Ktfroixlu4Evcunel81Ni1IWS2Jd5uyw5DdiwJhrWVz0xYwP1ffs5DYyqcqmlj9b/b9yzm5Ds812XR0KYllmaBtQr1euXipy7siniBv+gTH2b/a/mHb5QQplbmRzdHJlYW0KZW5kb2JqCjUgMCBvYmoKPDwvUGFyZW50IDQgMCBSL0NvbnRlbnRzIDMgMCBSL1R5cGUvUGFnZS9SZXNvdXJjZXM8PC9Gb250PDwvRjEgMSAwIFIvRjIgMiAwIFI+Pj4+L01lZGlhQm94WzAgMCA1OTUgODQyXT4+CmVuZG9iagoxIDAgb2JqCjw8L0Jhc2VGb250L1RpbWVzLUJvbGQvVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjIgMCBvYmoKPDwvQmFzZUZvbnQvVGltZXMtUm9tYW4vVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjQgMCBvYmoKPDwvVHlwZS9QYWdlcy9Db3VudCAxL0tpZHNbNSAwIFJdPj4KZW5kb2JqCjYgMCBvYmoKPDwvVHlwZS9DYXRhbG9nL1BhZ2VzIDQgMCBSPj4KZW5kb2JqCjcgMCBvYmoKPDwvUHJvZHVjZXIoaVRleHSuIDUuNS42IKkyMDAwLTIwMTUgaVRleHQgR3JvdXAgTlYgXChBY2NsYXJpcywgSW5jLiA7IGxpY2Vuc2VkIHZlcnNpb25cKSkvTW9kRGF0ZShEOjIwMTcwMzI0MDgwOTQ2LTA0JzAwJykvQ3JlYXRpb25EYXRlKEQ6MjAxNzAzMjQwODA5NDYtMDQnMDAnKT4+CmVuZG9iagp4cmVmCjAgOAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDA3NjcgMDAwMDAgbiAKMDAwMDAwMDg1NiAwMDAwMCBuIAowMDAwMDAwMDE1IDAwMDAwIG4gCjAwMDAwMDA5NDYgMDAwMDAgbiAKMDAwMDAwMDY0NiAwMDAwMCBuIAowMDAwMDAwOTk3IDAwMDAwIG4gCjAwMDAwMDEwNDIgMDAwMDAgbiAKdHJhaWxlcgo8PC9Sb290IDYgMCBSL0lEIFs8ODE0MGZkZGQ3NjZjOWUxZGRlMGU5OTE5YTE0YjI0MGQ+PDgxNDBmZGRkNzY2YzllMWRkZTBlOTkxOWExNGIyNDBkPl0vSW5mbyA3IDAgUi9TaXplIDg+PgolNDdiNmYtZWFhYWYtOWY3OTktYmIwMWQtNS41LjYKc3RhcnR4cmVmCjEyMjAKJSVFT0YK==";
			List<ImageDTO> imageDTOs = new ArrayList<>();
			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImageName("testImage.jpg");
			imageDTO.setImageStream(fileStream.getBytes());
			imageDTOs.add(imageDTO);
			ImageBn imageBn = getImageBn();
			// imageBnList.add(imageBn);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			Map<String, String> resultMapForNotification = new HashMap<>();
			resultMapForNotification.put("result", "OK");
			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					(Mockito.any(ImageUploadInputDto.class)));
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("/u01/imageupload/imgupldtempdir/convertedFileName.jpg");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(ByteArrayInputStream.class),
					Mockito.anyString());
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName.jpg");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("/u01/imageupload/Thumbnail/imgupldtempdir");
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(75875849l);
			when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenReturn(75875849l);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).insertIntoClaimImage(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			when(mockOnlineClaimDAO.isEmailSentForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("N");
			when(mockOnlineClaimDAO.sendNotification(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn("OK");
			PowerMockito.doNothing().when(SendMailDAO.class, "setUserSession", Mockito.any(Connection.class),
					Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO)
					.updateNotificationStatusForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong());
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			Map<String, Long> resultMap = mockClaimBO.uploadReceiptsForSubmittedClaim(imageDTOs, userDetailsBn, 0, 0,
					342456, "Online");
			assertTrue("testUploadReceiptsForClaimTransactionIdClaimsImageIdNotPresentSuccess "
					+ resultMap.get("transactionId"), resultMap.get("transactionId") == 75875849l);
			assertTrue("testUploadReceiptsForClaimTransactionIdClaimsImageIdNotPresentSuccess ",
					resultMap.get("claimImageId") == 75875849l);
		} catch (Exception e) {
			fail("testUploadReceiptsForClaimTransactionIdClaimsImageIdNotPresentSuccess failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadReceiptsForClaimTransactionIdClaimsImageIdAlreadyPresentInDatabase() {
		try {

			String fileStream = "JVBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9MZW5ndGggNTY0L0ZpbHRlci9GbGF0ZURlY29kZT4+c3RyZWFtCniclZRPb9pAEMXv/hRzyKGVGtgdr/9xI0BTtWqUgNVKvbnGpFuBTYxNxbfvrrOi8TJLQSBhed5v/Gae2RfvLvX8EGIWQrr0GNwmQl/MUu/Je/HYIGA8CcH+rZ+9OBoEECUIAhlwAXXhrf6vj+Lr9KG4Th+w6/Rq9DC4RM4DNProovaIeFV/PPpJLurvR9f5F4LwoyNG+Kxiv9cs/FFX+jO/p+JduHW9WM/oenGe0fViPKN7Ow4pI2IjdURctO40JlJHxEPqiFje6l6fhqKroql2FTOYKunBeiUzC0XhsWFiU8YxRRmTVOm1n7rnMqhuugxSFB4bugxSlDHYLz3po413i+YQJ93rrM62jTf8yIEzSFfeu8esbmQut1nZwEO2KWAEi3T2bfYAP2A2/T6eTxfv09/6NDzpFTOrV1pn5S7LG1mV8Enumqo+uNgwtNh5W06zRj+e+bcobnkELB6xZCRCV48ArR7jPK9aNUd62OpG08l87GL9+IRt5F42B9AuTikeCBLrPFcrWBT1XuYEiEiDEwU+kwtCh8PHutrLZVEP79qdLIvd7hT1IxpdNFnTEnoRMXoZG71H1+7QZIcQd2qOQ/SHyHjg3BuFBA7EbMxGJr/kegmTrKaWTBv7Ktfroixlu4Evcunel81Ni1IWS2Jd5uyw5DdiwJhrWVz0xYwP1ffs5DYyqcqmlj9b/b9yzm5Ds812XR0KYllmaBtQr1euXipy7siniBv+gTH2b/a/mHb5QQplbmRzdHJlYW0KZW5kb2JqCjUgMCBvYmoKPDwvUGFyZW50IDQgMCBSL0NvbnRlbnRzIDMgMCBSL1R5cGUvUGFnZS9SZXNvdXJjZXM8PC9Gb250PDwvRjEgMSAwIFIvRjIgMiAwIFI+Pj4+L01lZGlhQm94WzAgMCA1OTUgODQyXT4+CmVuZG9iagoxIDAgb2JqCjw8L0Jhc2VGb250L1RpbWVzLUJvbGQvVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjIgMCBvYmoKPDwvQmFzZUZvbnQvVGltZXMtUm9tYW4vVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjQgMCBvYmoKPDwvVHlwZS9QYWdlcy9Db3VudCAxL0tpZHNbNSAwIFJdPj4KZW5kb2JqCjYgMCBvYmoKPDwvVHlwZS9DYXRhbG9nL1BhZ2VzIDQgMCBSPj4KZW5kb2JqCjcgMCBvYmoKPDwvUHJvZHVjZXIoaVRleHSuIDUuNS42IKkyMDAwLTIwMTUgaVRleHQgR3JvdXAgTlYgXChBY2NsYXJpcywgSW5jLiA7IGxpY2Vuc2VkIHZlcnNpb25cKSkvTW9kRGF0ZShEOjIwMTcwMzI0MDgwOTQ2LTA0JzAwJykvQ3JlYXRpb25EYXRlKEQ6MjAxNzAzMjQwODA5NDYtMDQnMDAnKT4+CmVuZG9iagp4cmVmCjAgOAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDA3NjcgMDAwMDAgbiAKMDAwMDAwMDg1NiAwMDAwMCBuIAowMDAwMDAwMDE1IDAwMDAwIG4gCjAwMDAwMDA5NDYgMDAwMDAgbiAKMDAwMDAwMDY0NiAwMDAwMCBuIAowMDAwMDAwOTk3IDAwMDAwIG4gCjAwMDAwMDEwNDIgMDAwMDAgbiAKdHJhaWxlcgo8PC9Sb290IDYgMCBSL0lEIFs8ODE0MGZkZGQ3NjZjOWUxZGRlMGU5OTE5YTE0YjI0MGQ+PDgxNDBmZGRkNzY2YzllMWRkZTBlOTkxOWExNGIyNDBkPl0vSW5mbyA3IDAgUi9TaXplIDg+PgolNDdiNmYtZWFhYWYtOWY3OTktYmIwMWQtNS41LjYKc3RhcnR4cmVmCjEyMjAKJSVFT0YK==";
			List<ImageDTO> imageDTOs = new ArrayList<>();
			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImageName("testImage.jpg");
			imageDTO.setImageStream(fileStream.getBytes());
			imageDTOs.add(imageDTO);
			ImageBn imageBn = getImageBn();
			// imageBnList.add(imageBn);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			Map<String, String> resultMapForNotification = new HashMap<>();
			resultMapForNotification.put("result", "OK");
			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					(Mockito.any(ImageUploadInputDto.class)));
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("/u01/imageupload/imgupldtempdir/convertedFileName.jpg");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(ByteArrayInputStream.class),
					Mockito.anyString());
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName.jpg");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("/u01/imageupload/Thumbnail/imgupldtempdir");
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(75875849l);
			// when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenReturn(75875849l);
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(75875849l);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimsImageWithoutThumbnailPath(Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(),
					Mockito.any(Connection.class));
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			when(mockOnlineClaimDAO.isEmailSentForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("N");
			when(mockOnlineClaimDAO.sendNotification(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn("OK");
			PowerMockito.doNothing().when(SendMailDAO.class, "setUserSession", Mockito.any(Connection.class),
					Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO)
					.updateNotificationStatusForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong());
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			Map<String, Long> resultMap = mockClaimBO.uploadReceiptsForSubmittedClaim(imageDTOs, userDetailsBn, 0, 0,
					342456, "Online");
			assertTrue("testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentInDataBase "
					+ resultMap.get("transactionId"), resultMap.get("transactionId") == 75875849l);
			assertTrue("testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentInDataBase ",
					resultMap.get("claimImageId") == 75875849l);
		} catch (Exception e) {
			fail("testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentInDataBase failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetIneligibleDebitCardExpenseDetailSuccess() {
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		try {
			DebitCardExpenseDetail debitCardExpenseDetail = new DebitCardExpenseDetail();
			debitCardExpenseDetail.setAmount("3.00");
			debitCardExpenseDetail.setDebitCardStatus("Suspended");
			debitCardExpenseDetail.setStatus("Invalid Receipt");
			debitCardExpenseDetail.setServiceDate("04/21/2017");
			debitCardExpenseDetail.setProvider("MCLM (8031)");

			UserDetailsBn userDetailsBn = getUserDetailBn();

			List<DebitCardExpenseDetail> debitCardExpenseDetailList = new ArrayList<>();
			debitCardExpenseDetailList.add(debitCardExpenseDetail);

			when(mockOnlineClaimDAO.getIneligibleDebitCardExpenseDetail(Mockito.any(Connection.class),
					Mockito.anyLong())).thenReturn(debitCardExpenseDetailList);

			List<DebitCardExpenseDetail> resultList = mockClaimBO.getIneligibleDebitCardExpenseDetail(userDetailsBn);

			assertTrue("testGetIneligibleDebitCardExpenseDetailSuccess success", resultList.size() > 0);

		} catch (Exception e) {
			fail("testGetIneligibleDebitCardExpenseDetailSuccess failed with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGetIneligibleDebitCardExpenseDetailThrowSqlException() {
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			when(mockOnlineClaimDAO.getIneligibleDebitCardExpenseDetail(Mockito.any(Connection.class),
					Mockito.anyLong())).thenThrow(new SQLException());
			List<DebitCardExpenseDetail> debitCardExpenseDetailList = mockClaimBO
					.getIneligibleDebitCardExpenseDetail(userDetailsBn);
			fail("testGetIneligibleDebitCardExpenseDetailThrowSqlException failed");
		} catch (SystemException systemException) {
			assertTrue("testGetIneligibleDebitCardExpenseDetailThrowSqlException for sql exception catch ", true);
		} catch (Exception e) {
			fail("testGetIneligibleDebitCardExpenseDetailThrowSqlException failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetPrintClaimFormDetails() {
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		try {

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			String expectedBarCodeValue = "2000000048900059625266";
			PowerMockito.mockStatic(ConfigUtil.class);
			PowerMockito.mockStatic(SupportUtilityDAO.class);
			PowerMockito.mockStatic(UserDAO.class);

			PowerMockito.when(
					ConfigUtil.getBarcodeValue(Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyString()))
					.thenReturn(expectedBarCodeValue);

			Barcode barcode = PowerMockito.mock(Barcode.class);
			when(BarcodeFactory.createCode128C(Mockito.anyString())).thenReturn(barcode);
			PowerMockito.doNothing().when(BarcodeImageHandler.class);
			BarcodeImageHandler.writePNG(Mockito.any(Barcode.class), Mockito.any(ByteArrayOutputStream.class));

			Map<String, String> mailDtls = new HashMap<>();
			mailDtls.put("ADDR_LINE1", "6 Adhar");
			mailDtls.put("ADDR_LINE2", "Das");
			mailDtls.put("ADDR_LINE3", "Lane");
			mailDtls.put("ADDR_CITY", "Tampa");
			mailDtls.put("ADDR_STATE", "DC");
			mailDtls.put("ADDR_ZIP", "90350");
			mailDtls.put("ADDR_COUNTRY", "USA");
			mailDtls.put("FAX_AREA", "1234");
			mailDtls.put("FAX_REST", "1234");
			mailDtls.put("PHONE_AREA", "");
			mailDtls.put("PHONE_REST", "");

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailDtls);

			PhoneDTO phoneDTO = new PhoneDTO();
			phoneDTO.setPhoneArea("868");
			phoneDTO.setPhoneExtn("61820");
			phoneDTO.setPhoneRest("6988979");
			phoneDTO.setPhoneType("Mobile");

			PowerMockito.when(UserDAO.getEmployeePrimaryPhoneDetails(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(phoneDTO);

			List<DependentInfoBn> dependentDtls = new ArrayList<>();

			DependentInfoBn dependentInfo1 = new DependentInfoBn();
			dependentInfo1.setDependentID(1010650);
			dependentInfo1.setFullName("LISA X COLLINS");
			dependentInfo1.setDateOfBirth("09/19/1992");
			dependentInfo1.setRelationship("Dependent");
			dependentDtls.add(dependentInfo1);

			DependentInfoBn dependentInfo2 = new DependentInfoBn();
			dependentInfo2.setDependentID(1010651);
			dependentInfo2.setFullName("LISA X COLLINS");
			dependentInfo2.setDateOfBirth("09/19/1992");
			dependentInfo2.setRelationship("Dependent");
			dependentDtls.add(dependentInfo2);

			DependentInfoBn dependentInfo3 = new DependentInfoBn();
			dependentInfo3.setDependentID(1010650);
			dependentInfo3.setFullName("LISA X COLLINS");
			dependentInfo3.setDateOfBirth("09/19/1992");
			dependentInfo3.setRelationship("Dependent");
			dependentDtls.add(dependentInfo3);

			when(supportUtilityDAO.getDependentsInfo(Mockito.any(Connection.class), Mockito.any()))
					.thenReturn(dependentDtls);

			UserDetailsBn userDetails = getCommonUserDetails();
			String dependentIds = "12345";

			ClaimFormDTO claimFormDtls = mockClaimBO.getPrintClaimFormDetails(dependentIds, userDetails);

			assertTrue("testGetPrintClaimFormDetails ", claimFormDtls != null);
		} catch (Exception e) {
			fail("testGetPrintClaimFormDetails: failed with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGetPrintClaimFormDetailsForNoDependents() {
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		try {

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			String expectedBarCodeValue = "2000000048900059625266";
			PowerMockito.mockStatic(ConfigUtil.class);
			PowerMockito.mockStatic(SupportUtilityDAO.class);
			PowerMockito.mockStatic(UserDAO.class);

			PowerMockito.when(
					ConfigUtil.getBarcodeValue(Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyString()))
					.thenReturn(expectedBarCodeValue);

			Barcode barcode = PowerMockito.mock(Barcode.class);
			when(BarcodeFactory.createCode128C(Mockito.anyString())).thenReturn(barcode);
			PowerMockito.doNothing().when(BarcodeImageHandler.class);
			BarcodeImageHandler.writePNG(Mockito.any(Barcode.class), Mockito.any(ByteArrayOutputStream.class));

			Map<String, String> mailDtls = new HashMap<>();
			mailDtls.put("ADDR_LINE1", "6 Adhar");
			mailDtls.put("ADDR_LINE2", "Das");
			mailDtls.put("ADDR_LINE3", "Lane");
			mailDtls.put("ADDR_CITY", "Tampa");
			mailDtls.put("ADDR_STATE", "DC");
			mailDtls.put("ADDR_ZIP", "90350");
			mailDtls.put("ADDR_COUNTRY", "USA");
			mailDtls.put("FAX_AREA", "1234");
			mailDtls.put("FAX_REST", "1234");
			mailDtls.put("PHONE_AREA", "");
			mailDtls.put("PHONE_REST", "");

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailDtls);

			PhoneDTO phoneDTO = new PhoneDTO();
			phoneDTO.setPhoneArea("868");
			phoneDTO.setPhoneExtn("61820");
			phoneDTO.setPhoneRest("6988979");
			phoneDTO.setPhoneType("Mobile");

			PowerMockito.when(UserDAO.getEmployeePrimaryPhoneDetails(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(phoneDTO);

			UserDetailsBn userDetails = getCommonUserDetails();
			String dependentIds = null;

			ClaimFormDTO claimFormDtls = mockClaimBO.getPrintClaimFormDetails(dependentIds, userDetails);

			assertTrue("testGetPrintClaimFormDetails ", claimFormDtls != null);
		} catch (Exception e) {
			fail("testGetPrintClaimFormDetails: failed with following error " + getStackTrace(e));
		}
	}

	@Test(expected = SystemException.class)
	public void testGetPrintClaimFormDetailsForSystemException() throws SystemException, SQLException {
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(SupportUtilityDAO.class);

		PowerMockito
				.when(ConfigUtil.getBarcodeValue(Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyString()))
				.thenThrow(SQLException.class);

		UserDetailsBn userDetails = getCommonUserDetails();
		String dependentIds = "1010650,1010651,1010652";

		ClaimFormDTO claimFormDtls = mockClaimBO.getPrintClaimFormDetails(dependentIds, userDetails);

		assertTrue("testGetPrintClaimFormDetails ", claimFormDtls != null);
	}

	@Test
	public void testReceiptCoverSheetTransactionBreakdownDetailsWithNoData() {
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);

		Map<String, String> mailCheck = new HashMap<>();
		mailCheck.put("ADDR_LINE1", "");
		mailCheck.put("ADDR_LINE2", "");
		mailCheck.put("ADDR_LINE3", "");
		mailCheck.put("ADDR_CITY", "");
		mailCheck.put("ADDR_STATE", "");
		mailCheck.put("ADDR_ZIP", "");
		mailCheck.put("ADDR_COUNTRY", "");
		mailCheck.put("FAX_AREA", "1234");
		mailCheck.put("FAX_REST", "1234");
		mailCheck.put("PHONE_AREA", "1234");
		mailCheck.put("PHONE_REST", "1234");

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = null;
			List<TransactionBreakdownDTO> transactionDetails = null;

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown("119984945",
					AccountActivitySource.CLAIMS.getSource(), getUserDetailBn(), "No"))
					.thenReturn(transactionBreakdownDetails);

			TransactionBreakdownDTO mockTransactionBreakdownDTO = Mockito.mock(TransactionBreakdownDTO.class);
			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailCheck);

			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.assertEquals(".pdf", fileDTO.getFileFormat());

		} catch (Exception e) {
			fail("testReceiptCoverSheetTransactionBreakdownDetailsWithNoData failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testReceiptCoverSheetTransactionDetailsWithNoData() {
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);

		Map<String, String> mailCheck = new HashMap<>();
		mailCheck.put("ADDR_LINE1", "");
		mailCheck.put("ADDR_LINE2", "");
		mailCheck.put("ADDR_LINE3", "");
		mailCheck.put("ADDR_CITY", "");
		mailCheck.put("ADDR_STATE", "");
		mailCheck.put("ADDR_ZIP", "");
		mailCheck.put("ADDR_COUNTRY", "");
		mailCheck.put("FAX_AREA", "1234");
		mailCheck.put("FAX_REST", "1234");
		mailCheck.put("PHONE_AREA", "1234");
		mailCheck.put("PHONE_REST", "1234");

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("");
			transactionBreakdownDetails.setAmount("");
			transactionBreakdownDetails.setClaimBatchId(0);
			transactionBreakdownDetails.setStatus("");
			transactionBreakdownDetails.setCategory("");
			transactionBreakdownDetails.setServiceDate("");
			transactionBreakdownDetails.setTotalAmt("");

			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			transactionDetails.get(0).setStatusLabel(ClaimStatus.RELEASED.getStatus());

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			TransactionBreakdownDTO mockTransactionBreakdownDTO = Mockito.mock(TransactionBreakdownDTO.class);
			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailCheck);

			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.assertEquals(".pdf", fileDTO.getFileFormat());

		} catch (Exception e) {
			fail("testReceiptCoverSheetTransactionDetailsWithNoData failed with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testReceiptCoverSheetTransactionBreakdownDetailsWithNullFields() {
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);

		Map<String, String> mailCheck = new HashMap<>();

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("");
			transactionBreakdownDetails.setAmount("");
			transactionBreakdownDetails.setTotalAmt("");
			transactionBreakdownDetails.setClaimBatchId(0);
			transactionBreakdownDetails.setStatus("");
			transactionBreakdownDetails.setCategory("");
			transactionBreakdownDetails.setServiceDate("");

			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);

			transactionBreakdownDetails.setTransactionList(null);

			transactionDetails.get(0).setStatusLabel(ClaimStatus.RECEIPT_REQUIRED.getStatus());

			transactionBreakdownDetails.setTransactionList(null);

			TransactionBreakdownDTO mockTransactionBreakdownDTO = Mockito.mock(TransactionBreakdownDTO.class);
			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailCheck);

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.assertEquals(".pdf", fileDTO.getFileFormat());

		} catch (Exception e) {
			fail("testReceiptCoverSheetTransactionBreakdownDetailsWithNullFields failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testReceiptCoverSheetWithClaimStatusReceiptRequired() {
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);

		Map<String, String> mailCheck = new HashMap<>();
		mailCheck.put("ADDR_LINE1", "");
		mailCheck.put("ADDR_LINE2", "");
		mailCheck.put("ADDR_LINE3", "");
		mailCheck.put("ADDR_CITY", "");
		mailCheck.put("ADDR_STATE", "");
		mailCheck.put("ADDR_ZIP", "");
		mailCheck.put("ADDR_COUNTRY", "");
		mailCheck.put("FAX_AREA", "1234");
		mailCheck.put("FAX_REST", "1234");
		mailCheck.put("PHONE_AREA", "1234");
		mailCheck.put("PHONE_REST", "1234");

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("HCRA");
			transactionBreakdownDetails.setAmount("");
			transactionBreakdownDetails.setClaimBatchId(78118508);
			transactionBreakdownDetails.setStatus(ClaimStatus.RECEIPT_REQUIRED.getStatus());
			transactionBreakdownDetails.setCategory("Debit Card");
			transactionBreakdownDetails.setServiceDate("");
			transactionBreakdownDetails.setTotalAmt("238.79");

			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			transactionDetails.get(0).setStatusLabel(ClaimStatus.RECEIPT_REQUIRED.getStatus());

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			TransactionBreakdownDTO mockTransactionBreakdownDTO = Mockito.mock(TransactionBreakdownDTO.class);
			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailCheck);

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.assertEquals(".pdf", fileDTO.getFileFormat());

		} catch (Exception e) {
			fail("testReceiptCoverSheetWithClaimStatusReceiptRequired failed with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testReceiptCoverSheetWithClaimStatusInvalidReceipt() {
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);

		Map<String, String> mailCheck = new HashMap<>();
		mailCheck.put("ADDR_LINE1", "");
		mailCheck.put("ADDR_LINE2", "");
		mailCheck.put("ADDR_LINE3", "");
		mailCheck.put("ADDR_CITY", "");
		mailCheck.put("ADDR_STATE", "");
		mailCheck.put("ADDR_ZIP", "");
		mailCheck.put("ADDR_COUNTRY", "");
		mailCheck.put("FAX_AREA", "1234");
		mailCheck.put("FAX_REST", "1234");
		mailCheck.put("PHONE_AREA", "1234");
		mailCheck.put("PHONE_REST", "1234");

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("HSA");
			transactionBreakdownDetails.setAmount("238.79");
			transactionBreakdownDetails.setClaimBatchId(78118508);
			transactionBreakdownDetails.setStatus(ClaimStatus.INVALID_RECEIPT.getStatus());
			transactionBreakdownDetails.setCategory("Debit Card");
			transactionBreakdownDetails.setServiceDate("2018-03-16");

			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			transactionDetails.get(0).setStatusLabel(ClaimStatus.INVALID_RECEIPT.getStatus());

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			TransactionBreakdownDTO mockTransactionBreakdownDTO = Mockito.mock(TransactionBreakdownDTO.class);
			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailCheck);

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.assertEquals(".pdf", fileDTO.getFileFormat());

		} catch (Exception e) {
			fail("testReceiptCoverSheetWithClaimStatusReceiptRequired failed with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testReceiptCoverSheetWithClaimStatusNotApproved() {
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);

		Map<String, String> mailCheck = new HashMap<>();
		mailCheck.put("ADDR_LINE1", "");
		mailCheck.put("ADDR_LINE2", "");
		mailCheck.put("ADDR_LINE3", "");
		mailCheck.put("ADDR_CITY", "");
		mailCheck.put("ADDR_STATE", "");
		mailCheck.put("ADDR_ZIP", "");
		mailCheck.put("ADDR_COUNTRY", "");
		mailCheck.put("FAX_AREA", "1234");
		mailCheck.put("FAX_REST", "1234");
		mailCheck.put("PHONE_AREA", "1234");
		mailCheck.put("PHONE_REST", "1234");

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("DCRA");
			transactionBreakdownDetails.setAmount("238.79");
			transactionBreakdownDetails.setClaimBatchId(78118508);
			transactionBreakdownDetails.setStatus(ClaimStatus.NOT_APPROVED.getStatus());
			transactionBreakdownDetails.setCategory("Debit Card");
			transactionBreakdownDetails.setServiceDate("2018-03-16");

			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			transactionDetails.get(0).setStatusLabel(ClaimStatus.NOT_APPROVED.getStatus());

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			TransactionBreakdownDTO mockTransactionBreakdownDTO = Mockito.mock(TransactionBreakdownDTO.class);
			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailCheck);

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.assertEquals(".pdf", fileDTO.getFileFormat());
		} catch (Exception e) {
			fail("testReceiptCoverSheetWithClaimStatusNotApproved failed with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testReceiptCoverSheetThrowException() {
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);
		PowerMockito.mockStatic(UserDAO.class);
		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("DCRA");
			transactionBreakdownDetails.setAmount("238.79");
			transactionBreakdownDetails.setClaimBatchId(78118508);
			transactionBreakdownDetails.setStatus(ClaimStatus.NOT_APPROVED.getStatus());
			transactionBreakdownDetails.setCategory("Debit Card");
			transactionBreakdownDetails.setServiceDate("2018-03-16");

			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenThrow(new SQLException());

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);
			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.fail("testReceiptCoverSheetThrowException failed");

		} catch (SystemException e) {
			Assert.assertTrue("testReceiptCoverSheetThrowException success", true);
		} catch (Exception e) {
			Assert.fail("testReceiptCoverSheetThrowException faild with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGenerateReceiptCoverSheetWithBarcode() {

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			PowerMockito.mockStatic(ConfigUtil.class);
			PowerMockito.mockStatic(ConversionUtil.class);

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("DCRA");
			transactionBreakdownDetails.setAmount("238.79");
			transactionBreakdownDetails.setClaimBatchId(78118508);
			transactionBreakdownDetails.setStatus(ClaimStatus.NOT_APPROVED.getStatus());
			transactionBreakdownDetails.setCategory("Debit Card");
			transactionBreakdownDetails.setServiceDate("2018-03-16");
			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Map<String, String> mailCheck = new HashMap<>();
			mailCheck.put("ADDR_LINE1", "");
			mailCheck.put("ADDR_LINE2", "");
			mailCheck.put("ADDR_LINE3", "");
			mailCheck.put("ADDR_CITY", "");
			mailCheck.put("ADDR_STATE", "");
			mailCheck.put("ADDR_ZIP", "");
			mailCheck.put("ADDR_COUNTRY", "");
			mailCheck.put("FAX_AREA", "1234");
			mailCheck.put("FAX_REST", "1234");
			mailCheck.put("PHONE_AREA", "1234");
			mailCheck.put("PHONE_REST", "1234");
			Mockito.when(mockDatabase.getDBConnection()).thenReturn(conn);
			String filePath = new File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);
			Mockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);
			Mockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("logo.jpg");

			Mockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");
			Mockito.when(
					ConfigUtil.getBarcodeValue(Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyString()))
					.thenReturn("2000004311500095590253");
			Mockito.when(mockOnlineClaimDAO.insertImageCoverSheet(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.any(UserDetailsBn.class))).thenReturn("OK");
			Mockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(mailCheck);
			Mockito.when(ConversionUtil.getFormattedTelephoneOrFaxNo(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn("Fax-1234");
			Barcode barcode = Mockito.mock(Barcode.class);
			Mockito.when(BarcodeFactory.createCode128C(Mockito.anyString())).thenReturn(barcode);
			PowerMockito.doNothing().when(BarcodeImageHandler.class, "writePNG", Mockito.any(Barcode.class),
					Mockito.any(ByteArrayOutputStream.class));
			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);
			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);
			Mockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);
			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			assertTrue("testGenerateReceiptCoverSheetWithBarcode success ", fileDTO.getFileName().contains(".pdf"));
			assertTrue("testGenerateReceiptCoverSheetWithBarcode success ", fileDTO.getFileFormat().equals(".pdf"));
			assertTrue("testGenerateReceiptCoverSheetWithBarcode success ",
					fileDTO.getMimeType().equals("application/pdf"));
		} catch (Exception e) {
			fail("testGenerateReceiptCoverSheetWithBarcode failed with the following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimDetailsByClaimBatch() {

		try {

			long claimBatchId = 103305642L;

			when(mockDatabase.getDBConnection()).thenReturn(conn);

			UserDetailsBn usrDtlsBn = getCommonUserDetails();

			String claimIds = "231310765,190832302";

			List<ClaimBn> claimBns = new ArrayList<>();

			ClaimBn claimBn = new ClaimBn();
			claimBn.setClaimId("231310765");
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("07/31/2018");
			claimBn.setClaimAmount("19.86");
			claimBn.setProviderName("UNCHC MYCHART (8062), CHAPEL HILL,NC");
			claimBn.setDesc("CLAIMS_ACTIVITY");
			claimBn.setActpCD("HCRA");
			claimBn.setClaimStatus("Receipt Required");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			claimBn.setCategoryDTO(categoryDTO);

			claimBns.add(claimBn);

			ClaimBn claimBn1 = new ClaimBn();
			claimBn1.setClaimId("190832302");
			claimBn1.setPriorYearCheckStatus(false);
			claimBn1.setServiceBegins("02/19/2018");
			claimBn1.setClaimAmount("80");
			claimBn1.setProviderName("David J. Novak, DDS, PA (8021), High Point,NC");
			claimBn1.setDesc("CLAIMS_ACTIVITY");
			claimBn1.setActpCD("HCRA");
			claimBn1.setClaimStatus("Paid");
			CategoryDTO categoryDTO1 = new CategoryDTO();
			categoryDTO1.setCategory("Dental-Medical");
			claimBn1.setCategoryDTO(categoryDTO1);

			claimBns.add(claimBn1);

			when(mockOnlineClaimDAO.getClaimsInClaimBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(claimIds);

			when(mockOnlineClaimDAO.getClaimDetailsByIds(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong())).thenReturn(claimBns);

			List<ClaimBn> claimDetailsList = mockClaimBO.getClaimDetailsInClaimBatch(usrDtlsBn, claimBatchId);

			assertTrue("testGetClaimDetailsByClaimBatch -> Checking length of Claim Details List",
					2 == claimDetailsList.size());

			assertTrue("testGetClaimDetailsByClaimBatch -> Checking value of Claim Id in Claim Detail Claim Bean 1",
					"231310765".equalsIgnoreCase(claimDetailsList.get(0).getClaimId()));

			assertTrue("testGetClaimDetailsByClaimBatch -> Checking value of Claim Id in Claim Detail Claim Bean 2",
					"190832302".equalsIgnoreCase(claimDetailsList.get(1).getClaimId()));

			assertTrue(
					"testGetClaimDetailsByClaimBatch -> Checking value of service begins in Claim Detail Claim Bean 1",
					"07/31/2018".equalsIgnoreCase(claimDetailsList.get(0).getServiceBegins()));

			assertTrue(
					"testGetClaimDetailsByClaimBatch -> Checking value of service begins in Claim Detail Claim Bean 2",
					"02/19/2018".equalsIgnoreCase(claimDetailsList.get(1).getServiceBegins()));

			assertTrue("testGetClaimDetailsByClaimBatch -> Checking value of claim status in Claim Detail Claim Bean 1",
					"Receipt Required".equalsIgnoreCase(claimDetailsList.get(0).getClaimStatus()));

			assertTrue("testGetClaimDetailsByClaimBatch -> Checking value of claim status in Claim Detail Claim Bean 2",
					"Paid".equalsIgnoreCase(claimDetailsList.get(1).getClaimStatus()));

		} catch (Exception e) {
			fail("### testGetClaimDetailsByClaimBatch ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimDetailsByIds() {

		try {

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			String claimIds = "231310765,190832302";
			List<ClaimBn> claimBns = new ArrayList<>();
			ClaimBn claimBn = new ClaimBn();
			claimBn.setClaimId("231310765");
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("07/31/2018");
			claimBn.setClaimAmount("19.86");
			claimBn.setProviderName("UNCHC MYCHART (8062), CHAPEL HILL,NC");
			claimBn.setDesc("CLAIMS_ACTIVITY");
			claimBn.setActpCD("HCRA");
			claimBn.setClaimStatus("Receipt Required");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			claimBn.setCategoryDTO(categoryDTO);

			claimBns.add(claimBn);

			ClaimBn claimBn1 = new ClaimBn();
			claimBn1.setClaimId("190832302");
			claimBn1.setPriorYearCheckStatus(false);
			claimBn1.setServiceBegins("02/19/2018");
			claimBn1.setClaimAmount("80");
			claimBn1.setProviderName("David J. Novak, DDS, PA (8021), High Point,NC");
			claimBn1.setDesc("CLAIMS_ACTIVITY");
			claimBn1.setActpCD("HCRA");
			claimBn1.setClaimStatus("Paid");
			CategoryDTO categoryDTO1 = new CategoryDTO();
			categoryDTO1.setCategory("Dental-Medical");
			claimBn1.setCategoryDTO(categoryDTO1);

			claimBns.add(claimBn1);

			when(mockOnlineClaimDAO.getClaimDetailsByIds(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong())).thenReturn(claimBns);

			List<ClaimBn> claimDetailsList = mockClaimBO.getClaimDetailsByIds(usrDtlsBn, claimIds);

			assertTrue("testGetClaimDetailsByIds-> Checking length of Claim Details List",
					2 == claimDetailsList.size());

			assertTrue("testGetClaimDetailsByIds -> Checking value of Claim Id in Claim Detail Claim Bean 1",
					"231310765".equalsIgnoreCase(claimDetailsList.get(0).getClaimId()));

			assertTrue("testGetClaimDetailsByIds -> Checking value of Claim Id in Claim Detail Claim Bean 2",
					"190832302".equalsIgnoreCase(claimDetailsList.get(1).getClaimId()));

			assertTrue("testGetClaimDetailsByIds -> Checking value of service begins in Claim Detail Claim Bean 1",
					"07/31/2018".equalsIgnoreCase(claimDetailsList.get(0).getServiceBegins()));

			assertTrue("testGetClaimDetailsByIds -> Checking value of service begins in Claim Detail Claim Bean 2",
					"02/19/2018".equalsIgnoreCase(claimDetailsList.get(1).getServiceBegins()));

			assertTrue("testGetClaimDetailsByIds -> Checking value of claim status in Claim Detail Claim Bean 1",
					"Receipt Required".equalsIgnoreCase(claimDetailsList.get(0).getClaimStatus()));

			assertTrue("testGetClaimDetailsByIds -> Checking value of claim status in Claim Detail Claim Bean 2",
					"Paid".equalsIgnoreCase(claimDetailsList.get(1).getClaimStatus()));

		} catch (Exception e) {
			fail("### testGetClaimDetailsByIds ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimDetailsByIdisNull() {

		try {

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			String claimIds = "";
			List<ClaimBn> claimBns = new ArrayList<>();

			when(mockOnlineClaimDAO.getClaimDetailsByIds(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong())).thenReturn(claimBns);

			List<ClaimBn> claimDetailsList = mockClaimBO.getClaimDetailsByIds(usrDtlsBn, claimIds);
			assertTrue(claimDetailsList.size() == 0);

		} catch (Exception e) {
			fail("### testGetClaimDetailsByIdisNull ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimDetailsByClaimBatchThrowException() {
		try {

			long claimBatchId = 103305642L;
			UserDetailsBn usrDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimsInClaimBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenThrow(new SQLException());

			mockClaimBO.getClaimDetailsInClaimBatch(usrDtlsBn, claimBatchId);

			Assert.fail("testGetClaimDetailsByClaimBatchThrowException failed");

		} catch (SystemException e) {
			Assert.assertTrue("testGetClaimDetailsByClaimBatchThrowException success", true);
		} catch (Exception e) {
			Assert.fail(
					"testGetClaimDetailsByClaimBatchThrowException failed with following error " + getStackTrace(e));
		}

	}

	@Test
	public void testgetOverpaidClaimsTotalAmount() {
		try {
			double overPaidAmt = 0.0;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.getOverpaidClaimsTotalAmount(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(130.85);
			overPaidAmt = mockClaimBO.getOverpaidClaimsTotalAmount(usrDtlsBn);
			assertTrue(overPaidAmt > 0);
		} catch (Exception e) {
			Assert.fail("testgetOverpaidClaimsTotalAmount failed with following error " + getStackTrace(e));
		}

	}

	@Test
	public void testgetOverpaidClaimsTotalAmountSQLException() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.getOverpaidClaimsTotalAmount(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class))).thenThrow(new SQLException());
			mockClaimBO.getOverpaidClaimsTotalAmount(usrDtlsBn);
		} catch (SystemException e) {
			Assert.assertTrue("testgetOverpaidClaimsTotalAmountSQLException success", true);
		} catch (Exception e) {
			Assert.fail("testgetOverpaidClaimsTotalAmountSQLException failed with following error " + getStackTrace(e));
		}

	}

	@Test
	public void testValidateJraClaimDtlsForRecurringPremiumBundle() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			boolean isAcntBnPopulated = true;
			Map<String, String> validationMap = new HashMap<>();
			validationMap.put("msg", "OK");
			validationMap.put("errorCode", "0");
			validationMap.put("phraBalance", "100");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setClaimId("231310765");
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("05/01/2019");
			claimBn.setServiceEnds("12/31/2019");
			claimBn.setClaimAmount("1000");
			claimBn.setProviderName("TEST");
			claimBn.setDependentID("OESSUKBJL4WXWS2NLJQWQMBOHEZTCNJV");

			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("PREMIUM");
			categoryDTO.setSelectedOccurrence("Recurring Premium");
			categoryDTO.setWillAllowLimited("No");
			categoryDTO.setIsPriorYear("No");
			claimBn.setCategoryDTO(categoryDTO);
			claimBnWrapper.setClaimBn(claimBn);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			String accStr = "Retiree Bundle(PHRA,RHRA)=PHRA~22009837~~~|RHRA~22009840~~~";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);

			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);

			when(mockOnlineClaimDAO.getJraBundleName(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("Retiree Bundle");

			when(mockOnlineClaimDAO.verifyClaimdata(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.any(ClaimBn.class))).thenReturn(validationMap);

			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue("testValidateJraClaimDtlsForBundle -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);
		} catch (Exception e) {
			fail("### testValidateJraClaimDtlsForBundle ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test(expected = BusinessLogicException.class)
	public void testValidateJraClaimDtlsForRecurringPremiumBundleWithError() throws Exception {

		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		Map<String, String> validationMap = new HashMap<>();
		validationMap.put("msg", "ERROR");
		validationMap.put("errorCode", "0");
		validationMap.put("phraBalance", "100");

		ClaimBn claimBn = new ClaimBn();
		claimBn.setClaimId("231310765");
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("05/01/2019");
		claimBn.setServiceEnds("12/31/2019");
		claimBn.setClaimAmount("1000");
		claimBn.setProviderName("TEST");
		claimBn.setDependentID("OESSUKBJL4WXWS2NLJQWQMBOHEZTCNJV");

		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("PREMIUM");
		categoryDTO.setSelectedOccurrence("Recurring Premium");
		categoryDTO.setWillAllowLimited("No");
		categoryDTO.setIsPriorYear("No");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);

		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("No");

		String accStr = "Retiree Bundle(PHRA,RHRA)=PHRA~22009837~~~|RHRA~22009840~~~";
		AccountTypeBn acctypeDto = new AccountTypeBn();
		acctypeDto.setAccountTypes(accStr);
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);

		when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
				Mockito.anyString())).thenReturn(false, false);
		List<String> planYearList = new ArrayList<>();
		planYearList.add("2019");
		when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
				.thenReturn(planYearList);
		when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);

		when(mockOnlineClaimDAO.getJraBundleName(Mockito.any(Connection.class), Mockito.anyString()))
				.thenReturn("Retiree Bundle");

		when(mockOnlineClaimDAO.verifyClaimdata(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(ClaimBn.class))).thenReturn(validationMap);

		UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
		mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test
	public void testValidateJraClaimDtlsForOnetimePremiumBundle() throws BusinessLogicException, SystemException {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			boolean isAcntBnPopulated = true;
			Map<String, String> validationMap = new HashMap<>();
			validationMap.put("msg", "OK");
			validationMap.put("errorCode", "");
			validationMap.put("phraBalance", "100");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setClaimId("231310765");
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("05/01/2019");
			claimBn.setServiceEnds("12/31/2019");
			claimBn.setClaimAmount("1000");
			claimBn.setProviderName("TEST");
			claimBn.setDependentID("OESSUKBJL4WXWS2NLJQWQMBOHEZTCNJV");

			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("PREMIUM");
			categoryDTO.setSelectedOccurrence("One-Time Premium");
			categoryDTO.setWillAllowLimited("No");
			categoryDTO.setIsPriorYear("No");
			claimBn.setCategoryDTO(categoryDTO);
			claimBnWrapper.setClaimBn(claimBn);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			String accStr = "Retiree Bundle(PHRA,RHRA)=PHRA~22009837~~~|RHRA~22009840~~~";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);

			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);

			when(mockOnlineClaimDAO.getJraBundleName(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("None");

			when(mockOnlineClaimDAO.verifyClaimdata(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.any(ClaimBn.class))).thenReturn(validationMap);

			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue("testValidateJraClaimDtlsForBundle -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);
		} catch (SQLException e) {
			fail("### testValidateJraClaimDtlsForOnetimePremiumBundle ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateJraClaimDtlsForOnetimePremiumBundlewithError()
			throws BusinessLogicException, SystemException {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			Map<String, String> validationMap = new HashMap<>();
			validationMap.put("msg", "Claim Amount must be less than Available Balance");
			validationMap.put("errorCode", "45352");
			validationMap.put("phraBalance", "100");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setClaimId("231310765");
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("05/01/2019");
			claimBn.setServiceEnds("12/31/2019");
			claimBn.setClaimAmount("1000");
			claimBn.setProviderName("TEST");
			claimBn.setDependentID("OESSUKBJL4WXWS2NLJQWQMBOHEZTCNJV");

			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("PREMIUM");
			categoryDTO.setSelectedOccurrence("One-Time Premium");
			categoryDTO.setWillAllowLimited("No");
			categoryDTO.setIsPriorYear("No");
			claimBn.setCategoryDTO(categoryDTO);
			claimBnWrapper.setClaimBn(claimBn);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			String accStr = "Retiree Bundle(PHRA,RHRA)=PHRA~22009837~~~|RHRA~22009840~~~";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);

			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);

			when(mockOnlineClaimDAO.getJraBundleName(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("None");

			when(mockOnlineClaimDAO.verifyClaimdata(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.any(ClaimBn.class))).thenReturn(validationMap);

			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);
		} catch (SQLException e) {
			fail("### testValidateJraClaimDtlsForOnetimePremiumBundle ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateJraClaimDtlsBlankCatogory() throws BusinessLogicException, SystemException {

		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
		mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateJraClaimDtlsBlankClaimType() throws BusinessLogicException, SystemException {

		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("");
		claimBn.setClaimId("231310765");
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("05/01/2019");
		claimBn.setServiceEnds("12/31/2019");
		claimBn.setClaimAmount("1000");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
		mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);

	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateJraClaimDtlsBlankOccurenceType() throws BusinessLogicException, SystemException {

		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("Premium");
		claimBn.setClaimId("231310765");
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("05/01/2019");
		claimBn.setServiceEnds("12/31/2019");
		claimBn.setClaimAmount("1000");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
		mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);

	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateJraClaimDtlsBlankProviderName() throws BusinessLogicException, SystemException {

		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("Premium");
		categoryDTO.setSelectedOccurrence("One-Time Premium");
		claimBn.setClaimId("231310765");
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("05/01/2019");
		claimBn.setServiceEnds("12/31/2019");
		claimBn.setClaimAmount("1000");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
		mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);

	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateJraClaimDtlsLengthProviderName() throws BusinessLogicException, SystemException {

		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("Premium");
		categoryDTO.setSelectedOccurrence("One-Time Premium");
		claimBn.setClaimId("231310765");
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("05/01/2019");
		claimBn.setServiceEnds("12/31/2019");
		claimBn.setClaimAmount("1000");
		claimBn.setProviderName(
				"testrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrtyuiw");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
		mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);

	}

	@Test
	public void testRecoveryDetailsByCheckNo() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");
			recoveryDetailsDTO.setType("1234");

			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getClaimRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(listRecovery);
			List<String> param = new ArrayList<>();
			param.add("1");
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("", "CHECK", usrDtlsBn);

			assertEquals(recoveryList.get(0).getType(), "Check #1234");
		} catch (SQLException e) {
			fail("### testRecoveryDetailsByCheck No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testRecoveryDetailsEmployerCollection() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");
			recoveryDetailsDTO.setType("Plan Collection");

			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getClaimRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(listRecovery);
			List<String> param = new ArrayList<>();
			param.add("1");
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("", "PLANSPONSOR", usrDtlsBn);

			assertEquals(recoveryList.get(0).getType(), "Plan Collection");
		} catch (SQLException e) {
			fail("### testRecoveryDetailsEmployerCollection No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testRecoveryDetailsOffset() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");
			recoveryDetailsDTO.setType("OFFSET");
			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			usrDtlsBn.setJRAAccount(false);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getNonJraOffsetRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(listRecovery);
			List<String> param = new ArrayList<>();
			param.add("1");
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("1", "OFFSET", usrDtlsBn);

			assertEquals(recoveryList.get(0).getStatus(), "USED FOR OFFSET");
		} catch (SQLException e) {
			fail("### testRecoveryDetailsOffset No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testJraRecoveryDetailsOffset() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");
			recoveryDetailsDTO.setType("OFFSET");
			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getJraOffsetRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(listRecovery);
			List<String> param = new ArrayList<>();
			param.add("1");
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("1", "OFFSET", usrDtlsBn);

			assertEquals(recoveryList.get(0).getStatus(), "USED FOR OFFSET");
		} catch (SQLException e) {
			fail("### testJraRecoveryDetailsOffset No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testRecoveryDetailsRecoveryTypeNUll() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");

			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getNonJraOffsetRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(listRecovery);
			List<String> param = new ArrayList<>();
			param.add("1");
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("", "", usrDtlsBn);

			assertNull(recoveryList);
		} catch (SQLException e) {
			fail("### testRecoveryDetailsRecoveryTypeNUll No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testRecoveryDetailsWithoutCheckNo() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");
			recoveryDetailsDTO.setType("");

			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getClaimRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(listRecovery);
			List<String> param = new ArrayList<>();
			param.add("1");
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("", "CHECK", usrDtlsBn);

			assertEquals(recoveryList.get(0).getType(), "");
		} catch (SQLException e) {
			fail("### testRecoveryDetailsWithoutCheckNo No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testRecoveryDetailsSqlException() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");
			recoveryDetailsDTO.setRecoveryType("");

			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getClaimRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenThrow(new SQLException());
			List<String> param = new ArrayList<>();
			param.add("1");
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("", "CHECK", usrDtlsBn);

		} catch (SystemException e) {
			Assert.assertTrue("testRecoveryDetailsSqlException success", true);
		} catch (Exception e) {
			Assert.fail("testRecoveryDetailsSqlException faild with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGetAppealMessage() throws BusinessLogicException, SystemException {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getErisaAppealIndicator(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong())).thenReturn("NG");
			when(mockOnlineClaimDAO.getErisaAppealText(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("TEST APPEAL MESSAGE");

			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			Map<String, Object> result = mockClaimBO.getAppealMessage(usrDtlsBn, "HCRA");

			assertEquals(result.get("appealMessage"), "TEST APPEAL MESSAGE");
		} catch (SQLException e) {
			fail("### testGetAppealMessage No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetAppealMessageWithSqlException() throws BusinessLogicException, SystemException {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getErisaAppealIndicator(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong())).thenReturn("NG");
			when(mockOnlineClaimDAO.getErisaAppealText(Mockito.any(Connection.class), Mockito.anyString()))
					.thenThrow(new SQLException());

			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			Map<String, Object> result = mockClaimBO.getAppealMessage(usrDtlsBn, "HCRA");
		} catch (SystemException e) {
			Assert.assertTrue("testGetAppealMessageWithSqlException success", true);
		} catch (Exception e) {
			Assert.fail("testGetAppealMessageWithSqlException faild with following error " + getStackTrace(e));
		}
	}

	private UserDetailsBn getJRACommonUserDetails() {
		UserDetailsBn userDtlBn = new UserDetailsBn();
		userDtlBn.setId(10574588L);
		userDtlBn.setEeID(5962526);
		userDtlBn.setUserType("EE");
		userDtlBn.setName("HELEN E CARTER");
		userDtlBn.setErID(1001274L);
		userDtlBn.setAdmnID(1L);
		userDtlBn.setErID(1L);
		userDtlBn.setJRAAccount(true);
		return userDtlBn;
	}

	private ImageBn getImageBn() {
		ImageBn imageBn = new ImageBn();
		imageBn.setImageFormat("jpg");
		imageBn.setImageName("imageFileName.jpg");
		imageBn.setImageSize(100000L);
		imageBn.setNoOfPages(2l);
		imageBn.setImagePath("/u01/imageupload/imgupldtempdir");
		return imageBn;
	}

	public UserDetailsBn getUserDetailBn() {
		UserDetailsBn userDtlBn = new UserDetailsBn();
		userDtlBn.setId(10574588L);
		userDtlBn.setEeID(5962525);
		userDtlBn.setUserType("EE");
		userDtlBn.setName("Thomas B Cook");
		userDtlBn.setGroupName("AVIK TEST, INC.");
		userDtlBn.setErID(1001274L);
		userDtlBn.setAdmnID(1L);
		userDtlBn.setErID(1L);
		return userDtlBn;
	}

	private BalanceDTO getBalanceBn(double balance) {
		BalanceDTO balanceBn = new BalanceDTO();
		balanceBn.setBalance(balance);
		balanceBn.setRealTimeBalance(true);
		return balanceBn;
	}

	private ApprovedClaimDetailsBn getApprovedClaimDetails() {
		ApprovedClaimDetailsBn approvedClaimDetails = new ApprovedClaimDetailsBn();
		approvedClaimDetails.setClaimID(1);
		approvedClaimDetails.setAmount(84);
		approvedClaimDetails.setActpCD("HSA");
		approvedClaimDetails.setElctId(14078043);
		approvedClaimDetails.setPayeeId(12345);
		approvedClaimDetails.setTrxnId(123456);
		approvedClaimDetails.setClmCtgry("Medical");
		approvedClaimDetails.setClmTyp("Doctor");
		approvedClaimDetails.setBegins("07/01/2018");
		approvedClaimDetails.setEeId(5962526);
		approvedClaimDetails.setClaimBatchType("Online");
		approvedClaimDetails.setStatus("Approved");
		approvedClaimDetails.setAccount("1234567890");
		// approvedClaimDetails.setPayeeType("Self");
		approvedClaimDetails.setPayeeType("Other");
		return approvedClaimDetails;
	}

	private CardGenericInputDTO getCardGenericInputDTO() {
		CardGenericInputDTO cardInputBn = new CardGenericInputDTO();
		cardInputBn.setErID("1006405");
		cardInputBn.setEeID("5954590");
		cardInputBn.setElctId("123456");
		cardInputBn.setPartnerName("TSYS");
		return cardInputBn;
	}

	private List<LabelDTO> getLabels() {
		List<LabelDTO> labelList = new ArrayList<>();

		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.TITLE", "Document Request Cover Sheet"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.NOOFPAGE", "Number of pages"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.FAXHEADING", "Fax Instructions"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.FAXCONTENTONE",
				"Attach your supporting documentation to this cover sheet."));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.FAXCONTENTTWO", "Fax to"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.FAXCONTENTTHREE",
				"Please resubmit the entire fax if the initial transmission is not successful."));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.MAILHEADING", "Or mail to"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.MAILCONTENTONE",
				"Be certain to send copies of your supporting documentation along with this page."));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.MAILCONTENTTWO",
				"Please retain the originals for your records."));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.RECEIPTHEADING", "Itemized receipts must include"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.RECEIPTCONTENTONE",
				"The name of the person for whom the item or service was purchased"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.RECEIPTCONTENTTWO",
				"The date of purchase or the date the service was provided"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.RECEIPTCONTENTTHREE",
				"A description of the item purchased or service received"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.RECEIPTCONTENTFOUR",
				"The merchant, facility, or service provider's name'"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.RECEIPTCONTENTFIVE", "Amount"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.ACCOUNTHOLDERCONTENT", "Accountholder"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.PARTICIPANTIDCONTENT", "Participant ID"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.TOTALAMOUNTCONTENT", "Total Amount"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.TRANSACTIONIDCONTENT", "Transaction ID"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.ACCOUNTTYPECONTENT", "Account Type"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.SERVICEDATEFROMCONTENT", "Service Date From"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.CATEGORYCONTENT", "Category"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.TYPECONTENT", "Type"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.AMOUNTCONTENT", "Not Approved Amount"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.CLAIMIDCONTENT", "Not Approved Claim ID"));
		labelList.add(new LabelDTO("TRANSACTION.FAXORMAILRECEIPT.POPUP.HEADER", "Fax or Mail Receipt"));
		labelList.add(new LabelDTO("TRANSACTION.FAXORMAILRECEIPT.POPUP.MESSAGE",
				"If you plan to fax or mail your receipt, please add as much information as you can in order to help us associate the receipt with this transaction. It will be kept in a {{claimStatus}} status until a receipt is received."));
		labelList.add(new LabelDTO("TRANSACTION.FAXORMAILRECEIPT.POPUP.MAILTO", "Mail To"));
		labelList.add(new LabelDTO("TRANSACTION.FAXORMAILRECEIPT.POPUP.PRINTCOVERSHEETBUTTON", "PRINT COVERSHEET"));
		labelList.add(new LabelDTO("TRANSACTION.FAXORMAILRECEIPT.POPUP.CLOSEBUTTON", "CLOSE"));

		return labelList;
	}

	private TransactionDetailsDTO getMockAcctActivityCardDetails() {
		TransactionDetailsDTO acctActivityDTO = new TransactionDetailsDTO();
		acctActivityDTO.setCategory("Medical");
		acctActivityDTO.setStatus("Paid");
		acctActivityDTO.setServiceBeginDate("01/01/2019");
		acctActivityDTO.setServiceEndDate("02/31/2019");
		acctActivityDTO.setTransactionID("119993190");
		acctActivityDTO.setAmount("200.32232");
		acctActivityDTO.setProvider("ABC");
		acctActivityDTO.setMethod("Online");
		acctActivityDTO.setAppealStatus("");
		acctActivityDTO.setAppealReviewedBy("");

		ActivityBreakdownDTO activityBreakdownDTO = new ActivityBreakdownDTO();
		activityBreakdownDTO.setClaimId("120005294");
		activityBreakdownDTO.setSubmitClaimId("120005294");
		activityBreakdownDTO.setAccountType("PHRA");
		activityBreakdownDTO.setElctId("14480734");
		activityBreakdownDTO.setAmount("100");
		activityBreakdownDTO.setCategory("Medical");
		activityBreakdownDTO.setType("PREMIUM");
		activityBreakdownDTO.setStatus("Processing Payment");
		activityBreakdownDTO.setStatusInfo("");
		activityBreakdownDTO.setClmbtId("24788160");
		activityBreakdownDTO.setClmBtType("Pass Thru");
		activityBreakdownDTO.setServiceBeginDate("01/01/2019");
		activityBreakdownDTO.setServiceEndDate("01/31/2019");
		activityBreakdownDTO.setActivityDate("01/17/2019");
		activityBreakdownDTO.setProvider("TEST");
		activityBreakdownDTO.setExpectedPymtDate(null);

		ActivityBreakdownDTO activityBreakdownDTO1 = new ActivityBreakdownDTO();
		activityBreakdownDTO1.setClaimId("120005295");
		activityBreakdownDTO1.setSubmitClaimId("120005294");
		activityBreakdownDTO1.setAccountType("PHRA");
		activityBreakdownDTO1.setElctId("14480734");
		activityBreakdownDTO1.setAmount("100");
		activityBreakdownDTO1.setCategory("Medical");
		activityBreakdownDTO1.setType("PREMIUM");
		activityBreakdownDTO1.setStatus("Processing Scheduled");
		activityBreakdownDTO1.setStatusInfo("");
		activityBreakdownDTO1.setClmbtId("24788160");
		activityBreakdownDTO1.setClmBtType("Pass Thru");
		activityBreakdownDTO1.setServiceBeginDate("02/01/2019");
		activityBreakdownDTO1.setServiceEndDate("02/31/2019");
		activityBreakdownDTO1.setActivityDate("01/17/2019");
		activityBreakdownDTO1.setProvider("TEST");
		activityBreakdownDTO1.setExpectedPymtDate(null);

		List<ActivityBreakdownDTO> activityBreakdownDetails = new ArrayList<>();
		activityBreakdownDetails.add(activityBreakdownDTO);
		activityBreakdownDetails.add(activityBreakdownDTO1);

		acctActivityDTO.setActivityBreakdownDetails(activityBreakdownDetails);
		acctActivityDTO.setInstallments(12);
		acctActivityDTO.setPremiumOccurenceType("Recurring");

		return acctActivityDTO;
	}

	@After
	public void tearDown() {

		LOGGER.info("########### tearDown() Started ###########");
		mockClaimBO = null;
		mockOnlineClaimDAO = null;
		conn = null;

		assertNull(mockClaimBO);
		assertNull(mockOnlineClaimDAO);
		assertNull(conn);
		LOGGER.info("########### tearDown() Completed ###########");

	}

	private String getStackTrace(Throwable aThrowable) {
		LOGGER.info("########### getStackTrace() Started ###########");

		final Writer result = new StringWriter();
		final PrintWriter printWriter = new PrintWriter(result);
		aThrowable.printStackTrace(printWriter);

		LOGGER.info("########### getStackTrace() Completed ###########");
		return result.toString();
	}

}
==============================================================================================================================================

package com.acclaris.claims.api.bo;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.when;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.sql.Connection;
import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.IOUtils;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunner;
import org.powermock.reflect.Whitebox;

import com.acclaris.accounts.api.bo.AccountDetailsService;
import com.acclaris.accounts.api.dao.AccountDetailsDAO;
import com.acclaris.accounts.api.dto.AccountDTO;
import com.acclaris.accounts.api.dto.ActivityBreakdownDTO;
import com.acclaris.accounts.api.dto.BalanceDTO;
import com.acclaris.accounts.api.dto.CashBalanceDTO;
import com.acclaris.accounts.api.enums.AccountActivitySource;
import com.acclaris.accounts.api.enums.ClaimStatus;
import com.acclaris.accounts.api.util.AccountBalanceUtil;
import com.acclaris.card.bo.CardMgmtBO;
import com.acclaris.card.dao.CardMgmtDAO;
import com.acclaris.card.dto.CardGenericInputDTO;
import com.acclaris.card.dto.TransactionDTO;
import com.acclaris.card.enums.AdjustmentType;
import com.acclaris.card.enums.ClaimTypes;
import com.acclaris.card.enums.DbCardTrxnRequestTypes;
import com.acclaris.card.integration.CardIntegrationFactory;
import com.acclaris.card.integration.CardInterface;
import com.acclaris.claims.api.bean.AccountBn;
import com.acclaris.claims.api.bean.AccountTypeBn;
import com.acclaris.claims.api.bean.AppealDTO;
import com.acclaris.claims.api.bean.CategoryDTO;
import com.acclaris.claims.api.bean.ClaimBn;
import com.acclaris.claims.api.bean.ClaimBnWrapper;
import com.acclaris.claims.api.bean.ClaimConfigurationBn;
import com.acclaris.claims.api.bean.ClaimFormDTO;
import com.acclaris.claims.api.bean.ClaimImageFileDTO;
import com.acclaris.claims.api.bean.ClaimTypeBn;
import com.acclaris.claims.api.bean.DebitCardExpenseDetail;
import com.acclaris.claims.api.bean.DuplicateClaimDetailsBn;
import com.acclaris.claims.api.bean.PayeeDTO;
import com.acclaris.claims.api.bean.TransactionDtlsBn;
import com.acclaris.claims.api.dao.ClaimDAO;
import com.acclaris.claims.api.dao.PayeeDAO;
import com.acclaris.claims.api.enums.AppealStatus;
import com.acclaris.common.bean.ApprovedClaimDetailsBn;
import com.acclaris.common.bean.ClaimNoteDTO;
import com.acclaris.common.bean.ErrorBn;
import com.acclaris.common.bean.FileDTO;
import com.acclaris.common.bean.PhoneDTO;
import com.acclaris.common.bean.UserDetailsBn;
import com.acclaris.common.dao.CommonAccountDAO;
import com.acclaris.common.dao.ConfigDAO;
import com.acclaris.common.dao.SendMailDAO;
import com.acclaris.common.dao.UserDAO;
import com.acclaris.common.exceptions.BusinessLogicException;
import com.acclaris.common.exceptions.PortalError;
import com.acclaris.common.exceptions.ServiceUnavailableException;
import com.acclaris.common.exceptions.SystemException;
import com.acclaris.common.util.ConfigUtil;
import com.acclaris.common.util.ConversionUtil;
import com.acclaris.common.util.DateUtil;
import com.acclaris.common.util.ValidationUtil;
import com.acclaris.database.connection.DatabaseService;
import com.acclaris.database.connection.DatabaseUtils;
import com.acclaris.image.api.bo.ImageDetailService;
import com.acclaris.image.api.dao.ImageDAO;
import com.acclaris.image.api.dto.ImageBn;
import com.acclaris.image.api.dto.ImageDTO;
import com.acclaris.image.dto.ImageUploadInputDto;
import com.acclaris.image.util.ImageUploadUtil;
import com.acclaris.label.api.dto.LabelDTO;
import com.acclaris.logger.impl.AcclarisLogger;
import com.acclaris.logger.impl.Module;
import com.acclaris.profile.api.bo.BankingInfoBO;
import com.acclaris.profile.api.bo.ServiceProviderBO;
import com.acclaris.profile.api.dao.PersonalDAO;
import com.acclaris.profile.api.dao.ServiceProviderDAO;
import com.acclaris.profile.api.dto.ServiceProviderDTO;
import com.acclaris.properties.PropertiesHelper;
import com.acclaris.receipt.api.dao.ReceiptDetailsDAO;
import com.acclaris.receipt.api.dto.ImageItemDTO;
import com.acclaris.supportutility.api.bean.DependentInfoBn;
import com.acclaris.supportutility.api.bean.IndividualServicedDTO;
import com.acclaris.supportutility.api.bo.SupportUtilService;
import com.acclaris.supportutility.api.dao.SupportUtilityDAO;
import com.acclaris.transactions.bo.ClaimTransaction;
import com.acclaris.transactions.bo.TransactionFactory;
import com.acclaris.transactions.dao.ClaimTransactionDAO;
import com.acclaris.transactions.dto.RecoveryDetailDTO;
import com.acclaris.transactions.dto.TransactionBreakdownDTO;
import com.acclaris.transactions.dto.TransactionDetailsDTO;

import net.sourceforge.barbecue.Barcode;
import net.sourceforge.barbecue.BarcodeException;
import net.sourceforge.barbecue.BarcodeFactory;
import net.sourceforge.barbecue.BarcodeImageHandler;
import net.sourceforge.barbecue.output.OutputException;
import oracle.jdbc.driver.OracleConnection;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ PropertiesHelper.class, ConfigUtil.class, ConfigDAO.class, DatabaseUtils.class,
		CommonAccountDAO.class, CardIntegrationFactory.class, ImageUploadUtil.class, ImageDAO.class,
		ValidationUtil.class, SendMailDAO.class, SupportUtilityDAO.class, UserDAO.class, Barcode.class,
		BarcodeFactory.class, BarcodeImageHandler.class, OutputException.class, BarcodeException.class,
		ConfigUtil.class, ConversionUtil.class, ImageDetailService.class, DateUtil.class })
@SuppressStaticInitializationFor({ "com.acclaris.image.util.ImageUploadUtil", "com.acclaris.common.dao.SendMailDAO" })
public class TestClaimBO {

	private static final AcclarisLogger LOGGER = AcclarisLogger.getLogger(Module.GEN3_CLAIMS);
	private static final String PROVIDER_NAME = "George";
	private static final String GET_REIMBURSED = "GetReimbursed";
	private static final String OPT_NO = "Opt|No";
	private static final String PAY_A_BILL = "PayABill";
	private static final String SERVICE_ENDS = "01/06/2018";
	private static final String PAYEE_NAME = "Harry";

	@InjectMocks
	private ClaimBO mockClaimBO;

	@Mock
	private ClaimDAO mockOnlineClaimDAO;

	@Mock
	ServiceProviderDAO serviceProviderDAO;

	@Mock
	SupportUtilityDAO supportUtilityDAO;

	@Mock
	ClaimTransactionDAO mockClaimTransactionDAO;

	@Mock
	AccountDetailsService accountDetailsService;

	@Mock
	AccountBalanceUtil balanceUtil;

	@Mock
	BankingInfoBO profileBankingInfoBO;

	@Mock
	private PersonalDAO mockProfilePersonalDAO;

	@Mock
	SupportUtilService supportUtilService;

	@Mock
	ServiceProviderBO serviceProvider;

	@Mock
	PayeeDAO payeeDAO;

	@Mock
	PayeeBO payeeBo;

	@Mock
	AccountDetailsDAO mockAccountDetailsDAO;

	@Mock
	ReceiptDetailsDAO receiptDetailsDAO;

	@Mock
	ImageDAO imageDAO;

	@Mock
	CardMgmtDAO cardMgmtDAO;

	@Mock
	CardMgmtBO cardMgmtBO;

	@Mock
	CardInterface cardInterface;

	@Mock
	ClaimBn mockClaimBn;

	@Mock
	private DatabaseService mockDatabase;

	@Mock
	ClaimTransaction mockClaimTransaction;

	@Mock
	TransactionFactory mockTransactionFactory;

	private Connection conn = null;
	private OracleConnection oracleConn = null;
	private ErrorBn errorBn;
	private List<ImageDTO> imageDtoList;
	private ImageDTO imageDTO;

	@Before
	public void setUpMock() throws IOException {

		LOGGER.info("########### Moke setUp started ###########");
		conn = Mockito.mock(Connection.class);
		oracleConn = Mockito.mock(OracleConnection.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ConfigDAO.class);
		PowerMockito.mockStatic(DatabaseUtils.class);
		PowerMockito.mockStatic(CommonAccountDAO.class);
		PowerMockito.mockStatic(CardIntegrationFactory.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);
		PowerMockito.mockStatic(BarcodeFactory.class);
		PowerMockito.mockStatic(BarcodeImageHandler.class);

		MockitoAnnotations.initMocks(this);

		String str = "File1";
		InputStream inputStream = new ByteArrayInputStream(str.getBytes());

		imageDtoList = new ArrayList<>();
		imageDTO = new ImageDTO();
		imageDTO.setImageStream(IOUtils.toByteArray(inputStream));
		imageDTO.setImageName("File1.jpg");
		imageDtoList.add(imageDTO);

		LOGGER.info("########### Moke setUp completed ###########");
	}

	@Test
	public void testGetClaimcategoriesForSRA() {
		try {
			// Dental|Yes|Dental|Yes~Medical|Yes|Medical|No~Medical-OTC|Yes|Medical-OTC|Yes~Medical-Preventative|Yes|Medical-Preventative|Yes~Vision|Yes|Vision|Yes~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental|Yes");
			clmCategoryList.add("Medical|No|Medical|No");
			clmCategoryList.add("Medical-OTC|No|Medical-OTC|No");
			clmCategoryList.add("Medical-Preventative|No|Medical-Preventative|Yes");
			clmCategoryList.add("Vision|No|Vision|Yes");
			when(mockDatabase.getDBConnection()).thenReturn(conn);

			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);
			PowerMockito.doNothing().when(PropertiesHelper.class, "loadProperties");
			when(mockOnlineClaimDAO.getDefaultClaimTypeByCategoryForSRA(Mockito.any(Connection.class),
					Mockito.anyString())).thenReturn("WITHDRAWAL");
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "");
			assertTrue("testGetClaimcategoriesForSRA -> Checking length of Claim Categories List",
					categoriesList.size() == 5);
		} catch (Exception e) {
			fail("### testGetClaimcategoriesForSRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategoriesForJRA_OUTOFPOCKET() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);

			PowerMockito.when(CommonAccountDAO.isJRA(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(true);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);
			List<ClaimTypeBn> lstClaimTypes = getClaimTypesByCategory();
			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(lstClaimTypes, lstClaimTypes, lstClaimTypes);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "OUTOFPOCKET");
			assertTrue("testGetClaimcategoriesForJRA_OUTOFPOCKET -> Checking length of Claim Categories List",
					categoriesList.size() == 3);
			assertTrue("testGetClaimcategoriesForJRA_OUTOFPOCKET -> Checking claim type for each category",
					categoriesList.stream().filter(o -> !o.getLstClaimTypes().isEmpty()).count() == 3);

			assertTrue("testGetClaimcategoriesForJRA_OUTOFPOCKET -> Checking claim type order for each category",
					"OTC MEDICATION".equalsIgnoreCase(categoriesList.get(0).getLstClaimTypes().get(0).getLabel()));

		} catch (Exception e) {
			fail("### testGetClaimcategoriesForJRA_OUTOFPOCKET ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategories_OUTOFPOCKET_WhenSingleNonPremiumTypeSupported() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);

			PowerMockito.when(CommonAccountDAO.isJRA(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(true);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);
			List<ClaimTypeBn> clmType = new ArrayList<>();
			ClaimTypeBn bn2 = new ClaimTypeBn();
			bn2.setLabel("EQUIPMENT");
			bn2.setName("EQUIPMENT");
			bn2.setSequence(2);
			clmType.add(bn2);
			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(clmType, clmType, clmType);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "OUTOFPOCKET");
			assertTrue(
					"testGetClaimcategories_OUTOFPOCKET_WhenSingleNonPremiumTypeSupported -> Checking length of Claim Categories List",
					categoriesList.size() == 3);
			assertTrue(
					"testGetClaimcategories_OUTOFPOCKET_WhenSingleNonPremiumTypeSupported -> Checking claim type order for each category",
					"EQUIPMENT".equalsIgnoreCase(categoriesList.get(0).getLstClaimTypes().get(0).getLabel()));

		} catch (Exception e) {
			fail("### testGetClaimcategories_OUTOFPOCKET_WhenSingleNonPremiumTypeSupported ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategories_OUTOFPOCKET_WhenSinglePremiumTypeSupported() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);

			PowerMockito.when(CommonAccountDAO.isJRA(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(true);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);
			List<ClaimTypeBn> clmType = new ArrayList<>();
			ClaimTypeBn bn2 = new ClaimTypeBn();
			bn2.setLabel("PREMIUM");
			bn2.setName("PREMIUM");
			bn2.setSequence(2);
			clmType.add(bn2);
			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(clmType, clmType, clmType);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "OUTOFPOCKET");
			assertTrue(
					"testGetClaimcategories_OUTOFPOCKET_WhenSinglePremiumTypeSupported -> Checking length of Claim Categories List",
					categoriesList.size() == 0);
		} catch (Exception e) {
			fail("### testGetClaimcategories_OUTOFPOCKET_WhenSinglePremiumTypeSupported ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategoriesForJRA_PREMIUM() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);

			List<String> premiumTypeSet = new ArrayList<>();
			premiumTypeSet.add("One-Time Premium");
			premiumTypeSet.add("Recurring Premium");

			when(accountDetailsService.getPremiumTypeSetForJRA(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean(), Mockito.anyBoolean()))
							.thenReturn(premiumTypeSet);
			List<ClaimTypeBn> lstClaimTypes = getClaimTypesByCategory();
			ClaimTypeBn bn4 = new ClaimTypeBn();
			bn4.setLabel("PREMIUM");
			bn4.setName("PREMIUM");
			bn4.setSequence(4);
			lstClaimTypes.add(bn4);

			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(lstClaimTypes, lstClaimTypes, lstClaimTypes);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "PREMIUM");

			assertTrue("testGetClaimcategoriesForJRA_PREMIUM -> Checking length of Claim Categories List",
					categoriesList.size() == 3);
			assertTrue("testGetClaimcategoriesForJRA_PREMIUM -> Checking occurrence type for each category",
					categoriesList.stream().filter(o -> !o.getOccurrence().isEmpty()).count() == 3);
			assertTrue("testGetClaimcategoriesForJRA_PREMIUM -> Checking occurrence order type for each category",
					"One-Time Premium".equals(categoriesList.get(0).getOccurrence().get(0))
							&& "Recurring Premium".equals(categoriesList.get(0).getOccurrence().get(1)));
		} catch (Exception e) {
			fail("### testGetClaimcategoriesForJRA_PREMIUM ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategoriesForJRAWhenPremiumTypeNotSupported() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);
			List<String> premiumTypeSet = new ArrayList<>();
			premiumTypeSet.add("One-Time Premium");
			premiumTypeSet.add("Recurring Premium");

			when(accountDetailsService.getPremiumTypeSetForJRA(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean(), Mockito.anyBoolean()))
							.thenReturn(premiumTypeSet);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);

			List<ClaimTypeBn> lstClaimTypes = getClaimTypesByCategory();

			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(lstClaimTypes, lstClaimTypes, lstClaimTypes);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "PREMIUM");
			assertTrue(
					"testGetClaimcategoriesForJRAWhenPremiumTypeNotSupported -> Checking length of Claim Categories List",
					categoriesList.size() == 0);
		} catch (Exception e) {
			fail("### testGetClaimcategoriesForJRAWhenPremiumTypeNotSupported ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategoriesForJRAWhenSingleNonPremiumTypeSupported() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);
			List<String> premiumTypeSet = new ArrayList<>();
			premiumTypeSet.add("One-Time Premium");
			premiumTypeSet.add("Recurring Premium");

			when(accountDetailsService.getPremiumTypeSetForJRA(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean(), Mockito.anyBoolean()))
							.thenReturn(premiumTypeSet);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);

			List<ClaimTypeBn> clmType = new ArrayList<>();
			ClaimTypeBn bn2 = new ClaimTypeBn();
			bn2.setLabel("OTC SUPPLIES");
			bn2.setName("OTC SUPPLIES");
			bn2.setSequence(2);
			clmType.add(bn2);

			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(clmType, clmType, clmType);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "PREMIUM");
			assertTrue(
					"testGetClaimcategoriesForJRAWhenSingleNonPremiumTypeSupported -> Checking length of Claim Categories List",
					categoriesList.size() == 0);
		} catch (Exception e) {
			fail("### testGetClaimcategoriesForJRAWhenSingleNonPremiumTypeSupported ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimcategoriesForJRAWhenSinglePremiumTypeSupported() {
		try {
			// Medical|No|Medical~Hearing|No|Hearing~Pharmacy|No|Pharmacy~
			List<String> clmCategoryList = new ArrayList<>();
			clmCategoryList.add("Dental|No|Dental");
			clmCategoryList.add("Hearing|No|Hearing");
			clmCategoryList.add("Pharmacy|No|Pharmacy");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			usrDtlsBn.setJRAAccount(true);
			List<String> premiumTypeSet = new ArrayList<>();
			premiumTypeSet.add("One-Time Premium");
			premiumTypeSet.add("Recurring Premium");

			when(accountDetailsService.getPremiumTypeSetForJRA(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean(), Mockito.anyBoolean()))
							.thenReturn(premiumTypeSet);

			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(null);
			when(mockOnlineClaimDAO.getClaimCategories(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(clmCategoryList);

			List<ClaimTypeBn> clmType = new ArrayList<>();
			ClaimTypeBn bn2 = new ClaimTypeBn();
			bn2.setLabel("PREMIUM");
			bn2.setName("PREMIUM");
			bn2.setSequence(2);
			clmType.add(bn2);

			when(mockOnlineClaimDAO.getClaimTypesByCategory(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString())).thenReturn(clmType, clmType, clmType);

			List<CategoryDTO> categoriesList = mockClaimBO.getClaimCategories(usrDtlsBn, "PREMIUM");
			assertTrue(
					"testGetClaimcategoriesForJRAWhenSingleNonPremiumTypeSupported -> Checking length of Claim Categories List",
					categoriesList.size() == 3);
		} catch (Exception e) {
			fail("### testGetClaimcategoriesForJRAWhenSingleNonPremiumTypeSupported ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	private List<ClaimTypeBn> getClaimTypesByCategory() {
		List<ClaimTypeBn> clmType = new ArrayList<>();
		ClaimTypeBn bn2 = new ClaimTypeBn();
		bn2.setLabel("OTC SUPPLIES");
		bn2.setName("OTC SUPPLIES");
		bn2.setSequence(2);
		clmType.add(bn2);
		ClaimTypeBn bn = new ClaimTypeBn();
		bn.setLabel("OTC MEDICATION");
		bn.setName("OTC MEDICATION");
		bn.setSequence(1);

		ClaimTypeBn bn3 = new ClaimTypeBn();
		bn3.setLabel("PRESCRIPTION");
		bn3.setName("PRESCRIPTION");
		bn3.setSequence(3);
		clmType.add(bn);
		return clmType;
	}

	@Test
	public void testGetClaimConfiguration_NANA_HRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("NA|NA");
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("NA|NA");
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), true);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), false);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_NANA_HRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_YesYes() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("DCRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|Yes");
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|Yes");
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), true);
			assertEquals(resultBn.isAllowAddDependent(), true);
			assertEquals(resultBn.isShowDependentDropdown(), true);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), true);
			assertEquals(resultBn.isAllowAddProvider(), true);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_YesYes ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_YesNo_HRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|No");
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|No");
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), true);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), true);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_YesNo_HRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_YesNo_HCRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HCRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|No");
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|No");
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), false);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), true);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_YesNo_HCRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_OptYes_HRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Opt|Yes");
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Opt|Yes");
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), true);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), true);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_OptYes_HRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_OptNo_HRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), true);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_OptNo_HRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_OptNo_HCRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HCRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), false);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_OptNo_HRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetAvailableHSABalance() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HSA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(20.00d));
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("No");
			when(receiptDetailsDAO.isUnusedReceiptAvailable(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(false);
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, GET_REIMBURSED);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), false);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getIsReceiptRequired(), "No");
			assertEquals(resultBn.isShowPickFromReceiptButton(), false);
		} catch (Exception e) {
			fail("### testGetAvailableHSABalance ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfigurationSQLException() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HSA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			PowerMockito.doThrow(new SQLException()).when(payeeBo).getPayeeDetails(Mockito.anyString());
			mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, PAY_A_BILL);
		} catch (Exception e) {
			assertTrue(e.getMessage().contains("java.sql.SQLException"));
		}
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidServiceDate1() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setServiceBegins("01/08/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidServiceDate2() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setServiceBegins(null);
		claimBn.setServiceEnds(SERVICE_ENDS);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidServiceDateFormat()
			throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setServiceBegins("15/01/2019");
		claimBn.setServiceEnds("15/01/2019");
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithFutureDateMoreThanMaxDate()
			throws BusinessLogicException, SystemException {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			claimBn.setServiceBegins("06/12/2019");
			claimBn.setServiceEnds("06/12/2019");
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			/*
			 * Current Year Account string
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA"
			 * "HCRA(Health FSA)=HCRA~2368023~~FSH"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Account (HSA)=DCRA~2368000~~HAS"
			 */

			String accStr = "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH~31-JAN-19#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA~31-JAN-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);

			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
		} catch (SQLException e) {
			fail("### testValidateInitialClaimDtlsWithFutureDateMoreThanMaxDate ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidServiceDate4() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setServiceBegins("06/05/2018");
		claimBn.setServiceEnds("12/31/3001");
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidAmount1() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setClaimAmount("-1212.25");
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidAmount2() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setClaimAmount("$12121");
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidAmount3() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setClaimAmount(null);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidAmount4() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setClaimAmount("1212.121");
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithInvalidAmount5() throws BusinessLogicException, SystemException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setClaimAmount("1212as$.121");
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test
	public void testValidateInitialClaimDtls() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			boolean isAcntBnPopulated = true;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			/*
			 * Current Year Account string
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA"
			 * "HCRA(Health FSA)=HCRA~2368023~~FSH"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Account (HSA)=DCRA~2368000~~HAS"
			 */

			String accStr = "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH~31-DEC-19#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA~31-DEC-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);

			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);

			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue("testValidateInitialClaimDtls -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);

			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAdded -> Checking if map for account type with dummy claim sequence id is generated",
					newClaimBnWrapper.getAccntTypeMapForClaimId() != null
							&& newClaimBnWrapper.getAccntTypeMapForClaimId().size() > 0
							&& newClaimBnWrapper.getCurrentYrBalanceForElections() != null
							&& newClaimBnWrapper.getCurrentYrBalanceForElections().size() > 0);
		} catch (Exception e) {
			fail("### testValidateInitialClaimDtls ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testValidateInitialClaimDtlsForDCRA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			boolean isAcntBnPopulated = true;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			String accStr = "Health Savings Account (HSA)=DCRA~2368000~~HAS~31-DEC-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);
			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2099");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(0d));

			when(mockAccountDetailsDAO.getAvailableBal(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(1d);

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}

			assertTrue("testValidateInitialClaimDtlsForDCRA -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);
			assertTrue("testValidateInitialClaimDtlsForDCRA -> Checking if ClaimBnWrapper is populated correctly",
					newClaimBnWrapper != null);

		} catch (Exception e) {
			fail("### testValidateInitialClaimDtlsForDCRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testValidateInitialClaimDtlsForHSA() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			boolean isAcntBnPopulated = true;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			String accStr = "DCRA(DC FSA)=DCRA~20929902~~DA6C~31-DEC-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);
			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(0d));

			when(mockAccountDetailsDAO.getAvailableBal(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(1d);

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}

			assertTrue("testValidateInitialClaimDtlsForHSA -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);
			assertTrue("testValidateInitialClaimDtlsForHSA -> Checking if ClaimBnWrapper is populated correctly",
					newClaimBnWrapper != null);

		} catch (Exception e) {
			fail("### testValidateInitialClaimDtlsForHSA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testValidateInitialClaimDtlsWhenNewExpenseAdded() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();

			HashMap<String, Double> priorYrBalanceForElections = new HashMap<>();
			HashMap<String, Double> currentYrBalanceForElections = new HashMap<>();
			priorYrBalanceForElections.put("HRA+HCRA+HSA", 100.0);
			currentYrBalanceForElections.put("HRA+HCRA+HSA", 100.0);
			claimBnWrapper.setPriorYrBalanceForElections(priorYrBalanceForElections);
			claimBnWrapper.setCurrentYrBalanceForElections(currentYrBalanceForElections);

			boolean isAcntBnPopulated = true;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			/*
			 * Current Year Account string
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA"
			 * "HCRA(Health FSA)=HCRA~2368023~~FSH"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Account (HSA)=DCRA~2368000~~HAS"
			 */

			String accStr = "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH~31-DEC-19|HRA~2368019~~HRA~31-DEC-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);
			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAdded -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);

			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAdded -> Checking if map for account type with dummy claim sequence id is generated",
					newClaimBnWrapper.getAccntTypeMapForClaimId() != null
							&& newClaimBnWrapper.getAccntTypeMapForClaimId().size() > 0
							&& newClaimBnWrapper.getPriorYrBalanceForElections() != null
							&& newClaimBnWrapper.getCurrentYrBalanceForElections().get("HRA+HCRA+HSA") == 99.25);
		} catch (Exception e) {
			fail("### testValidateInitialClaimDtlsWhenNewExpenseAdded ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			claimBn.setClaimAmount("110");

			HashMap<String, Double> priorYrBalanceForElections = new HashMap<>();
			HashMap<String, Double> currentYrBalanceForElections = new HashMap<>();
			HashMap<String, Double> perpetualBalance = new HashMap<>();
			priorYrBalanceForElections.put("HRA+HCRA+HSA", 100.0);
			currentYrBalanceForElections.put("HRA+HCRA+HSA", 100.0);
			perpetualBalance.put("HSA", 100.0);
			claimBnWrapper.setPriorYrBalanceForElections(priorYrBalanceForElections);
			claimBnWrapper.setCurrentYrBalanceForElections(currentYrBalanceForElections);
			claimBnWrapper.setPerpetualAcntBalance(perpetualBalance);

			boolean isAcntBnPopulated = true;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			/*
			 * Current Year Account string
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA"
			 * "HCRA(Health FSA)=HCRA~2368023~~FSH"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Account (HSA)=DCRA~2368000~~HAS"
			 */

			String accStr = "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH~31-DEC-19|HRA~2368019~~HRA~31-DEC-19|HSA~2368020~~HSA~31-DEC-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);
			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(true, true, false, false, false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2018");
			List<String> planYearList1 = new ArrayList<>();
			planYearList1.add("2019");
			List<String> planYearList2 = new ArrayList<>();
			planYearList2.add("2099");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList, planYearList1, planYearList2);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);

			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr -> Checking if map for account type with dummy claim sequence id is generated",
					newClaimBnWrapper.getAccntTypeMapForClaimId() != null
							&& newClaimBnWrapper.getAccntTypeMapForClaimId().size() > 0
							&& newClaimBnWrapper.getPriorYrBalanceForElections().get("HRA+HCRA+HSA") == 0);
		} catch (Exception e) {
			fail("### testValidateInitialClaimDtlsWhenNewExpenseAdded ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr2() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			ClaimBn claimBn = claimBnWrapper.getClaimBn();
			claimBn.setClaimAmount("210");

			HashMap<String, Double> priorYrBalanceForElections = new HashMap<>();
			HashMap<String, Double> currentYrBalanceForElections = new HashMap<>();
			HashMap<String, Double> perpetualBalance = new HashMap<>();
			priorYrBalanceForElections.put("HRA+HCRA+HSA", 100.0);
			currentYrBalanceForElections.put("HRA+HCRA+HSA", 100.0);
			perpetualBalance.put("perpetualElct", 100.0);
			claimBnWrapper.setPriorYrBalanceForElections(priorYrBalanceForElections);
			claimBnWrapper.setCurrentYrBalanceForElections(currentYrBalanceForElections);
			claimBnWrapper.setPerpetualAcntBalance(perpetualBalance);

			boolean isAcntBnPopulated = true;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			/*
			 * Current Year Account string
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA"
			 * "HCRA(Health FSA)=HCRA~2368023~~FSH"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Account (HSA)=DCRA~2368000~~HAS"
			 */

			String accStr = "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH~31-DEC-19|HRA~2368019~~HRA~31-DEC-19|HSA~2368020~~HSA~31-DEC-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);
			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(true, true, false, false, false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2018");
			List<String> planYearList1 = new ArrayList<>();
			planYearList1.add("2019");
			List<String> planYearList2 = new ArrayList<>();
			planYearList2.add("2099");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList, planYearList1, planYearList2);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr2 -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);

			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr2 -> Checking if map for account type with dummy claim sequence id is generated",
					newClaimBnWrapper.getAccntTypeMapForClaimId() != null
							&& newClaimBnWrapper.getAccntTypeMapForClaimId().size() > 0
							&& newClaimBnWrapper.getPriorYrBalanceForElections().get("HRA+HCRA+HSA") == 0
							&& newClaimBnWrapper.getCurrentYrBalanceForElections().get("HRA+HCRA+HSA") == 0
							&& newClaimBnWrapper.getPerpetualAcntBalance().get("perpetualElct") == 90);
		} catch (Exception e) {
			fail("### testValidateInitialClaimDtlsWhenNewExpenseAddedWithPriorYr2 ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testValidateInitialClaimDtlsWhenPriorYear() {
		try {
			boolean isAcntBnPopulated = true;
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapperWhenPriorYearSelected();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			/*
			 * Current Year Account string
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Aaccount (HSA)=HSA~2368000~~HSA"
			 * );
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368016~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368017~~HRA"
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368016~~FSH"
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368016~~FSH"
			 */

			/*
			 * Prior Year Account string
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA"
			 * "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH|HRA~2368019~~HRA#Health Savings Account (HSA)=HSA~2368000~~HAS"
			 * "Health Care Reimbursement Account (Health FSA)=HCRA~2368018~~FSH"
			 */

			String accStr = "HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH~31-DEC-19|HRA~2368019~~HRA~31-DEC-19#Health Savings Aaccount (HSA)=HSA~2368000~~HSA~31-DEC-19";
			String accStrPrev = "Health Care Reimbursement Account (Health FSA)=HCRA~2368014~~FSH~31-MAR-19#Health Reimbursement Arrangement (HRA)=HRA~2368015~~HRA~31-MAR-19";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			AccountTypeBn acctypeDtoPrev = new AccountTypeBn();
			acctypeDtoPrev.setAccountTypes(accStrPrev);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto, acctypeDtoPrev);

			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(true, true);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);

			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));

			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue(
					"testValidateInitialClaimDtlsWhenPriorYear -> Checking if account bean list is populated correctly for prior year",
					isAcntBnPopulated);

			assertTrue(
					"testValidateInitialClaimDtlsWhenNewExpenseAdded -> Checking if map for account type with dummy claim sequence id is generated",
					newClaimBnWrapper.getAccntTypeMapForClaimId() != null
							&& newClaimBnWrapper.getAccntTypeMapForClaimId().size() > 0
							&& newClaimBnWrapper.getPriorYrBalanceForElections() != null
							&& newClaimBnWrapper.getPriorYrBalanceForElections().size() > 0);
		} catch (Exception e) {
			fail("### testValidateInitialClaimDtlsWhenPriorYear ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWhenNoElections()
			throws SQLException, SystemException, BusinessLogicException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("No");
		AccountTypeBn acctypeDto = new AccountTypeBn();
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWhenNoElections_PriorYear()
			throws SQLException, SystemException, BusinessLogicException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapperWhenPriorYearSelected();
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("Yes");
		AccountTypeBn acctypeDto = new AccountTypeBn();
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithErrorCode1()
			throws SQLException, SystemException, BusinessLogicException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("No");
		AccountTypeBn acctypeDto = new AccountTypeBn();
		acctypeDto.setErrorCode("300001");
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWithErrorCode2()
			throws SQLException, SystemException, BusinessLogicException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("No");
		AccountTypeBn acctypeDto = new AccountTypeBn();
		acctypeDto.setErrorCode("300011");
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);
		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWhenInsufficientBalance()
			throws SQLException, SystemException, BusinessLogicException, ServiceUnavailableException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setServiceEnds("");
		claimBn.setClaimAmount("5454");
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("No");
		AccountTypeBn acctypeDto = new AccountTypeBn();
		acctypeDto.setAccountTypes(
				"HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH~31-DEC-19|HRA~2368019~~HRA~31-DEC-19#Health Savings Aaccount (HSA)=HSA~2368000~~HSA~31-DEC-19");
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);
		when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
				Mockito.anyString())).thenReturn(false, false);
		List<String> planYearList = new ArrayList<>();
		planYearList.add("2019");
		when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
				.thenReturn(planYearList);
		when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);
		when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
				.thenReturn(getBalanceBn(200d));

		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateInitialClaimDtlsWhenZeroBalance()
			throws SQLException, SystemException, BusinessLogicException, ServiceUnavailableException {
		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = claimBnWrapper.getClaimBn();
		claimBn.setClaimAmount("5454");
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("No");
		AccountTypeBn acctypeDto = new AccountTypeBn();
		acctypeDto.setAccountTypes(
				"HRA+HCRA+HSA(Health FSA,HRA,HSA)=HCRA~2368018~~FSH~31-DEC-19|HRA~2368019~~HRA~31-DEC-19#Health Savings Aaccount (HSA)=HSA~2368000~~HSA~31-DEC-19");
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);
		when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
				Mockito.anyString())).thenReturn(false, false);
		List<String> planYearList = new ArrayList<>();
		planYearList.add("2019");
		when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
				.thenReturn(planYearList);
		when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);
		when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
				.thenReturn(getBalanceBn(0.0d));

		UserDetailsBn usrDtlsBn = getCommonUserDetails();
		mockClaimBO.validateInitialClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test
	public void testGetClaimConfiguration_PayABill() {
		try {
			ClaimBn claimBn = getClaimBn();
			claimBn.setClaimAmount("56");
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("HRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			PayeeDTO payee = new PayeeDTO();
			payee.setPayeeId(3);
			payee.setPayeeName(PAYEE_NAME);
			List<PayeeDTO> payeeDetails = new ArrayList<>();
			payeeDetails.add(payee);
			when(payeeDAO.getPayeeDetails(Mockito.any(Connection.class), Mockito.anyString())).thenReturn(payeeDetails);
			when(payeeBo.getPayeeDetails(Mockito.anyString())).thenReturn(payeeDetails);
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("Yes");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, PAY_A_BILL);
			assertEquals(resultBn.isDependentMandatory(), false);
			assertEquals(resultBn.isAllowAddDependent(), false);
			assertEquals(resultBn.isShowDependentDropdown(), true);
			assertEquals(resultBn.getDependentDTO().size(), 1);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getPayeeDetails().get(0).getPayeeName(), PAYEE_NAME);
			assertEquals(resultBn.getIsReceiptRequired(), "Yes");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_PayABill ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimConfiguration_DCRA() {
		try {
			ClaimBn claimBn = getClaimBn();
			AccountBn actBn = new AccountBn();
			actBn.setAccountTypeCD("DCRA");
			actBn.setElctID("1234");
			List<AccountBn> actBnList = new ArrayList<>();
			actBnList.add(actBn);
			claimBn.setAccbnList(actBnList);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(mockOnlineClaimDAO.getOnlineClaimParamByClmCategoryForDpndt(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn("Yes|Yes");
			IndividualServicedDTO indServBn = new IndividualServicedDTO();
			indServBn.setDependentId(1);
			indServBn.setFullName("Tom");
			List<IndividualServicedDTO> indServList = new ArrayList<>();
			indServList.add(indServBn);
			when(supportUtilityDAO.getDependentList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(indServList);
			when(supportUtilService.getIndividualServicedList(Mockito.any(UserDetailsBn.class)))
					.thenReturn(indServList);
			when(mockOnlineClaimDAO.getOnlineClaimByClmCategoryForProvider(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.any(Long.class))).thenReturn(OPT_NO);
			ServiceProviderDTO prvdBn = new ServiceProviderDTO();
			prvdBn.setProviderId(2L);
			prvdBn.setProviderName(PROVIDER_NAME);
			List<ServiceProviderDTO> providerList = new ArrayList<>();
			providerList.add(prvdBn);
			when(serviceProviderDAO.getProviderList(Mockito.any(Connection.class), Mockito.any(Long.class)))
					.thenReturn(providerList);
			when(serviceProvider.getProviderList(Mockito.any(UserDetailsBn.class))).thenReturn(providerList);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			PayeeDTO payee = new PayeeDTO();
			payee.setPayeeId(3);
			payee.setPayeeName(PAYEE_NAME);
			List<PayeeDTO> payeeDetails = new ArrayList<>();
			payeeDetails.add(payee);
			when(payeeDAO.getPayeeDetails(Mockito.any(Connection.class), Mockito.anyString())).thenReturn(payeeDetails);
			when(payeeBo.getPayeeDetails(Mockito.anyString())).thenReturn(payeeDetails);
			when(mockOnlineClaimDAO.isReceiptRequired(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.any(ClaimBn.class), Mockito.anyDouble())).thenReturn("Yes");
			ClaimConfigurationBn resultBn = mockClaimBO.getClaimConfiguration(usrDtlsBn, claimBn, PAY_A_BILL);
			assertEquals(resultBn.isDependentMandatory(), true);
			assertEquals(resultBn.isAllowAddDependent(), true);
			assertEquals(resultBn.isShowDependentDropdown(), true);

			assertEquals(resultBn.isProviderMandatory(), false);
			assertEquals(resultBn.isAllowAddProvider(), false);
			assertEquals(resultBn.isShowProviderDropdown(), true);
			assertEquals(resultBn.getProviderDTO().size(), 1);
			assertEquals(resultBn.getPayeeDetails().get(0).getPayeeName(), PAYEE_NAME);
			assertEquals(resultBn.getIsReceiptRequired(), "Yes");
		} catch (Exception e) {
			fail("### testGetClaimConfiguration_DCRA ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetItemizedReceiptCustomTextSRA() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<p class=\"mb-0 mt-4\">What is an Itemized Receipt?</p>\n\t<span>An itemized receipt provides the following information:</span>\n\t<ul class=\"mt-4\">\n\t  <li>Provider name</li>\n\t  <li>Date of service</li>\n\t  <li>Description of each service provided</li>\n\t  <li>Dollar amount of each service</li>\n\t</ul>\n\n\t<h3 class=\"mb-0 mt-4\">How can I get an \"Itemized Receipt\"?</h3>\n\t<span>If you weren't provided an itemized receipt when you left your doctor's office, here are a few ways you can go about obtaining one:</span>\n\t<div class=\"row mt-4\">\n\t\t1. Call your doctor's office and request one to be   mailed to you\n\t</div>\n\t<div class=\"row\">\n\t\t2. Go to your doctor's office and have one printed\n\t</div>");
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			String itemizedReceiptCustomText = mockClaimBO.getItemizedReceiptCustomText(usrDtlsBn, "");
			assertTrue("####### testGetItemizedReceiptCustomText #######",
					itemizedReceiptCustomText.contains("What is an Itemized Receipt"));
		} catch (Exception e) {
			fail("####### testGetItemizedReceiptCustomText() ####### Failed with following error: " + getStackTrace(e));
		}
	}
	
	@Test
	public void testGetItemizedReceiptCustomTextJRA() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<p class=\"mb-0 mt-4\">What is an Itemized Receipt?</p>\n\t<span>An itemized receipt provides the following information:</span>\n\t<ul class=\"mt-4\">\n\t  <li>Provider name</li>\n\t  <li>Date of service</li>\n\t  <li>Description of each service provided</li>\n\t  <li>Dollar amount of each service</li>\n\t</ul>\n\n\t<h3 class=\"mb-0 mt-4\">How can I get an \"Itemized Receipt\"?</h3>\n\t<span>If you weren't provided an itemized receipt when you left your doctor's office, here are a few ways you can go about obtaining one:</span>\n\t<div class=\"row mt-4\">\n\t\t1. Call your doctor's office and request one to be   mailed to you\n\t</div>\n\t<div class=\"row\">\n\t\t2. Go to your doctor's office and have one printed\n\t</div>");
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			String itemizedReceiptCustomText = mockClaimBO.getItemizedReceiptCustomText(usrDtlsBn, "");
			assertTrue("####### testGetItemizedReceiptCustomText #######",
					itemizedReceiptCustomText.contains("What is an Itemized Receipt"));
		} catch (Exception e) {
			fail("####### testGetItemizedReceiptCustomText() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetItemizedReceiptCustomTex_PREMIUM() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<div class=\"row\">  <div class=\"col-12 col-md-7\">    <div class=\"row\">    <div class=\"col\">      <h5>What is an Itemized Receipt?</h5>      <p>An itemized receipt provides the following information:</p>      <ul>        <li>Individual Serviced</li>        <li>Provider/Carrier Name</li>        <li>Category/Description </li>        <li>Date of Service(s)</li>        <li>Dollar Amount</li>      </ul>    </div>    </div>    <div class=\"row\">    <div class=\"col\">"
									+ "<h5>How can I get an \"Itemized Receipt\"?</h5>      <p>After you make your premium payment(s) to your insurance provider, your insurance provider will send you an itemized receipt confirming your premium payment(s) have been made. For questions regarding your receipt or obtaining a receipt, contact your carrier.</p>    </div>    </div>    <div class=\"row\">    <div class=\"col\">      <h5>What about \"recurring\" premium receipts?</h5>      <p>For recurring premium payments, provide the receipt from your carrier that lists the premium payments made for each month during the plan year.</p>    </div>    </div>  </div>  <div class=\"col-12 col-md-5\">    <div class=\"row bg-gray\">    <div class=\"col\">      <div class=\"row\">"
									+ "<div class=\"col-6 pl-0 sample-left-icon\">        <span></span>        <span></span>        <span></span>        <span></span>        <span></span>      </div>      <div class=\"col-6 text-right pt-2 pr-0\"><img src=\"assets/images/mail_icon.png\" alt=\"close\"></div>      </div>      <div class=\"row mt-4\">      <div class=\"col pl-0\">        <h5>Individual Serviced</h5>        <p>Colleen Schultz</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">        <h5>Provider/Carrier Name</h5>        <p>CIGNA</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">        <h5>Description</h5>        <p>Premium</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">"
									+ "<h5>Date of Service</h5>        <p>01/01/2019</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">        <h5>Amount</h5>        <p>$600.00</p>      </div>      </div>    </div>    </div>  </div>  </div>");
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			String itemizedReceiptCustomText = mockClaimBO.getItemizedReceiptCustomText(usrDtlsBn, "PREMIUM");
			assertTrue("####### testGetItemizedReceiptCustomTex_PREMIUM #######", itemizedReceiptCustomText
					.contains("After you make your premium payment(s) to your insurance provider"));
		} catch (Exception e) {
			fail("####### testGetItemizedReceiptCustomTex_PREMIUM() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}
	
	@Test
	public void testGetItemizedReceiptCustomTex_OOP() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<div class=\"row\">  <div class=\"col-12 col-md-7\">    <div class=\"row\">    <div class=\"col\">      <h5>What is an Itemized Receipt?</h5>      <p>An itemized receipt provides the following information:</p>      <ul>        <li>Individual Serviced</li>        <li>Provider/Carrier Name</li>        <li>Category/Description </li>        <li>Date of Service(s)</li>        <li>Dollar Amount</li>      </ul>    </div>    </div>    <div class=\"row\">    <div class=\"col\">"
									+ "<h5>How can I get an \"Itemized Receipt\"?</h5>      <p>After you make your premium payment(s) to your insurance provider, your insurance provider will send you an itemized receipt confirming your premium payment(s) have been made. For questions regarding your receipt or obtaining a receipt, contact your carrier.</p>    </div>    </div>    <div class=\"row\">    <div class=\"col\">      <h5>What about \"recurring\" premium receipts?</h5>      <p>For recurring premium payments, provide the receipt from your carrier that lists the premium payments made for each month during the plan year.</p>    </div>    </div>  </div>  <div class=\"col-12 col-md-5\">    <div class=\"row bg-gray\">    <div class=\"col\">      <div class=\"row\">"
									+ "<div class=\"col-6 pl-0 sample-left-icon\">        <span></span>        <span></span>        <span></span>        <span></span>        <span></span>      </div>      <div class=\"col-6 text-right pt-2 pr-0\"><img src=\"assets/images/mail_icon.png\" alt=\"close\"></div>      </div>      <div class=\"row mt-4\">      <div class=\"col pl-0\">        <h5>Individual Serviced</h5>        <p>Colleen Schultz</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">        <h5>Provider/Carrier Name</h5>        <p>CIGNA</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">        <h5>Description</h5>        <p>Premium</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">"
									+ "<h5>Date of Service</h5>        <p>01/01/2019</p>      </div>      </div>      <div class=\"row\">      <div class=\"col pl-0\">        <h5>Amount</h5>        <p>$600.00</p>      </div>      </div>    </div>    </div>  </div>  </div>");
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			String itemizedReceiptCustomText = mockClaimBO.getItemizedReceiptCustomText(usrDtlsBn, "OUTOFPOCKET");
			assertTrue("####### testGetItemizedReceiptCustomTex_PREMIUM #######", itemizedReceiptCustomText
					.contains("After you make your premium payment(s) to your insurance provider"));
		} catch (Exception e) {
			fail("####### testGetItemizedReceiptCustomTex_PREMIUM() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBO() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());

			ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
			approvedClaimDetailsBn.setPayeeId(0);
			when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(true);

			when(cardMgmtDAO.getEEDebitCardVendorName(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn("TSYS");

			when(mockAccountDetailsDAO.getAccountAttributesByActpcd(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString(), Mockito.anyString())).thenReturn("Yes");

			when(cardMgmtDAO.isDebitCardActiveForElection(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn(true);
			when(mockAccountDetailsDAO.isAchActive(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("Yes");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOnlineClaimTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOtherDistributionTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());

			when(cardMgmtDAO.getCardBalanceForHSA(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(200d);
			TransactionDTO claimDTO = getClaimDTOForBalOverride();
			when(cardMgmtBO.submitTxnThruWS(Mockito.any(Connection.class), Mockito.any(CardGenericInputDTO.class),
					Mockito.any(TransactionDTO.class))).thenReturn(claimDTO);

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
			ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
			claimBn2.setClaimAmount("100");
			clmBn.add(claimBn1);
			clmBn.add(claimBn2);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBO() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBOForJRA() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
			claimBn1.setIsReceiptRequired("");
			ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
			claimBn2.setIsReceiptRequired("");
			claimBn2.setClaimAmount("100");
			clmBn.add(claimBn1);
			clmBn.add(claimBn2);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			userDetailsBn.setJRAAccount(true);
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBOForJRA() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForHSA() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck();
			bnWrapper.getClaimBnList().get(Integer.parseInt(bnWrapper.getCurrentSeqNo()) - 1).getAccbnList().get(0)
					.setAccountTypeCD("HSA");
			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
			Mockito.verify(mockOnlineClaimDAO, Mockito.times(0)).populateBnIfDuplicateClaim(
					Mockito.any(Connection.class), Mockito.any(ClaimBn.class), Mockito.any(UserDetailsBn.class));
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForHSA() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForNonHSA_WhenSubmitted() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("AMBULANCE");
			claimBn.setCategoryDTO(categoryDTO);
			DuplicateClaimDetailsBn bn = new DuplicateClaimDetailsBn();
			bn.setDupClmAmt("50");
			bn.setDupClmCategory("Medical");
			bn.setDupClmStatus("01/05/2018");
			bn.setDupClmStatus("Paid");
			claimBn.setDuplicateClaimDetailsBn(bn);

			when(mockOnlineClaimDAO.populateBnIfDuplicateClaim(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForNonHSA_WhenSubmitted() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForJRA_WhenSubmitted() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck_JRA();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("Premium");
			claimBn.setCategoryDTO(categoryDTO);
			DuplicateClaimDetailsBn bn = new DuplicateClaimDetailsBn();
			bn.setDupClmId("1");
			bn.setDupActpCd("RHRA");
			claimBn.setDuplicateClaimDetailsBn(bn);

			when(mockOnlineClaimDAO.isJraDuplicateClaim(Mockito.any(Connection.class), Mockito.any(ClaimBn.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			TransactionDetailsDTO mockClaimActivityDtls = getMockAcctActivityCardDetails();
			mockClaimActivityDtls.setIndividualServiced("ABC");

			when(mockClaimTransactionDAO.getClaimActivityCardDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(mockClaimActivityDtls);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			userDetailsBn.setJRAAccount(true);
			ClaimBn newClmBn = mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
			assertTrue("testCheckIfDuplicateClaimRaisedForJRA_WhenSubmitted - Check if duplicate claimBn is populated",
					newClmBn.getDuplicateClaimDetailsBn() != null
							&& "200.32".equals(newClmBn.getDuplicateClaimDetailsBn().getDupClmAmt()));
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForJRA_WhenSubmitted() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForJRA_WhenNotSubmitted() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck_JRA();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("Premium");
			claimBn.setCategoryDTO(categoryDTO);

			when(mockOnlineClaimDAO.isJraDuplicateClaim(Mockito.any(Connection.class), Mockito.any(ClaimBn.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			userDetailsBn.setJRAAccount(true);
			ClaimBn newClmBn = mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
			assertTrue("testCheckIfDuplicateClaimRaisedForJRA_WhenSubmitted - Check if duplicate claimBn is populated",
					newClmBn.getDuplicateClaimDetailsBn() != null
							&& "50.00".equals(newClmBn.getDuplicateClaimDetailsBn().getDupClmAmt()));
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForNonHSA_WhenSubmitted() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForJRA_WhenNoDuplicatePresent() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck_JRA();
			bnWrapper.getClaimBnList().get(0).setClaimAmount("30");
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("Premium");
			claimBn.setCategoryDTO(categoryDTO);

			when(mockOnlineClaimDAO.isJraDuplicateClaim(Mockito.any(Connection.class), Mockito.any(ClaimBn.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			userDetailsBn.setJRAAccount(true);
			ClaimBn newClmBn = mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
			assertTrue("testCheckIfDuplicateClaimRaisedForJRA_WhenSubmitted - Check if duplicate claimBn is populated",
					newClmBn.getDuplicateClaimDetailsBn() == null);
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForJRA_WhenNoDuplicatePresent() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForNonHSA_WhenNotSubmitted() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("AMBULANCE");
			claimBn.setCategoryDTO(categoryDTO);
			when(mockOnlineClaimDAO.populateBnIfDuplicateClaim(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			when(mockOnlineClaimDAO.checkClmCategoryForDuplicate(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(ClaimBn.class), Mockito.anyLong())).thenReturn(true);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForNonHSA_WhenNotSubmitted() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForNonHSA_WhenNotSubmitted_DCRA() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck_DCRA();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("AMBULANCE");
			claimBn.setCategoryDTO(categoryDTO);
			when(mockOnlineClaimDAO.populateBnIfDuplicateClaim(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			when(mockOnlineClaimDAO.checkClmCategoryForDuplicate(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(ClaimBn.class), Mockito.anyLong())).thenReturn(true);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForNonHSA_WhenNotSubmitted_DCRA() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testCheckIfDuplicateClaimRaisedForNonHSA_WhenNotSubmitted2() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			ClaimBnWrapper bnWrapper = getClaimBnWrapperForDuplicateCheck();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("01/05/2018");
			claimBn.setServiceEnds(SERVICE_ENDS);
			claimBn.setClaimAmount("50");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("AMBULANCE");
			claimBn.setCategoryDTO(categoryDTO);
			when(mockOnlineClaimDAO.populateBnIfDuplicateClaim(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(UserDetailsBn.class))).thenReturn(claimBn);

			when(mockOnlineClaimDAO.checkClmCategoryForDuplicate(Mockito.any(Connection.class),
					Mockito.any(ClaimBn.class), Mockito.any(ClaimBn.class), Mockito.anyLong())).thenReturn(false);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.checkIfDuplicateClaimRaised(bnWrapper, userDetailsBn);
		} catch (Exception e) {
			fail("####### testCheckIfDuplicateClaimRaisedForNonHSA_WhenNotSubmitted2() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBOWhenNotHSA() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());

			ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
			approvedClaimDetailsBn.setPayeeId(0);
			when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOnlineClaimTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOtherDistributionTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			when(cardMgmtDAO.getCardBalanceForHSA(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(200d);
			TransactionDTO claimDTO = getClaimDTOForClaim();
			claimDTO.setApprovedAuthAmount("50");
			claimDTO.setClaimStatus("WaitingAuth");
			when(cardMgmtBO.submitClmToVendor(Mockito.any(Connection.class), Mockito.any(ApprovedClaimDetailsBn.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean())).thenReturn(claimDTO);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).splitClaim(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.anyDouble(), Mockito.anyDouble(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimStatus(Mockito.any(Connection.class),
					Mockito.anyInt(), Mockito.anyString());

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
			clmBn.add(claimBn1);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBOWhenNotHSA() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBOWhenNotHSAWithDuplicateClaims() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO)
					.delReferenceForDupOnlineClaim(Mockito.any(Connection.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());

			ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
			approvedClaimDetailsBn.setPayeeId(0);
			when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOnlineClaimTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOtherDistributionTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			when(cardMgmtDAO.getCardBalanceForHSA(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(200d);
			TransactionDTO claimDTO = getClaimDTOForClaim();
			claimDTO.setApprovedAuthAmount("50");
			claimDTO.setClaimStatus("WaitingAuth");
			when(cardMgmtBO.submitClmToVendor(Mockito.any(Connection.class), Mockito.any(ApprovedClaimDetailsBn.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean())).thenReturn(claimDTO);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).splitClaim(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.anyDouble(), Mockito.anyDouble(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimStatus(Mockito.any(Connection.class),
					Mockito.anyInt(), Mockito.anyString());

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
			ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
			claimBn2.setRefNo("1111");
			claimBn2.setNote("Note");
			clmBn.add(claimBn1);
			clmBn.add(claimBn2);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBOWhenNotHSAWithDuplicateClaims() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBOWhenDebitCardInactive() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());

			ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
			approvedClaimDetailsBn.setPayeeId(0);
			when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(true);

			when(cardMgmtDAO.getEEDebitCardVendorName(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn("TSYS");
			when(mockAccountDetailsDAO.getAccountAttributesByActpcd(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString(), Mockito.anyString())).thenReturn("Yes");
			when(cardMgmtDAO.isDebitCardActiveForElection(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn(false);
			when(mockAccountDetailsDAO.isAchActive(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("Yes");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOnlineClaimTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOtherDistributionTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			when(cardMgmtDAO.getCardBalanceForHSA(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(200d);
			TransactionDTO claimDTO = getClaimDTOForBalOverride();
			when(cardMgmtBO.submitTxnThruWS(Mockito.any(Connection.class), Mockito.any(CardGenericInputDTO.class),
					Mockito.any(TransactionDTO.class))).thenReturn(claimDTO);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).splitClaim(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.anyDouble(), Mockito.anyDouble(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimStatus(Mockito.any(Connection.class),
					Mockito.anyInt(), Mockito.anyString());

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
			ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
			claimBn2.setClaimAmount("100");
			clmBn.add(claimBn1);
			clmBn.add(claimBn2);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBOWhenDebitCardInactive() ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBOWithClaimNote() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());

			ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
			approvedClaimDetailsBn.setPayeeId(0);
			when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOnlineClaimTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOtherDistributionTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			when(cardMgmtDAO.getCardBalanceForHSA(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(200d);
			TransactionDTO claimDTO = getClaimDTOForBalOverride();
			claimDTO.setApprovedAuthAmount("100");
			when(cardMgmtBO.submitClmToVendor(Mockito.any(Connection.class), Mockito.any(ApprovedClaimDetailsBn.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyBoolean())).thenReturn(claimDTO);

			PowerMockito.doNothing().when(mockOnlineClaimDAO).splitClaim(Mockito.any(Connection.class),
					Mockito.anyString(), Mockito.anyDouble(), Mockito.anyDouble(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimStatus(Mockito.any(Connection.class),
					Mockito.anyInt(), Mockito.anyString());

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
			claimBn1.setNote("~Please approve the claim");
			ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
			claimBn2.setClaimAmount("100");
			claimBn2.setNote("~Please approve the claim~Claim is for test purpose");
			clmBn.add(claimBn1);
			clmBn.add(claimBn2);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBOWithClaimNote() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@SuppressWarnings("unchecked")
	@Test(expected = com.acclaris.common.exceptions.SystemException.class)
	public void testSubmitClaimBOWhenNoImagesUploaded()
			throws SystemException, SQLException, BusinessLogicException, ServiceUnavailableException {
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
		when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
				.thenReturn(getBalanceBn(200d));
		when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
		when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
				Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
				Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
		PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
				Mockito.anyString());

		ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
		approvedClaimDetailsBn.setClaimID(0);
		when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
				Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);

		PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
				Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
		when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

		List<ImageItemDTO> imageItemsList = null;
		when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
				Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
						.thenReturn(imageItemsList);

		when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
				.thenReturn("/thumbnailPath");

		PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
				Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

		List<ClaimBn> clmBn = new ArrayList<>();
		ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
		claimBn1.setNote("~Please approve the claim");
		ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
		claimBn2.setClaimAmount("100");
		claimBn2.setNote("~Please approve the claim~Claim is for test purpose");
		clmBn.add(claimBn1);
		clmBn.add(claimBn2);

		UserDetailsBn userDetailsBn = getCommonUserDetails();
		mockClaimBO.submitClaim(userDetailsBn, clmBn);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testSubmitClaimBOWithClaimNoteWhenErrorReturned()
			throws SystemException, SQLException, BusinessLogicException, ServiceUnavailableException {
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
		when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
				.thenReturn(getBalanceBn(200d));
		when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
		when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
				Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
				Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Error~Failed to create~");

		List<ClaimBn> clmBn = new ArrayList<>();
		ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission();
		claimBn1.setNote("~Please approve the claim");
		ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission();
		claimBn2.setClaimAmount("100");
		claimBn2.setNote("~Please approve the claim~Claim is for test purpose");
		clmBn.add(claimBn1);
		clmBn.add(claimBn2);

		UserDetailsBn userDetailsBn = getCommonUserDetails();
		mockClaimBO.submitClaim(userDetailsBn, clmBn);
	}

	@SuppressWarnings("unchecked")
	@Test
	public void testSubmitClaimBO_PayABill() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			PowerMockito.when(DatabaseUtils.getOracleConnection(Mockito.any(Connection.class))).thenReturn(oracleConn);
			when(balanceUtil.getCashBalance(Mockito.any(CashBalanceDTO.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn(getBalanceBn(200d));
			when(mockOnlineClaimDAO.createClaimsBatch(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString())).thenReturn(12345);
			when(mockOnlineClaimDAO.createClaim(Mockito.any(OracleConnection.class), Mockito.any(ClaimBn.class),
					Mockito.any(AccountBn.class), Mockito.any(UserDetailsBn.class), Mockito.anyLong(),
					Mockito.any(ClaimNoteDTO.class), Mockito.anyString())).thenReturn("Ok~Success~12345");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateElectionTotal(Mockito.any(Connection.class),
					Mockito.anyString());

			ApprovedClaimDetailsBn approvedClaimDetailsBn = getApprovedClaimDetails();
			when(mockOnlineClaimDAO.getClaimByIDAndMultipleStatus(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong())).thenReturn(approvedClaimDetailsBn);
			PowerMockito.when(CommonAccountDAO.isHSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(true);

			when(cardMgmtDAO.getEEDebitCardVendorName(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn("TSYS");

			when(mockAccountDetailsDAO.getAccountAttributesByActpcd(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString(), Mockito.anyString())).thenReturn("Yes");

			when(cardMgmtDAO.isDebitCardActiveForElection(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn(true);
			when(mockAccountDetailsDAO.isAchActive(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("Yes");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOnlineClaimTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).createOtherDistributionTxn(Mockito.any(Connection.class),
					Mockito.any(TransactionDtlsBn.class), Mockito.anyString());
			when(cardMgmtDAO.getCardBalanceForHSA(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(200d);
			TransactionDTO claimDTO = getClaimDTOForBalOverride();
			when(cardMgmtBO.submitTxnThruWS(Mockito.any(Connection.class), Mockito.any(CardGenericInputDTO.class),
					Mockito.any(TransactionDTO.class))).thenReturn(claimDTO);

			PowerMockito.doNothing().when(receiptDetailsDAO).updateReceiptDetailsWhenClaimSubmitted(
					Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString());
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("EXCP_RC_NC");

			List<ImageItemDTO> imageItemsList = new ArrayList<>();
			ImageItemDTO imageItem = new ImageItemDTO();
			imageItem.setId(1);
			imageItem.setExpImageId(1001);
			imageItem.setImageFormat("JPEG");
			imageItem.setImagePath("/");
			imageItem.setImageSize(200L);
			imageItem.setOriginalFileName("TestFile1");
			imageItem.setUploadedOn("06/24/2018");
			imageItem.setStatus("Indexed");
			imageItem.setNoOfPages(1);
			imageItem.setTransactionId("12345");
			imageItem.setEeId("5962526");
			imageItem.setUserName("XYZ");
			imageItem.setNotifyEE("Yes");
			imageItem.setWrkGrpType("EXCP_RC_NC");
			imageItemsList.add(imageItem);
			when(receiptDetailsDAO.getReceiptsByItemID(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn(imageItemsList);

			when(receiptDetailsDAO.getExpImageThumbnailPath(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("/thumbnailPath");

			PowerMockito.doNothing().when(mockOnlineClaimDAO).uploadClaimsImage(Mockito.any(Connection.class),
					Mockito.anyList(), Mockito.any(ClaimImageFileDTO.class));

			List<ClaimBn> clmBn = new ArrayList<>();
			ClaimBn claimBn1 = getClaimBnBeforeClaimSubmission_PayABill();
			claimBn1.setIsReceiptRequired("No");
			claimBn1.setNote("~Please approve the claim");
			ClaimBn claimBn2 = getClaimBnBeforeClaimSubmission_PayABill();
			claimBn2.setClaimAmount("100");
			claimBn2.setIsReceiptRequired("");
			claimBn2.setNote("~Please approve the claim~Claim is for test purpose");
			clmBn.add(claimBn1);
			clmBn.add(claimBn2);

			UserDetailsBn userDetailsBn = getCommonUserDetails();
			mockClaimBO.submitClaim(userDetailsBn, clmBn);
		} catch (Exception e) {
			fail("####### testSubmitClaimBO_PayABill() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	////////////// Test methods related to submitAppeal ---------- begins
	@Test
	public void testValidateAppealDetailsForAppealTextMoreThan500Char() {
		try {
			AppealDTO appealDTO = new AppealDTO();
			String message = String.join("", Collections.nCopies(501, "x"));
			appealDTO.setMessage(message);
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(23710294);

			Whitebox.invokeMethod(mockClaimBO, "validateAppealDetails", appealDTO);

		} catch (BusinessLogicException e) {
			List<ErrorBn> errorList = e.getErrorBn().getErrorLists();
			assertTrue("testValidateAppealDetailsForAppealTextMoreThan500Char 1", !errorList.isEmpty());

			assertTrue("testValidateAppealDetailsForAppealTextMoreThan500Char 2",
					PortalError.APPEAL_TEXT_LENGTH_INCORRECT.getMessage()
							.equalsIgnoreCase(errorList.get(0).getMessage()));

			assertTrue("testValidateAppealDetailsForAppealTextMoreThan500Char 3",
					PortalError.APPEAL_TEXT_LENGTH_INCORRECT.getCode() == errorList.get(0).getCode());
		} catch (Exception e) {
			fail("### testValidateAppealDetails ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testValidateAppealDetailsForClaimID() {
		try {
			AppealDTO appealDTO = new AppealDTO();
			String message = String.join("", Collections.nCopies(420, "x"));
			appealDTO.setMessage(message);
			appealDTO.setClmbtId(23710294);

			Whitebox.invokeMethod(mockClaimBO, "validateAppealDetails", appealDTO);

		} catch (BusinessLogicException e) {
			List<ErrorBn> errorList = e.getErrorBn().getErrorLists();
			assertTrue("testValidateAppealDetailsForClaimID 1", !errorList.isEmpty());

			assertTrue("testValidateAppealDetailsForClaimID 2",
					PortalError.CLAIM_ID_NOT_PROVIDED.getMessage().equalsIgnoreCase(errorList.get(0).getMessage()));

			assertTrue("testValidateAppealDetailsForClaimID 3",
					PortalError.CLAIM_ID_NOT_PROVIDED.getCode() == errorList.get(0).getCode());
		} catch (Exception e) {
			fail("### testValidateAppealDetails ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testValidateAppealDetailsForClaimBatchID() {
		try {
			AppealDTO appealDTO = new AppealDTO();
			String message = String.join("", Collections.nCopies(420, "x"));
			appealDTO.setMessage(message);
			appealDTO.setClaimId(118965349);

			Whitebox.invokeMethod(mockClaimBO, "validateAppealDetails", appealDTO);

		} catch (BusinessLogicException e) {
			List<ErrorBn> errorList = e.getErrorBn().getErrorLists();
			assertTrue("testValidateAppealDetailsForClaimBatchID 1", !errorList.isEmpty());

			assertTrue("testValidateAppealDetailsForClaimBatchID 2", PortalError.CLAIM_BATCH_ID_NOT_PROVIDED
					.getMessage().equalsIgnoreCase(errorList.get(0).getMessage()));

			assertTrue("testValidateAppealDetailsForClaimBatchID 3",
					PortalError.CLAIM_BATCH_ID_NOT_PROVIDED.getCode() == errorList.get(0).getCode());
		} catch (Exception e) {
			fail("### testValidateAppealDetails ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testSubmitAppealForAllDetailsWithAppealAttachements() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
			AppealDTO appealDTO = new AppealDTO();
			appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(14078050);

			List<Long> appealAttchmentsIdList = new ArrayList<Long>();
			appealAttchmentsIdList.add(700L);
			appealAttchmentsIdList.add(701L);
			appealAttchmentsIdList.add(702L);
			appealAttchmentsIdList.add(703L);
			appealDTO.setExpImageIdList(appealAttchmentsIdList);

			UserDetailsBn userDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(14078050L);
			when(ValidationUtil.validateLength(Mockito.anyString(), Mockito.anyInt())).thenReturn(true);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					Mockito.any(ImageUploadInputDto.class));
			when(mockOnlineClaimDAO.getWrkGroupForClmBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("workgroup");
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(false);
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("tempPath");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(InputStream.class),
					Mockito.anyString());
			errorBn = Mockito.mock(ErrorBn.class);
			PowerMockito.whenNew(ErrorBn.class).withAnyArguments().thenReturn(errorBn);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName");
			ImageBn imageBn = new ImageBn();
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ValidationUtil.isNull(errorBn.getErrorLists())).thenReturn(true);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("thumbnailPath");
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).submitAppeal(Mockito.any(Connection.class),
					Mockito.any(AppealDTO.class), Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(conn).commit();
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");
			mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 1L, appealDTO);
		} catch (Exception e) {
			fail("### testSubmitAppealForAllDetailsWithAppealAttachements ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testProcessSubmitAppeallDocumentsSQLException() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
			AppealDTO appealDTO = new AppealDTO();
			appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(14078050);

			List<Long> appealAttchmentsIdList = new ArrayList<Long>();
			appealAttchmentsIdList.add(700L);
			appealAttchmentsIdList.add(701L);
			appealAttchmentsIdList.add(702L);
			appealAttchmentsIdList.add(703L);
			appealDTO.setExpImageIdList(appealAttchmentsIdList);

			UserDetailsBn userDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(14078050L);
			when(ValidationUtil.validateLength(Mockito.anyString(), Mockito.anyInt())).thenReturn(true);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					Mockito.any(ImageUploadInputDto.class));
			when(mockOnlineClaimDAO.getWrkGroupForClmBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("workgroup");
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(false);
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			PowerMockito.doThrow(new SQLException()).when(ImageUploadUtil.class, "getTempLocationPath",
					Mockito.anyString(), Mockito.any(Connection.class));
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");
			mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 1L, appealDTO);
		} catch (BusinessLogicException e) {
			assertTrue(true);
		} catch (Exception e) {
			fail("### testProcessSubmitAppeallDocumentsSQLException  ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testSubmitAppealBusinessLogicException() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
			AppealDTO appealDTO = new AppealDTO();
			appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(14078050);

			List<Long> appealAttchmentsIdList = new ArrayList<Long>();
			appealAttchmentsIdList.add(700L);
			appealAttchmentsIdList.add(701L);
			appealAttchmentsIdList.add(702L);
			appealAttchmentsIdList.add(703L);
			appealDTO.setExpImageIdList(appealAttchmentsIdList);

			UserDetailsBn userDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(14078050L);
			when(ValidationUtil.validateLength(Mockito.anyString(), Mockito.anyInt())).thenReturn(true);
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					Mockito.any(ImageUploadInputDto.class));
			when(mockOnlineClaimDAO.getWrkGroupForClmBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("");
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(true);

			mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 1L, appealDTO);
		} catch (BusinessLogicException e) {
			assertTrue(true);
		} catch (Exception e) {
			fail("### testSubmitAppealBusinessLogicException ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testSubmitAppealZeroClaimImgId() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
			AppealDTO appealDTO = new AppealDTO();
			appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(14078050);

			List<Long> appealAttchmentsIdList = new ArrayList<Long>();
			appealAttchmentsIdList.add(700L);
			appealAttchmentsIdList.add(701L);
			appealAttchmentsIdList.add(702L);
			appealAttchmentsIdList.add(703L);
			appealDTO.setExpImageIdList(appealAttchmentsIdList);

			UserDetailsBn userDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(14078050L);
			when(ValidationUtil.validateLength(Mockito.anyString(), Mockito.anyInt())).thenReturn(true);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					Mockito.any(ImageUploadInputDto.class));
			when(mockOnlineClaimDAO.getWrkGroupForClmBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("workgroup");
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(false);
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("tempPath");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(InputStream.class),
					Mockito.anyString());
			errorBn = Mockito.mock(ErrorBn.class);
			PowerMockito.whenNew(ErrorBn.class).withAnyArguments().thenReturn(errorBn);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName");
			ImageBn imageBn = new ImageBn();
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ValidationUtil.isNull(errorBn.getErrorLists())).thenReturn(true);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("thumbnailPath");
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(0L);
			when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenReturn(1L);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).saveClaimImageWithClaimBtchDetails(Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.any(Connection.class));
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).submitAppeal(Mockito.any(Connection.class),
					Mockito.any(AppealDTO.class), Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(conn).commit();
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");
			mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 0L, appealDTO);
			assertTrue(true);
		} catch (Exception e) {
			fail("### testSubmitAppealZeroClaimImgId ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testSubmitAppealZeroClaimImgIdUpdateClaimsImage() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
			AppealDTO appealDTO = new AppealDTO();
			appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(14078050);

			List<Long> appealAttchmentsIdList = new ArrayList<Long>();
			appealAttchmentsIdList.add(700L);
			appealAttchmentsIdList.add(701L);
			appealAttchmentsIdList.add(702L);
			appealAttchmentsIdList.add(703L);
			appealDTO.setExpImageIdList(appealAttchmentsIdList);

			UserDetailsBn userDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(14078050L);
			when(ValidationUtil.validateLength(Mockito.anyString(), Mockito.anyInt())).thenReturn(true);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					Mockito.any(ImageUploadInputDto.class));
			when(mockOnlineClaimDAO.getWrkGroupForClmBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("workgroup");
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(false);
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("tempPath");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(InputStream.class),
					Mockito.anyString());
			errorBn = Mockito.mock(ErrorBn.class);
			PowerMockito.whenNew(ErrorBn.class).withAnyArguments().thenReturn(errorBn);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName");
			ImageBn imageBn = new ImageBn();
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ValidationUtil.isNull(errorBn.getErrorLists())).thenReturn(true);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("thumbnailPath");
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(1L);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimsImageWithoutThumbnailPath(Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(),
					Mockito.any(Connection.class));
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");
			PowerMockito.doNothing().when(mockOnlineClaimDAO).submitAppeal(Mockito.any(Connection.class),
					Mockito.any(AppealDTO.class), Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(conn).commit();

			mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 0L, appealDTO);
			assertTrue(true);
		} catch (Exception e) {
			fail("### testSubmitAppealZeroClaimImgIdUpdateClaimsImage ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test(expected = SystemException.class)
	public void testSubmitAppealForSQLException() throws Exception {
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
		AppealDTO appealDTO = new AppealDTO();
		appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
		appealDTO.setClaimId(118965349);
		appealDTO.setClmbtId(14078050);

		UserDetailsBn userDtlsBn = getCommonUserDetails();

		PowerMockito.doThrow(new SQLException()).when(mockOnlineClaimDAO)
				.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong());
		when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
				.thenReturn(13421414l);
		when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
				.thenReturn("OLNL_IMG_UPLOAD_NC");
		mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 1L, appealDTO);
	}

	@Test
	public void testSubmitAppealForUpdateWithoutAttachments() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ValidationUtil.class);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.doNothing().when(conn).setAutoCommit(Mockito.anyBoolean());
			AppealDTO appealDTO = new AppealDTO();
			appealDTO.setMessage("This was not for office visits but for medications. Attachments provided.");
			appealDTO.setClaimId(118965349);
			appealDTO.setClmbtId(14078050);

			UserDetailsBn userDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(14078050L);
			when(ValidationUtil.validateLength(Mockito.anyString(), Mockito.anyInt())).thenReturn(true);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					Mockito.any(ImageUploadInputDto.class));
			when(mockOnlineClaimDAO.getWrkGroupForClmBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("workgroup");
			when(ValidationUtil.isNull(Mockito.anyString())).thenReturn(false);
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("tempPath");
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(InputStream.class),
					Mockito.anyString());
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName");
			ImageBn imageBn = new ImageBn();
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ValidationUtil.isNull(Mockito.anyList())).thenReturn(true);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("thumbnailPath");
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			PowerMockito.doNothing().when(mockOnlineClaimDAO).submitAppeal(Mockito.any(Connection.class),
					Mockito.any(AppealDTO.class), Mockito.any(UserDetailsBn.class));
			PowerMockito.doNothing().when(conn).commit();

			mockClaimBO.submitAppeal(imageDtoList, userDtlsBn, 1L, appealDTO);
		} catch (Exception e) {
			fail("### testSubmitAppealForUpdateWithoutAttachments ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	////////////// Test methods related to submitAppeal() ---------- ends

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimWhenBatchIdisNull() {
		try {

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(0L);
			boolean result = mockClaimBO.uploadUnusedReceiptsForSubmittedClaim("123,124", userDetailsBn, "117024747",
					"Online");
			assertFalse("testUploadUnusedReceiptsForSubmittedClaimWhenBatchIdisNull success", result);
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimWhenBatchIdisNull failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimWhenExpenseImageIdsNull() {
		try {
			List<ImageDTO> imageDTOs = new ArrayList<>();
			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImageName("testImage.jpg");
			imageDTOs.add(imageDTO);

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(117024747L);
			boolean result = mockClaimBO.uploadUnusedReceiptsForSubmittedClaim(null, userDetailsBn, "117024747",
					"Online");
			assertFalse("testUploadUnusedReceiptsForSubmittedClaimWhenExpenseImageIdsNull success ", result);
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimWhenExpenseImageIdsNull failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimHasExpenseImageIdsClaimImageNotPresent() {
		try {
			List<ImageItemDTO> imageItemDTOs = new ArrayList<>();
			ImageItemDTO imageDTO = new ImageItemDTO();
			imageDTO.setImageFormat("JPG");
			imageDTO.setOriginalFileName("TEST.JPG");
			imageDTO.setImageSize(1234l);
			imageDTO.setImagePath("c:\test");
			imageDTO.setNoOfPages(1);
			imageItemDTOs.add(imageDTO);

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(1L);
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");

			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));

			when(receiptDetailsDAO.getLatestThumbnailImagePath(Mockito.any(Connection.class), Mockito.any()))
					.thenReturn("TEST");
			when(receiptDetailsDAO.getReceiptsExpImageDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(imageItemDTOs);

			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(0l);

			when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenReturn(75875849l);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).insertIntoClaimImage(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));

			PowerMockito.doNothing().when(receiptDetailsDAO).updateMultipleReceiptsDetails(
					Mockito.any(Connection.class), Mockito.any(), Mockito.anyLong(), Mockito.anyString());

			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");

			when(mockOnlineClaimDAO.isEmailSentForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("Y");
			when(mockOnlineClaimDAO.sendNotification(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn("");
			PowerMockito.doNothing().when(SendMailDAO.class, "setUserSession", Mockito.any(Connection.class),
					Mockito.anyString());

			boolean result = mockClaimBO.uploadUnusedReceiptsForSubmittedClaim("123,124", userDetailsBn, "117024747",
					"Online");
			assertTrue("testUploadUnusedReceiptsForSubmittedClaimHasExpenseImageIds success ", result);
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimHasExpenseImageIds failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimHasExpenseImageIdsClaimImageIdAlreadyPresent() {
		try {
			List<ImageItemDTO> imageItemDTOs = new ArrayList<>();
			ImageItemDTO imageDTO = new ImageItemDTO();
			imageDTO.setImageFormat("JPG");
			imageDTO.setOriginalFileName("TEST.JPG");
			imageDTO.setImageSize(1234l);
			imageDTO.setImagePath("c:\test");
			imageDTO.setNoOfPages(1);
			imageItemDTOs.add(imageDTO);

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(1L);
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");

			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));

			when(receiptDetailsDAO.getLatestThumbnailImagePath(Mockito.any(Connection.class), Mockito.any()))
					.thenReturn("TEST");

			when(receiptDetailsDAO.getReceiptsExpImageDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(imageItemDTOs);

			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(13421414l);
			when(imageDAO.getReuploadWorkgroup(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString()))
					.thenReturn("OLNL_IMG_UPLOAD_NC");

			when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenReturn(75875849l);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimsImageWithoutThumbnailPath(Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(),
					Mockito.any(Connection.class));

			PowerMockito.doNothing().when(receiptDetailsDAO).updateMultipleReceiptsDetails(
					Mockito.any(Connection.class), Mockito.any(), Mockito.anyLong(), Mockito.anyString());

			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");

			when(mockOnlineClaimDAO.isEmailSentForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("Y");
			when(mockOnlineClaimDAO.sendNotification(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn("");
			PowerMockito.doNothing().when(SendMailDAO.class, "setUserSession", Mockito.any(Connection.class),
					Mockito.anyString());

			boolean result = mockClaimBO.uploadUnusedReceiptsForSubmittedClaim("123,124", userDetailsBn, "117024747",
					"Online");
			assertTrue("testUploadUnusedReceiptsForSubmittedClaimHasExpenseImageIds success ", result);
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimHasExpenseImageIds failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimThumbnailPathIsNull() {
		try {
			List<ImageItemDTO> imageItemDTOs = new ArrayList<>();
			ImageItemDTO imageDTO = new ImageItemDTO();
			imageDTO.setImageFormat("JPG");
			imageDTO.setOriginalFileName("TEST.JPG");
			imageDTO.setImageSize(1234l);
			imageDTO.setImagePath("c:\test");
			imageDTO.setNoOfPages(1);
			imageItemDTOs.add(imageDTO);

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(1L);
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");

			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));

			when(receiptDetailsDAO.getLatestThumbnailImagePath(Mockito.any(Connection.class), Mockito.any()))
					.thenReturn(null);

			when(receiptDetailsDAO.getReceiptsExpImageDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(imageItemDTOs);

			PowerMockito.when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("");

			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(0l);

			when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenReturn(75875849l);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).insertIntoClaimImage(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));

			PowerMockito.doNothing().when(receiptDetailsDAO).updateMultipleReceiptsDetails(
					Mockito.any(Connection.class), Mockito.any(), Mockito.anyLong(), Mockito.anyString());

			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");

			when(mockOnlineClaimDAO.isEmailSentForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("Y");
			when(mockOnlineClaimDAO.sendNotification(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn("");
			PowerMockito.doNothing().when(SendMailDAO.class, "setUserSession", Mockito.any(Connection.class),
					Mockito.anyString());

			boolean result = mockClaimBO.uploadUnusedReceiptsForSubmittedClaim("123,124", userDetailsBn, "117024747",
					"Online");
			assertTrue(result);
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimThumbnailPathIsNull failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimSystemException() {
		try {
			List<ImageItemDTO> imageItemDTOs = new ArrayList<>();
			ImageItemDTO imageDTO = new ImageItemDTO();
			imageDTO.setImageFormat("JPG");
			imageDTO.setOriginalFileName("TEST.JPG");
			imageDTO.setImageSize(1234l);
			imageDTO.setImagePath("c:\test");
			imageDTO.setNoOfPages(1);
			imageItemDTOs.add(imageDTO);

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(1L);
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");

			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));

			when(receiptDetailsDAO.getLatestThumbnailImagePath(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(null);

			when(receiptDetailsDAO.getReceiptsExpImageDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(imageItemDTOs);

			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(0l);

			when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenThrow(new SQLException());

			mockClaimBO.uploadUnusedReceiptsForSubmittedClaim("123,124", userDetailsBn, "117024747", "Online");

		} catch (SystemException e) {
			assertTrue("testUploadUnusedReceiptsForSubmittedClaimSystemException success" + e.getErrorBn().getMessage(),

					true);
			assertEquals(PortalError.COMMON_ERROR.getMessage(), e.getErrorBn().getMessage());
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimSystemException faild with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadUnusedReceiptsForSubmittedClaimBusinessException() {
		try {
			List<ImageItemDTO> imageItemDTOs = new ArrayList<>();
			ImageItemDTO imageDTO = new ImageItemDTO();
			imageDTO.setImageFormat("JPG");
			imageDTO.setOriginalFileName("TEST.JPG");
			imageDTO.setImageSize(1234l);
			imageDTO.setImagePath("c:\test");
			imageDTO.setNoOfPages(1);
			imageItemDTOs.add(imageDTO);

			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(1L);
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(null);

			mockClaimBO.uploadUnusedReceiptsForSubmittedClaim("123,124", userDetailsBn, "117024747", "Online");
		} catch (BusinessLogicException e) {
			assertTrue("testUploadUnusedReceiptsForSubmittedClaimBusinessException success", true);
			assertEquals(PortalError.DEFAULT_WORK_GROUP_NOT_FOUND.getMessage(), e.getErrorBn().getMessage());
		} catch (Exception e) {
			fail("testUploadUnusedReceiptsForSubmittedClaimBusinessException faild with following error "
					+ getStackTrace(e));
		}
	}

	private UserDetailsBn getCommonUserDetails() {
		UserDetailsBn userDtlBn = new UserDetailsBn();
		userDtlBn.setId(10574588L);
		userDtlBn.setEeID(5962526);
		userDtlBn.setUserType("EE");
		userDtlBn.setName("HELEN E CARTER");
		userDtlBn.setErID(1001274L);
		userDtlBn.setAdmnID(1L);
		userDtlBn.setErID(1L);
		userDtlBn.setJRAAccount(false);
		return userDtlBn;
	}

	private UserDetailsBn getJRAUserDetails() {
		UserDetailsBn userDtlBn = new UserDetailsBn();
		userDtlBn.setId(10574588L);
		userDtlBn.setEeID(5962526);
		userDtlBn.setUserType("EE");
		userDtlBn.setName("HELEN E CARTER");
		userDtlBn.setErID(1001274L);
		userDtlBn.setAdmnID(1L);
		userDtlBn.setErID(1L);
		userDtlBn.setJRAAccount(true);
		return userDtlBn;
	}

	private ClaimBnWrapper getClaimBnWrapper() {
		ClaimBnWrapper claimBnWrapper = new ClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("+.75");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("No");
		categoryDTO.setIsPriorYearAcctActive("No");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);

		claimBnWrapper.setClaimBn(claimBn);
		return claimBnWrapper;
	}

	private ClaimBnWrapper getClaimBnWrapperForDuplicateCheck() {
		List<AccountBn> accbnList;
		AccountBn accountBn;
		ClaimBnWrapper claimBnWrapper = new ClaimBnWrapper();
		List<ClaimBn> claimBns = new ArrayList<>();

		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("50");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("No");
		categoryDTO.setIsPriorYearAcctActive("No");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);
		claimBn.setDummyClaimSeqNo("1");

		accbnList = new ArrayList<>();
		accountBn = new AccountBn();
		accountBn.setAccountNO("235");
		accountBn.setAccountTypeCD("HCRA");
		accountBn.setElctID("14078043");
		accountBn.setServiceBegins("01/05/2018");
		accountBn.setCategory("Medical");
		accountBn.setNeedLeastBalance(true);
		accbnList.add(accountBn);
		claimBn.setAccbnList(accbnList);
		claimBns.add(claimBn);

		ClaimBn claimBn1 = new ClaimBn();
		claimBn1.setPriorYearCheckStatus(false);
		claimBn1.setServiceBegins("01/05/2018");
		claimBn1.setServiceEnds(SERVICE_ENDS);
		claimBn1.setClaimAmount("50");
		CategoryDTO categoryDTO1 = new CategoryDTO();
		categoryDTO1.setCategory("Medical");
		categoryDTO1.setClaimtype("AMBULANCE");
		categoryDTO1.setIsPriorYear("No");
		categoryDTO1.setIsPriorYearAcctActive("No");
		categoryDTO1.setWillAllowLimited("Yes");
		claimBn1.setCategoryDTO(categoryDTO1);
		claimBn1.setDummyClaimSeqNo("2");

		accbnList = new ArrayList<>();
		accountBn = new AccountBn();
		accountBn.setAccountNO("235");
		accountBn.setAccountTypeCD("HCRA");
		accountBn.setElctID("14078043");
		accountBn.setServiceBegins("01/05/2018");
		accountBn.setCategory("Medical");
		accountBn.setNeedLeastBalance(true);
		accbnList.add(accountBn);
		claimBn1.setAccbnList(accbnList);
		claimBns.add(claimBn1);

		claimBnWrapper.setClaimBnList(claimBns);
		claimBnWrapper.setCurrentSeqNo("2");

		return claimBnWrapper;
	}

	private ClaimBnWrapper getClaimBnWrapperForDuplicateCheck_DCRA() {
		List<AccountBn> accbnList;
		AccountBn accountBn;
		ClaimBnWrapper claimBnWrapper = new ClaimBnWrapper();
		List<ClaimBn> claimBns = new ArrayList<>();

		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("50");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Adult Care");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("No");
		categoryDTO.setIsPriorYearAcctActive("No");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);
		claimBn.setDummyClaimSeqNo("1");
		claimBn.setDependentID("1");

		accbnList = new ArrayList<>();
		accountBn = new AccountBn();
		accountBn.setAccountNO("235");
		accountBn.setAccountTypeCD("DCRA");
		accountBn.setElctID("14078043");
		accountBn.setServiceBegins("01/05/2018");
		accountBn.setCategory("Medical");
		accountBn.setNeedLeastBalance(true);
		accbnList.add(accountBn);
		claimBn.setAccbnList(accbnList);
		claimBns.add(claimBn);

		ClaimBn claimBn1 = new ClaimBn();
		claimBn1.setPriorYearCheckStatus(false);
		claimBn1.setServiceBegins("01/05/2018");
		claimBn1.setServiceEnds(SERVICE_ENDS);
		claimBn1.setClaimAmount("50");
		CategoryDTO categoryDTO1 = new CategoryDTO();
		categoryDTO1.setCategory("Medical");
		categoryDTO1.setClaimtype("AMBULANCE");
		categoryDTO1.setIsPriorYear("No");
		categoryDTO1.setIsPriorYearAcctActive("No");
		categoryDTO1.setWillAllowLimited("Yes");
		claimBn1.setCategoryDTO(categoryDTO1);
		claimBn1.setDummyClaimSeqNo("2");
		claimBn1.setDependentID("2");

		accbnList = new ArrayList<>();
		accountBn = new AccountBn();
		accountBn.setAccountNO("235");
		accountBn.setAccountTypeCD("HCRA");
		accountBn.setElctID("14078043");
		accountBn.setServiceBegins("01/05/2018");
		accountBn.setCategory("Medical");
		accountBn.setNeedLeastBalance(true);
		accbnList.add(accountBn);
		claimBn1.setAccbnList(accbnList);
		claimBns.add(claimBn1);

		claimBnWrapper.setClaimBnList(claimBns);
		claimBnWrapper.setCurrentSeqNo("2");

		return claimBnWrapper;
	}

	private ClaimBnWrapper getClaimBnWrapperForDuplicateCheck_JRA() {
		ClaimBnWrapper claimBnWrapper = new ClaimBnWrapper();
		List<ClaimBn> claimBns = new ArrayList<>();

		ClaimBn claimBn = new ClaimBn();
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("50");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("Premium");
		categoryDTO.setSelectedOccurrence(ClaimTypes.ONETIME.getValue());
		claimBn.setCategoryDTO(categoryDTO);
		claimBn.setDummyClaimSeqNo("1");
		claimBn.setDependentID("1");
		claimBns.add(claimBn);

		ClaimBn claimBn1 = new ClaimBn();
		claimBn1.setServiceBegins("01/05/2018");
		claimBn1.setServiceEnds(SERVICE_ENDS);
		claimBn1.setClaimAmount("50");
		CategoryDTO categoryDTO1 = new CategoryDTO();
		categoryDTO1.setCategory("Medical");
		categoryDTO1.setClaimtype("Premium");
		claimBn1.setCategoryDTO(categoryDTO1);
		claimBn1.setDummyClaimSeqNo("2");
		claimBn1.setDependentID("2");
		claimBns.add(claimBn1);

		claimBnWrapper.setClaimBnList(claimBns);
		claimBnWrapper.setCurrentSeqNo("2");
		return claimBnWrapper;
	}

	private ClaimBn getClaimBn() {
		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("+.75");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("No");
		categoryDTO.setIsPriorYearAcctActive("No");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);
		return claimBn;
	}

	private ClaimBnWrapper getClaimBnWrapperWhenPriorYearSelected() {
		ClaimBnWrapper claimBnWrapper = new ClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(true);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("112.34");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("Yes");
		categoryDTO.setIsPriorYearAcctActive("Yes");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);
		return claimBnWrapper;
	}

	private ClaimBn getClaimBnBeforeClaimSubmission() {
		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("84");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("No");
		categoryDTO.setIsPriorYearAcctActive("No");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);
		claimBn.setBundleLabel("");

		AccountBn accountBn = new AccountBn();
		accountBn.setAccountNO("235");
		accountBn.setAccountTypeCD("HSA");
		accountBn.setElctID("14078043");
		accountBn.setServiceBegins("01/05/2018");
		accountBn.setCategory("Medical");
		accountBn.setNeedLeastBalance(true);
		List<AccountBn> accbnList = new ArrayList<>();
		accbnList.add(accountBn);
		claimBn.setAccbnList(accbnList);

		claimBn.setProviderID("123456");
		claimBn.setIsReceiptRequired("Yes");
		List<Long> recptIdsList = new ArrayList<>();
		recptIdsList.add(1L);
		recptIdsList.add(2L);
		claimBn.setRecptIdsList(recptIdsList);
		claimBn.setClaimId("12345");
		return claimBn;
	}

	private TransactionDTO getClaimDTOForBalOverride() {
		TransactionDTO claimDTO = new TransactionDTO();
		claimDTO.setClaimBatchType("Online");
		claimDTO.setClaimID("12345");
		claimDTO.setAdjustmentType(AdjustmentType.BAL_OVERRIDE.getValue());
		claimDTO.setClaimAmt("100");
		claimDTO.setRequestType(DbCardTrxnRequestTypes.BAL_OVERRIDE.getValue());
		return claimDTO;
	}

	private TransactionDTO getClaimDTOForClaim() {
		TransactionDTO claimDTO = new TransactionDTO();
		claimDTO.setClaimBatchType("Online");
		claimDTO.setClaimID("12345");
		claimDTO.setAdjustmentType(AdjustmentType.CLAIM.getValue());
		claimDTO.setClaimAmt("84");
		claimDTO.setRequestType(DbCardTrxnRequestTypes.CLAIM.getValue());
		claimDTO.setActpCd("HSA");
		claimDTO.setClaimStatus("Approved");
		return claimDTO;
	}

	private ClaimBn getClaimBnBeforeClaimSubmission_PayABill() {
		ClaimBn claimBn = new ClaimBn();
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("01/05/2018");
		claimBn.setServiceEnds(SERVICE_ENDS);
		claimBn.setClaimAmount("84");
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("AMBULANCE");
		categoryDTO.setIsPriorYear("No");
		categoryDTO.setIsPriorYearAcctActive("No");
		categoryDTO.setWillAllowLimited("Yes");
		claimBn.setCategoryDTO(categoryDTO);
		claimBn.setBundleLabel("");

		AccountBn accountBn = new AccountBn();
		accountBn.setAccountNO("235");
		accountBn.setAccountTypeCD("HSA");
		accountBn.setElctID("14078043");
		accountBn.setServiceBegins("01/05/2018");
		accountBn.setCategory("Medical");
		accountBn.setNeedLeastBalance(true);
		List<AccountBn> accbnList = new ArrayList<>();
		accbnList.add(accountBn);
		claimBn.setAccbnList(accbnList);

		claimBn.setProviderID("123456");
		claimBn.setPayeeId("12345");
		claimBn.setPaymentreference("Payment Reference");
		claimBn.setInvoice("XYZ123");
		claimBn.setAccount("XYZ12345");

		claimBn.setIsReceiptRequired("Yes");
		List<Long> recptIdsList = new ArrayList<>();
		recptIdsList.add(1L);
		recptIdsList.add(2L);
		claimBn.setRecptIdsList(recptIdsList);
		claimBn.setClaimId("12345");
		return claimBn;
	}

	@Test
	public void testGetPopupTextPremium() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<p class=\"mb-0 mt-4\">What is an Itemized Receipt?</p>\n\t<span>An itemized receipt provides the following information:</span>\n\t<ul class=\"mt-4\">\n\t  <li>Provider name</li>\n\t  <li>Date of service</li>\n\t  <li>Description of each service provided</li>\n\t  <li>Dollar amount of each service</li>\n\t</ul>\n\n\t<h3 class=\"mb-0 mt-4\">How can I get an \"Itemized Receipt\"?</h3>\n\t<span>If you weren't provided an itemized receipt when you left your doctor's office, here are a few ways you can go about obtaining one:</span>\n\t<div class=\"row mt-4\">\n\t\t1. Call your doctor's office and request one to be   mailed to you\n\t</div>\n\t<div class=\"row\">\n\t\t2. Go to your doctor's office and have one printed\n\t</div>");
			UserDetailsBn usrDtlsBn = getJRAUserDetails();
			String claimEntryMode = "Premium";
			when(mockOnlineClaimDAO.checkFutureClaimPeriod(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(true);

			String text = mockClaimBO.getPopupText(usrDtlsBn, claimEntryMode);
			assertNotNull(text);
		} catch (Exception e) {
			fail("####### testGetPopupText() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetPopupTextForOutOfPocket() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<p class=\"mb-0 mt-4\">What is an Itemized Receipt?</p>\n\t<span>An itemized receipt provides the following information:</span>\n\t<ul class=\"mt-4\">\n\t  <li>Provider name</li>\n\t  <li>Date of service</li>\n\t  <li>Description of each service provided</li>\n\t  <li>Dollar amount of each service</li>\n\t</ul>\n\n\t<h3 class=\"mb-0 mt-4\">How can I get an \"Itemized Receipt\"?</h3>\n\t<span>If you weren't provided an itemized receipt when you left your doctor's office, here are a few ways you can go about obtaining one:</span>\n\t<div class=\"row mt-4\">\n\t\t1. Call your doctor's office and request one to be   mailed to you\n\t</div>\n\t<div class=\"row\">\n\t\t2. Go to your doctor's office and have one printed\n\t</div>");
			UserDetailsBn usrDtlsBn = getJRAUserDetails();
			String claimEntryMode = "OutofPocket";
			when(mockOnlineClaimDAO.checkFutureClaimPeriod(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(true);

			String text = mockClaimBO.getPopupText(usrDtlsBn, claimEntryMode);
			assertNotNull(text);
		} catch (Exception e) {
			fail("####### testGetPopupText() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetPopupTextNonJRAAccount() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getCustomText(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString())).thenReturn(
							"<p class=\"mb-0 mt-4\">What is an Itemized Receipt?</p>\n\t<span>An itemized receipt provides the following information:</span>\n\t<ul class=\"mt-4\">\n\t  <li>Provider name</li>\n\t  <li>Date of service</li>\n\t  <li>Description of each service provided</li>\n\t  <li>Dollar amount of each service</li>\n\t</ul>\n\n\t<h3 class=\"mb-0 mt-4\">How can I get an \"Itemized Receipt\"?</h3>\n\t<span>If you weren't provided an itemized receipt when you left your doctor's office, here are a few ways you can go about obtaining one:</span>\n\t<div class=\"row mt-4\">\n\t\t1. Call your doctor's office and request one to be   mailed to you\n\t</div>\n\t<div class=\"row\">\n\t\t2. Go to your doctor's office and have one printed\n\t</div>");
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			String claimEntryMode = "OutofPocket";

			AccountDTO accountDTO = new AccountDTO(usrDtlsBn.getEeID());
			accountDTO.setActpcd("DCRA");
			accountDTO.setElectID("111");
			List<String> planYears = new ArrayList<>();
			planYears.add("2019");
			accountDTO.setPlanYears(planYears);
			accountDTO.setHSAEnrollmentStatus("");
			accountDTO.setSequence(1);
			List<AccountDTO> accountsList = new ArrayList<>();
			accountsList.add(accountDTO);
			Map<String, List<AccountDTO>> activeAcct = new HashMap<>();
			activeAcct.put("DCRA", accountsList);
			when(accountDetailsService.getActiveElections(Mockito.any(UserDetailsBn.class))).thenReturn(activeAcct);

			when(mockOnlineClaimDAO.checkFutureClaimPeriod(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn(true);

			String text = mockClaimBO.getPopupText(usrDtlsBn, claimEntryMode);
			assertNotNull(text);
		} catch (Exception e) {
			fail("####### testGetPopupText() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testIsEnrolledForDirectDeposit() {
		try {
			when(profileBankingInfoBO.hasUserSignedUpForDirectDeposit(Mockito.any(UserDetailsBn.class)))
					.thenReturn(true);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			boolean isDirectDepositEnabled = mockClaimBO.isEnrolledForDirectDeposit(usrDtlsBn);
			assertTrue("####### testIsEnrolledForDirectDeposit #######", isDirectDepositEnabled);
		} catch (Exception e) {
			fail("####### testIsEnrolledForDirectDeposit() ####### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetAppealHistoryOfClaimWithNoAppealData() {
		try {

			UserDetailsBn userDtlBn = new UserDetailsBn();
			userDtlBn.setId(10574588L);
			userDtlBn.setEeID(5962521);
			userDtlBn.setUserType("EE");
			userDtlBn.setName("HELEN E CARTER");
			userDtlBn.setErID(1001274L);
			userDtlBn.setAdmnID(1L);
			userDtlBn.setErID(1L);

			List<AppealDTO> appealDetailsList = new ArrayList<>();

			when(mockDatabase.getDBConnection()).thenReturn(conn);

			when(mockOnlineClaimDAO.getAppealDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(appealDetailsList);

			List<AppealDTO> appealDTOList = mockClaimBO.getAppealHistoryOfClaim(userDtlBn, 118250955);

			assertTrue("####### testGetAppealHistoryOfClaimWithNoAppealData ####### Appeal Data No Records ",
					appealDTOList.size() == 0);

		} catch (Exception e) {
			fail("####### testGetAppealHistoryOfClaimWithNoAppealData ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetAppealHistoryOfClaimWithAppealSubmitted() {
		try {

			UserDetailsBn userDtlBn = new UserDetailsBn();
			userDtlBn.setId(10574588L);
			userDtlBn.setEeID(5962522);
			userDtlBn.setUserType("EE");
			userDtlBn.setName("Ben Ten Gun");
			userDtlBn.setErID(1001274L);
			userDtlBn.setAdmnID(1L);
			userDtlBn.setErID(1L);

			List<AppealDTO> appealDetailsList = new ArrayList<>();

			AppealDTO appealclaimData = new AppealDTO();

			appealclaimData.setActionOn("03/21/2011 09:33 AM");
			appealclaimData.setMessage(
					" I have uploaded another legible receipt with this claim. [Images uploaded - HIPAA_1440755968322_78481.pdf, TC-01.2_1473334855310_78795.jpg ] ");
			appealclaimData.setClaimId(118250955);
			appealclaimData.setClmbtId(23694156);
			appealclaimData.setStatus(AppealStatus.APPEAL_SUBMITTED.getAppealStatus());

			List<ImageDTO> appealAttachmentsList = new ArrayList<>();

			ImageDTO appealImageData1 = new ImageDTO();
			appealImageData1.setClaimsImageFileId("10898838");
			appealImageData1.setImageName("hipaa_1440755968322_78481.pdf");

			ImageDTO appealImageData2 = new ImageDTO();
			appealImageData2.setClaimsImageFileId("10898842");
			appealImageData2.setImageName("tc-01.2_1473334855310_78795.jpg");

			appealAttachmentsList.add(appealImageData1);
			appealAttachmentsList.add(appealImageData2);

			appealDetailsList.add(appealclaimData);

			when(mockDatabase.getDBConnection()).thenReturn(conn);

			when(mockOnlineClaimDAO.getAttachedFileForClaimAppeal(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(appealAttachmentsList);

			when(mockOnlineClaimDAO.getAppealDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(appealDetailsList);

			List<AppealDTO> appealDTOList = mockClaimBO.getAppealHistoryOfClaim(userDtlBn,
					appealDetailsList.get(0).getClaimId());

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted get action by "
							+ appealDTOList.get(0).getActionBy(),
					"Ben Ten Gun".equalsIgnoreCase(appealDTOList.get(0).getActionBy()));
			assertTrue("####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal status is submitted ",
					AppealStatus.APPEAL_SUBMITTED.getAppealStatus().equalsIgnoreCase(appealDTOList.get(0).getStatus()));

			assertTrue("####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted claim id "
					+ appealDTOList.get(0).getClaimId(), 118250955 == appealDTOList.get(0).getClaimId());

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted attachment details size equal to two"
							+ appealDTOList.get(0).getAppealAttachmentDetails().size(),
					2 == appealDTOList.get(0).getAppealAttachmentDetails().size());

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted attachment details claims image file id 1"
							+ appealDTOList.get(0).getAppealAttachmentDetails().get(0).getClaimsImageFileId(),
					"10898838".equalsIgnoreCase(
							appealDTOList.get(0).getAppealAttachmentDetails().get(0).getClaimsImageFileId()));

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted attachment details image name 1"
							+ appealDTOList.get(0).getAppealAttachmentDetails().get(0).getImageName(),
					"hipaa_1440755968322_78481.pdf"
							.equalsIgnoreCase(appealDTOList.get(0).getAppealAttachmentDetails().get(0).getImageName()));

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted attachment details claims image file id 2"
							+ appealDTOList.get(0).getAppealAttachmentDetails().get(1).getClaimsImageFileId(),
					"10898842".equalsIgnoreCase(
							appealDTOList.get(0).getAppealAttachmentDetails().get(1).getClaimsImageFileId()));

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted attachment details image name 2"
							+ appealDTOList.get(0).getAppealAttachmentDetails().get(1).getImageName(),
					"tc-01.2_1473334855310_78795.jpg"
							.equalsIgnoreCase(appealDTOList.get(0).getAppealAttachmentDetails().get(1).getImageName()));
			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### appeal submitted message with substring [Images uploaded - HIPAA_1440755968322_78481.pdf ] removed and only trailing space removed. "
							+ appealDTOList.get(0).getMessage(),
					" I have uploaded another legible receipt with this claim."
							.equalsIgnoreCase(appealDTOList.get(0).getMessage()));

		} catch (Exception e) {
			fail("####### testGetAppealHistoryOfClaimWithAppealSubmitted ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetAppealHistoryOfClaimWithAppealProcessed() {
		try {

			UserDetailsBn userDtlBn = new UserDetailsBn();
			userDtlBn.setId(10574588L);
			userDtlBn.setEeID(5962523);
			userDtlBn.setUserType("EE");
			userDtlBn.setName("Phantom A Philips");
			userDtlBn.setErID(1001274L);
			userDtlBn.setAdmnID(1L);
			userDtlBn.setErID(1L);

			List<AppealDTO> appealDetailsList = new ArrayList<>();

			AppealDTO appealclaimData = new AppealDTO();
			AppealDTO appealclaimData2 = new AppealDTO();

			appealclaimData.setActionOn("03/21/2018 09:33 AM");
			appealclaimData.setMessage(
					"Please provide us with the documentationfor this denial, last time we checked we still had about $250 available for payment.");
			appealclaimData.setClaimId(118278029);
			appealclaimData.setClmbtId(23705074);
			appealclaimData.setStatus(AppealStatus.APPEAL_SUBMITTED.getAppealStatus());

			appealDetailsList.add(appealclaimData);

			appealclaimData2.setActionOn("03/22/2018 09:30 AM");
			appealclaimData2.setMessage(
					"***\nDear Kathleen Black,\n\nThank you for contacting Crosby Benefit Systems.\n\nPlease be informed that as per records your 2010 HCRA account has been exhausted. So no more reimbursement is eligible from this account. You are requested to kindly submit claims for 2011 HCRA account for further reimbursement.\n\nIf your claim was denied for missing/incorrect information, you may re-submit by providing the missing/correct information.  All submissions must be received prior to the end of the run out date to be eligible. \n \nYou may appeal our decision by sending a written request to Crosby Benefit Systems within 180 days of the date of this notice.  The appeal request must include the following: Participant's and employer's name, participant's Social Security Number or employee ID number, date(s) of service, provider name, claim amounts, a copy of the Explanation of Unreimbursed Claims or the claim number, a description of the problem, steps previously attempted to reach resolution, and any additional documentation or explanation in support of your request.\n \nThe appeal should be sent to:\nClaims Appeal Coordinator\nCrosby Benefit Systems, Inc.\nP. O. Box 25172\nLehigh Valley, PA 18002-5172 \n       \n Please refer to our Reimbursement Request Forms or our website for guidance on eligible expenses and claim filing instructions.  If you have questions about this denial, please call 866-918-9711 or email: servicecenter@crosbybenefits.com.\n\nSincerely \nCustomer Care \nCrosby Benefit Systems\n***");
			appealclaimData2.setClaimId(118278029);
			appealclaimData2.setClmbtId(23705074);

			appealDetailsList.add(appealclaimData2);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getAppealDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(appealDetailsList);

			List<AppealDTO> appealDTOList = mockClaimBO.getAppealHistoryOfClaim(userDtlBn,
					appealDetailsList.get(0).getClaimId());

			assertTrue("####### testGetAppealHistoryOfClaimWithAppealProcessed ####### appeal submitted claim id "
					+ appealDTOList.get(0).getClaimId(), 118278029 == appealDTOList.get(0).getClaimId());

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealProcessed ####### appeal status submitted action by "
							+ appealDTOList.get(0).getActionBy(),
					"Phantom A Philips".equalsIgnoreCase(appealDTOList.get(0).getActionBy()));

			assertTrue("####### testGetAppealHistoryOfClaimWithAppealProcessed ####### appeal status is submitted ",
					AppealStatus.APPEAL_SUBMITTED.getAppealStatus().equalsIgnoreCase(appealDTOList.get(0).getStatus()));

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealProcessed ####### appeal status denied action by "
							+ appealDTOList.get(1).getActionBy(),
					"Appeal Process Team".equalsIgnoreCase(appealDTOList.get(1).getActionBy()));

			assertTrue("####### testGetAppealHistoryOfClaimWithAppealProcessed ####### appeal status processed ",
					AppealStatus.APPEAL_PROCESSED.getAppealStatus().equalsIgnoreCase(appealDTOList.get(1).getStatus()));

			assertTrue("####### testGetAppealHistoryOfClaimWithAppealProcessed ####### Appeal Claim Data Size ",
					appealDTOList.size() == 2);

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithAppealProcessed ####### appeal submitted attachment details is null"
							+ ValidationUtil.isNull(appealDTOList.get(0).getAppealAttachmentDetails()),
					ValidationUtil.isNull(appealDTOList.get(0).getAppealAttachmentDetails()));

		} catch (Exception e) {
			fail("####### testGetAppealHistoryOfClaimWithAppealProcessed ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetAppealHistoryOfClaimWithNoReviewMessage() {
		try {

			UserDetailsBn userDtlBn = new UserDetailsBn();
			userDtlBn.setId(10574588L);
			userDtlBn.setEeID(5962523);
			userDtlBn.setUserType("EE");
			userDtlBn.setName("Phantom A Philips");
			userDtlBn.setErID(1001274L);
			userDtlBn.setAdmnID(1L);
			userDtlBn.setErID(1L);

			List<AppealDTO> appealDetailsList = new ArrayList<>();

			AppealDTO appealclaimData = new AppealDTO();
			AppealDTO appealclaimData2 = new AppealDTO();

			appealclaimData.setActionOn("03/21/2018 09:33 AM");
			appealclaimData.setMessage(
					"Please provide us with the documentationfor this denial, last time we checked we still had about $250 available for payment.");
			appealclaimData.setClaimId(118278029);
			appealclaimData.setClmbtId(23705074);
			appealclaimData.setStatus(AppealStatus.APPEAL_SUBMITTED.getAppealStatus());

			appealDetailsList.add(appealclaimData);

			appealclaimData2.setActionOn("03/22/2018 09:30 AM");
			appealclaimData2.setMessage("");
			appealclaimData2.setClaimId(118278029);
			appealclaimData2.setClmbtId(23705074);

			appealDetailsList.add(appealclaimData2);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			when(mockOnlineClaimDAO.getAppealDetails(Mockito.any(Connection.class), Mockito.anyLong(),
					Mockito.anyLong())).thenReturn(appealDetailsList);

			List<AppealDTO> appealDTOList = mockClaimBO.getAppealHistoryOfClaim(userDtlBn,
					appealDetailsList.get(0).getClaimId());

			assertTrue("####### testGetAppealHistoryOfClaimWithNoReviewMessage ####### appeal submitted claim id "
					+ appealDTOList.get(0).getClaimId(), 118278029 == appealDTOList.get(0).getClaimId());

			assertTrue(
					"####### testGetAppealHistoryOfClaimWithNoReviewMessage ####### appeal status submitted action by "
							+ appealDTOList.get(0).getActionBy(),
					"Phantom A Philips".equalsIgnoreCase(appealDTOList.get(0).getActionBy()));

			assertTrue("####### testGetAppealHistoryOfClaimWithNoReviewMessage ####### appeal status is submitted ",
					AppealStatus.APPEAL_SUBMITTED.getAppealStatus().equalsIgnoreCase(appealDTOList.get(0).getStatus()));

			assertTrue("####### testGetAppealHistoryOfClaimWithNoReviewMessage ####### Appeal Claim Data Size ",
					appealDTOList.size() == 1);

		} catch (Exception e) {
			fail("####### testGetAppealHistoryOfClaimWithNoReviewMessage ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@SuppressWarnings("unused")
	@Test
	public void testGetAppealHistoryOfClaimWithSQLException() {
		try {
			UserDetailsBn userDtlBn = new UserDetailsBn();
			userDtlBn.setId(10574588L);
			userDtlBn.setEeID(5962525);
			userDtlBn.setUserType("EE");
			userDtlBn.setName("Thomas B Cook");
			userDtlBn.setErID(1001274L);
			userDtlBn.setAdmnID(1L);
			userDtlBn.setErID(1L);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doThrow(new SQLException()).when(mockOnlineClaimDAO)
					.getAppealDetails(Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyLong());

			List<AppealDTO> appealDTOList = mockClaimBO.getAppealHistoryOfClaim(userDtlBn, 118250955);

			fail("####### testGetAppealHistoryOfClaimWithSQLException ####### failed with no SQl Exception Error: ");
		} catch (SystemException se1) {
			assertTrue("####### testGetAppealHistoryOfClaimWithSQLException ####### System Exception Thrown ", true);
		} catch (Exception e) {
			fail("####### testGetAppealHistoryOfClaimWithSQLException ####### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadReceiptsForSubmittedClaimNoImage() {
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			mockClaimBO.uploadReceiptsForSubmittedClaim(null, userDetailsBn, 0, 0, 0, "Online");
			fail("testUploadReceiptsForClaimNoImage fail");
		} catch (BusinessLogicException be) {
			assertTrue("testUploadReceiptsForSubmittedClaimNoImage success",
					be.getErrorBn().getMessage().equals("Please attach document(s)."));
		} catch (Exception e) {
			fail("testUploadReceiptsForSubmittedClaimNoImage failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testUploadReceiptsForSubmittedClaimWorkGroupNotPresent() {
		try {
			String fileStream = "JVBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9MZW5ndGggNTY0L0ZpbHRlci9GbGF0ZURlY29kZT4+c3RyZWFtCniclZRPb9pAEMXv/hRzyKGVGtgdr/9xI0BTtWqUgNVKvbnGpFuBTYxNxbfvrrOi8TJLQSBhed5v/Gae2RfvLvX8EGIWQrr0GNwmQl/MUu/Je/HYIGA8CcH+rZ+9OBoEECUIAhlwAXXhrf6vj+Lr9KG4Th+w6/Rq9DC4RM4DNProovaIeFV/PPpJLurvR9f5F4LwoyNG+Kxiv9cs/FFX+jO/p+JduHW9WM/oenGe0fViPKN7Ow4pI2IjdURctO40JlJHxEPqiFje6l6fhqKroql2FTOYKunBeiUzC0XhsWFiU8YxRRmTVOm1n7rnMqhuugxSFB4bugxSlDHYLz3po413i+YQJ93rrM62jTf8yIEzSFfeu8esbmQut1nZwEO2KWAEi3T2bfYAP2A2/T6eTxfv09/6NDzpFTOrV1pn5S7LG1mV8Enumqo+uNgwtNh5W06zRj+e+bcobnkELB6xZCRCV48ArR7jPK9aNUd62OpG08l87GL9+IRt5F42B9AuTikeCBLrPFcrWBT1XuYEiEiDEwU+kwtCh8PHutrLZVEP79qdLIvd7hT1IxpdNFnTEnoRMXoZG71H1+7QZIcQd2qOQ/SHyHjg3BuFBA7EbMxGJr/kegmTrKaWTBv7Ktfroixlu4Evcunel81Ni1IWS2Jd5uyw5DdiwJhrWVz0xYwP1ffs5DYyqcqmlj9b/b9yzm5Ds812XR0KYllmaBtQr1euXipy7siniBv+gTH2b/a/mHb5QQplbmRzdHJlYW0KZW5kb2JqCjUgMCBvYmoKPDwvUGFyZW50IDQgMCBSL0NvbnRlbnRzIDMgMCBSL1R5cGUvUGFnZS9SZXNvdXJjZXM8PC9Gb250PDwvRjEgMSAwIFIvRjIgMiAwIFI+Pj4+L01lZGlhQm94WzAgMCA1OTUgODQyXT4+CmVuZG9iagoxIDAgb2JqCjw8L0Jhc2VGb250L1RpbWVzLUJvbGQvVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjIgMCBvYmoKPDwvQmFzZUZvbnQvVGltZXMtUm9tYW4vVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjQgMCBvYmoKPDwvVHlwZS9QYWdlcy9Db3VudCAxL0tpZHNbNSAwIFJdPj4KZW5kb2JqCjYgMCBvYmoKPDwvVHlwZS9DYXRhbG9nL1BhZ2VzIDQgMCBSPj4KZW5kb2JqCjcgMCBvYmoKPDwvUHJvZHVjZXIoaVRleHSuIDUuNS42IKkyMDAwLTIwMTUgaVRleHQgR3JvdXAgTlYgXChBY2NsYXJpcywgSW5jLiA7IGxpY2Vuc2VkIHZlcnNpb25cKSkvTW9kRGF0ZShEOjIwMTcwMzI0MDgwOTQ2LTA0JzAwJykvQ3JlYXRpb25EYXRlKEQ6MjAxNzAzMjQwODA5NDYtMDQnMDAnKT4+CmVuZG9iagp4cmVmCjAgOAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDA3NjcgMDAwMDAgbiAKMDAwMDAwMDg1NiAwMDAwMCBuIAowMDAwMDAwMDE1IDAwMDAwIG4gCjAwMDAwMDA5NDYgMDAwMDAgbiAKMDAwMDAwMDY0NiAwMDAwMCBuIAowMDAwMDAwOTk3IDAwMDAwIG4gCjAwMDAwMDEwNDIgMDAwMDAgbiAKdHJhaWxlcgo8PC9Sb290IDYgMCBSL0lEIFs8ODE0MGZkZGQ3NjZjOWUxZGRlMGU5OTE5YTE0YjI0MGQ+PDgxNDBmZGRkNzY2YzllMWRkZTBlOTkxOWExNGIyNDBkPl0vSW5mbyA3IDAgUi9TaXplIDg+PgolNDdiNmYtZWFhYWYtOWY3OTktYmIwMWQtNS41LjYKc3RhcnR4cmVmCjEyMjAKJSVFT0YK==";
			List<ImageDTO> imageDTOs = new ArrayList<>();
			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImageName("testImage.jpg");
			imageDTO.setImageStream(fileStream.getBytes());
			imageDTOs.add(imageDTO);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			UserDetailsBn userDetailsBn = getUserDetailBn();
			// ImageUploadInputDto imageUploadInputDto =
			// getImageUploadInputDto();
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					(Mockito.any(ImageUploadInputDto.class)));
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("");
			mockClaimBO.uploadReceiptsForSubmittedClaim(imageDTOs, userDetailsBn, 947493652, 185733, 342456, "Online");
			fail("testUploadReceiptsForClaimWorkGroupNotPresent");
		} catch (BusinessLogicException be) {
			assertTrue("testUploadReceiptsForSubmittedClaimWorkGroupNotPresent success",
					be.getErrorBn().getMessage().equals("Default work group not found."));
		} catch (Exception e) {
			fail("testUploadReceiptsForSubmittedClaimWorkGroupNotPresent failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentSuccessClaimImagePresent() {
		try {

			String fileStream = "JVBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9MZW5ndGggNTY0L0ZpbHRlci9GbGF0ZURlY29kZT4+c3RyZWFtCniclZRPb9pAEMXv/hRzyKGVGtgdr/9xI0BTtWqUgNVKvbnGpFuBTYxNxbfvrrOi8TJLQSBhed5v/Gae2RfvLvX8EGIWQrr0GNwmQl/MUu/Je/HYIGA8CcH+rZ+9OBoEECUIAhlwAXXhrf6vj+Lr9KG4Th+w6/Rq9DC4RM4DNProovaIeFV/PPpJLurvR9f5F4LwoyNG+Kxiv9cs/FFX+jO/p+JduHW9WM/oenGe0fViPKN7Ow4pI2IjdURctO40JlJHxEPqiFje6l6fhqKroql2FTOYKunBeiUzC0XhsWFiU8YxRRmTVOm1n7rnMqhuugxSFB4bugxSlDHYLz3po413i+YQJ93rrM62jTf8yIEzSFfeu8esbmQut1nZwEO2KWAEi3T2bfYAP2A2/T6eTxfv09/6NDzpFTOrV1pn5S7LG1mV8Enumqo+uNgwtNh5W06zRj+e+bcobnkELB6xZCRCV48ArR7jPK9aNUd62OpG08l87GL9+IRt5F42B9AuTikeCBLrPFcrWBT1XuYEiEiDEwU+kwtCh8PHutrLZVEP79qdLIvd7hT1IxpdNFnTEnoRMXoZG71H1+7QZIcQd2qOQ/SHyHjg3BuFBA7EbMxGJr/kegmTrKaWTBv7Ktfroixlu4Evcunel81Ni1IWS2Jd5uyw5DdiwJhrWVz0xYwP1ffs5DYyqcqmlj9b/b9yzm5Ds812XR0KYllmaBtQr1euXipy7siniBv+gTH2b/a/mHb5QQplbmRzdHJlYW0KZW5kb2JqCjUgMCBvYmoKPDwvUGFyZW50IDQgMCBSL0NvbnRlbnRzIDMgMCBSL1R5cGUvUGFnZS9SZXNvdXJjZXM8PC9Gb250PDwvRjEgMSAwIFIvRjIgMiAwIFI+Pj4+L01lZGlhQm94WzAgMCA1OTUgODQyXT4+CmVuZG9iagoxIDAgb2JqCjw8L0Jhc2VGb250L1RpbWVzLUJvbGQvVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjIgMCBvYmoKPDwvQmFzZUZvbnQvVGltZXMtUm9tYW4vVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjQgMCBvYmoKPDwvVHlwZS9QYWdlcy9Db3VudCAxL0tpZHNbNSAwIFJdPj4KZW5kb2JqCjYgMCBvYmoKPDwvVHlwZS9DYXRhbG9nL1BhZ2VzIDQgMCBSPj4KZW5kb2JqCjcgMCBvYmoKPDwvUHJvZHVjZXIoaVRleHSuIDUuNS42IKkyMDAwLTIwMTUgaVRleHQgR3JvdXAgTlYgXChBY2NsYXJpcywgSW5jLiA7IGxpY2Vuc2VkIHZlcnNpb25cKSkvTW9kRGF0ZShEOjIwMTcwMzI0MDgwOTQ2LTA0JzAwJykvQ3JlYXRpb25EYXRlKEQ6MjAxNzAzMjQwODA5NDYtMDQnMDAnKT4+CmVuZG9iagp4cmVmCjAgOAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDA3NjcgMDAwMDAgbiAKMDAwMDAwMDg1NiAwMDAwMCBuIAowMDAwMDAwMDE1IDAwMDAwIG4gCjAwMDAwMDA5NDYgMDAwMDAgbiAKMDAwMDAwMDY0NiAwMDAwMCBuIAowMDAwMDAwOTk3IDAwMDAwIG4gCjAwMDAwMDEwNDIgMDAwMDAgbiAKdHJhaWxlcgo8PC9Sb290IDYgMCBSL0lEIFs8ODE0MGZkZGQ3NjZjOWUxZGRlMGU5OTE5YTE0YjI0MGQ+PDgxNDBmZGRkNzY2YzllMWRkZTBlOTkxOWExNGIyNDBkPl0vSW5mbyA3IDAgUi9TaXplIDg+PgolNDdiNmYtZWFhYWYtOWY3OTktYmIwMWQtNS41LjYKc3RhcnR4cmVmCjEyMjAKJSVFT0YK==";
			List<ImageDTO> imageDTOs = new ArrayList<>();
			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImageName("testImage.jpg");
			imageDTO.setImageStream(fileStream.getBytes());
			imageDTOs.add(imageDTO);
			ImageBn imageBn = getImageBn();
			Map<String, String> resultMapForNotification = new HashMap<>();
			resultMapForNotification.put("result", "OK");
			// imageBnList.add(imageBn);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			PowerMockito.mockStatic(SendMailDAO.class);
			UserDetailsBn userDetailsBn = getUserDetailBn();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					(Mockito.any(ImageUploadInputDto.class)));
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("/u01/imageupload/imgupldtempdir/convertedFileName.jpg");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(ByteArrayInputStream.class),
					Mockito.anyString());
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName.jpg");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("/u01/imageupload/Thumbnail/imgupldtempdir");
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			when(mockOnlineClaimDAO.isEmailSentForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("N");
			when(mockOnlineClaimDAO.sendNotification(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn("OK");
			PowerMockito.doNothing().when(SendMailDAO.class, "setUserSession", Mockito.any(Connection.class),
					Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO)
					.updateNotificationStatusForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong());
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			Map<String, Long> resultMap = mockClaimBO.uploadReceiptsForSubmittedClaim(imageDTOs, userDetailsBn,
					947493652, 18573368, 342456, "Online");
			assertTrue("testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentSuccess ",
					resultMap.get("transactionId") == 947493652);
			assertTrue("testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentSuccess ",
					resultMap.get("claimImageId") == 18573368);
		} catch (Exception e) {
			fail("testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentSuccess failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadReceiptsForClaimTransactionIdClaimsImageIdNotPresentSuccess() {
		try {

			String fileStream = "JVBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9MZW5ndGggNTY0L0ZpbHRlci9GbGF0ZURlY29kZT4+c3RyZWFtCniclZRPb9pAEMXv/hRzyKGVGtgdr/9xI0BTtWqUgNVKvbnGpFuBTYxNxbfvrrOi8TJLQSBhed5v/Gae2RfvLvX8EGIWQrr0GNwmQl/MUu/Je/HYIGA8CcH+rZ+9OBoEECUIAhlwAXXhrf6vj+Lr9KG4Th+w6/Rq9DC4RM4DNProovaIeFV/PPpJLurvR9f5F4LwoyNG+Kxiv9cs/FFX+jO/p+JduHW9WM/oenGe0fViPKN7Ow4pI2IjdURctO40JlJHxEPqiFje6l6fhqKroql2FTOYKunBeiUzC0XhsWFiU8YxRRmTVOm1n7rnMqhuugxSFB4bugxSlDHYLz3po413i+YQJ93rrM62jTf8yIEzSFfeu8esbmQut1nZwEO2KWAEi3T2bfYAP2A2/T6eTxfv09/6NDzpFTOrV1pn5S7LG1mV8Enumqo+uNgwtNh5W06zRj+e+bcobnkELB6xZCRCV48ArR7jPK9aNUd62OpG08l87GL9+IRt5F42B9AuTikeCBLrPFcrWBT1XuYEiEiDEwU+kwtCh8PHutrLZVEP79qdLIvd7hT1IxpdNFnTEnoRMXoZG71H1+7QZIcQd2qOQ/SHyHjg3BuFBA7EbMxGJr/kegmTrKaWTBv7Ktfroixlu4Evcunel81Ni1IWS2Jd5uyw5DdiwJhrWVz0xYwP1ffs5DYyqcqmlj9b/b9yzm5Ds812XR0KYllmaBtQr1euXipy7siniBv+gTH2b/a/mHb5QQplbmRzdHJlYW0KZW5kb2JqCjUgMCBvYmoKPDwvUGFyZW50IDQgMCBSL0NvbnRlbnRzIDMgMCBSL1R5cGUvUGFnZS9SZXNvdXJjZXM8PC9Gb250PDwvRjEgMSAwIFIvRjIgMiAwIFI+Pj4+L01lZGlhQm94WzAgMCA1OTUgODQyXT4+CmVuZG9iagoxIDAgb2JqCjw8L0Jhc2VGb250L1RpbWVzLUJvbGQvVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjIgMCBvYmoKPDwvQmFzZUZvbnQvVGltZXMtUm9tYW4vVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjQgMCBvYmoKPDwvVHlwZS9QYWdlcy9Db3VudCAxL0tpZHNbNSAwIFJdPj4KZW5kb2JqCjYgMCBvYmoKPDwvVHlwZS9DYXRhbG9nL1BhZ2VzIDQgMCBSPj4KZW5kb2JqCjcgMCBvYmoKPDwvUHJvZHVjZXIoaVRleHSuIDUuNS42IKkyMDAwLTIwMTUgaVRleHQgR3JvdXAgTlYgXChBY2NsYXJpcywgSW5jLiA7IGxpY2Vuc2VkIHZlcnNpb25cKSkvTW9kRGF0ZShEOjIwMTcwMzI0MDgwOTQ2LTA0JzAwJykvQ3JlYXRpb25EYXRlKEQ6MjAxNzAzMjQwODA5NDYtMDQnMDAnKT4+CmVuZG9iagp4cmVmCjAgOAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDA3NjcgMDAwMDAgbiAKMDAwMDAwMDg1NiAwMDAwMCBuIAowMDAwMDAwMDE1IDAwMDAwIG4gCjAwMDAwMDA5NDYgMDAwMDAgbiAKMDAwMDAwMDY0NiAwMDAwMCBuIAowMDAwMDAwOTk3IDAwMDAwIG4gCjAwMDAwMDEwNDIgMDAwMDAgbiAKdHJhaWxlcgo8PC9Sb290IDYgMCBSL0lEIFs8ODE0MGZkZGQ3NjZjOWUxZGRlMGU5OTE5YTE0YjI0MGQ+PDgxNDBmZGRkNzY2YzllMWRkZTBlOTkxOWExNGIyNDBkPl0vSW5mbyA3IDAgUi9TaXplIDg+PgolNDdiNmYtZWFhYWYtOWY3OTktYmIwMWQtNS41LjYKc3RhcnR4cmVmCjEyMjAKJSVFT0YK==";
			List<ImageDTO> imageDTOs = new ArrayList<>();
			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImageName("testImage.jpg");
			imageDTO.setImageStream(fileStream.getBytes());
			imageDTOs.add(imageDTO);
			ImageBn imageBn = getImageBn();
			// imageBnList.add(imageBn);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			Map<String, String> resultMapForNotification = new HashMap<>();
			resultMapForNotification.put("result", "OK");
			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					(Mockito.any(ImageUploadInputDto.class)));
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("/u01/imageupload/imgupldtempdir/convertedFileName.jpg");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(ByteArrayInputStream.class),
					Mockito.anyString());
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName.jpg");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("/u01/imageupload/Thumbnail/imgupldtempdir");
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(75875849l);
			when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenReturn(75875849l);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).insertIntoClaimImage(Mockito.any(Connection.class),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(),
					Mockito.any(UserDetailsBn.class));
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			when(mockOnlineClaimDAO.isEmailSentForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("N");
			when(mockOnlineClaimDAO.sendNotification(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn("OK");
			PowerMockito.doNothing().when(SendMailDAO.class, "setUserSession", Mockito.any(Connection.class),
					Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO)
					.updateNotificationStatusForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong());
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			Map<String, Long> resultMap = mockClaimBO.uploadReceiptsForSubmittedClaim(imageDTOs, userDetailsBn, 0, 0,
					342456, "Online");
			assertTrue("testUploadReceiptsForClaimTransactionIdClaimsImageIdNotPresentSuccess "
					+ resultMap.get("transactionId"), resultMap.get("transactionId") == 75875849l);
			assertTrue("testUploadReceiptsForClaimTransactionIdClaimsImageIdNotPresentSuccess ",
					resultMap.get("claimImageId") == 75875849l);
		} catch (Exception e) {
			fail("testUploadReceiptsForClaimTransactionIdClaimsImageIdNotPresentSuccess failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testUploadReceiptsForClaimTransactionIdClaimsImageIdAlreadyPresentInDatabase() {
		try {

			String fileStream = "JVBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9MZW5ndGggNTY0L0ZpbHRlci9GbGF0ZURlY29kZT4+c3RyZWFtCniclZRPb9pAEMXv/hRzyKGVGtgdr/9xI0BTtWqUgNVKvbnGpFuBTYxNxbfvrrOi8TJLQSBhed5v/Gae2RfvLvX8EGIWQrr0GNwmQl/MUu/Je/HYIGA8CcH+rZ+9OBoEECUIAhlwAXXhrf6vj+Lr9KG4Th+w6/Rq9DC4RM4DNProovaIeFV/PPpJLurvR9f5F4LwoyNG+Kxiv9cs/FFX+jO/p+JduHW9WM/oenGe0fViPKN7Ow4pI2IjdURctO40JlJHxEPqiFje6l6fhqKroql2FTOYKunBeiUzC0XhsWFiU8YxRRmTVOm1n7rnMqhuugxSFB4bugxSlDHYLz3po413i+YQJ93rrM62jTf8yIEzSFfeu8esbmQut1nZwEO2KWAEi3T2bfYAP2A2/T6eTxfv09/6NDzpFTOrV1pn5S7LG1mV8Enumqo+uNgwtNh5W06zRj+e+bcobnkELB6xZCRCV48ArR7jPK9aNUd62OpG08l87GL9+IRt5F42B9AuTikeCBLrPFcrWBT1XuYEiEiDEwU+kwtCh8PHutrLZVEP79qdLIvd7hT1IxpdNFnTEnoRMXoZG71H1+7QZIcQd2qOQ/SHyHjg3BuFBA7EbMxGJr/kegmTrKaWTBv7Ktfroixlu4Evcunel81Ni1IWS2Jd5uyw5DdiwJhrWVz0xYwP1ffs5DYyqcqmlj9b/b9yzm5Ds812XR0KYllmaBtQr1euXipy7siniBv+gTH2b/a/mHb5QQplbmRzdHJlYW0KZW5kb2JqCjUgMCBvYmoKPDwvUGFyZW50IDQgMCBSL0NvbnRlbnRzIDMgMCBSL1R5cGUvUGFnZS9SZXNvdXJjZXM8PC9Gb250PDwvRjEgMSAwIFIvRjIgMiAwIFI+Pj4+L01lZGlhQm94WzAgMCA1OTUgODQyXT4+CmVuZG9iagoxIDAgb2JqCjw8L0Jhc2VGb250L1RpbWVzLUJvbGQvVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjIgMCBvYmoKPDwvQmFzZUZvbnQvVGltZXMtUm9tYW4vVHlwZS9Gb250L0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZy9TdWJ0eXBlL1R5cGUxPj4KZW5kb2JqCjQgMCBvYmoKPDwvVHlwZS9QYWdlcy9Db3VudCAxL0tpZHNbNSAwIFJdPj4KZW5kb2JqCjYgMCBvYmoKPDwvVHlwZS9DYXRhbG9nL1BhZ2VzIDQgMCBSPj4KZW5kb2JqCjcgMCBvYmoKPDwvUHJvZHVjZXIoaVRleHSuIDUuNS42IKkyMDAwLTIwMTUgaVRleHQgR3JvdXAgTlYgXChBY2NsYXJpcywgSW5jLiA7IGxpY2Vuc2VkIHZlcnNpb25cKSkvTW9kRGF0ZShEOjIwMTcwMzI0MDgwOTQ2LTA0JzAwJykvQ3JlYXRpb25EYXRlKEQ6MjAxNzAzMjQwODA5NDYtMDQnMDAnKT4+CmVuZG9iagp4cmVmCjAgOAowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDA3NjcgMDAwMDAgbiAKMDAwMDAwMDg1NiAwMDAwMCBuIAowMDAwMDAwMDE1IDAwMDAwIG4gCjAwMDAwMDA5NDYgMDAwMDAgbiAKMDAwMDAwMDY0NiAwMDAwMCBuIAowMDAwMDAwOTk3IDAwMDAwIG4gCjAwMDAwMDEwNDIgMDAwMDAgbiAKdHJhaWxlcgo8PC9Sb290IDYgMCBSL0lEIFs8ODE0MGZkZGQ3NjZjOWUxZGRlMGU5OTE5YTE0YjI0MGQ+PDgxNDBmZGRkNzY2YzllMWRkZTBlOTkxOWExNGIyNDBkPl0vSW5mbyA3IDAgUi9TaXplIDg+PgolNDdiNmYtZWFhYWYtOWY3OTktYmIwMWQtNS41LjYKc3RhcnR4cmVmCjEyMjAKJSVFT0YK==";
			List<ImageDTO> imageDTOs = new ArrayList<>();
			ImageDTO imageDTO = new ImageDTO();
			imageDTO.setImageName("testImage.jpg");
			imageDTO.setImageStream(fileStream.getBytes());
			imageDTOs.add(imageDTO);
			ImageBn imageBn = getImageBn();
			// imageBnList.add(imageBn);
			PowerMockito.mockStatic(ImageUploadUtil.class);
			Map<String, String> resultMapForNotification = new HashMap<>();
			resultMapForNotification.put("result", "OK");
			UserDetailsBn userDetailsBn = getUserDetailBn();
			PowerMockito.mockStatic(SendMailDAO.class);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(ImageUploadUtil.class, "setImageConfig",
					(Mockito.any(ImageUploadInputDto.class)));
			when(imageDAO.getDefaultWrkGroup(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn("OLNL_IMG_UPLOAD_NC");
			PowerMockito.doNothing().when(imageDAO).setImageConfigurationByWorkGroup(
					Mockito.any(ImageUploadInputDto.class), Mockito.anyString(), Mockito.any(Connection.class));
			when(ImageUploadUtil.getTempLocationPath(Mockito.anyString(), Mockito.any(Connection.class)))
					.thenReturn("/u01/imageupload/imgupldtempdir/convertedFileName.jpg");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "writeFile", Mockito.any(ByteArrayInputStream.class),
					Mockito.anyString());
			when(ImageUploadUtil.getFileNameFrmPath(Mockito.anyString())).thenReturn("convertedFileName.jpg");
			PowerMockito.doNothing().when(ImageUploadUtil.class, "validateImageFile", Mockito.anyString(),
					Mockito.anyString(), Mockito.any(ErrorBn.class));
			when(ImageUploadUtil.convertAndGetConvertedImageDetails(Mockito.any(ImageUploadInputDto.class),
					Mockito.anyString())).thenReturn(imageBn);
			when(ImageUploadUtil.createImgThumbnail(Mockito.anyString(), Mockito.anyString(),
					Mockito.any(Connection.class))).thenReturn("/u01/imageupload/Thumbnail/imgupldtempdir");
			when(mockOnlineClaimDAO.getClaimBatchIdByClaimId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(75875849l);
			// when(mockOnlineClaimDAO.getClaimImageId(Mockito.any(Connection.class))).thenReturn(75875849l);
			when(mockOnlineClaimDAO.getClaimImageIDbyClmBt(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(75875849l);
			PowerMockito.doNothing().when(mockOnlineClaimDAO).updateClaimsImageWithoutThumbnailPath(Mockito.anyLong(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(),
					Mockito.any(Connection.class));
			when(mockOnlineClaimDAO.saveClaimsImageFileDetails(Mockito.anyLong(), Mockito.any(), Mockito.anyLong(),
					Mockito.any(Connection.class))).thenReturn("");
			when(mockOnlineClaimDAO.isEmailSentForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn("N");
			when(mockOnlineClaimDAO.sendNotification(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).thenReturn("OK");
			PowerMockito.doNothing().when(SendMailDAO.class, "setUserSession", Mockito.any(Connection.class),
					Mockito.anyString());
			PowerMockito.doNothing().when(mockOnlineClaimDAO)
					.updateNotificationStatusForIndexedClaimsImage(Mockito.any(Connection.class), Mockito.anyLong());
			PowerMockito.doNothing().when(ImageUploadUtil.class, "deleteFiles", Mockito.anyList());
			Map<String, Long> resultMap = mockClaimBO.uploadReceiptsForSubmittedClaim(imageDTOs, userDetailsBn, 0, 0,
					342456, "Online");
			assertTrue("testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentInDataBase "
					+ resultMap.get("transactionId"), resultMap.get("transactionId") == 75875849l);
			assertTrue("testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentInDataBase ",
					resultMap.get("claimImageId") == 75875849l);
		} catch (Exception e) {
			fail("testUploadReceiptsForClaimTransactionIdClaimsImageIdPresentInDataBase failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetIneligibleDebitCardExpenseDetailSuccess() {
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		try {
			DebitCardExpenseDetail debitCardExpenseDetail = new DebitCardExpenseDetail();
			debitCardExpenseDetail.setAmount("3.00");
			debitCardExpenseDetail.setDebitCardStatus("Suspended");
			debitCardExpenseDetail.setStatus("Invalid Receipt");
			debitCardExpenseDetail.setServiceDate("04/21/2017");
			debitCardExpenseDetail.setProvider("MCLM (8031)");

			UserDetailsBn userDetailsBn = getUserDetailBn();

			List<DebitCardExpenseDetail> debitCardExpenseDetailList = new ArrayList<>();
			debitCardExpenseDetailList.add(debitCardExpenseDetail);

			when(mockOnlineClaimDAO.getIneligibleDebitCardExpenseDetail(Mockito.any(Connection.class),
					Mockito.anyLong())).thenReturn(debitCardExpenseDetailList);

			List<DebitCardExpenseDetail> resultList = mockClaimBO.getIneligibleDebitCardExpenseDetail(userDetailsBn);

			assertTrue("testGetIneligibleDebitCardExpenseDetailSuccess success", resultList.size() > 0);

		} catch (Exception e) {
			fail("testGetIneligibleDebitCardExpenseDetailSuccess failed with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGetIneligibleDebitCardExpenseDetailThrowSqlException() {
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		try {
			UserDetailsBn userDetailsBn = getUserDetailBn();
			when(mockOnlineClaimDAO.getIneligibleDebitCardExpenseDetail(Mockito.any(Connection.class),
					Mockito.anyLong())).thenThrow(new SQLException());
			List<DebitCardExpenseDetail> debitCardExpenseDetailList = mockClaimBO
					.getIneligibleDebitCardExpenseDetail(userDetailsBn);
			fail("testGetIneligibleDebitCardExpenseDetailThrowSqlException failed");
		} catch (SystemException systemException) {
			assertTrue("testGetIneligibleDebitCardExpenseDetailThrowSqlException for sql exception catch ", true);
		} catch (Exception e) {
			fail("testGetIneligibleDebitCardExpenseDetailThrowSqlException failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testGetPrintClaimFormDetails() {
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		try {

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			String expectedBarCodeValue = "2000000048900059625266";
			PowerMockito.mockStatic(ConfigUtil.class);
			PowerMockito.mockStatic(SupportUtilityDAO.class);
			PowerMockito.mockStatic(UserDAO.class);

			PowerMockito.when(
					ConfigUtil.getBarcodeValue(Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyString()))
					.thenReturn(expectedBarCodeValue);

			Barcode barcode = PowerMockito.mock(Barcode.class);
			when(BarcodeFactory.createCode128C(Mockito.anyString())).thenReturn(barcode);
			PowerMockito.doNothing().when(BarcodeImageHandler.class);
			BarcodeImageHandler.writePNG(Mockito.any(Barcode.class), Mockito.any(ByteArrayOutputStream.class));

			Map<String, String> mailDtls = new HashMap<>();
			mailDtls.put("ADDR_LINE1", "6 Adhar");
			mailDtls.put("ADDR_LINE2", "Das");
			mailDtls.put("ADDR_LINE3", "Lane");
			mailDtls.put("ADDR_CITY", "Tampa");
			mailDtls.put("ADDR_STATE", "DC");
			mailDtls.put("ADDR_ZIP", "90350");
			mailDtls.put("ADDR_COUNTRY", "USA");
			mailDtls.put("FAX_AREA", "1234");
			mailDtls.put("FAX_REST", "1234");
			mailDtls.put("PHONE_AREA", "");
			mailDtls.put("PHONE_REST", "");

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailDtls);

			PhoneDTO phoneDTO = new PhoneDTO();
			phoneDTO.setPhoneArea("868");
			phoneDTO.setPhoneExtn("61820");
			phoneDTO.setPhoneRest("6988979");
			phoneDTO.setPhoneType("Mobile");

			PowerMockito.when(UserDAO.getEmployeePrimaryPhoneDetails(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(phoneDTO);

			List<DependentInfoBn> dependentDtls = new ArrayList<>();

			DependentInfoBn dependentInfo1 = new DependentInfoBn();
			dependentInfo1.setDependentID(1010650);
			dependentInfo1.setFullName("LISA X COLLINS");
			dependentInfo1.setDateOfBirth("09/19/1992");
			dependentInfo1.setRelationship("Dependent");
			dependentDtls.add(dependentInfo1);

			DependentInfoBn dependentInfo2 = new DependentInfoBn();
			dependentInfo2.setDependentID(1010651);
			dependentInfo2.setFullName("LISA X COLLINS");
			dependentInfo2.setDateOfBirth("09/19/1992");
			dependentInfo2.setRelationship("Dependent");
			dependentDtls.add(dependentInfo2);

			DependentInfoBn dependentInfo3 = new DependentInfoBn();
			dependentInfo3.setDependentID(1010650);
			dependentInfo3.setFullName("LISA X COLLINS");
			dependentInfo3.setDateOfBirth("09/19/1992");
			dependentInfo3.setRelationship("Dependent");
			dependentDtls.add(dependentInfo3);

			when(supportUtilityDAO.getDependentsInfo(Mockito.any(Connection.class), Mockito.any()))
					.thenReturn(dependentDtls);

			UserDetailsBn userDetails = getCommonUserDetails();
			String dependentIds = "12345";

			ClaimFormDTO claimFormDtls = mockClaimBO.getPrintClaimFormDetails(dependentIds, userDetails);

			assertTrue("testGetPrintClaimFormDetails ", claimFormDtls != null);
		} catch (Exception e) {
			fail("testGetPrintClaimFormDetails: failed with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGetPrintClaimFormDetailsForNoDependents() {
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		try {

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			String expectedBarCodeValue = "2000000048900059625266";
			PowerMockito.mockStatic(ConfigUtil.class);
			PowerMockito.mockStatic(SupportUtilityDAO.class);
			PowerMockito.mockStatic(UserDAO.class);

			PowerMockito.when(
					ConfigUtil.getBarcodeValue(Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyString()))
					.thenReturn(expectedBarCodeValue);

			Barcode barcode = PowerMockito.mock(Barcode.class);
			when(BarcodeFactory.createCode128C(Mockito.anyString())).thenReturn(barcode);
			PowerMockito.doNothing().when(BarcodeImageHandler.class);
			BarcodeImageHandler.writePNG(Mockito.any(Barcode.class), Mockito.any(ByteArrayOutputStream.class));

			Map<String, String> mailDtls = new HashMap<>();
			mailDtls.put("ADDR_LINE1", "6 Adhar");
			mailDtls.put("ADDR_LINE2", "Das");
			mailDtls.put("ADDR_LINE3", "Lane");
			mailDtls.put("ADDR_CITY", "Tampa");
			mailDtls.put("ADDR_STATE", "DC");
			mailDtls.put("ADDR_ZIP", "90350");
			mailDtls.put("ADDR_COUNTRY", "USA");
			mailDtls.put("FAX_AREA", "1234");
			mailDtls.put("FAX_REST", "1234");
			mailDtls.put("PHONE_AREA", "");
			mailDtls.put("PHONE_REST", "");

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailDtls);

			PhoneDTO phoneDTO = new PhoneDTO();
			phoneDTO.setPhoneArea("868");
			phoneDTO.setPhoneExtn("61820");
			phoneDTO.setPhoneRest("6988979");
			phoneDTO.setPhoneType("Mobile");

			PowerMockito.when(UserDAO.getEmployeePrimaryPhoneDetails(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(phoneDTO);

			UserDetailsBn userDetails = getCommonUserDetails();
			String dependentIds = null;

			ClaimFormDTO claimFormDtls = mockClaimBO.getPrintClaimFormDetails(dependentIds, userDetails);

			assertTrue("testGetPrintClaimFormDetails ", claimFormDtls != null);
		} catch (Exception e) {
			fail("testGetPrintClaimFormDetails: failed with following error " + getStackTrace(e));
		}
	}

	@Test(expected = SystemException.class)
	public void testGetPrintClaimFormDetailsForSystemException() throws SystemException, SQLException {
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(SupportUtilityDAO.class);

		PowerMockito
				.when(ConfigUtil.getBarcodeValue(Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyString()))
				.thenThrow(SQLException.class);

		UserDetailsBn userDetails = getCommonUserDetails();
		String dependentIds = "1010650,1010651,1010652";

		ClaimFormDTO claimFormDtls = mockClaimBO.getPrintClaimFormDetails(dependentIds, userDetails);

		assertTrue("testGetPrintClaimFormDetails ", claimFormDtls != null);
	}

	@Test
	public void testReceiptCoverSheetTransactionBreakdownDetailsWithNoData() {
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);

		Map<String, String> mailCheck = new HashMap<>();
		mailCheck.put("ADDR_LINE1", "");
		mailCheck.put("ADDR_LINE2", "");
		mailCheck.put("ADDR_LINE3", "");
		mailCheck.put("ADDR_CITY", "");
		mailCheck.put("ADDR_STATE", "");
		mailCheck.put("ADDR_ZIP", "");
		mailCheck.put("ADDR_COUNTRY", "");
		mailCheck.put("FAX_AREA", "1234");
		mailCheck.put("FAX_REST", "1234");
		mailCheck.put("PHONE_AREA", "1234");
		mailCheck.put("PHONE_REST", "1234");

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = null;
			List<TransactionBreakdownDTO> transactionDetails = null;

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown("119984945",
					AccountActivitySource.CLAIMS.getSource(), getUserDetailBn(), "No"))
					.thenReturn(transactionBreakdownDetails);

			TransactionBreakdownDTO mockTransactionBreakdownDTO = Mockito.mock(TransactionBreakdownDTO.class);
			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailCheck);

			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.assertEquals(".pdf", fileDTO.getFileFormat());

		} catch (Exception e) {
			fail("testReceiptCoverSheetTransactionBreakdownDetailsWithNoData failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testReceiptCoverSheetTransactionDetailsWithNoData() {
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);

		Map<String, String> mailCheck = new HashMap<>();
		mailCheck.put("ADDR_LINE1", "");
		mailCheck.put("ADDR_LINE2", "");
		mailCheck.put("ADDR_LINE3", "");
		mailCheck.put("ADDR_CITY", "");
		mailCheck.put("ADDR_STATE", "");
		mailCheck.put("ADDR_ZIP", "");
		mailCheck.put("ADDR_COUNTRY", "");
		mailCheck.put("FAX_AREA", "1234");
		mailCheck.put("FAX_REST", "1234");
		mailCheck.put("PHONE_AREA", "1234");
		mailCheck.put("PHONE_REST", "1234");

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("");
			transactionBreakdownDetails.setAmount("");
			transactionBreakdownDetails.setClaimBatchId(0);
			transactionBreakdownDetails.setStatus("");
			transactionBreakdownDetails.setCategory("");
			transactionBreakdownDetails.setServiceDate("");
			transactionBreakdownDetails.setTotalAmt("");

			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			transactionDetails.get(0).setStatusLabel(ClaimStatus.RELEASED.getStatus());

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			TransactionBreakdownDTO mockTransactionBreakdownDTO = Mockito.mock(TransactionBreakdownDTO.class);
			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailCheck);

			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.assertEquals(".pdf", fileDTO.getFileFormat());

		} catch (Exception e) {
			fail("testReceiptCoverSheetTransactionDetailsWithNoData failed with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testReceiptCoverSheetTransactionBreakdownDetailsWithNullFields() {
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);

		Map<String, String> mailCheck = new HashMap<>();

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("");
			transactionBreakdownDetails.setAmount("");
			transactionBreakdownDetails.setTotalAmt("");
			transactionBreakdownDetails.setClaimBatchId(0);
			transactionBreakdownDetails.setStatus("");
			transactionBreakdownDetails.setCategory("");
			transactionBreakdownDetails.setServiceDate("");

			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);

			transactionBreakdownDetails.setTransactionList(null);

			transactionDetails.get(0).setStatusLabel(ClaimStatus.RECEIPT_REQUIRED.getStatus());

			transactionBreakdownDetails.setTransactionList(null);

			TransactionBreakdownDTO mockTransactionBreakdownDTO = Mockito.mock(TransactionBreakdownDTO.class);
			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailCheck);

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.assertEquals(".pdf", fileDTO.getFileFormat());

		} catch (Exception e) {
			fail("testReceiptCoverSheetTransactionBreakdownDetailsWithNullFields failed with following error "
					+ getStackTrace(e));
		}
	}

	@Test
	public void testReceiptCoverSheetWithClaimStatusReceiptRequired() {
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);

		Map<String, String> mailCheck = new HashMap<>();
		mailCheck.put("ADDR_LINE1", "");
		mailCheck.put("ADDR_LINE2", "");
		mailCheck.put("ADDR_LINE3", "");
		mailCheck.put("ADDR_CITY", "");
		mailCheck.put("ADDR_STATE", "");
		mailCheck.put("ADDR_ZIP", "");
		mailCheck.put("ADDR_COUNTRY", "");
		mailCheck.put("FAX_AREA", "1234");
		mailCheck.put("FAX_REST", "1234");
		mailCheck.put("PHONE_AREA", "1234");
		mailCheck.put("PHONE_REST", "1234");

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("HCRA");
			transactionBreakdownDetails.setAmount("");
			transactionBreakdownDetails.setClaimBatchId(78118508);
			transactionBreakdownDetails.setStatus(ClaimStatus.RECEIPT_REQUIRED.getStatus());
			transactionBreakdownDetails.setCategory("Debit Card");
			transactionBreakdownDetails.setServiceDate("");
			transactionBreakdownDetails.setTotalAmt("238.79");

			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			transactionDetails.get(0).setStatusLabel(ClaimStatus.RECEIPT_REQUIRED.getStatus());

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			TransactionBreakdownDTO mockTransactionBreakdownDTO = Mockito.mock(TransactionBreakdownDTO.class);
			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailCheck);

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.assertEquals(".pdf", fileDTO.getFileFormat());

		} catch (Exception e) {
			fail("testReceiptCoverSheetWithClaimStatusReceiptRequired failed with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testReceiptCoverSheetWithClaimStatusInvalidReceipt() {
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);

		Map<String, String> mailCheck = new HashMap<>();
		mailCheck.put("ADDR_LINE1", "");
		mailCheck.put("ADDR_LINE2", "");
		mailCheck.put("ADDR_LINE3", "");
		mailCheck.put("ADDR_CITY", "");
		mailCheck.put("ADDR_STATE", "");
		mailCheck.put("ADDR_ZIP", "");
		mailCheck.put("ADDR_COUNTRY", "");
		mailCheck.put("FAX_AREA", "1234");
		mailCheck.put("FAX_REST", "1234");
		mailCheck.put("PHONE_AREA", "1234");
		mailCheck.put("PHONE_REST", "1234");

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("HSA");
			transactionBreakdownDetails.setAmount("238.79");
			transactionBreakdownDetails.setClaimBatchId(78118508);
			transactionBreakdownDetails.setStatus(ClaimStatus.INVALID_RECEIPT.getStatus());
			transactionBreakdownDetails.setCategory("Debit Card");
			transactionBreakdownDetails.setServiceDate("2018-03-16");

			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			transactionDetails.get(0).setStatusLabel(ClaimStatus.INVALID_RECEIPT.getStatus());

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			TransactionBreakdownDTO mockTransactionBreakdownDTO = Mockito.mock(TransactionBreakdownDTO.class);
			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailCheck);

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.assertEquals(".pdf", fileDTO.getFileFormat());

		} catch (Exception e) {
			fail("testReceiptCoverSheetWithClaimStatusReceiptRequired failed with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testReceiptCoverSheetWithClaimStatusNotApproved() {
		PowerMockito.mockStatic(UserDAO.class);
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);

		Map<String, String> mailCheck = new HashMap<>();
		mailCheck.put("ADDR_LINE1", "");
		mailCheck.put("ADDR_LINE2", "");
		mailCheck.put("ADDR_LINE3", "");
		mailCheck.put("ADDR_CITY", "");
		mailCheck.put("ADDR_STATE", "");
		mailCheck.put("ADDR_ZIP", "");
		mailCheck.put("ADDR_COUNTRY", "");
		mailCheck.put("FAX_AREA", "1234");
		mailCheck.put("FAX_REST", "1234");
		mailCheck.put("PHONE_AREA", "1234");
		mailCheck.put("PHONE_REST", "1234");

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("DCRA");
			transactionBreakdownDetails.setAmount("238.79");
			transactionBreakdownDetails.setClaimBatchId(78118508);
			transactionBreakdownDetails.setStatus(ClaimStatus.NOT_APPROVED.getStatus());
			transactionBreakdownDetails.setCategory("Debit Card");
			transactionBreakdownDetails.setServiceDate("2018-03-16");

			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			transactionDetails.get(0).setStatusLabel(ClaimStatus.NOT_APPROVED.getStatus());

			transactionBreakdownDetails.setTransactionList(transactionDetails);

			TransactionBreakdownDTO mockTransactionBreakdownDTO = Mockito.mock(TransactionBreakdownDTO.class);
			Mockito.when(mockTransactionBreakdownDTO.getTransactionList()).thenReturn(transactionDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenReturn(mailCheck);

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);

			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.assertEquals(".pdf", fileDTO.getFileFormat());
		} catch (Exception e) {
			fail("testReceiptCoverSheetWithClaimStatusNotApproved failed with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testReceiptCoverSheetThrowException() {
		PowerMockito.mockStatic(ConfigUtil.class);
		PowerMockito.mockStatic(PropertiesHelper.class);
		PowerMockito.mockStatic(ImageUploadUtil.class);
		PowerMockito.mockStatic(UserDAO.class);
		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			while (bOutput.size() != 10) {
				bOutput.write("hello".getBytes());
			}

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("DCRA");
			transactionBreakdownDetails.setAmount("238.79");
			transactionBreakdownDetails.setClaimBatchId(78118508);
			transactionBreakdownDetails.setStatus(ClaimStatus.NOT_APPROVED.getStatus());
			transactionBreakdownDetails.setCategory("Debit Card");
			transactionBreakdownDetails.setServiceDate("2018-03-16");

			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);

			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);

			PowerMockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class), Mockito.anyString())).thenThrow(new SQLException());

			String filePath = new java.io.File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);

			PowerMockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);
			PowerMockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("test.jpg");
			PowerMockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);

			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			Assert.fail("testReceiptCoverSheetThrowException failed");

		} catch (SystemException e) {
			Assert.assertTrue("testReceiptCoverSheetThrowException success", true);
		} catch (Exception e) {
			Assert.fail("testReceiptCoverSheetThrowException faild with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGenerateReceiptCoverSheetWithBarcode() {

		try {
			ByteArrayOutputStream bOutput = new ByteArrayOutputStream(12);
			PowerMockito.mockStatic(ConfigUtil.class);
			PowerMockito.mockStatic(ConversionUtil.class);

			TransactionBreakdownDTO transactionBreakdownDetails = new TransactionBreakdownDTO();
			transactionBreakdownDetails.setAccountTypeCd("DCRA");
			transactionBreakdownDetails.setAmount("238.79");
			transactionBreakdownDetails.setClaimBatchId(78118508);
			transactionBreakdownDetails.setStatus(ClaimStatus.NOT_APPROVED.getStatus());
			transactionBreakdownDetails.setCategory("Debit Card");
			transactionBreakdownDetails.setServiceDate("2018-03-16");
			List<TransactionBreakdownDTO> transactionDetails = new ArrayList<>();
			transactionDetails.add(transactionBreakdownDetails);

			Map<String, String> mailCheck = new HashMap<>();
			mailCheck.put("ADDR_LINE1", "");
			mailCheck.put("ADDR_LINE2", "");
			mailCheck.put("ADDR_LINE3", "");
			mailCheck.put("ADDR_CITY", "");
			mailCheck.put("ADDR_STATE", "");
			mailCheck.put("ADDR_ZIP", "");
			mailCheck.put("ADDR_COUNTRY", "");
			mailCheck.put("FAX_AREA", "1234");
			mailCheck.put("FAX_REST", "1234");
			mailCheck.put("PHONE_AREA", "1234");
			mailCheck.put("PHONE_REST", "1234");
			Mockito.when(mockDatabase.getDBConnection()).thenReturn(conn);
			String filePath = new File(".").getCanonicalPath();
			Whitebox.setInternalState(ImageUploadUtil.class, "TEMP_FILE_LOCATION", filePath);
			Mockito.when(ConfigUtil.getStaticImagesPath()).thenReturn(filePath);
			Mockito.when(ConfigUtil.getLogoName(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class)))
					.thenReturn("logo.jpg");

			Mockito.when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("Yes");
			Mockito.when(
					ConfigUtil.getBarcodeValue(Mockito.any(Connection.class), Mockito.anyLong(), Mockito.anyString()))
					.thenReturn("2000004311500095590253");
			Mockito.when(mockOnlineClaimDAO.insertImageCoverSheet(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.any(UserDetailsBn.class))).thenReturn("OK");
			Mockito.when(ConfigUtil.getMailingDetails(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn(mailCheck);
			Mockito.when(ConversionUtil.getFormattedTelephoneOrFaxNo(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyString())).thenReturn("Fax-1234");
			Barcode barcode = Mockito.mock(Barcode.class);
			Mockito.when(BarcodeFactory.createCode128C(Mockito.anyString())).thenReturn(barcode);
			PowerMockito.doNothing().when(BarcodeImageHandler.class, "writePNG", Mockito.any(Barcode.class),
					Mockito.any(ByteArrayOutputStream.class));
			Mockito.when(mockTransactionFactory.getTransactionImpl(Mockito.anyString()))
					.thenReturn(mockClaimTransaction);
			Mockito.when(mockClaimTransaction.getTransactionBreakdown(Mockito.anyString(), Mockito.anyString(),
					Mockito.anyObject(), Mockito.anyString())).thenReturn(transactionBreakdownDetails);
			Mockito.when(ImageUploadUtil.getImageInByte(Mockito.anyString())).thenReturn(bOutput);
			FileDTO fileDTO = mockClaimBO.generateReceiptCoverSheet(getUserDetailBn(), getLabels(), "119984945",
					AccountActivitySource.CLAIMS.getSource());

			assertTrue("testGenerateReceiptCoverSheetWithBarcode success ", fileDTO.getFileName().contains(".pdf"));
			assertTrue("testGenerateReceiptCoverSheetWithBarcode success ", fileDTO.getFileFormat().equals(".pdf"));
			assertTrue("testGenerateReceiptCoverSheetWithBarcode success ",
					fileDTO.getMimeType().equals("application/pdf"));
		} catch (Exception e) {
			fail("testGenerateReceiptCoverSheetWithBarcode failed with the following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimDetailsByClaimBatch() {

		try {

			long claimBatchId = 103305642L;

			when(mockDatabase.getDBConnection()).thenReturn(conn);

			UserDetailsBn usrDtlsBn = getCommonUserDetails();

			String claimIds = "231310765,190832302";

			List<ClaimBn> claimBns = new ArrayList<>();

			ClaimBn claimBn = new ClaimBn();
			claimBn.setClaimId("231310765");
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("07/31/2018");
			claimBn.setClaimAmount("19.86");
			claimBn.setProviderName("UNCHC MYCHART (8062), CHAPEL HILL,NC");
			claimBn.setDesc("CLAIMS_ACTIVITY");
			claimBn.setActpCD("HCRA");
			claimBn.setClaimStatus("Receipt Required");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			claimBn.setCategoryDTO(categoryDTO);

			claimBns.add(claimBn);

			ClaimBn claimBn1 = new ClaimBn();
			claimBn1.setClaimId("190832302");
			claimBn1.setPriorYearCheckStatus(false);
			claimBn1.setServiceBegins("02/19/2018");
			claimBn1.setClaimAmount("80");
			claimBn1.setProviderName("David J. Novak, DDS, PA (8021), High Point,NC");
			claimBn1.setDesc("CLAIMS_ACTIVITY");
			claimBn1.setActpCD("HCRA");
			claimBn1.setClaimStatus("Paid");
			CategoryDTO categoryDTO1 = new CategoryDTO();
			categoryDTO1.setCategory("Dental-Medical");
			claimBn1.setCategoryDTO(categoryDTO1);

			claimBns.add(claimBn1);

			when(mockOnlineClaimDAO.getClaimsInClaimBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(claimIds);

			when(mockOnlineClaimDAO.getClaimDetailsByIds(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong())).thenReturn(claimBns);

			List<ClaimBn> claimDetailsList = mockClaimBO.getClaimDetailsInClaimBatch(usrDtlsBn, claimBatchId);

			assertTrue("testGetClaimDetailsByClaimBatch -> Checking length of Claim Details List",
					2 == claimDetailsList.size());

			assertTrue("testGetClaimDetailsByClaimBatch -> Checking value of Claim Id in Claim Detail Claim Bean 1",
					"231310765".equalsIgnoreCase(claimDetailsList.get(0).getClaimId()));

			assertTrue("testGetClaimDetailsByClaimBatch -> Checking value of Claim Id in Claim Detail Claim Bean 2",
					"190832302".equalsIgnoreCase(claimDetailsList.get(1).getClaimId()));

			assertTrue(
					"testGetClaimDetailsByClaimBatch -> Checking value of service begins in Claim Detail Claim Bean 1",
					"07/31/2018".equalsIgnoreCase(claimDetailsList.get(0).getServiceBegins()));

			assertTrue(
					"testGetClaimDetailsByClaimBatch -> Checking value of service begins in Claim Detail Claim Bean 2",
					"02/19/2018".equalsIgnoreCase(claimDetailsList.get(1).getServiceBegins()));

			assertTrue("testGetClaimDetailsByClaimBatch -> Checking value of claim status in Claim Detail Claim Bean 1",
					"Receipt Required".equalsIgnoreCase(claimDetailsList.get(0).getClaimStatus()));

			assertTrue("testGetClaimDetailsByClaimBatch -> Checking value of claim status in Claim Detail Claim Bean 2",
					"Paid".equalsIgnoreCase(claimDetailsList.get(1).getClaimStatus()));

		} catch (Exception e) {
			fail("### testGetClaimDetailsByClaimBatch ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimDetailsByIds() {

		try {

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			String claimIds = "231310765,190832302";
			List<ClaimBn> claimBns = new ArrayList<>();
			ClaimBn claimBn = new ClaimBn();
			claimBn.setClaimId("231310765");
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("07/31/2018");
			claimBn.setClaimAmount("19.86");
			claimBn.setProviderName("UNCHC MYCHART (8062), CHAPEL HILL,NC");
			claimBn.setDesc("CLAIMS_ACTIVITY");
			claimBn.setActpCD("HCRA");
			claimBn.setClaimStatus("Receipt Required");
			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			claimBn.setCategoryDTO(categoryDTO);

			claimBns.add(claimBn);

			ClaimBn claimBn1 = new ClaimBn();
			claimBn1.setClaimId("190832302");
			claimBn1.setPriorYearCheckStatus(false);
			claimBn1.setServiceBegins("02/19/2018");
			claimBn1.setClaimAmount("80");
			claimBn1.setProviderName("David J. Novak, DDS, PA (8021), High Point,NC");
			claimBn1.setDesc("CLAIMS_ACTIVITY");
			claimBn1.setActpCD("HCRA");
			claimBn1.setClaimStatus("Paid");
			CategoryDTO categoryDTO1 = new CategoryDTO();
			categoryDTO1.setCategory("Dental-Medical");
			claimBn1.setCategoryDTO(categoryDTO1);

			claimBns.add(claimBn1);

			when(mockOnlineClaimDAO.getClaimDetailsByIds(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong())).thenReturn(claimBns);

			List<ClaimBn> claimDetailsList = mockClaimBO.getClaimDetailsByIds(usrDtlsBn, claimIds);

			assertTrue("testGetClaimDetailsByIds-> Checking length of Claim Details List",
					2 == claimDetailsList.size());

			assertTrue("testGetClaimDetailsByIds -> Checking value of Claim Id in Claim Detail Claim Bean 1",
					"231310765".equalsIgnoreCase(claimDetailsList.get(0).getClaimId()));

			assertTrue("testGetClaimDetailsByIds -> Checking value of Claim Id in Claim Detail Claim Bean 2",
					"190832302".equalsIgnoreCase(claimDetailsList.get(1).getClaimId()));

			assertTrue("testGetClaimDetailsByIds -> Checking value of service begins in Claim Detail Claim Bean 1",
					"07/31/2018".equalsIgnoreCase(claimDetailsList.get(0).getServiceBegins()));

			assertTrue("testGetClaimDetailsByIds -> Checking value of service begins in Claim Detail Claim Bean 2",
					"02/19/2018".equalsIgnoreCase(claimDetailsList.get(1).getServiceBegins()));

			assertTrue("testGetClaimDetailsByIds -> Checking value of claim status in Claim Detail Claim Bean 1",
					"Receipt Required".equalsIgnoreCase(claimDetailsList.get(0).getClaimStatus()));

			assertTrue("testGetClaimDetailsByIds -> Checking value of claim status in Claim Detail Claim Bean 2",
					"Paid".equalsIgnoreCase(claimDetailsList.get(1).getClaimStatus()));

		} catch (Exception e) {
			fail("### testGetClaimDetailsByIds ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimDetailsByIdisNull() {

		try {

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			String claimIds = "";
			List<ClaimBn> claimBns = new ArrayList<>();

			when(mockOnlineClaimDAO.getClaimDetailsByIds(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong())).thenReturn(claimBns);

			List<ClaimBn> claimDetailsList = mockClaimBO.getClaimDetailsByIds(usrDtlsBn, claimIds);
			assertTrue(claimDetailsList.size() == 0);

		} catch (Exception e) {
			fail("### testGetClaimDetailsByIdisNull ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetClaimDetailsByClaimBatchThrowException() {
		try {

			long claimBatchId = 103305642L;
			UserDetailsBn usrDtlsBn = getCommonUserDetails();

			when(mockOnlineClaimDAO.getClaimsInClaimBatch(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenThrow(new SQLException());

			mockClaimBO.getClaimDetailsInClaimBatch(usrDtlsBn, claimBatchId);

			Assert.fail("testGetClaimDetailsByClaimBatchThrowException failed");

		} catch (SystemException e) {
			Assert.assertTrue("testGetClaimDetailsByClaimBatchThrowException success", true);
		} catch (Exception e) {
			Assert.fail(
					"testGetClaimDetailsByClaimBatchThrowException failed with following error " + getStackTrace(e));
		}

	}

	@Test
	public void testgetOverpaidClaimsTotalAmount() {
		try {
			double overPaidAmt = 0.0;
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.getOverpaidClaimsTotalAmount(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class))).thenReturn(130.85);
			overPaidAmt = mockClaimBO.getOverpaidClaimsTotalAmount(usrDtlsBn);
			assertTrue(overPaidAmt > 0);
		} catch (Exception e) {
			Assert.fail("testgetOverpaidClaimsTotalAmount failed with following error " + getStackTrace(e));
		}

	}

	@Test
	public void testgetOverpaidClaimsTotalAmountSQLException() {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			UserDetailsBn usrDtlsBn = getCommonUserDetails();
			when(mockOnlineClaimDAO.getOverpaidClaimsTotalAmount(Mockito.any(Connection.class),
					Mockito.any(UserDetailsBn.class))).thenThrow(new SQLException());
			mockClaimBO.getOverpaidClaimsTotalAmount(usrDtlsBn);
		} catch (SystemException e) {
			Assert.assertTrue("testgetOverpaidClaimsTotalAmountSQLException success", true);
		} catch (Exception e) {
			Assert.fail("testgetOverpaidClaimsTotalAmountSQLException failed with following error " + getStackTrace(e));
		}

	}

	@Test
	public void testValidateJraClaimDtlsForRecurringPremiumBundle() {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			boolean isAcntBnPopulated = true;
			Map<String, String> validationMap = new HashMap<>();
			validationMap.put("msg", "OK");
			validationMap.put("errorCode", "0");
			validationMap.put("phraBalance", "100");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setClaimId("231310765");
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("05/01/2019");
			claimBn.setServiceEnds("12/31/2019");
			claimBn.setClaimAmount("1000");
			claimBn.setProviderName("TEST");
			claimBn.setDependentID("OESSUKBJL4WXWS2NLJQWQMBOHEZTCNJV");

			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("PREMIUM");
			categoryDTO.setSelectedOccurrence("Recurring Premium");
			categoryDTO.setWillAllowLimited("No");
			categoryDTO.setIsPriorYear("No");
			claimBn.setCategoryDTO(categoryDTO);
			claimBnWrapper.setClaimBn(claimBn);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			String accStr = "Retiree Bundle(PHRA,RHRA)=PHRA~22009837~~~|RHRA~22009840~~~";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);

			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);

			when(mockOnlineClaimDAO.getJraBundleName(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("Retiree Bundle");

			when(mockOnlineClaimDAO.verifyClaimdata(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.any(ClaimBn.class))).thenReturn(validationMap);

			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue("testValidateJraClaimDtlsForBundle -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);
		} catch (Exception e) {
			fail("### testValidateJraClaimDtlsForBundle ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test(expected = BusinessLogicException.class)
	public void testValidateJraClaimDtlsForRecurringPremiumBundleWithError() throws Exception {

		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		Map<String, String> validationMap = new HashMap<>();
		validationMap.put("msg", "ERROR");
		validationMap.put("errorCode", "0");
		validationMap.put("phraBalance", "100");

		ClaimBn claimBn = new ClaimBn();
		claimBn.setClaimId("231310765");
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("05/01/2019");
		claimBn.setServiceEnds("12/31/2019");
		claimBn.setClaimAmount("1000");
		claimBn.setProviderName("TEST");
		claimBn.setDependentID("OESSUKBJL4WXWS2NLJQWQMBOHEZTCNJV");

		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("PREMIUM");
		categoryDTO.setSelectedOccurrence("Recurring Premium");
		categoryDTO.setWillAllowLimited("No");
		categoryDTO.setIsPriorYear("No");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);

		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString())).thenReturn("No");

		String accStr = "Retiree Bundle(PHRA,RHRA)=PHRA~22009837~~~|RHRA~22009840~~~";
		AccountTypeBn acctypeDto = new AccountTypeBn();
		acctypeDto.setAccountTypes(accStr);
		when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class), Mockito.any(Date.class)))
						.thenReturn(acctypeDto);

		when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
				Mockito.anyString())).thenReturn(false, false);
		List<String> planYearList = new ArrayList<>();
		planYearList.add("2019");
		when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
				.thenReturn(planYearList);
		when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(), Mockito.anyString(),
				Mockito.anyString(), Mockito.anyString(), Mockito.anyString())).thenReturn(false);

		when(mockOnlineClaimDAO.getJraBundleName(Mockito.any(Connection.class), Mockito.anyString()))
				.thenReturn("Retiree Bundle");

		when(mockOnlineClaimDAO.verifyClaimdata(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
				Mockito.anyString(), Mockito.anyString(), Mockito.any(ClaimBn.class))).thenReturn(validationMap);

		UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
		mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test
	public void testValidateJraClaimDtlsForOnetimePremiumBundle() throws BusinessLogicException, SystemException {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			boolean isAcntBnPopulated = true;
			Map<String, String> validationMap = new HashMap<>();
			validationMap.put("msg", "OK");
			validationMap.put("errorCode", "");
			validationMap.put("phraBalance", "100");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setClaimId("231310765");
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("05/01/2019");
			claimBn.setServiceEnds("12/31/2019");
			claimBn.setClaimAmount("1000");
			claimBn.setProviderName("TEST");
			claimBn.setDependentID("OESSUKBJL4WXWS2NLJQWQMBOHEZTCNJV");

			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("PREMIUM");
			categoryDTO.setSelectedOccurrence("One-Time Premium");
			categoryDTO.setWillAllowLimited("No");
			categoryDTO.setIsPriorYear("No");
			claimBn.setCategoryDTO(categoryDTO);
			claimBnWrapper.setClaimBn(claimBn);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			String accStr = "Retiree Bundle(PHRA,RHRA)=PHRA~22009837~~~|RHRA~22009840~~~";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);

			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);

			when(mockOnlineClaimDAO.getJraBundleName(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("None");

			when(mockOnlineClaimDAO.verifyClaimdata(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.any(ClaimBn.class))).thenReturn(validationMap);

			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			ClaimBnWrapper newClaimBnWrapper = mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);
			for (AccountBn accountBn : newClaimBnWrapper.getClaimBn().getAccbnList()) {
				if (accountBn.getElctID() == null && accountBn.getAccountTypeCD() == null) {
					isAcntBnPopulated = false;
					break;
				}
			}
			assertTrue("testValidateJraClaimDtlsForBundle -> Checking if account bean list is populated correctly",
					isAcntBnPopulated);
		} catch (SQLException e) {
			fail("### testValidateJraClaimDtlsForOnetimePremiumBundle ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateJraClaimDtlsForOnetimePremiumBundlewithError()
			throws BusinessLogicException, SystemException {
		try {
			ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
			Map<String, String> validationMap = new HashMap<>();
			validationMap.put("msg", "Claim Amount must be less than Available Balance");
			validationMap.put("errorCode", "45352");
			validationMap.put("phraBalance", "100");

			ClaimBn claimBn = new ClaimBn();
			claimBn.setClaimId("231310765");
			claimBn.setPriorYearCheckStatus(false);
			claimBn.setServiceBegins("05/01/2019");
			claimBn.setServiceEnds("12/31/2019");
			claimBn.setClaimAmount("1000");
			claimBn.setProviderName("TEST");
			claimBn.setDependentID("OESSUKBJL4WXWS2NLJQWQMBOHEZTCNJV");

			CategoryDTO categoryDTO = new CategoryDTO();
			categoryDTO.setCategory("Medical");
			categoryDTO.setClaimtype("PREMIUM");
			categoryDTO.setSelectedOccurrence("One-Time Premium");
			categoryDTO.setWillAllowLimited("No");
			categoryDTO.setIsPriorYear("No");
			claimBn.setCategoryDTO(categoryDTO);
			claimBnWrapper.setClaimBn(claimBn);

			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
			when(ConfigDAO.getErAdmnDemogValue(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString())).thenReturn("No");

			String accStr = "Retiree Bundle(PHRA,RHRA)=PHRA~22009837~~~|RHRA~22009840~~~";
			AccountTypeBn acctypeDto = new AccountTypeBn();
			acctypeDto.setAccountTypes(accStr);
			when(mockOnlineClaimDAO.getAccountType(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.any(Date.class),
					Mockito.any(Date.class))).thenReturn(acctypeDto);

			when(mockOnlineClaimDAO.checkIfPriorElection(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString())).thenReturn(false, false);
			List<String> planYearList = new ArrayList<>();
			planYearList.add("2019");
			when(mockAccountDetailsDAO.getPlanYearListWithElctId(Mockito.any(Connection.class), Mockito.anyLong()))
					.thenReturn(planYearList);
			when(CommonAccountDAO.isLPFSAAccount(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
							.thenReturn(false);

			when(mockOnlineClaimDAO.getJraBundleName(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("None");

			when(mockOnlineClaimDAO.verifyClaimdata(Mockito.any(Connection.class), Mockito.any(UserDetailsBn.class),
					Mockito.anyString(), Mockito.anyString(), Mockito.any(ClaimBn.class))).thenReturn(validationMap);

			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);
		} catch (SQLException e) {
			fail("### testValidateJraClaimDtlsForOnetimePremiumBundle ### Failed with following error: "
					+ getStackTrace(e));
		}
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateJraClaimDtlsBlankCatogory() throws BusinessLogicException, SystemException {

		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
		mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);
	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateJraClaimDtlsBlankClaimType() throws BusinessLogicException, SystemException {

		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("");
		claimBn.setClaimId("231310765");
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("05/01/2019");
		claimBn.setServiceEnds("12/31/2019");
		claimBn.setClaimAmount("1000");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
		mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);

	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateJraClaimDtlsBlankOccurenceType() throws BusinessLogicException, SystemException {

		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("Premium");
		claimBn.setClaimId("231310765");
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("05/01/2019");
		claimBn.setServiceEnds("12/31/2019");
		claimBn.setClaimAmount("1000");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
		mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);

	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateJraClaimDtlsBlankProviderName() throws BusinessLogicException, SystemException {

		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("Premium");
		categoryDTO.setSelectedOccurrence("One-Time Premium");
		claimBn.setClaimId("231310765");
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("05/01/2019");
		claimBn.setServiceEnds("12/31/2019");
		claimBn.setClaimAmount("1000");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
		mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);

	}

	@Test(expected = com.acclaris.common.exceptions.BusinessLogicException.class)
	public void testValidateJraClaimDtlsLengthProviderName() throws BusinessLogicException, SystemException {

		ClaimBnWrapper claimBnWrapper = getClaimBnWrapper();
		ClaimBn claimBn = new ClaimBn();
		CategoryDTO categoryDTO = new CategoryDTO();
		categoryDTO.setCategory("Medical");
		categoryDTO.setClaimtype("Premium");
		categoryDTO.setSelectedOccurrence("One-Time Premium");
		claimBn.setClaimId("231310765");
		claimBn.setPriorYearCheckStatus(false);
		claimBn.setServiceBegins("05/01/2019");
		claimBn.setServiceEnds("12/31/2019");
		claimBn.setClaimAmount("1000");
		claimBn.setProviderName(
				"testrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrtyuiw");
		claimBn.setCategoryDTO(categoryDTO);
		claimBnWrapper.setClaimBn(claimBn);
		when(mockDatabase.getDBConnection()).thenReturn(conn);
		PowerMockito.doNothing().when(mockDatabase).closeDBConnection();
		UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
		mockClaimBO.validateJraClaimDtls(usrDtlsBn, claimBnWrapper);

	}

	@Test
	public void testRecoveryDetailsByCheckNo() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");
			recoveryDetailsDTO.setType("1234");

			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getClaimRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(listRecovery);
			List<String> param = new ArrayList<>();
			param.add("1");
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("", "CHECK", usrDtlsBn);

			assertEquals(recoveryList.get(0).getType(), "Check #1234");
		} catch (SQLException e) {
			fail("### testRecoveryDetailsByCheck No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testRecoveryDetailsEmployerCollection() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");
			recoveryDetailsDTO.setType("Plan Collection");

			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getClaimRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(listRecovery);
			List<String> param = new ArrayList<>();
			param.add("1");
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("", "PLANSPONSOR", usrDtlsBn);

			assertEquals(recoveryList.get(0).getType(), "Plan Collection");
		} catch (SQLException e) {
			fail("### testRecoveryDetailsEmployerCollection No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testRecoveryDetailsOffset() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");
			recoveryDetailsDTO.setType("OFFSET");
			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			usrDtlsBn.setJRAAccount(false);
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getNonJraOffsetRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(listRecovery);
			List<String> param = new ArrayList<>();
			param.add("1");
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("1", "OFFSET", usrDtlsBn);

			assertEquals(recoveryList.get(0).getStatus(), "USED FOR OFFSET");
		} catch (SQLException e) {
			fail("### testRecoveryDetailsOffset No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testJraRecoveryDetailsOffset() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");
			recoveryDetailsDTO.setType("OFFSET");
			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getJraOffsetRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(listRecovery);
			List<String> param = new ArrayList<>();
			param.add("1");
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("1", "OFFSET", usrDtlsBn);

			assertEquals(recoveryList.get(0).getStatus(), "USED FOR OFFSET");
		} catch (SQLException e) {
			fail("### testJraRecoveryDetailsOffset No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testRecoveryDetailsRecoveryTypeNUll() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");

			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getNonJraOffsetRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(listRecovery);
			List<String> param = new ArrayList<>();
			param.add("1");
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("", "", usrDtlsBn);

			assertNull(recoveryList);
		} catch (SQLException e) {
			fail("### testRecoveryDetailsRecoveryTypeNUll No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testRecoveryDetailsWithoutCheckNo() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");
			recoveryDetailsDTO.setType("");

			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getClaimRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenReturn(listRecovery);
			List<String> param = new ArrayList<>();
			param.add("1");
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("", "CHECK", usrDtlsBn);

			assertEquals(recoveryList.get(0).getType(), "");
		} catch (SQLException e) {
			fail("### testRecoveryDetailsWithoutCheckNo No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testRecoveryDetailsSqlException() throws BusinessLogicException, SystemException {
		try {
			RecoveryDetailDTO recoveryDetailsDTO = new RecoveryDetailDTO();
			recoveryDetailsDTO.setActivtyDate("2016-02-10");
			recoveryDetailsDTO.setAmt("14");
			recoveryDetailsDTO.setRecoveryType("");

			List<RecoveryDetailDTO> listRecovery = new ArrayList<>();
			listRecovery.add(recoveryDetailsDTO);
			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getClaimRecoveryDetails(Mockito.any(Connection.class), Mockito.anyList()))
					.thenThrow(new SQLException());
			List<String> param = new ArrayList<>();
			param.add("1");
			List<RecoveryDetailDTO> recoveryList = mockClaimBO.getClaimRecoveryDetails("", "CHECK", usrDtlsBn);

		} catch (SystemException e) {
			Assert.assertTrue("testRecoveryDetailsSqlException success", true);
		} catch (Exception e) {
			Assert.fail("testRecoveryDetailsSqlException faild with following error " + getStackTrace(e));
		}
	}

	@Test
	public void testGetAppealMessage() throws BusinessLogicException, SystemException {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getErisaAppealIndicator(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong())).thenReturn("NG");
			when(mockOnlineClaimDAO.getErisaAppealText(Mockito.any(Connection.class), Mockito.anyString()))
					.thenReturn("TEST APPEAL MESSAGE");

			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			Map<String, Object> result = mockClaimBO.getAppealMessage(usrDtlsBn, "HCRA");

			assertEquals(result.get("appealMessage"), "TEST APPEAL MESSAGE");
		} catch (SQLException e) {
			fail("### testGetAppealMessage No ### Failed with following error: " + getStackTrace(e));
		}
	}

	@Test
	public void testGetAppealMessageWithSqlException() throws BusinessLogicException, SystemException {
		try {
			when(mockDatabase.getDBConnection()).thenReturn(conn);
			PowerMockito.doNothing().when(mockDatabase).closeDBConnection();

			when(mockOnlineClaimDAO.getErisaAppealIndicator(Mockito.any(Connection.class), Mockito.anyString(),
					Mockito.anyLong())).thenReturn("NG");
			when(mockOnlineClaimDAO.getErisaAppealText(Mockito.any(Connection.class), Mockito.anyString()))
					.thenThrow(new SQLException());

			UserDetailsBn usrDtlsBn = getJRACommonUserDetails();
			Map<String, Object> result = mockClaimBO.getAppealMessage(usrDtlsBn, "HCRA");
		} catch (SystemException e) {
			Assert.assertTrue("testGetAppealMessageWithSqlException success", true);
		} catch (Exception e) {
			Assert.fail("testGetAppealMessageWithSqlException faild with following error " + getStackTrace(e));
		}
	}

	private UserDetailsBn getJRACommonUserDetails() {
		UserDetailsBn userDtlBn = new UserDetailsBn();
		userDtlBn.setId(10574588L);
		userDtlBn.setEeID(5962526);
		userDtlBn.setUserType("EE");
		userDtlBn.setName("HELEN E CARTER");
		userDtlBn.setErID(1001274L);
		userDtlBn.setAdmnID(1L);
		userDtlBn.setErID(1L);
		userDtlBn.setJRAAccount(true);
		return userDtlBn;
	}

	private ImageBn getImageBn() {
		ImageBn imageBn = new ImageBn();
		imageBn.setImageFormat("jpg");
		imageBn.setImageName("imageFileName.jpg");
		imageBn.setImageSize(100000L);
		imageBn.setNoOfPages(2l);
		imageBn.setImagePath("/u01/imageupload/imgupldtempdir");
		return imageBn;
	}

	public UserDetailsBn getUserDetailBn() {
		UserDetailsBn userDtlBn = new UserDetailsBn();
		userDtlBn.setId(10574588L);
		userDtlBn.setEeID(5962525);
		userDtlBn.setUserType("EE");
		userDtlBn.setName("Thomas B Cook");
		userDtlBn.setGroupName("AVIK TEST, INC.");
		userDtlBn.setErID(1001274L);
		userDtlBn.setAdmnID(1L);
		userDtlBn.setErID(1L);
		return userDtlBn;
	}

	private BalanceDTO getBalanceBn(double balance) {
		BalanceDTO balanceBn = new BalanceDTO();
		balanceBn.setBalance(balance);
		balanceBn.setRealTimeBalance(true);
		return balanceBn;
	}

	private ApprovedClaimDetailsBn getApprovedClaimDetails() {
		ApprovedClaimDetailsBn approvedClaimDetails = new ApprovedClaimDetailsBn();
		approvedClaimDetails.setClaimID(1);
		approvedClaimDetails.setAmount(84);
		approvedClaimDetails.setActpCD("HSA");
		approvedClaimDetails.setElctId(14078043);
		approvedClaimDetails.setPayeeId(12345);
		approvedClaimDetails.setTrxnId(123456);
		approvedClaimDetails.setClmCtgry("Medical");
		approvedClaimDetails.setClmTyp("Doctor");
		approvedClaimDetails.setBegins("07/01/2018");
		approvedClaimDetails.setEeId(5962526);
		approvedClaimDetails.setClaimBatchType("Online");
		approvedClaimDetails.setStatus("Approved");
		approvedClaimDetails.setAccount("1234567890");
		// approvedClaimDetails.setPayeeType("Self");
		approvedClaimDetails.setPayeeType("Other");
		return approvedClaimDetails;
	}

	private CardGenericInputDTO getCardGenericInputDTO() {
		CardGenericInputDTO cardInputBn = new CardGenericInputDTO();
		cardInputBn.setErID("1006405");
		cardInputBn.setEeID("5954590");
		cardInputBn.setElctId("123456");
		cardInputBn.setPartnerName("TSYS");
		return cardInputBn;
	}

	private List<LabelDTO> getLabels() {
		List<LabelDTO> labelList = new ArrayList<>();

		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.TITLE", "Document Request Cover Sheet"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.NOOFPAGE", "Number of pages"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.FAXHEADING", "Fax Instructions"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.FAXCONTENTONE",
				"Attach your supporting documentation to this cover sheet."));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.FAXCONTENTTWO", "Fax to"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.FAXCONTENTTHREE",
				"Please resubmit the entire fax if the initial transmission is not successful."));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.MAILHEADING", "Or mail to"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.MAILCONTENTONE",
				"Be certain to send copies of your supporting documentation along with this page."));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.MAILCONTENTTWO",
				"Please retain the originals for your records."));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.RECEIPTHEADING", "Itemized receipts must include"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.RECEIPTCONTENTONE",
				"The name of the person for whom the item or service was purchased"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.RECEIPTCONTENTTWO",
				"The date of purchase or the date the service was provided"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.RECEIPTCONTENTTHREE",
				"A description of the item purchased or service received"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.RECEIPTCONTENTFOUR",
				"The merchant, facility, or service provider's name'"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.RECEIPTCONTENTFIVE", "Amount"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.ACCOUNTHOLDERCONTENT", "Accountholder"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.PARTICIPANTIDCONTENT", "Participant ID"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.TOTALAMOUNTCONTENT", "Total Amount"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.TRANSACTIONIDCONTENT", "Transaction ID"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.ACCOUNTTYPECONTENT", "Account Type"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.SERVICEDATEFROMCONTENT", "Service Date From"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.CATEGORYCONTENT", "Category"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.TYPECONTENT", "Type"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.AMOUNTCONTENT", "Not Approved Amount"));
		labelList.add(new LabelDTO("TRANSACTION.RECEIPTCOVERSHEET.CLAIMIDCONTENT", "Not Approved Claim ID"));
		labelList.add(new LabelDTO("TRANSACTION.FAXORMAILRECEIPT.POPUP.HEADER", "Fax or Mail Receipt"));
		labelList.add(new LabelDTO("TRANSACTION.FAXORMAILRECEIPT.POPUP.MESSAGE",
				"If you plan to fax or mail your receipt, please add as much information as you can in order to help us associate the receipt with this transaction. It will be kept in a {{claimStatus}} status until a receipt is received."));
		labelList.add(new LabelDTO("TRANSACTION.FAXORMAILRECEIPT.POPUP.MAILTO", "Mail To"));
		labelList.add(new LabelDTO("TRANSACTION.FAXORMAILRECEIPT.POPUP.PRINTCOVERSHEETBUTTON", "PRINT COVERSHEET"));
		labelList.add(new LabelDTO("TRANSACTION.FAXORMAILRECEIPT.POPUP.CLOSEBUTTON", "CLOSE"));

		return labelList;
	}

	private TransactionDetailsDTO getMockAcctActivityCardDetails() {
		TransactionDetailsDTO acctActivityDTO = new TransactionDetailsDTO();
		acctActivityDTO.setCategory("Medical");
		acctActivityDTO.setStatus("Paid");
		acctActivityDTO.setServiceBeginDate("01/01/2019");
		acctActivityDTO.setServiceEndDate("02/31/2019");
		acctActivityDTO.setTransactionID("119993190");
		acctActivityDTO.setAmount("200.32232");
		acctActivityDTO.setProvider("ABC");
		acctActivityDTO.setMethod("Online");
		acctActivityDTO.setAppealStatus("");
		acctActivityDTO.setAppealReviewedBy("");

		ActivityBreakdownDTO activityBreakdownDTO = new ActivityBreakdownDTO();
		activityBreakdownDTO.setClaimId("120005294");
		activityBreakdownDTO.setSubmitClaimId("120005294");
		activityBreakdownDTO.setAccountType("PHRA");
		activityBreakdownDTO.setElctId("14480734");
		activityBreakdownDTO.setAmount("100");
		activityBreakdownDTO.setCategory("Medical");
		activityBreakdownDTO.setType("PREMIUM");
		activityBreakdownDTO.setStatus("Processing Payment");
		activityBreakdownDTO.setStatusInfo("");
		activityBreakdownDTO.setClmbtId("24788160");
		activityBreakdownDTO.setClmBtType("Pass Thru");
		activityBreakdownDTO.setServiceBeginDate("01/01/2019");
		activityBreakdownDTO.setServiceEndDate("01/31/2019");
		activityBreakdownDTO.setActivityDate("01/17/2019");
		activityBreakdownDTO.setProvider("TEST");
		activityBreakdownDTO.setExpectedPymtDate(null);

		ActivityBreakdownDTO activityBreakdownDTO1 = new ActivityBreakdownDTO();
		activityBreakdownDTO1.setClaimId("120005295");
		activityBreakdownDTO1.setSubmitClaimId("120005294");
		activityBreakdownDTO1.setAccountType("PHRA");
		activityBreakdownDTO1.setElctId("14480734");
		activityBreakdownDTO1.setAmount("100");
		activityBreakdownDTO1.setCategory("Medical");
		activityBreakdownDTO1.setType("PREMIUM");
		activityBreakdownDTO1.setStatus("Processing Scheduled");
		activityBreakdownDTO1.setStatusInfo("");
		activityBreakdownDTO1.setClmbtId("24788160");
		activityBreakdownDTO1.setClmBtType("Pass Thru");
		activityBreakdownDTO1.setServiceBeginDate("02/01/2019");
		activityBreakdownDTO1.setServiceEndDate("02/31/2019");
		activityBreakdownDTO1.setActivityDate("01/17/2019");
		activityBreakdownDTO1.setProvider("TEST");
		activityBreakdownDTO1.setExpectedPymtDate(null);

		List<ActivityBreakdownDTO> activityBreakdownDetails = new ArrayList<>();
		activityBreakdownDetails.add(activityBreakdownDTO);
		activityBreakdownDetails.add(activityBreakdownDTO1);

		acctActivityDTO.setActivityBreakdownDetails(activityBreakdownDetails);
		acctActivityDTO.setInstallments(12);
		acctActivityDTO.setPremiumOccurenceType("Recurring");

		return acctActivityDTO;
	}

	@After
	public void tearDown() {

		LOGGER.info("########### tearDown() Started ###########");
		mockClaimBO = null;
		mockOnlineClaimDAO = null;
		conn = null;

		assertNull(mockClaimBO);
		assertNull(mockOnlineClaimDAO);
		assertNull(conn);
		LOGGER.info("########### tearDown() Completed ###########");

	}

	private String getStackTrace(Throwable aThrowable) {
		LOGGER.info("########### getStackTrace() Started ###########");

		final Writer result = new StringWriter();
		final PrintWriter printWriter = new PrintWriter(result);
		aThrowable.printStackTrace(printWriter);

		LOGGER.info("########### getStackTrace() Completed ###########");
		return result.toString();
	}

}
