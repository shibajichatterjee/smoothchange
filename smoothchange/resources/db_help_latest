

CREATE OR REPLACE PACKAGE GetActionNeededPortalRules3 AUTHID DEFINER IS

  -- Author  : Mainak Ghosh
  -- Created : 03/17/2017
  -- Purpose : To display different notification for Portal 3.0

  PROCEDURE processActionNeededPortalRules(ocresult          OUT VARCHAR2,
                                           ocerrorcategory   OUT VARCHAR2,
                                           onerrorcode       OUT NUMBER,
                                           ocErrorArea       OUT VARCHAR2,
                                           ocothermessage    OUT VARCHAR2,
                                           ottabNotification OUT ttab_notification,
                                           ------------
                                           inEe_Id    IN Employee.Id%TYPE,
                                           icRuleType IN rules.rule_type%TYPE,
                                           ------------
                                           icUserName IN VARCHAR2 DEFAULT 'System');

  FUNCTION VALIDATE_RULES(ocresult        OUT VARCHAR2,
                          ocerrorcategory OUT VARCHAR2,
                          onerrorcode     OUT NUMBER,
                          ocErrorArea     OUT VARCHAR2,
                          ocothermessage  OUT VARCHAR2,
                          --------------
                          inAdmin_Id         IN Administrator.Id%TYPE,
                          inEr_Id            IN Employer.Id%TYPE,
                          inEe_Id            IN Employee.Id%TYPE,
                          icUserName         IN VARCHAR2,
                          icAchAcct          IN VARCHAR2,
                          icAchISO           IN VARCHAR2,
                          icIsAchValid       IN VARCHAR2,
                          icDebitCardStatus  IN VARCHAR2,
                          icEmail            IN VARCHAR2,
                          icIsAddressInValid IN VARCHAR2,
                          icRuleType         IN rules.rule_type%TYPE)
    RETURN ttab_notification;

  -----------------Rules-------------------------------------

  PROCEDURE RecReqForDBCardsClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdmin_Id         NUMBER,
                                   inEr_Id            NUMBER,
                                   inEe_Id            NUMBER,
                                   icUserName         VARCHAR2,
                                   icAchAcct          VARCHAR2,
                                   icAchISO           VARCHAR2,
                                   icIsAchValid       VARCHAR2,
                                   icDebitCardStatus  VARCHAR2,
                                   icEmail            VARCHAR2,
                                   icIsAddressInValid VARCHAR2,
                                   icSeverity         VARCHAR2,
                                   inPriority         NUMBER,
                                   icRuleType         VARCHAR2);

  PROCEDURE NotApprovedClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                              inAdmin_Id         NUMBER,
                              inEr_Id            NUMBER,
                              inEe_Id            NUMBER,
                              icUserName         VARCHAR2,
                              icAchAcct          VARCHAR2,
                              icAchISO           VARCHAR2,
                              icIsAchValid       VARCHAR2,
                              icDebitCardStatus  VARCHAR2,
                              icEmail            VARCHAR2,
                              icIsAddressInValid VARCHAR2,
                              icSeverity         VARCHAR2,
                              inPriority         NUMBER,
                              icRuleType         VARCHAR2);

  PROCEDURE LostOrStolenDebitCard(ottabNotification  IN OUT NOCOPY ttab_notification,
                              inAdmin_Id         NUMBER,
                              inEr_Id            NUMBER,
                              inEe_Id            NUMBER,
                              icUserName         VARCHAR2,
                              icAchAcct          VARCHAR2,
                              icAchISO           VARCHAR2,
                              icIsAchValid       VARCHAR2,
                              icDebitCardStatus  VARCHAR2,
                              icEmail            VARCHAR2,
                              icIsAddressInValid VARCHAR2,
                              icSeverity         VARCHAR2,
                              inPriority         NUMBER,
                              icRuleType         VARCHAR2);

  PROCEDURE InvalidatedBankAccounts(ottabNotification  IN OUT NOCOPY ttab_notification,
                              inAdmin_Id         NUMBER,
                              inEr_Id            NUMBER,
                              inEe_Id            NUMBER,
                              icUserName         VARCHAR2,
                              icAchAcct          VARCHAR2,
                              icAchISO           VARCHAR2,
                              icIsAchValid       VARCHAR2,
                              icDebitCardStatus  VARCHAR2,
                              icEmail            VARCHAR2,
                              icIsAddressInValid VARCHAR2,
                              icSeverity         VARCHAR2,
                              inPriority         NUMBER,
                              icRuleType         VARCHAR2);

  PROCEDURE GetNotPaidPassThruClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                     inAdmin_Id         NUMBER,
                                     inEr_Id            NUMBER,
                                     inEe_Id            NUMBER,
                                     icUserName         VARCHAR2,
                                     icAchAcct          VARCHAR2,
                                     icAchISO           VARCHAR2,
                                     icIsAchValid       VARCHAR2,
                                     icDebitCardStatus  VARCHAR2,
                                     icEmail            VARCHAR2,
                                     icIsAddressInValid VARCHAR2,
                                     icSeverity         VARCHAR2,
                                     inPriority         NUMBER,
                                     icRuleType         VARCHAR2);

  PROCEDURE UnCashedChequePaymentTrxn(ottabNotification  IN OUT NOCOPY ttab_notification,
                                      inAdmin_Id         NUMBER,
                                      inEr_Id            NUMBER,
                                      inEe_Id            NUMBER,
                                      icUserName         VARCHAR2,
                                      icAchAcct          VARCHAR2,
                                      icAchISO           VARCHAR2,
                                      icIsAchValid       VARCHAR2,
                                      icDebitCardStatus  VARCHAR2,
                                      icEmail            VARCHAR2,
                                      icIsAddressInValid VARCHAR2,
                                      icSeverity         VARCHAR2,
                                      inPriority         NUMBER,
                                      icRuleType         VARCHAR2);

  PROCEDURE AddlRecptReqForDBCardsClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                         inAdmin_Id         NUMBER,
                                         inEr_Id            NUMBER,
                                         inEe_Id            NUMBER,
                                         icUserName         VARCHAR2,
                                         icAchAcct          VARCHAR2,
                                         icAchISO           VARCHAR2,
                                         icIsAchValid       VARCHAR2,
                                         icDebitCardStatus  VARCHAR2,
                                         icEmail            VARCHAR2,
                                         icIsAddressInValid VARCHAR2,
                                         icSeverity         VARCHAR2,
                                         inPriority         NUMBER,
                                         icRuleType         VARCHAR2);

  PROCEDURE OverpaymentClaim(ottabNotification  IN OUT NOCOPY ttab_notification,
                             inAdmin_Id         IN NUMBER,
                             inEr_Id            IN NUMBER,
                             inEe_Id            IN NUMBER,
                             icUserName         IN VARCHAR2,
                             icAchAcct          IN VARCHAR2,
                             icAchISO           IN VARCHAR2,
                             icIsAchValid       IN VARCHAR2,
                             icDebitCardStatus  IN VARCHAR2,
                             icEmail            IN VARCHAR2,
                             icIsAddressInValid IN VARCHAR2,
                             icSeverity         IN VARCHAR2,
                             inPriority         IN NUMBER,
                             icRuleType         VARCHAR2);

  PROCEDURE DirectDepositFailed(ottabNotification  IN OUT NOCOPY ttab_notification,
                                inAdmin_Id         IN NUMBER,
                                inEr_Id            IN NUMBER,
                                inEe_Id            IN NUMBER,
                                icUserName         IN VARCHAR2,
                                icAchAcct          IN VARCHAR2,
                                icAchISO           IN VARCHAR2,
                                icIsAchValid       IN VARCHAR2,
                                icDebitCardStatus  IN VARCHAR2,
                                icEmail            IN VARCHAR2,
                                icIsAddressInValid IN VARCHAR2,
                                icSeverity         IN VARCHAR2,
                                inPriority         IN NUMBER,
                                icRuleType         VARCHAR2);

  PROCEDURE AddBeneficiaries(ottabNotification  IN OUT NOCOPY ttab_notification,
                             inAdmin_Id         IN NUMBER,
                             inEr_Id            IN NUMBER,
                             inEe_Id            IN NUMBER,
                             icUserName         IN VARCHAR2,
                             icAchAcct          IN VARCHAR2,
                             icAchISO           IN VARCHAR2,
                             icIsAchValid       IN VARCHAR2,
                             icDebitCardStatus  IN VARCHAR2,
                             icEmail            IN VARCHAR2,
                             icIsAddressInValid IN VARCHAR2,
                             icSeverity         IN VARCHAR2,
                             inPriority         IN NUMBER,
                             icRuleType         VARCHAR2);

  PROCEDURE DBCardTurnedOff(ottabNotification  IN OUT NOCOPY ttab_notification,
                            inAdmin_Id         IN NUMBER,
                            inEr_Id            IN NUMBER,
                            inEe_Id            IN NUMBER,
                            icUserName         IN VARCHAR2,
                            icAchAcct          IN VARCHAR2,
                            icAchISO           IN VARCHAR2,
                            icIsAchValid       IN VARCHAR2,
                            icDebitCardStatus  IN VARCHAR2,
                            icEmail            IN VARCHAR2,
                            icIsAddressInValid IN VARCHAR2,
                            icSeverity         IN VARCHAR2,
                            inPriority         IN NUMBER,
                            icRuleType         VARCHAR2);

  PROCEDURE MissingEmail(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2);

  PROCEDURE EnrollOnline(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2);

  PROCEDURE UpdateMailingAddress(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2);

  PROCEDURE CompleteAccountOpening(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdminId          IN NUMBER,
                                   inErId             IN NUMBER,
                                   inEeId             IN NUMBER,
                                   icUserName         IN VARCHAR2,
                                   icAchAcct          IN VARCHAR2,
                                   icAchISO           IN VARCHAR2,
                                   icIsAchValid       IN VARCHAR2,
                                   icDebitCardStatus  IN VARCHAR2,
                                   icEmail            IN VARCHAR2,
                                   icIsAddressInValid IN VARCHAR2,
                                   icSeverity         IN VARCHAR2,
                                   inPriority         IN NUMBER,
                                   icRuleType         VARCHAR2);

  PROCEDURE ResolveReceiptReqdAct(ottabNotification  IN OUT NOCOPY ttab_notification,
                                  inAdminId          IN NUMBER,
                                  inErId             IN NUMBER,
                                  inEeId             IN NUMBER,
                                  icUserName         IN VARCHAR2,
                                  icAchAcct          IN VARCHAR2,
                                  icAchISO           IN VARCHAR2,
                                  icIsAchValid       IN VARCHAR2,
                                  icDebitCardStatus  IN VARCHAR2,
                                  icEmail            IN VARCHAR2,
                                  icIsAddressInValid IN VARCHAR2,
                                  icSeverity         IN VARCHAR2,
                                  inPriority         IN NUMBER,
                                  icRuleType         IN VARCHAR2);

  PROCEDURE RunOutOfTimeToUseBalanceCY(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         IN NUMBER,
                                       inEr_Id            IN NUMBER,
                                       inEe_Id            IN NUMBER,
                                       icUserName         IN VARCHAR2,
                                       icAchAcct          IN VARCHAR2,
                                       icAchISO           IN VARCHAR2,
                                       icIsAchValid       IN VARCHAR2,
                                       icDebitCardStatus  IN VARCHAR2,
                                       icEmail            IN VARCHAR2,
                                       icIsAddressInValid IN VARCHAR2,
                                       icSeverity         IN VARCHAR2,
                                       inPriority         IN NUMBER,
                                       icRuleType         VARCHAR2);

  PROCEDURE RunOutOfTimeToUseBalancePY(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         IN NUMBER,
                                       inEr_Id            IN NUMBER,
                                       inEe_Id            IN NUMBER,
                                       icUserName         IN VARCHAR2,
                                       icAchAcct          IN VARCHAR2,
                                       icAchISO           IN VARCHAR2,
                                       icIsAchValid       IN VARCHAR2,
                                       icDebitCardStatus  IN VARCHAR2,
                                       icEmail            IN VARCHAR2,
                                       icIsAddressInValid IN VARCHAR2,
                                       icSeverity         IN VARCHAR2,
                                       inPriority         IN NUMBER,
                                       icRuleType         VARCHAR2);

  PROCEDURE CashBalanceThreshold(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2);

  PROCEDURE UnderStandingAccount(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2);

  PROCEDURE GetMobileApp(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2);

  PROCEDURE ExcessContribCheck(ottabNotification  IN OUT NOCOPY ttab_notification,
           inAdmin_Id         NUMBER,
           inEr_Id            NUMBER,
           inEe_Id            NUMBER,
           icUserName         VARCHAR2,
           icAchAcct          VARCHAR2,
           icAchISO           VARCHAR2,
           icIsAchValid       VARCHAR2,
           icDebitCardStatus  VARCHAR2,
           icEmail            VARCHAR2,
           icIsAddressInValid VARCHAR2,
           icSeverity         VARCHAR2,
           inPriority         NUMBER,
           icRuleType         VARCHAR2);
           
  PROCEDURE ExpiredCheck(ottabNotification  IN OUT NOCOPY ttab_notification,
           inAdmin_Id         NUMBER,
           inEr_Id            NUMBER,
           inEe_Id            NUMBER,
           icUserName         VARCHAR2,
           icAchAcct          VARCHAR2,
           icAchISO           VARCHAR2,
           icIsAchValid       VARCHAR2,
           icDebitCardStatus  VARCHAR2,
           icEmail            VARCHAR2,
           icIsAddressInValid VARCHAR2,
           icSeverity         VARCHAR2,
           inPriority         NUMBER,
           icRuleType         VARCHAR2);

END GetActionNeededPortalRules3;
/
CREATE OR REPLACE PACKAGE BODY GetActionNeededPortalRules3 IS
  /*****************************************************************
   Activity             By              On                Version
   *****************************************************************
   Created          Mainak Ghosh      03/17/2017           1.0.0
   Jira:            PORTAL-332
  ******************************************************************/

  PROCEDURE processActionNeededPortalRules(ocresult          OUT VARCHAR2,
                                           ocerrorcategory   OUT VARCHAR2,
                                           onerrorcode       OUT NUMBER,
                                           ocErrorArea       OUT VARCHAR2,
                                           ocothermessage    OUT VARCHAR2,
                                           ottabNotification OUT ttab_notification,
                                           ------------
                                           inEe_Id    IN Employee.Id%TYPE,
                                           icRuleType IN rules.rule_type%TYPE,
                                           ------------
                                           icUserName IN VARCHAR2 DEFAULT 'System') IS

    -- Standard Variables
    cunitname      VARCHAR2(255) := 'GetActionNeededPortalRules3.processActionNeededPortalRules';
    cversion       VARCHAR2(255) := '1.0.0';
    cresult        VARCHAR2(255) := 'ERROR';
    cerrorcategory VARCHAR2(255) := 'OTHER';
    nerrorcode     NUMBER := 99999;
    cerrorarea     VARCHAR2(3200) := 'Init';

    -- Unit specific Variables
    nAdmin_Id         Administrator.Id%TYPE;
    nEe_Id            Employee.Id%TYPE;
    nEr_Id            Employer.Id%TYPE;
    cUserName         Login.user_name%TYPE;
    cAchAcct          Employee.Ach_Acct%TYPE;
    cAchISO           Employee.Ach_Iso%TYPE;
    cIsAchValid       Employee.Is_Ach_Valid%TYPE;
    cDebitCardStatus  Employee.Debit_Card_Status%TYPE;
    cEmail            Employee.Email%TYPE;
    cIsAddressInValid Employee.is_address_invalid%TYPE;
    cRuleType         rules.rule_type%TYPE := coalesce(icRuleType, 'NA');
    eInvalidInput EXCEPTION;
  BEGIN
    ocErrorArea := 'Get UserName';
    cUserName   := icUserName;

    ocErrorArea := 'Validate Ee. Id. for NULL';
    IF coalesce(inEe_Id, 0) = 0 THEN
      ocOtherMessage := 'Participant Id. cannot be blank';
      RAISE eInvalidInput;
    END IF;

    ocErrorArea := 'Get Admin and Er Id.';
    BEGIN
      SELECT er.admn_id, ee.pycl_er_id
        INTO nAdmin_Id, nEr_Id
        FROM employee ee, employer er
       WHERE ee.id = inEe_Id
         AND ee.pycl_er_id = er.id;
    EXCEPTION
      WHEN OTHERS THEN
        ocOtherMessage := 'Admin/Employer can not be found.';
        RAISE eInvalidInput;
    END;

    ocErrorArea := 'Validate Admin Id';
    IF coalesce(nAdmin_Id, 0) = 0 THEN
      ocOtherMessage := 'Admin Id. cannot be blank';
      RAISE eInvalidInput;
    END IF;

    ocErrorArea := 'Validate Er. Id';
    IF coalesce(nEr_Id, 0) = 0 THEN
      ocOtherMessage := 'Employer Id. cannot be blank';
      RAISE eInvalidInput;
    END IF;

    ocErrorArea := 'Get Employee';
    FOR rec_ee IN (SELECT * FROM employee WHERE id = inEe_Id) LOOP
      nEe_Id            := rec_ee.id;
      cAchAcct          := rec_ee.ach_acct;
      cAchISO           := rec_ee.ach_iso;
      cIsAchValid       := rec_ee.is_ach_valid;
      cDebitCardStatus  := rec_ee.debit_card_status;
      cEmail            := rec_ee.email;
      cIsAddressInValid := rec_ee.is_address_invalid;
      EXIT;
    END LOOP;

    ocErrorArea       := 'Calling VALIDATE_RULES function';
    ottabNotification := VALIDATE_RULES(ocresult        => cresult,
                                        ocerrorcategory => cerrorcategory,
                                        onerrorcode     => nerrorcode,
                                        ocErrorArea     => cErrorArea,
                                        ocothermessage  => ocothermessage,
                                        --------------
                                        inAdmin_Id         => nAdmin_Id,
                                        inEr_Id            => nEr_Id,
                                        inEe_Id            => nEe_Id,
                                        icUserName         => cUserName,
                                        icAchAcct          => cAchAcct,
                                        icAchISO           => cAchISO,
                                        icIsAchValid       => cIsAchValid,
                                        icDebitCardStatus  => cDebitCardStatus,
                                        icEmail            => cEmail,
                                        icIsAddressInValid => cIsAddressInValid,
                                        icRuleType         => cRuleType);

    IF UPPER(cresult) <> 'OK' THEN
      RAISE eInvalidInput;
    END IF;

    ocerrorarea    := 'ReturnOK';
    ocresult       := 'OK';
    ocothermessage := 'Successful';

  EXCEPTION
    WHEN eInvalidInput THEN
      ocresult        := cResult;
      ocerrorcategory := coalesce(ocErrorCategory, cErrorCategory);
      onerrorcode     := coalesce(onErrorCode, nErrorCode);
      IF coalesce(ocErrorArea, 'ReturnOK') != 'ReturnOK' THEN
        ocErrorArea := ocErrorArea || ':' || cErrorArea || '-' || cUnitName || '-' ||
                       cVersion;
      ELSE
        ocErrorArea := ocErrorArea || cUnitName || '-' || cVersion;
      END IF;
      IF ottabNotification.Count() > 0 THEN
        ottabNotification.Delete();
      END IF;
      ocothermessage := substr(ocOtherMessage || ' : ' || SQLERRM, 1, 4000);

    WHEN OTHERS THEN
      ocresult        := cResult;
      ocerrorcategory := coalesce(ocErrorCategory, cErrorCategory);
      onerrorcode     := coalesce(onErrorCode, nErrorCode);
      IF coalesce(ocErrorArea, 'ReturnOK') != 'ReturnOK' THEN
        ocErrorArea := ocErrorArea || ':' || cErrorArea || '-' || cUnitName || '-' ||
                       cVersion;
      ELSE
        ocErrorArea := ocErrorArea || cUnitName || '-' || cVersion;
      END IF;
      IF ottabNotification.Count() > 0 THEN
        ottabNotification.Delete();
      END IF;
      ocothermessage := substr(ocOtherMessage || ' : ' || SQLERRM, 1, 4000);
  END processActionNeededPortalRules;
  --------------------------------------------------------------------------------------------------------
  FUNCTION VALIDATE_RULES(ocresult        OUT VARCHAR2,
                          ocerrorcategory OUT VARCHAR2,
                          onerrorcode     OUT NUMBER,
                          ocErrorArea     OUT VARCHAR2,
                          ocothermessage  OUT VARCHAR2,
                          --------------
                          inAdmin_Id         IN Administrator.Id%TYPE,
                          inEr_Id            IN Employer.Id%TYPE,
                          inEe_Id            IN Employee.Id%TYPE,
                          icUserName         IN VARCHAR2,
                          icAchAcct          IN VARCHAR2,
                          icAchISO           IN VARCHAR2,
                          icIsAchValid       IN VARCHAR2,
                          icDebitCardStatus  IN VARCHAR2,
                          icEmail            IN VARCHAR2,
                          icIsAddressInValid IN VARCHAR2,
                          icRuleType         IN rules.rule_type%TYPE)
    RETURN ttab_notification IS

    --Standard Variables
    cunitname      VARCHAR2(255) := 'GetActionNeededPortalRules3.VALIDATE_RULES';
    cversion       VARCHAR2(255) := '1.0.0';
    cresult        VARCHAR2(255) := 'ERROR';
    cerrorcategory VARCHAR2(255) := 'OTHER';
    nerrorcode     NUMBER := 99999;
    cerrorarea     VARCHAR2(3200) := 'Init';

    CURSOR cur_Rule IS
      SELECT r.Id rules_Id,
             r.rule_name,
             r.rule_code,
             r.rule_type,
             r.fail_text_label,
             r.fail_text,
             epr.is_mandatory,
             epr.priority,
             epr.severity,
             epr.image_path
        FROM rules r, er_admin_rules epr
       WHERE r.id = epr.rules_id
         AND r.portal_layout = 'EEHOME3'
         AND r.rule_type = icRuleType
         AND epr.admin_id = inAdmin_Id
         AND epr.is_mandatory = 'Yes'
       ORDER BY epr.priority;

    CURSOR cur_Rule_super_admin IS
      SELECT r.Id rules_Id,
             r.rule_name,
             r.rule_code,
             r.rule_type,
             r.fail_text_label,
             r.fail_text,
             epr.is_mandatory,
             epr.priority,
             epr.severity,
             epr.image_path
        FROM rules r, er_admin_rules epr, administrator a
       WHERE r.id = epr.rules_id
         AND r.portal_layout = 'EEHOME3'
         AND r.rule_type = icRuleType
         AND epr.admin_id = a.id
         AND a.is_super_admin = 'Yes'
         AND epr.is_mandatory = 'Yes'
       ORDER BY epr.priority;

    CURSOR cur_Rule_exp IS
      SELECT r.Id rules_Id,
             r.rule_name,
             r.rule_code,
             r.rule_type,
             r.fail_text_label,
             r.fail_text,
             epr.is_mandatory,
             epr.priority,
             epr.severity,
             epr.image_path
        FROM rules r, er_admin_exception_rules epr
       WHERE r.id = epr.rules_id
         AND r.portal_layout = 'EEHOME3'
         AND r.rule_type = icRuleType
         AND epr.er_id = inEr_Id
         AND epr.is_mandatory = 'Yes'
       ORDER BY epr.priority;

    cRule VARCHAR2(32000);
    eException EXCEPTION;
    bIsException     BOOLEAN := FALSE;
    cSeverity        er_admin_rules.severity%TYPE;
    nPriority        er_admin_rules.priority%TYPE;
    cRuleType        rules.rule_type%TYPE;
    ttabNotification ttab_notification := ttab_notification();

  BEGIN

    ocErrorArea  := 'Calling rule engine for Exceptional Er. Setup';
    bIsException := FALSE;
    FOR rec_Rule_exp IN cur_Rule_exp LOOP
      bIsException := TRUE;
      cRule        := rec_Rule_exp.rule_code;
      cSeverity    := rec_Rule_exp.Severity;
      nPriority    := rec_rule_exp.priority;
      cRuleType    := rec_rule_exp.rule_type;

      ocErrorArea := 'Executing rule ' || cRule;
      EXECUTE IMMEDIATE 'BEGIN ' || cRule || '(' || ':ttabNotification,' ||
                        ':inAdmin_Id,' || ':inEr_Id,' || ':inEe_Id, ' ||
                        ':icUserName, ' || ':icAchAcct, ' || ':icAchISO, ' ||
                        ':icIsAchValid, ' || ':icDebitCardStatus, ' ||
                        ':icEmail, ' || ':icIsAddressInValid, ' ||
                        ':cSeverity, ' || ':nPriority, ' || ':cRuleType' ||
                        '); END;'

        USING IN OUT ttabNotification, IN inAdmin_Id, IN inEr_Id, IN inEe_Id, IN icUserName, IN icAchAcct, IN icAchISO, IN icIsAchValid, IN icDebitCardStatus, IN icEmail, IN icIsAddressInValid, IN cSeverity, IN nPriority, IN cRuleType;

    END LOOP;

    ocErrorArea := 'Calling rule engine for Normal Er. Setup';
    IF NOT bIsException THEN
      FOR rec_Rule IN cur_Rule LOOP
        bIsException := TRUE;
        cRule        := rec_Rule.rule_code;
        cSeverity    := rec_rule.severity;
        nPriority    := rec_rule.priority;
        cRuleType    := rec_rule.rule_type;

        ocErrorArea := 'Executing rule ' || cRule;
        EXECUTE IMMEDIATE 'BEGIN ' || cRule || '(' || ':ttabNotification,' ||
                          ':inAdmin_Id,' || ':inEr_Id,' || ':inEe_Id, ' ||
                          ':icUserName, ' || ':icAchAcct, ' ||
                          ':icAchISO, ' || ':icIsAchValid, ' ||
                          ':icDebitCardStatus, ' || ':icEmail, ' ||
                          ':icIsAddressInValid, ' || ':cSeverity, ' ||
                          ':nPriority, ' || ':cRuleType' || '); END;'

          USING IN OUT ttabNotification, IN inAdmin_Id, IN inEr_Id, IN inEe_Id, IN icUserName, IN icAchAcct, IN icAchISO, IN icIsAchValid, IN icDebitCardStatus, IN icEmail, IN icIsAddressInValid, IN cSeverity, IN nPriority, IN cRuleType;

      END LOOP;
    END IF;

    IF NOT bIsException THEN
      FOR rec_Rule IN cur_Rule_super_admin LOOP
        cRule     := rec_Rule.rule_code;
        cSeverity := rec_rule.severity;
        nPriority := rec_rule.priority;
        cRuleType := rec_rule.rule_type;

        ocErrorArea := 'Executing rule ' || cRule;
        EXECUTE IMMEDIATE 'BEGIN ' || cRule || '(' || ':ttabNotification,' ||
                          ':inAdmin_Id,' || ':inEr_Id,' || ':inEe_Id, ' ||
                          ':icUserName, ' || ':icAchAcct, ' ||
                          ':icAchISO, ' || ':icIsAchValid, ' ||
                          ':icDebitCardStatus, ' || ':icEmail, ' ||
                          ':icIsAddressInValid, ' || ':cSeverity, ' ||
                          ':nPriority, ' || ':cRuleType' || '); END;'

          USING IN OUT ttabNotification, IN inAdmin_Id, IN inEr_Id, IN inEe_Id, IN icUserName, IN icAchAcct, IN icAchISO, IN icIsAchValid, IN icDebitCardStatus, IN icEmail, IN icIsAddressInValid, IN cSeverity, IN nPriority, IN cRuleType;

      END LOOP;
    END IF;

    RETURN ttabNotification;

  EXCEPTION
    WHEN eException THEN
      ocresult        := cResult;
      ocerrorcategory := coalesce(ocErrorCategory, cErrorCategory);
      onerrorcode     := coalesce(onErrorCode, nErrorCode);
      IF coalesce(ocErrorArea, 'ReturnOK') != 'ReturnOK' THEN
        ocErrorArea := ocErrorArea || ':' || cErrorArea || '-' || cUnitName || '-' ||
                       cVersion;
      ELSE
        ocErrorArea := ocErrorArea || cUnitName || '-' || cVersion;
      END IF;

      ocothermessage := substr(ocOtherMessage || ' : ' || SQLERRM, 1, 4000);

      RETURN NULL;

    WHEN OTHERS THEN
      ocresult        := cResult;
      ocerrorcategory := coalesce(ocErrorCategory, cErrorCategory);
      onerrorcode     := coalesce(onErrorCode, nErrorCode);
      IF coalesce(ocErrorArea, 'ReturnOK') != 'ReturnOK' THEN
        ocErrorArea := ocErrorArea || ':' || cErrorArea || '-' || cUnitName || '-' ||
                       cVersion;
      ELSE
        ocErrorArea := ocErrorArea || cUnitName || '-' || cVersion;
      END IF;

      ocothermessage := substr(ocOtherMessage || ' : ' || SQLERRM, 1, 4000);

      RETURN NULL;
  END VALIDATE_RULES;

  PROCEDURE RecReqForDBCardsClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdmin_Id         NUMBER,
                                   inEr_Id            NUMBER,
                                   inEe_Id            NUMBER,
                                   icUserName         VARCHAR2,
                                   icAchAcct          VARCHAR2,
                                   icAchISO           VARCHAR2,
                                   icIsAchValid       VARCHAR2,
                                   icDebitCardStatus  VARCHAR2,
                                   icEmail            VARCHAR2,
                                   icIsAddressInValid VARCHAR2,
                                   icSeverity         VARCHAR2,
                                   inPriority         NUMBER,
                                   icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();

  BEGIN
    rNotification.category    := 'INYA';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.DBCARD_CLAIM_RECEIPT_REQUIRED'),
                                          'Expense requires eligible receipt');
    rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.DBCARD_CLAIM_RESOLVE_ISSUE'),
                                          'RESOLVE ISSUE');
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'CLAIMS_ACTIVITY';
    rNotification.priority    := inPriority;

    FOR rec_DebitCardRecptReqd IN (SELECT cl.id,
                                          TRIM(to_char(cl.amt, '999990.00')) amt,
                                          el.erac_actp_cd actp_cd
                                     FROM claim        cl,
                                          claim_batch  cb,
                                          election     el,
                                          account_type at
                                    WHERE cl.clmbt_id = cb.id
                                      AND cl.claim_category = 'Debit Card'
                                      AND cl.elct_id = el.id
                                      AND el.erac_actp_cd = at.cd
                                      AND el.ee_id = inEe_Id
                                      AND at.receipt_reqd = 'Yes'
                                      AND cl.needs_substantiation = 'Yes'
                                      AND cl.substantiation_status != 'Pass'
                                      AND (coalesce(cl.ovrpmt_flag, 'No') = 'No')
                                      AND cl.is_pre_tax = 'No'
                                      AND cl.status IN ('Paid', 'Released')
                                      AND cl.amt > 0
                                      AND cl.service_begins >
                                          trunc(add_months(SYSDATE, -12),
                                                'RRRR')
                                      AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                              el.id,
                                                                              el.erac_er_id,
                                                                              el.erac_actp_cd) >=
                                          SYSDATE
                                      AND NOT EXISTS
                                    (SELECT 'B'
                                             FROM claims_image ci
                                            WHERE ci.clmbt_id = cb.id)) LOOP
      rNotification.reference_id := rec_DebitCardRecptReqd.Id;
      rNotification.amt          := rec_DebitCardRecptReqd.Amt;
      rNotification.dr_cr_ind    := 'DR';
      rNotification.note         := rec_DebitCardRecptReqd.Actp_Cd;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END LOOP;
  END RecReqForDBCardsClaims;
  ------------------------------------------------------------------------------------------------------------
  PROCEDURE NotApprovedClaims(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                              INADMIN_ID         NUMBER,
                              INER_ID            NUMBER,
                              INEE_ID            NUMBER,
                              ICUSERNAME         VARCHAR2,
                              ICACHACCT          VARCHAR2,
                              ICACHISO           VARCHAR2,
                              ICISACHVALID       VARCHAR2,
                              ICDEBITCARDSTATUS  VARCHAR2,
                              ICEMAIL            VARCHAR2,
                              ICISADDRESSINVALID VARCHAR2,
                              ICSEVERITY         VARCHAR2,
                              INPRIORITY         NUMBER,
                              ICRULETYPE         VARCHAR2) IS

    --------------------------------------------------------------------
    -- Activity      By                     On                Version --
    --------------------------------------------------------------------
    -- Created      Anand jajodia        07/12/2018        1.0.1
    /*
    Story id: PORTAL-854
    Not Approved Claims (Denied claims for which user can take action)
    will be shown immediately.
    */
    -------------------------------------------------------------------------------------------------------------

    NALLOWBLDAYS NUMBER := 0;
    CDEMOGTYPE   ER_ADMN_DEMOG.DEMOG_TYPE%TYPE := 'DENIED_CLAIM_ALERT_EXPIRY_DAYS';
    ENODEMGSETUP EXCEPTION;
    CRESULT        VARCHAR2(255);
    CERRORCATEGORY VARCHAR2(4000);
    NERRORCODE     NUMBER;
    CERRORAREA     VARCHAR2(4000);
    COTHERMESSAGE  VARCHAR2(4000);
    RNOTIFICATION  TREC_NOTIFICATION := TREC_NOTIFICATION();

  BEGIN
    BEGIN
      GET_ER_ADMN_DEMOG(OCRESULT        => CRESULT,
                        OCERRORCATEGORY => CERRORCATEGORY,
                        ONERRORCODE     => NERRORCODE,
                        OCERRORAREA     => CERRORAREA,
                        OCOTHERMESSAGE  => COTHERMESSAGE,
                        INADMN_ID       => INADMIN_ID,
                        INERID          => INER_ID,
                        ICDEMOG_TYPE    => CDEMOGTYPE,
                        OCDEMOG_VALUE   => NALLOWBLDAYS);
      IF CRESULT != 'OK' OR NALLOWBLDAYS IS NULL THEN
        RAISE ENODEMGSETUP;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NALLOWBLDAYS := 0;
    END;
    RNOTIFICATION.CATEGORY    := 'INYA';
    RNOTIFICATION.DESCRIPTION := COALESCE(PORTALUTIL.GETPORTALLABEL(INADMIN_ID => INADMIN_ID,
                                                                    INER_ID    => INER_ID,
                                                                    ICLABEL_CD => 'DASHBOARD.INYA.NOTAPPROVED_CLAIM'),
                                          'Not Approved Claims');
    RNOTIFICATION.LINK_LABEL  := COALESCE(PORTALUTIL.GETPORTALLABEL(INADMIN_ID => INADMIN_ID,
                                                                    INER_ID    => INER_ID,
                                                                    ICLABEL_CD => 'DASHBOARD.INYA.NOTAPPROVED'),
                                          'RESOLVE ISSUE');
    RNOTIFICATION.TYPE        := COALESCE(ICRULETYPE, ' Warning ');
    RNOTIFICATION.REC_SOURCE  := 'CLAIMS_ACTIVITY';
    RNOTIFICATION.PRIORITY    := INPRIORITY;
    FOR CCEEDENIED IN (SELECT DISTINCT C.ID,
                                       TRIM(TO_CHAR(C.AMT, '999990.00')) AMT,
                                       EL.Erac_Actp_Cd Actp_Cd
                         FROM CLAIM C, CLAIM_DENIAL_TEXT CDT, ELECTION EL
                        WHERE C.EE_ID = INEE_ID
                          AND C.STATUS = 'Denied'
                          AND (C.CLAIM_TYPE NOT IN 'PREMIUM' OR
                              SUBMIT_CLM_ID IS NULL)
                          AND C.ID = CDT.CLM_ID
                          AND C.ELCT_ID = EL.ID
                          AND CDT.LABEL ! = 'Other'
                          AND CDT.LABEL IS NOT NULL
                          AND ISUSERACTIONABLE(INERID   => INER_ID,
                                               INADMNID => INADMIN_ID,
                                               ICLABEL  => CDT.LABEL,
                                               ICACTPCD => EL.ERAC_ACTP_CD) =
                              'Yes'
                          AND ((NALLOWBLDAYS > 0 AND C.APPEALED_ON IS NULL) OR
                              (NALLOWBLDAYS = 0))
                          AND ((NALLOWBLDAYS > 0 AND C.LINK_CLM_ID IS NULL) OR
                              (NALLOWBLDAYS = 0))
                          AND EXISTS
                        (SELECT 'x'
                                 FROM CLAIM_ACTIVITY CA
                                WHERE CA.ACTION = 'Denied'
                                  AND ((SYSDATE - CA.ACTION_ON) >= 0)
                                  AND ((NALLOWBLDAYS > 0 AND ((SYSDATE -
                                      COALESCE(C.DENIAL_NOTIFIED_ON,
                                                                        CA.ACTION_ON)) <=
                                      NALLOWBLDAYS)) OR (NALLOWBLDAYS = 0))
                                  AND C.ID = CA.CLM_ID)
                          AND NOT EXISTS
                        (SELECT 'B'
                                 FROM claims_image ci
                                WHERE ci.clmbt_id = c.clmbt_id
                                  AND CI.STATUS IN ('Indexed', 'QAPending'))
                          AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                  el.id,
                                                                  el.erac_er_id,
                                                                  el.erac_actp_cd) >=
                              SYSDATE) LOOP

      RNOTIFICATION.REFERENCE_ID := CCEEDENIED.ID;
      RNOTIFICATION.AMT          := CCEEDENIED.AMT;
      IF TO_NUMBER(RNOTIFICATION.AMT) < 0 THEN
        RNOTIFICATION.AMT := REPLACE(RNOTIFICATION.AMT, '-', '');
      END IF;
      RNOTIFICATION.note := CCEEDENIED.Actp_Cd;
      OTTABNOTIFICATION.EXTEND();
      OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
    END LOOP;
    FOR CCEEDENIED IN (SELECT DISTINCT submit_clm_id Sbmt_Clm_Id,
                                       TRIM(TO_CHAR(sum(C.AMT), '999990.00')) AMT,
                                       EL.Erac_Actp_Cd Actp_Cd
                         FROM CLAIM C, CLAIM_DENIAL_TEXT CDT, ELECTION EL
                        WHERE C.EE_ID = INEE_ID
                          AND C.STATUS = 'Denied'
                          AND (C.CLAIM_TYPE = 'PREMIUM' AND
                              SUBMIT_CLM_ID IS NOT NULL)
                          AND C.ID = CDT.CLM_ID
                          AND C.ELCT_ID = EL.ID
                          AND CDT.LABEL
                        ! = 'Other'
                          AND CDT.LABEL IS NOT NULL
                          AND ISUSERACTIONABLE(INERID   => INER_ID,
                                               INADMNID => INADMIN_ID,
                                               ICLABEL  => CDT.LABEL,
                                               ICACTPCD => EL.ERAC_ACTP_CD) =
                              'Yes'
                          AND ((NALLOWBLDAYS > 0 AND C.APPEALED_ON IS NULL) OR
                              (NALLOWBLDAYS = 0))
                          AND ((NALLOWBLDAYS > 0 AND C.LINK_CLM_ID IS NULL) OR
                              (NALLOWBLDAYS = 0))
                          AND EXISTS
                        (SELECT 'x'
                                 FROM CLAIM_ACTIVITY CA
                                WHERE CA.ACTION = 'Denied'
                                  AND ((SYSDATE - CA.ACTION_ON) >= 0)
                                  AND ((NALLOWBLDAYS > 0 AND ((SYSDATE -
                                      COALESCE(C.DENIAL_NOTIFIED_ON,
                                                                        CA.ACTION_ON)) <=
                                      NALLOWBLDAYS)) OR (NALLOWBLDAYS = 0))
                                  AND C.ID = CA.CLM_ID)
                            AND NOT EXISTS
                                (SELECT 'B'
                                         FROM claims_image ci
                                        WHERE ci.clmbt_id = c.clmbt_id 
                                        AND CI.STATUS IN ('Indexed', 'QAPending'))
                          GROUP BY submit_clm_id, EL.Erac_Actp_Cd) LOOP

      RNOTIFICATION.REFERENCE_ID := CCEEDENIED.Sbmt_Clm_Id;
      RNOTIFICATION.AMT          := CCEEDENIED.AMT;
      IF TO_NUMBER(RNOTIFICATION.AMT) < 0 THEN
        RNOTIFICATION.AMT := REPLACE(RNOTIFICATION.AMT, '-', '');
      END IF;
      RNOTIFICATION.note := CCEEDENIED.Actp_Cd;
      OTTABNOTIFICATION.EXTEND();
      OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
    END LOOP;

  END NotApprovedClaims;
  ------------------------------------------------------------------------------------------------------------

  PROCEDURE LostOrStolenDebitCard(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                                INADMIN_ID         NUMBER,
                                INER_ID            NUMBER,
                                INEE_ID            NUMBER,
                                ICUSERNAME         VARCHAR2,
                                ICACHACCT          VARCHAR2,
                                ICACHISO           VARCHAR2,
                                ICISACHVALID       VARCHAR2,
                                ICDEBITCARDSTATUS  VARCHAR2,
                                ICEMAIL            VARCHAR2,
                                ICISADDRESSINVALID VARCHAR2,
                                ICSEVERITY         VARCHAR2,
                                INPRIORITY         NUMBER,
                                ICRULETYPE         VARCHAR2) IS

  --------------------------------------------------------------------
  -- Activity      By                     On                Version --
  --------------------------------------------------------------------
  -- Created      Arnab Chowdhury        06/07/2019        1.0.1
  /*
  Story id: PORTAL-7878
  To display page blocker in case debit card has been reported as lost or stolen
  */
  -------------------------------------------------------------------------------------------------------------

  nParamValue    NUMBER;
  nElctId        NUMBER := 0;
  dActivityDate  DATE;
  dDeriveDate    DATE;
  cResult        VARCHAR2(255) := 'ERROR';
  cErrorcategory VARCHAR2(255) := 'OTHER';
  cErrorarea     VARCHAR2(255) := 'Init';
  cOthermessage  VARCHAR2(4000) := NULL;
  cCustomText1   custom_text.text%TYPE := NULL;
  cCustomText2   custom_text.text%TYPE := NULL;
  cCustomText    VARCHAR2(8000);

  eLogErr EXCEPTION;
  RNOTIFICATION TREC_NOTIFICATION := TREC_NOTIFICATION();

  CURSOR CUR_DEPENDENT(INEE_ID NUMBER) IS
    SELECT DP.ID ID
      FROM DEPENDENT DP
     WHERE DP.EE_ID = INEE_ID
       AND DP.STATUS = 'Active';

BEGIN
  BEGIN
    SELECT el.id
      into nElctId
      FROM election el, stack_election se
     WHERE se.elct_id = el.id
       AND el.ee_id = INEE_ID
       AND el.erac_actp_cd = 'HSA'
       AND el.enrollment_status = 'Enrolled'
       AND trunc(SYSDATE) BETWEEN trunc(se.start_date) AND
           trunc(se.end_date);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      nElctId := 0;
  END;
  IF nvl(nElctID, 0) <> 0 THEN
    BEGIN
      select param_value
        into nParamValue
        from partner_param pp, partner p
       where pp.partner_id = p.id
         and pp.param_name = 'CARD_LOSTANDSTOLEN_PROCESSING_TIME'
         and p.partner_code = 'TSYS';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        nParamValue := 0;
    END;

    BEGIN
      SELECT REQUESTED_ON
        INTO dActivityDate
        FROM DEBIT_CARD_LOST_STOLEN_RQST
       WHERE ee_id = INEE_ID
         AND dep_id IS NULL
         AND status = 'Pending';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        dActivityDate := NULL;
    END;

    IF dActivityDate IS NULL THEN
      BEGIN
        SELECT max(act.activity_on)
          into dActivityDate
          FROM DEBIT_CARD_ACTIVITY_LOG act
         WHERE act.EE_ID = INEE_ID
           AND act.ACTIVITY_CD = 'Mark-Card-LostStolen'
           and act.ENTITY_TYPE = 'EMPLOYEE'
           and act.ENTITY_ID = INEE_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          dActivityDate := NULL;
      END;
      IF dActivityDate IS NOT NULL THEN
        dDeriveDate := GETBusinessDays(idDate    => dActivityDate,
                                       nNoOfDays => nParamValue);
        IF dDeriveDate < trunc(SYSDATE) THEN
          dActivityDate := NULL;
        END IF;
      END IF;
    END IF;

    IF dActivityDate IS NULL THEN
      FOR DEPENDENT IN CUR_DEPENDENT(INEE_ID) LOOP
        BEGIN
          SELECT REQUESTED_ON
            INTO dActivityDate
            FROM DEBIT_CARD_LOST_STOLEN_RQST
           WHERE ee_id = INEE_ID
             AND nvl(dep_id, 0) = nvl(DEPENDENT.ID, 0)
             AND status = 'Pending';
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            dActivityDate := NULL;
        END;
        IF dActivityDate IS NULL THEN
          BEGIN
            SELECT max(act.activity_on)
              into dActivityDate
              FROM DEBIT_CARD_ACTIVITY_LOG act
             WHERE act.EE_ID = INEE_ID
               AND act.ACTIVITY_CD = 'Mark-Card-LostStolen'
               and act.ENTITY_TYPE = 'DEPENDENT'
               and act.ENTITY_ID = DEPENDENT.ID;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              dActivityDate := NULL;
          END;
          IF dActivityDate IS NOT NULL THEN
            dDeriveDate := GETBusinessDays(idDate    => dActivityDate,
                                           nNoOfDays => nParamValue);
            IF dDeriveDate < trunc(SYSDATE) THEN
              dActivityDate := NULL;
            END IF;
          END IF;
        END IF;
        IF dActivityDate IS NOT NULL THEN
          EXIT;
        END IF;
      END LOOP;
    END IF;

    IF dActivityDate is not null THEN
      BEGIN
        clm_getcustomtext(ocResult        => cResult,
                          ocerrorcategory => cErrorcategory,
                          ocErrorArea     => cErrorarea,
                          ocothermessage  => cOthermessage,
                          icObjName       => 'DASHBOARDTAB.PAGE.BLOCKER.LOSTSTOLENCARD',
                          icObjTypeCd     => 'Page',
                          inAdmnId        => INADMIN_ID,
                          inErId          => INER_ID,
                          cCustText1      => cCustomText1,
                          cCustText2      => cCustomText2);

        IF cResult != 'OK' THEN
          cErrorarea    := 'Error Clm_GetCustomText for Admn_Id => ' ||
                           INADMIN_ID || ' ER_Id => ' || INER_ID;
          cOthermessage := cErrorarea || ' : ' || cOthermessage;
          RAISE eLogErr;
        END IF;
        cCustomText := TRIM(nvl(cCustomText1, ' ') ||
                            nvl(cCustomText2, ' '));
        cResult                   := 'OK';
        cOthermessage             := 'Text fetched successfully';
        RNOTIFICATION.CATEGORY    := 'BLOCKER';
        RNOTIFICATION.DESCRIPTION := cCustomText;
        RNOTIFICATION.LINK_LABEL  := COALESCE(PORTALUTIL.GETPORTALLABEL(INADMIN_ID => INADMIN_ID,
                                                                        INER_ID    => INER_ID,
                                                                        ICLABEL_CD => 'DASHBOARD.PAGE.BLOCKER.LOSTSTOLENCARD.LINK'),
                                              'OK, GOT IT');
        RNOTIFICATION.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                        inEr_Id    => inEr_Id,
                                                                        icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.LOSTSTOLENCARD.HDR'),
                                              'Your Account Functionality is Limited');
        RNOTIFICATION.TYPE        := coalesce(icRuleType, 'Alert');
        RNOTIFICATION.rec_source  := 'LOST_STOLEN CARD';
        RNOTIFICATION.priority    := inPriority;
        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      EXCEPTION
        WHEN eLogErr THEN
          dbms_output.put_line('Could not obtain the custom text due to ' ||
                               cOthermessage);
        WHEN OTHERS THEN
          dbms_output.put_line('Could not fetch lost stolen card details due to ' ||
                               cOthermessage);
      END;
    END IF;
  END IF;
END LostOrStolenDebitCard;

  ------------------------------------------------------------------------------------------------------------

  PROCEDURE InvalidatedBankAccounts(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                                  INADMIN_ID         NUMBER,
                                  INER_ID            NUMBER,
                                  INEE_ID            NUMBER,
                                  ICUSERNAME         VARCHAR2,
                                  ICACHACCT          VARCHAR2,
                                  ICACHISO           VARCHAR2,
                                  ICISACHVALID       VARCHAR2,
                                  ICDEBITCARDSTATUS  VARCHAR2,
                                  ICEMAIL            VARCHAR2,
                                  ICISADDRESSINVALID VARCHAR2,
                                  ICSEVERITY         VARCHAR2,
                                  INPRIORITY         NUMBER,
                                  ICRULETYPE         VARCHAR2) IS

  --------------------------------------------------------------------
  -- Activity      By                     On                Version --
  --------------------------------------------------------------------
  -- Created       Arnab Chowdhury        06/24/2019        1.0.1
  /*
  Story id: PORTAL-6994
  To display page blocker in case bank account has been invalidated
  */
  -------------------------------------------------------------------------------------------------------------

  nParamValue           NUMBER;
  cResult               VARCHAR2(255) := 'ERROR';
  cErrorcategory        VARCHAR2(255) := 'OTHER';
  cErrorarea            VARCHAR2(255) := 'Init';
  cOthermessage         VARCHAR2(4000) := NULL;
  cCustomText1          custom_text.text%TYPE := NULL;
  cCustomText2          custom_text.text%TYPE := NULL;
  cCustomText           VARCHAR2(8000);
  cRoutingNumber        VARCHAR2(9);
  cBankAcntNumber       VARCHAR2(20);
  cMaskedBankAcntNumber VARCHAR2(20);
  bIsBankInvalidated    BOOLEAN := FALSE;
  eLogErr EXCEPTION;
  RNOTIFICATION TREC_NOTIFICATION := TREC_NOTIFICATION();

  CURSOR CUR_DIRECT_DEPOSIT_BANK_ACCOUNT(INEE_ID NUMBER) IS
    SELECT EE_ACH_ACCT_NBR, EE_ACH_RTNG_NBR, EE_ACH_STATUS
      FROM VW_EEACHDTL
     WHERE EE_ID = INEE_ID
       AND EE_ACH_STATUS IN ('Invalid', 'Not Validated');

  CURSOR CUR_CONTRIBUTION_BANK_ACCOUNT(INEE_ID NUMBER) IS
    SELECT ISO BANKROUTINGNO,
           STATUS,
           cryptoutil.Decrypt_Data(BANK_ACCT_ENCRYPTED) BANKACCOUNTNO
      FROM BANK
     WHERE EE_ID = INEE_ID
       AND ER_ID IS NULL
       AND STATUS IN ('Validation Error',
                      'Validation Ageout',
                      'Validation ACH Reject');

BEGIN
  FOR DIRECT_DEPOSIT IN CUR_DIRECT_DEPOSIT_BANK_ACCOUNT(INEE_ID) LOOP
    cRoutingNumber     := DIRECT_DEPOSIT.EE_ACH_RTNG_NBR;
    cBankAcntNumber    := DIRECT_DEPOSIT.EE_ACH_ACCT_NBR;
    bIsBankInvalidated := TRUE;
  END LOOP;

  IF (NOT bIsBankInvalidated OR cRoutingNumber IS NULL OR
     cBankAcntNumber IS NULL) THEN
    FOR CONTRIBUTION IN CUR_CONTRIBUTION_BANK_ACCOUNT(INEE_ID) LOOP
      cRoutingNumber     := CONTRIBUTION.BANKROUTINGNO;
      cBankAcntNumber    := CONTRIBUTION.BANKACCOUNTNO;
      bIsBankInvalidated := TRUE;
      IF bIsBankInvalidated THEN
        EXIT;
      END IF;
    END LOOP;
  END IF;

  IF (bIsBankInvalidated AND cRoutingNumber IS NOT NULL AND
     cBankAcntNumber IS NOT NULL) THEN
    BEGIN
      clm_getcustomtext(ocResult        => cResult,
                        ocerrorcategory => cErrorcategory,
                        ocErrorArea     => cErrorarea,
                        ocothermessage  => cOthermessage,
                        icObjName       => 'DASHBOARDTAB.PAGE.BLOCKER.INVALIDATEDBANKACCOUNTS',
                        icObjTypeCd     => 'Page',
                        inAdmnId        => INADMIN_ID,
                        inErId          => INER_ID,
                        cCustText1      => cCustomText1,
                        cCustText2      => cCustomText2);

      IF cResult != 'OK' THEN
        cErrorarea    := 'Error Clm_GetCustomText for Admn_Id => ' ||
                         INADMIN_ID || ' ER_Id => ' || INER_ID;
        cOthermessage := cErrorarea || ' : ' || cOthermessage;
        RAISE eLogErr;
      END IF;

      SELECT CASE
               WHEN length(cBankAcntNumber) > 3 THEN
                '*****' || substr(cBankAcntNumber, -3, 3)
               WHEN length(cBankAcntNumber) <= 3 THEN
                substr(cBankAcntNumber, 1, length(cBankAcntNumber))
             END
        into cMaskedBankAcntNumber
        from dual;
      cCustomText               := TRIM(nvl(cCustomText1, ' ') ||
                                        nvl(cCustomText2, ' '));
      cResult                   := 'OK';
      cOthermessage             := 'Text fetched successfully';
      RNOTIFICATION.CATEGORY    := 'BLOCKER';
      RNOTIFICATION.DESCRIPTION := cCustomText;
      RNOTIFICATION.LINK_LABEL  := COALESCE(PORTALUTIL.GETPORTALLABEL(INADMIN_ID => INADMIN_ID,
                                                                      INER_ID    => INER_ID,
                                                                      ICLABEL_CD => 'DASHBOARD.PAGE.BLOCKER.INVALIDATEDBANKACCOUNTS.BTN1'),
                                            'I''LL DO IT LATER') || '~' ||
                                   COALESCE(PORTALUTIL.GETPORTALLABEL(INADMIN_ID => INADMIN_ID,
                                                                      INER_ID    => INER_ID,
                                                                      ICLABEL_CD => 'DASHBOARD.PAGE.BLOCKER.INVALIDATEDBANKACCOUNTS.BTN2'),
                                            'REVIEW');
      RNOTIFICATION.note        := 'Invalid bank details fetched. Masked Bank Account Number - ' ||
                                   cMaskedBankAcntNumber ||
                                   ' , Routing Number - ' || cRoutingNumber;
      RNOTIFICATION.TYPE        := coalesce(icRuleType, 'Alert');
      RNOTIFICATION.rec_source  := 'INVALID_BANK_ACCOUNT';
      RNOTIFICATION.priority    := inPriority;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    EXCEPTION
      WHEN eLogErr THEN
        dbms_output.put_line('Could not obtain the custom text due to ' ||
                             cOthermessage);
      WHEN OTHERS THEN
        dbms_output.put_line('Could not fetch lost stolen card details due to ' ||
                             cOthermessage);
    END;
  END IF;
END InvalidatedBankAccounts;

  ------------------------------------------------------------------------------------------------------------

  PROCEDURE GetNotPaidPassThruClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                     inAdmin_Id         NUMBER,
                                     inEr_Id            NUMBER,
                                     inEe_Id            NUMBER,
                                     icUserName         VARCHAR2,
                                     icAchAcct          VARCHAR2,
                                     icAchISO           VARCHAR2,
                                     icIsAchValid       VARCHAR2,
                                     icDebitCardStatus  VARCHAR2,
                                     icEmail            VARCHAR2,
                                     icIsAddressInValid VARCHAR2,
                                     icSeverity         VARCHAR2,
                                     inPriority         NUMBER,
                                     icRuleType         VARCHAR2) IS

    cResult              VARCHAR2(255) := 'ERROR';
    cErrorCategory       VARCHAR2(255) := 'OTHER';
    nErrorCode           NUMBER := 99999;
	nElctID              NUMBER;
    nCount               NUMBER;
    cErrorArea           VARCHAR2(255) := 'Init';
    cOtherMessage        VARCHAR2(4000) := NULL;
    nuserid              NUMBER := NULL;
    cObjName             VARCHAR2(20) := 'EEPAYNOWPASSTHRU';
	cActpCd              VARCHAR2(20);
    cObjCD               VARCHAR2(20) := 'Page';
    occanview            VARCHAR2(3) := 'No';
    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';
    rNotification        trec_notification := trec_notification();

  BEGIN
    rNotification.category    := 'INYA';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.PAYMENT_OPTION_FOR_CLAIM'),
                                          'Select Payment Option for Claim Payment');
    rNotification.link_label  := 'Select Payment';
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'CLAIM_PENDING_PASSTHRU';
    rNotification.priority    := inPriority;

    SELECT id INTO nuserid FROM login WHERE user_name = icUserName;

    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);
    IF UPPER(occanexecute) = 'YES' THEN
      FOR rec_PassThru IN (SELECT c.id,
                                  c.elct_id nElctID,
                                  TRIM(to_char(c.amt, '999990.00')) amt
                             FROM claim_pending_passthru c
                            WHERE ee_id = inEe_Id
                              AND coalesce(is_processed, 'No') <> 'Yes'
                              AND coalesce(amt, 0) > 0) LOOP
      
        IF nElctID is not null then
		  select erac_actp_cd into cActpCd from election where id = nElctID;
          IF Clm_Validateclaimutil.getRunOffDate(inEe_Id,
                                                 nElctID,
                                                 inEr_Id,
                                                 cActpCd) >=
             SYSDATE THEN
            rNotification.reference_id := rec_PassThru.Id;
            rNotification.amt          := rec_PassThru.Amt;
            rNotification.dr_cr_ind    := 'DR';
            ottabNotification.Extend();
            ottabNotification(ottabNotification.Last) := rNotification;
          END IF;
        ELSE
          select count(1)
			  into nCount
			  from election el, er_acct_bundle erac
			 where el.ee_id = inEe_Id
			   and erac.erbndl_er_id = el.erac_er_id
			   and el.erac_actp_cd = erac.actp_cd
			   and Clm_Validateclaimutil.getRunOffDate(el.ee_id,
													   el.id,
													   el.erac_er_id,
													   el.erac_actp_cd) >= SYSDATE;
          IF nCount > 0 THEN
            rNotification.reference_id := rec_PassThru.Id;
            rNotification.amt          := rec_PassThru.Amt;
            rNotification.dr_cr_ind    := 'DR';
            ottabNotification.Extend();
            ottabNotification(ottabNotification.Last) := rNotification;
          END IF;
        END IF;
      END LOOP;
    END IF;

  END GetNotPaidPassThruClaims;
  ------------------------------------------------------------------------------------------------------------
  PROCEDURE UnCashedChequePaymentTrxn(ottabNotification  IN OUT NOCOPY ttab_notification,
                                      inAdmin_Id         NUMBER,
                                      inEr_Id            NUMBER,
                                      inEe_Id            NUMBER,
                                      icUserName         VARCHAR2,
                                      icAchAcct          VARCHAR2,
                                      icAchISO           VARCHAR2,
                                      icIsAchValid       VARCHAR2,
                                      icDebitCardStatus  VARCHAR2,
                                      icEmail            VARCHAR2,
                                      icIsAddressInValid VARCHAR2,
                                      icSeverity         VARCHAR2,
                                      inPriority         NUMBER,
                                      icRuleType         VARCHAR2) IS

    ocCanViewCashedInfo VARCHAR2(3) := 'No';

    nDisplayLagTime NUMBER := 10;
    nHideLagTime    NUMBER := 180;
    rNotification   trec_notification := trec_notification();
  BEGIN
    rNotification.category    := 'INYA';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.CHECKS_NOT_CASHED'),
                                          'IMPORTANT: Checks are uncashed');
    rNotification.link_label  := 'UNCASHED';
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'UNCASHED_CHECK';
    rNotification.priority    := inPriority;
    BEGIN
      ocCanViewCashedInfo := coalesce(apputil.GetErAdmnDemog('VIEW_CHECK_CASHED_INFO',
                                                             inAdmin_Id,
                                                             inEr_Id,
                                                             SYSDATE,
                                                             'Yes'),
                                      'No');
    EXCEPTION
      WHEN OTHERS THEN
        ocCanViewCashedInfo := 'No';
    END;

    IF ocCanViewCashedInfo = 'Yes' THEN
      nDisplayLagTime := coalesce(apputil.GetErAdmnDemog('UNCASHED_CHECK_LAGTIME',
                                                         inAdmin_Id,
                                                         inEr_Id,
                                                         SYSDATE,
                                                         'Yes'),
                                  10);
      nHideLagTime    := coalesce(apputil.GetErAdmnDemog('STALE_UNCASHED_CHECK_LAGTIME',
                                                         inAdmin_Id,
                                                         inEr_Id,
                                                         SYSDATE,
                                                         'Yes'),
                                  180);
      FOR rec_UncashedCheck IN (SELECT vw.PYFL_ID,
                                       el.Erac_Actp_Cd Actp_Cd,
                                       TRIM(REPLACE(vw.amt, '$', '')) amt
                                  FROM VW_EE_PAYMENTS VW, Election EL
                                 WHERE vw.EE_ID = inEe_Id
                                   AND vw.elct_id = el.ID
                                   AND vw.CLEARED_ON_DATE IS NULL
                                   AND vw.CHECK_NO IS NOT NULL
                                   AND vw.TYPECD = 'Check'
                                   AND TO_NUMBER(REPLACE(vw.AMT, '$', '')) > 0
                                   AND vw.VOID_ON IS NULL
                                   AND (SYSDATE BETWEEN
                                       (vw.INSTR_DATE + nDisplayLagTime) AND
                                       (vw.INSTR_DATE + nHideLagTime))
                                   AND vw.CHECK_STATUS = 'Issued') LOOP
        rNotification.reference_id := rec_UncashedCheck.PYFL_ID;
        rNotification.amt          := rec_UncashedCheck.amt;
        rNotification.dr_cr_ind    := 'DR';
        rNotification.note         := rec_UncashedCheck.Actp_Cd;
        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      END LOOP;

    END IF;

  END UnCashedChequePaymentTrxn;

  -------------------------------------------------------------------------------------------------

  PROCEDURE AddlRecptReqForDBCardsClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                         inAdmin_Id         NUMBER,
                                         inEr_Id            NUMBER,
                                         inEe_Id            NUMBER,
                                         icUserName         VARCHAR2,
                                         icAchAcct          VARCHAR2,
                                         icAchISO           VARCHAR2,
                                         icIsAchValid       VARCHAR2,
                                         icDebitCardStatus  VARCHAR2,
                                         icEmail            VARCHAR2,
                                         icIsAddressInValid VARCHAR2,
                                         icSeverity         VARCHAR2,
                                         inPriority         NUMBER,
                                         icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();

  BEGIN
    rNotification.category    := 'INYA';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.DBCARD_CLAIM_INVALID_RECEIPT'),
                                          'Debit card receipt submitted was invalid. Please submit new receipt');
    rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.DBCARD_CLAIM_RECEIPT_INVALID'),
                                          'INVALID RECEIPT');
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'CLAIM';
    rNotification.priority    := inPriority;
    FOR rec_DebitCardRecptReqd IN (SELECT cl.id,
                                          el.Erac_Actp_Cd Actp_Cd,
                                          TRIM(to_char(cl.amt, '999990.00')) amt
                                     FROM claim        cl,
                                          claim_batch  cb,
                                          election     el,
                                          account_type at
                                    WHERE cl.clmbt_id = cb.id

                                      AND cl.claim_category = 'Debit Card'
                                      AND (coalesce(cl.ovrpmt_flag, 'No') = 'No')
                                      AND cl.elct_id = el.id
                                      AND el.erac_actp_cd = at.cd
                                      AND el.ee_id = inEe_Id
                                      AND at.receipt_reqd = 'Yes'
                                      AND cl.needs_substantiation = 'Yes'
                                      AND cl.substantiation_status != 'Pass'
                                      AND cl.is_pre_tax = 'No'
                                      AND cl.status IN ('Paid', 'Released')
                                      AND cl.amt > 0
                                      AND cl.service_begins >
                                          trunc(add_months(SYSDATE, -12),
                                                'RRRR')

                                      AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                              el.id,
                                                                              el.erac_er_id,
                                                                              el.erac_actp_cd) >=
                                          SYSDATE

                                      AND EXISTS
                                    (SELECT 'B'
                                             FROM claims_image ci
                                            WHERE ci.clmbt_id = cb.id
                                              AND ci.status = 'Complete')) LOOP
      rNotification.reference_id := rec_DebitCardRecptReqd.Id;
      rNotification.amt          := rec_DebitCardRecptReqd.Amt;
      rNotification.dr_cr_ind    := 'DR';
      rNotification.note         := rec_DebitCardRecptReqd.Actp_Cd;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END LOOP;

  END AddlRecptReqForDBCardsClaims;

  PROCEDURE OverpaymentClaim(ottabNotification  IN OUT NOCOPY ttab_notification,
                             inAdmin_Id         IN NUMBER,
                             inEr_Id            IN NUMBER,
                             inEe_Id            IN NUMBER,
                             icUserName         IN VARCHAR2,
                             icAchAcct          IN VARCHAR2,
                             icAchISO           IN VARCHAR2,
                             icIsAchValid       IN VARCHAR2,
                             icDebitCardStatus  IN VARCHAR2,
                             icEmail            IN VARCHAR2,
                             icIsAddressInValid IN VARCHAR2,
                             icSeverity         IN VARCHAR2,
                             inPriority         IN NUMBER,
                             icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();

  BEGIN
    rNotification.category    := 'INYA';

    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.EXPENSE_OVERPAID'),
                                          'Expense Overpayment');
    rNotification.link_label  := 'Resolve';

    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'CLAIM';
    rNotification.priority    := inPriority;
    FOR rec_OverpaidClaim IN (SELECT c.id,
                                   EL.Erac_Actp_Cd Actp_Cd,
                                   TRIM(to_char(c.amt, '999990.00')) amt
                              FROM claim c, election el
                             WHERE c.ovrpmt_flag = 'Yes'
                               AND (c.CLAIM_TYPE NOT IN 'PREMIUM' OR
                                   SUBMIT_CLM_ID IS NULL)
                               AND c.ee_id = inEe_Id
                               AND c.ELCT_ID = el.ID
                               AND c.status IN ('Paid', 'Released')
                               AND coalesce(c.amt, 0) >
                                   coalesce(c.recovered_amt, 0)
                               AND NOT EXISTS
                             (SELECT 1
                                      FROM claims_image ci
                                     WHERE ci.status IN
                                           ('Indexed', 'QAPending')
                                       AND ci.clmbt_id = c.clmbt_id)
                               AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                       el.id,
                                                                       el.erac_er_id,
                                                                       el.erac_actp_cd) >=
                                   SYSDATE) LOOP
      rNotification.reference_id := rec_OverpaidClaim.Id;
      rNotification.amt          := rec_OverpaidClaim.Amt;
      rNotification.dr_cr_ind    := 'DR';
      rNotification.note         := rec_OverpaidClaim.Actp_Cd;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END LOOP;
    FOR rec_OverpaidClaim IN (SELECT submit_clm_id Sbmt_Clm_Id,
                                   EL.Erac_Actp_Cd Actp_Cd,
                                   TRIM(to_char(sum(c.amt), '999990.00')) amt
                              FROM claim c, election el
                             WHERE c.ovrpmt_flag = 'Yes'
                               AND (c.CLAIM_TYPE = 'PREMIUM' AND
                                   SUBMIT_CLM_ID IS NOT NULL)
                               AND c.ee_id = inEe_Id
                               AND c.ELCT_ID = el.ID
                               AND c.status IN ('Paid', 'Released')
                               AND coalesce(c.amt, 0) >
                                   coalesce(c.recovered_amt, 0)
                               AND NOT EXISTS
                             (SELECT 1
                                      FROM claims_image ci
                                     WHERE ci.status IN
                                           ('Indexed', 'QAPending')
                                       AND ci.clmbt_id = c.clmbt_id)
                               AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                       el.id,
                                                                       el.erac_er_id,
                                                                       el.erac_actp_cd) >=
                                   SYSDATE
                             GROUP BY submit_clm_id, EL.Erac_Actp_Cd) LOOP
      rNotification.reference_id := rec_OverpaidClaim.Sbmt_Clm_Id;
      rNotification.amt          := rec_OverpaidClaim.Amt;
      rNotification.dr_cr_ind    := 'DR';
      rNotification.note         := rec_OverpaidClaim.Actp_Cd;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END LOOP;
  END OverpaymentClaim;

  PROCEDURE DirectDepositFailed(ottabNotification  IN OUT NOCOPY ttab_notification,
                                inAdmin_Id         IN NUMBER,
                                inEr_Id            IN NUMBER,
                                inEe_Id            IN NUMBER,
                                icUserName         IN VARCHAR2,
                                icAchAcct          IN VARCHAR2,
                                icAchISO           IN VARCHAR2,
                                icIsAchValid       IN VARCHAR2,
                                icDebitCardStatus  IN VARCHAR2,
                                icEmail            IN VARCHAR2,
                                icIsAddressInValid IN VARCHAR2,
                                icSeverity         IN VARCHAR2,
                                inPriority         IN NUMBER,
                                icRuleType         VARCHAR2) IS
    rNotification trec_notification := trec_notification();
  BEGIN
    rNotification.category    := 'INYA';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.DIRECT_DEPOSIT_FAILED'),
                                          'Direct Deposit Failed');
    rNotification.link_label  := 'Validate';
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'DIRECT_DEPOSIT_FAILED';
    rNotification.priority    := inPriority;
    IF icAchAcct IS NOT NULL AND icAchIsO IS NOT NULL AND
       icIsAchValid IN ('No', 'PrenoteERR') THEN
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END IF;
  END DirectDepositFailed;

  PROCEDURE AddBeneficiaries(ottabNotification  IN OUT NOCOPY ttab_notification,
                             inAdmin_Id         IN NUMBER,
                             inEr_Id            IN NUMBER,
                             inEe_Id            IN NUMBER,
                             icUserName         IN VARCHAR2,
                             icAchAcct          IN VARCHAR2,
                             icAchISO           IN VARCHAR2,
                             icIsAchValid       IN VARCHAR2,
                             icDebitCardStatus  IN VARCHAR2,
                             icEmail            IN VARCHAR2,
                             icIsAddressInValid IN VARCHAR2,
                             icSeverity         IN VARCHAR2,
                             inPriority         IN NUMBER,
                             icRuleType         VARCHAR2) IS

    cResult              VARCHAR2(255) := 'ERROR';
    cErrorCategory       VARCHAR2(255) := 'OTHER';
    nErrorCode           NUMBER := 99999;
    cErrorArea           VARCHAR2(255) := 'Init';
    cOtherMessage        VARCHAR2(4000) := NULL;
    cObjName             VARCHAR2(255) := 'HSAROLE';
    cObjCD               VARCHAR2(20) := 'Section';
    occanview            VARCHAR2(3) := 'No';
    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';
    nuserid              NUMBER := NULL;

    rNotification trec_notification := trec_notification();

  BEGIN

    SELECT id INTO nuserid FROM Login WHERE user_name = icUserName;

    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);

    IF upper(occanexecute) = 'YES' THEN
      FOR cceebene IN (SELECT 'x'
                         FROM dual
                        WHERE EXISTS
                        (SELECT 'X'
                                 FROM election el, stack_election se
                                WHERE se.elct_id = el.id
                                  AND el.ee_id = inEe_Id
                                  AND el.erac_actp_cd = 'HSA'
                                  AND (trunc(SYSDATE) BETWEEN se.start_date AND
                                      se.end_date)
                                  AND UPPER(el.enrollment_status) =
                                      'ENROLLED'
                                  AND NOT EXISTS
                                (SELECT 'x'
                                         FROM dependent dp
                                        WHERE dp.ee_id = el.ee_id
                                          AND dp.allocated_percentage IS NOT NULL
                                          AND dp.allocated_percentage > 0))) LOOP

        rNotification.category    := 'BLOCKER';
        rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                        inEr_Id    => inEr_Id,
                                                                        icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.BENEFICIARIES.MISSING.DESC'),
                                              'In your account we don''t see any beneficiaries added. Please add...');
        rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                        inEr_Id    => inEr_Id,
                                                                        icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.BENEFICIARIES.MISSING.NOTE'),
                                              'Missing Beneficiaries');
        rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                        inEr_Id    => inEr_Id,
                                                                        icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.BENEFICIARIES.MISSING.LABEL'),
                                              'Enter Beneficiaries');
        rNotification.TYPE        := coalesce(icRuleType, 'Alert');
        rNotification.rec_source  := 'MISSING_BENEFICIARIES';
        rNotification.priority    := inPriority;

        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;

      END LOOP;
    END IF;
  END AddBeneficiaries;

  PROCEDURE DBCardTurnedOff(ottabNotification  IN OUT NOCOPY ttab_notification,
                            inAdmin_Id         IN NUMBER,
                            inEr_Id            IN NUMBER,
                            inEe_Id            IN NUMBER,
                            icUserName         IN VARCHAR2,
                            icAchAcct          IN VARCHAR2,
                            icAchISO           IN VARCHAR2,
                            icIsAchValid       IN VARCHAR2,
                            icDebitCardStatus  IN VARCHAR2,
                            icEmail            IN VARCHAR2,
                            icIsAddressInValid IN VARCHAR2,
                            icSeverity         IN VARCHAR2,
                            inPriority         IN NUMBER,
                            icRuleType         VARCHAR2) IS

    isTurnedOffDBCard VARCHAR2(3) := 'No';

    rNotification trec_notification := trec_notification();

  BEGIN

    SELECT decode(icDebitCardStatus,
                  'Suspended',
                  decode(clm_bac_util.getcardsuspendclosereason(inEe_Id),
                         'SUBST_FAILURE',
                         'Yes',
                         'No'),
                  'No')
      INTO isTurnedOffDBCard
      FROM dual;

    IF (isTurnedOffDBCard = 'Yes') THEN

      rNotification.category    := 'BLOCKER';
      rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.DEBITCARD.SUSPENDED.DESC'),
                                            'Debit card has been suspended please take action.');
      rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.DEBITCARD.SUSPENDED.NOTE'),
                                            'Debit Card Suspended');
      rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.DEBITCARD.SUSPENDED.LABEL'),
                                            'TAKE ACTION');
      rNotification.TYPE        := coalesce(icRuleType, 'Alert');
      rNotification.rec_source  := 'DEBITCARD_MISSING';
      rNotification.priority    := inPriority;

      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;

    END IF;

  END DBCardTurnedOff;

  PROCEDURE MissingEmail(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();

  BEGIN

    IF icEmail IS NULL THEN

      rNotification.category    := 'BLOCKER';
      rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.EMAIL.MISSING.DESC'),
                                            'Email ID is missing for the account, Please update email.');
      rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.EMAIL.MISSING.NOTE'),
                                            'Missing EmailID');
      rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.EMAIL.MISSING.LABEL'),
                                            'TAKE ACTION');
      rNotification.TYPE        := coalesce(icRuleType, 'Alert');
      rNotification.rec_source  := 'EMAIL_MISSING';
      rNotification.priority    := inPriority;

      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;

    END IF;

  END MissingEmail;

  PROCEDURE EnrollOnline(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2) IS
    --1.1.0

    bDummy BOOLEAN := FALSE;

    nUserId   NUMBER := NULL;
    cLink     VARCHAR2(4000) := '';
    cObjName  VARCHAR2(20) := 'EESMRY.EEELCTSMRY';
    cObjCD    VARCHAR2(20) := 'Section';
    occanview VARCHAR2(3) := 'No';

    cResult            VARCHAR2(255) := 'ERROR';
    cErrorCategory     VARCHAR2(255) := 'OTHER';
    nErrorCode         NUMBER := 99999;
    cErrorArea         VARCHAR2(255) := 'Init';
    cOtherMessage      VARCHAR2(4000) := NULL;
    cActpLabel         VARCHAR2(4000) := '';
    cElectionPeriod    VARCHAR2(4000) := '';
    cElectionStatus    VARCHAR2(4000) := '';
    cElectionAmount    VARCHAR2(4000) := '';
    cElectionEffective VARCHAR2(4000) := '';
    cElectionDate      VARCHAR2(4000) := '';

    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';

    rNotification trec_notification := trec_notification();

  BEGIN
    SELECT id INTO nuserid FROM Login WHERE user_name = icUserName;

    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);

    IF (occanview = 'Yes') THEN
      SELECT nvl(hyperlink, '')
        INTO clink
        FROM our_object
       WHERE NAME = cObjName
         AND typecd = cObjCD;

      IF (clink IS NOT NULL) THEN
        FOR rec_EnrollOnline IN (SELECT DISTINCT ea.actp_cd
                                   FROM employer_account ea
                                  WHERE ea.er_id = inEr_Id) LOOP
          cElectionStatus := '';
          cErrorArea      := 'GettingEeElctSmry';
          geteeelctsmrydata(cResult,
                            cErrorCategory,
                            nErrorcode,
                            cErrorarea,
                            cOthermessage,
                            inEe_Id,
                            inEr_Id,
                            rec_EnrollOnline.Actp_Cd,
                            cactplabel,
                            celectionperiod,
                            celectionstatus,
                            celectionamount,
                            celectioneffective,
                            celectiondate);

          IF (substr(cElectionStatus, 1, 6) = 'Elect|') THEN
            bDummy := TRUE;
            EXIT;
          END IF;

        END LOOP;
      END IF;
    END IF;

    IF bDummy THEN

      rNotification.category    := 'BLOCKER';
      rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.ENROLL.ONLINE.DESC'),
                                            'User has not been enrolled yet, Please enroll online.');
      rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.ENROLL.ONLINE.NOTE'),
                                            'Enroll Online');
      rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.ENROLL.ONLINE.LABEL'),
                                            'Enroll Online');
      rNotification.TYPE        := coalesce(icRuleType, 'Alert');
      rNotification.rec_source  := 'ENROLL_ONLINE';
      rNotification.priority    := inPriority;

      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;

    END IF;

  END EnrollOnline;

  PROCEDURE UpdateMailingAddress(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2) IS
  
    rNotification trec_notification := trec_notification();  
    bIsDependentPrimary         BOOLEAN := FALSE;
    nDepId               NUMBER;
    bIsJRA               VARCHAR2(3);
    bIsInValidAddress      BOOLEAN := FALSE;
  
    CURSOR curEEAddressDetails(inEe_Id IN NUMBER) IS
      SELECT CASE
               WHEN ((ee.mailing_line1 IS NULL  AND ee.mailing_zip IS NULL AND
                    ee.mailing_city IS NULL AND ee.mailing_st_cd IS NULL AND
                    ee.mailing_st_ctry_cd IS NULL AND
                    nvl(is_resi_address_invalid, 'No') = 'Yes') OR
                    nvl(icIsAddressInValid, 'No') = 'Yes')               
                THEN
                'No'
               ELSE
                'Yes'             
             END valid_address
        FROM employee ee
       WHERE ee.id = inEe_Id;
  
  BEGIN
    bIsJRA := jra_account_util.isJRA(inEe_Id);
    IF bIsJRA = 'Yes' THEN
      FOR recDependent IN (SELECT eah.dep_id
                             FROM ee_acct_holder eah
                            WHERE eah.acct_holder_type = 'Primary'
                              AND eah.ee_id = inEe_Id
                              AND eah.dep_id IS NOT NULL) LOOP
        bIsDependentPrimary := TRUE;
        nDepId       := recDependent.dep_id;
        EXIT;
      END LOOP;
      IF bIsDependentPrimary THEN
        FOR recDependentAddressDetails IN (SELECT CASE
                                                    WHEN ((d.mailing_address_line1 IS NULL  AND d.mailing_zip IS NULL AND
                                                         d.mailing_city IS NULL AND d.mailing_st_cd IS NULL AND
                                                         d.mailing_st_ctry_cd IS NULL AND
                                                         NVL(d.is_resi_address_invalid, 'No') = 'Yes') OR
                                                         NVL(d.is_address_invalid, 'No') = 'Yes')                                                    
                                                     THEN
                                                     'No'
                                                    ELSE
                                                     'Yes'                                                  
                                                  END valid_address                                           
                                             FROM dependent d
                                            WHERE d.id = nDepId) LOOP
          IF (recDependentAddressDetails.valid_address = 'No') THEN
            bIsInValidAddress := TRUE;
          END IF;
          EXIT;
        END LOOP;      
      ELSE
        FOR recEEAdressDetails IN curEEAddressDetails(inEe_Id) LOOP
          IF (recEEAdressDetails.valid_address = 'No') THEN
            bIsInValidAddress := TRUE;
          END IF;
          EXIT;
        END LOOP;      
      END IF;    
    ELSE
      FOR recEEAdressDetails IN curEEAddressDetails(inEe_Id) LOOP
        IF (recEEAdressDetails.valid_address = 'No') THEN
          bIsInValidAddress := TRUE;
        END IF;
        EXIT;
      END LOOP;    
    END IF;
    IF bIsInValidAddress THEN
      rNotification.category    := 'BLOCKER';
      rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.INVALID.ADDRESS.DESC'),
                                            'We have mailed you important account information, but it was returned due to an invalid address. Please update your contact information. If you would like to receive electronic communications, check the "Go Paperless" checkbox.');
      rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.INVALID.ADDRESS.NOTE'),
                                            'Update Contact Information');
      rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.INVALID.ADDRESS.LABEL'),
                                            'TAKE ACTION');
      rNotification.TYPE        := coalesce(icRuleType, 'Alert');
      rNotification.rec_source  := 'INVALID_MAILING_ADDRESS';
      rNotification.priority    := inPriority;    
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END IF;
  
  END UpdateMailingAddress;

  PROCEDURE CompleteAccountOpening(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdminId          IN NUMBER,
                                   inErId             IN NUMBER,
                                   inEeId             IN NUMBER,
                                   icUserName         IN VARCHAR2,
                                   icAchAcct          IN VARCHAR2,
                                   icAchISO           IN VARCHAR2,
                                   icIsAchValid       IN VARCHAR2,
                                   icDebitCardStatus  IN VARCHAR2,
                                   icEmail            IN VARCHAR2,
                                   icIsAddressInValid IN VARCHAR2,
                                   icSeverity         IN VARCHAR2,
                                   inPriority         IN NUMBER,
                                   icRuleType         VARCHAR2) IS

    --------------------------------------------------------------------
    -- Activity      By                     On                Version --
    --------------------------------------------------------------------
    -- Modified      Gaurav Agarwal        06/19/2018        1.0.1
    /*
    Story id: PORTAL-519
      The blocker for asking documents against the CIP failure should not
      be shown to the user if some document is already uploaded by the
      participant.
    */
    ----------------------------------------------------------------------

    cStatus   VARCHAR2(50) := NULL;
    nUserId   NUMBER := NULL;
    cObjName  VARCHAR2(20) := 'HSAROLE';
    cObjCD    VARCHAR2(20) := 'Section';
    ocCanView VARCHAR2(3) := 'No';

    cResult        VARCHAR2(255) := 'ERROR';
    cErrorCategory VARCHAR2(255) := 'OTHER';
    nErrorCode     NUMBER := 99999;
    cErrorArea     VARCHAR2(255) := 'Init';
    cOtherMessage  VARCHAR2(4000) := NULL;

    ocCanExecute         VARCHAR2(3) := 'No';
    ocCanCreate          VARCHAR2(3) := 'No';
    ocCanDelete          VARCHAR2(3) := 'No';
    ocCanModify          VARCHAR2(3) := 'No';
    ocCanModifyIfNull    VARCHAR2(3) := 'No';
    ocCanModifyIfNotNull VARCHAR2(3) := 'No';
    ocCanModifyToNull    VARCHAR2(3) := 'No';
    cIdvStatus           VARCHAR2(50) := NULL;
    cCIPWorkGroup        VARCHAR2(255) := '';
    cClaimImgExist       VARCHAR2(3) := 'No';

    dSecurityCheckDate  DATE := SYSDATE;
    cSecurityCheckParam NUMBER;

    rNotification trec_notification := trec_notification();

    nTicketNo         NUMBER := 0;
    cCauseNote        VARCHAR2(4000) := '';
    bIsCIPDocRequired BOOLEAN := FALSE;
    bIsCIPDocReSubmit BOOLEAN := FALSE;
    cSecPartnerCd     VARCHAR2(20);
  BEGIN

    SELECT id INTO nUserId FROM Login WHERE user_name = icUserName;

    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cResult,
                 cErrorCategory,
                 nErrorCode,
                 cErrorArea,
                 cOtherMessage,
                 nUserId,
                 cObjName,
                 cObjCD,
                 ocCanView,
                 ocCanExecute,
                 ocCanCreate,
                 ocCanDelete,
                 ocCanModify,
                 ocCanModifyIfNull,
                 ocCanModifyIfNotNull,
                 ocCanModifyToNull);

    BEGIN

      SELECT elct.enrollment_status,
             elct.idv_status,
             trunc(elct.secutity_check_date)
        INTO cStatus, cIdvStatus, dSecurityCheckDate
        FROM (SELECT e.enrollment_status,
                     eea.idv_status,
                     eea.secutity_check_date
                FROM election e, elct_enrollment_activity eea
               WHERE e.id = eea.elct_id
                 AND e.erac_actp_cd = 'HSA'
                 AND eea.activity_type IN
                     ('Security_Check', 'Manual_Override')
                 AND e.ee_id = inEeId
                 AND e.erac_er_id = inErId
               ORDER BY eea.secutity_check_date DESC) elct
       WHERE rownum = 1;

      IF (cStatus = 'Security Fail' AND cIdvStatus = 'Failed' AND
         ocCanExecute = 'Yes') THEN

        BEGIN

          cSecPartnerCd := coalesce(RKP_Common.getbenconnect_cip(inadmnid => inAdminId,
                                                                 inerid   => inErId,
                                                                 icactpcd => 'HSA'),
                                    'N/A');

          IF cSecPartnerCd <> 'BenConnect-Acclaris' THEN
            cSecPartnerCd := RKP_Common.GetSecurityCheckPartner(inAdmnID => inAdminId,
                                                                inErID   => inErId);
          END IF;

          SELECT PARAM_VALUE
            INTO cSecurityCheckParam
            FROM PARTNER_PARAM PP, PARTNER P
           WHERE PP.PARTNER_ID = P.ID
             AND PP.PARAM_NAME = 'HSA_SECURITY_FAIL_AGEOUT_DAYS'
             AND SYSDATE BETWEEN PP.BEGINS AND PP.ENDS
             AND P.PARTNER_CODE = cSecPartnerCd;

        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            cSecurityCheckParam := 90;
          WHEN OTHERS THEN
            cSecurityCheckParam := 90;
        END;

        IF (trunc(SYSDATE) - dSecurityCheckDate) <= cSecurityCheckParam THEN
          BEGIN
            SELECT ticketDetail.id, ticketDetail.cause_note
              INTO nTicketNo, cCauseNote
              FROM (SELECT t.id, t.cause_note
                      FROM ticket t, ticket_subtype ts
                     WHERE ts.id = t.tkt_subtype_id
                       AND t.created_for_id = inEeId
                       AND t.created_by != 'impl.automation.ksc'
                       AND ts.tkty_category = 'Employee'
                       AND ts.tkty_label = 'Enrollment/Eligibility'
                       AND ts.subtype = 'Enrollment Status'
                     ORDER BY t.created_on DESC) ticketDetail
             WHERE rownum = 1;

          EXCEPTION
            WHEN no_data_found THEN
              nTicketNo  := 0;
              cCauseNote := '';
          END;

          IF (nTicketNo > 0) THEN
            bIsCIPDocReSubmit := TRUE;
          ELSE
            cCIPWorkGroup := GETWORKGROUPFORCIPUPLOAD(inAdminId,
                                                      inErId,
                                                      inEeId);
            BEGIN
              SELECT 'Yes'
                INTO cClaimImgExist
                FROM claims_image
               WHERE workgroup = cCIPWorkGroup
                 AND status = 'Indexed'
                 AND ee_id = inEeId
                 AND rownum = 1;

            EXCEPTION
              WHEN no_data_found THEN
                cClaimImgExist := 'No';
            END;
            IF (nvl(cClaimImgExist, 'No') <> 'Yes') THEN
              bIsCIPDocRequired := TRUE;
            END IF;
          END IF;
        END IF;
      END IF;

      IF bIsCIPDocReSubmit THEN
        rNotification.category     := 'BLOCKER';
        rNotification.reference_id := nTicketNo;
        rNotification.note         := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                         inEr_Id    => inErId,
                                                                         icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.HEADERMSG'),
                                               'We Need More Information');
        rNotification.description  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                         inEr_Id    => inErId,
                                                                         icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.BODYMSG1'),
                                               'Apologies, but we still need some information to open your HSA.') || '~' ||
                                      coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                         inEr_Id    => inErId,
                                                                         icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.BODYMSG2'),
                                               'We''ve created a help ticket so you can see the specific document(s) you need to send.') || '~' ||
                                      cCauseNote;

        rNotification.link_label := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                       inEr_Id    => inErId,
                                                                       icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.LATERTHANKS'),
                                             'LATER, THANKS') || '~' ||
                                    coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                       inEr_Id    => inErId,
                                                                       icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.VIEWTICKET'),
                                             'VIEW HELP TICKET') || '~' ||
                                    coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                       inEr_Id    => inErId,
                                                                       icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.PROVIDEDOCUMENTS'),
                                             'PROVIDE DOCUMENTS');

        rNotification.TYPE       := coalesce(icRuleType, 'Alert');
        rNotification.rec_source := 'COMPLETE_ACC_HT';
        rNotification.priority   := inPriority;

        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;

      ELSIF bIsCIPDocRequired THEN

        rNotification.category    := 'BLOCKER';
        rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                        inEr_Id    => inErId,
                                                                        icLabel_Cd => 'SECURITYCHECKMISSINGINFO.DESCRIPTION'),
                                              'We received your HSA application, but we need additional information to verify your identity. Please upload the documents listed below. If we don''t receive the requested information, we will stop attempting to open the account.');
        rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                        inEr_Id    => inErId,
                                                                        icLabel_Cd => 'SECURITYCHECKMISSINGINFO.NOTE'),
                                              'Required Documentation Needed');
        rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                        inEr_Id    => inErId,
                                                                        icLabel_Cd => 'SECURITYCHECKMISSINGINFO.PROVIDEDOCUMENTS'),
                                              'PROVIDE DOCUMENTS');
        rNotification.TYPE        := coalesce(icRuleType, 'Alert');
        rNotification.rec_source  := 'COMPLETE_ACC_OPENING';
        rNotification.priority    := inPriority;

        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;

      END IF;

    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;

  END CompleteAccountOpening;

  PROCEDURE RESOLVERECEIPTREQDACT(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                                  INADMINID          IN NUMBER,
                                  INERID             IN NUMBER,
                                  INEEID             IN NUMBER,
                                  ICUSERNAME         IN VARCHAR2,
                                  ICACHACCT          IN VARCHAR2,
                                  ICACHISO           IN VARCHAR2,
                                  ICISACHVALID       IN VARCHAR2,
                                  ICDEBITCARDSTATUS  IN VARCHAR2,
                                  ICEMAIL            IN VARCHAR2,
                                  ICISADDRESSINVALID IN VARCHAR2,
                                  ICSEVERITY         IN VARCHAR2,
                                  INPRIORITY         IN NUMBER,
                                  ICRULETYPE         IN VARCHAR2) IS

    RNOTIFICATION      TREC_NOTIFICATION := TREC_NOTIFICATION();
    NADMNID            NUMBER;
    NERID              NUMBER;
    NEEID              NUMBER;
    CCLAIMDTLS         VARCHAR2(32767) := NULL;
    CDBTCARDSTATUS     VARCHAR2(50) := NULL;
    CTEMPDBTCARDSTATUS VARCHAR2(50) := NULL;
  BEGIN

    NADMNID := INADMINID;
    NERID   := INERID;
    NEEID   := INEEID;

    BEGIN

      IF ICDEBITCARDSTATUS != 'Suspended' THEN
        FOR CRCPTRQDCLM IN (SELECT EE.DEBIT_CARD_STATUS,
                                   CL.ID ID,
                                   TO_CHAR(CL.SERVICE_BEGINS, 'MM/DD/YYYY') SERVICE_BEGINS,
                                   REPLACE(REPLACE(CL.PROVIDER, '~', ' '),
                                           '|',
                                           ' ') PROVIDER,
                                   CL.AMT,
                                   CASE
                                     WHEN CI.STATUS = 'Complete' THEN
                                      'Invalid Receipt'
                                     ELSE
                                      'Receipt Required'
                                   END AS STATUS,
                                   EL.ERAC_ACTP_CD ACTP_CD
                              FROM CLAIM        CL,
                                   CLAIM_BATCH  CB,
                                   ELECTION     EL,
                                   ACCOUNT_TYPE AT,
                                   CLAIMS_IMAGE CI,
                                   EMPLOYEE     EE
                             WHERE EE.ID = NEEID
                               AND CL.CLMBT_ID = CB.ID
                               AND EE.ID = CL.EE_ID
                               AND CL.CLAIM_CATEGORY = 'Debit Card'
                               AND CL.ELCT_ID = EL.ID
                               AND EL.ERAC_ACTP_CD = AT.CD
                               AND UPPER(AT.RECEIPT_REQD) = 'YES'
                               AND CL.NEEDS_SUBSTANTIATION = 'Yes'
                               AND CL.SUBSTANTIATION_STATUS != 'Pass'
                               AND CL.IS_PRE_TAX = 'No'
                               AND CL.STATUS IN ('Paid', 'Released')
                               AND TRUNC(CLM_VALIDATECLAIMUTIL.GETRUNOFFDATE(CL.EE_ID,
                                                                             EL.ID,
                                                                             EL.ERAC_ER_ID,
                                                                             EL.ERAC_ACTP_CD)) >=
                                   TRUNC(SYSDATE)
                               AND CI.CLMBT_ID(+) = CB.ID
                               AND (CI.STATUS NOT IN
                                   ('Indexed', 'Review', 'QAPending') OR
                                   CI.STATUS IS NULL)
                               AND CL.SERVICE_BEGINS >
                                   TRUNC(ADD_MONTHS(SYSDATE, -12), 'RRRR')
                               AND CL.AMT > 0
                               AND CL.ID NOT IN
                                   (SELECT DCFO.CLM_ID
                                      FROM DBCARD_CLAIM_OFFSET     DCO,
                                           DBCARD_CLAIM_FOR_OFFSET DCFO
                                     WHERE DCO.EE_ID = EL.EE_ID
                                       AND DCO.ID = DCFO.DCCLMOFF_ID
                                       AND DCO.STATUS =
                                           'Online-Claim-Selected')
                             ORDER BY SERVICE_BEGINS DESC) LOOP

          CCLAIMDTLS     := CCLAIMDTLS || CRCPTRQDCLM.ID || '~' ||
                            CRCPTRQDCLM.SERVICE_BEGINS || '~' ||
                            COALESCE(CRCPTRQDCLM.PROVIDER, '') || '~' ||
                            CRCPTRQDCLM.AMT || '~' || CRCPTRQDCLM.STATUS || '~' ||
                            CRCPTRQDCLM.ACTP_CD || '|';
          CDBTCARDSTATUS := CRCPTRQDCLM.DEBIT_CARD_STATUS;
        END LOOP;

      ELSIF ICDEBITCARDSTATUS = 'Suspended' THEN

        FOR CSUSPRCPTRQDCLM IN (SELECT CL.ID ID,
                                       TO_CHAR(CL.SERVICE_BEGINS,
                                               'MM/DD/YYYY') SERVICE_BEGINS,
                                       CL.PROVIDER,
                                       CL.AMT,
                                       CL.EE_ID EE_ID,
                                       CASE
                                         WHEN CI.STATUS = 'Complete' THEN
                                          'Invalid Receipt'
                                         ELSE
                                          'Receipt Required'
                                       END AS STATUS,
                                       ELCT.ERAC_ACTP_CD ACTP_CD
                                  FROM CLAIM            CL,
                                       CLAIM_BATCH      CB,
                                       EMPLOYEE         EE,
                                       ELECTION         ELCT,
                                       EMPLOYER_ACCOUNT EAC,
                                       EMPLOYER         ER,
                                       ER_CLAIM_PARAM   ERCP,
                                       CLAIMS_IMAGE     CI
                                 WHERE CL.CLMBT_ID = CB.ID
                                   AND CI.CLMBT_ID(+) = CB.ID
                                   AND (CI.STATUS NOT IN
                                       ('Indexed', 'Review', 'QAPending') OR
                                       CI.STATUS IS NULL)
                                   AND CL.CLAIM_CATEGORY = 'Debit Card'
                                   AND CL.EE_ID = EE.ID
                                   AND EE.DEBIT_CARD_STATUS = 'Suspended'
                                   AND EE.ID = NEEID
                                   AND CL.ELCT_ID = ELCT.ID
                                   AND ELCT.EE_ID = EE.ID
                                   AND ELCT.ERAC_ER_ID = EAC.ER_ID
                                   AND ELCT.ERAC_ACTP_CD = EAC.ACTP_CD
                                   AND ELCT.ERAC_ENDS = EAC.ENDS
                                   AND ERCP.ER_ID = ER.ID
                                   AND CL.SUBSTANTIATION_STATUS IN
                                       (DECODE(EAC.SUBSTFAIL_NOTIFY3_DAYS,
                                               0,
                                               DECODE(EAC.SUBSTFAIL_NOTIFY2_DAYS,
                                                      0,
                                                      'Notified1',
                                                      'Notified2'),
                                               'Notified3'))
                                   AND ((ERCP.DEBIT_CARD_AUTO_UNSUSPEND =
                                       'Yes' AND
                                       ((EAC.ENDS =
                                       TO_DATE('12/31/2099 23:59:59',
                                                   'MM/DD/YYYY HH24:MI:SS') AND
                                       CL.SERVICE_ENDS BETWEEN
                                       TRUNC(SYSDATE, 'YYYY') AND TRUNC((ADD_MONTHS(TRUNC(SYSDATE,
                                                                                              'YYYY'),
                                                                                        12) - 1)) +
                                       .99999) OR
                                       (EAC.ENDS <>
                                       TO_DATE('12/31/2099 23:59:59',
                                                   'MM/DD/YYYY HH24:MI:SS') AND
                                       ((EAC.ENDS >= TRUNC(SYSDATE) AND
                                       SYSDATE BETWEEN EAC.BEGINS AND
                                       EAC.ENDS AND CL.SERVICE_ENDS BETWEEN
                                       EAC.BEGINS AND EAC.ENDS) OR
                                       (EAC.ENDS < TRUNC(SYSDATE) AND
                                       SYSDATE BETWEEN EAC.BEGINS AND
                                       GREATEST(EAC.ENDS,
                                                      CLM_BAC_UTIL.GETELCTENDDATEWITHGRACE(CL.ELCT_ID)) AND
                                       CL.SERVICE_ENDS BETWEEN
                                       EAC.BEGINS AND
                                       GREATEST(EAC.ENDS,
                                                      CLM_BAC_UTIL.GETELCTENDDATEWITHGRACE(CL.ELCT_ID))))))) OR
                                       (NVL(ERCP.DEBIT_CARD_AUTO_UNSUSPEND,
                                             'No') = 'No' AND
                                       ((EAC.ENDS =
                                       TO_DATE('12/31/2099 23:59:59',
                                                   'MM/DD/YYYY HH24:MI:SS') AND
                                       CL.SERVICE_ENDS BETWEEN
                                       ADD_MONTHS(TRUNC(SYSDATE, 'YYYY'),
                                                      -12) AND TRUNC((ADD_MONTHS(TRUNC(SYSDATE,
                                                                                           'YYYY'),
                                                                                     12) - 1)) +
                                       .99999) OR
                                       (EAC.ENDS <>
                                       TO_DATE('12/31/2099 23:59:59',
                                                   'MM/DD/YYYY HH24:MI:SS') AND
                                       ((SYSDATE BETWEEN EAC.BEGINS AND
                                       EAC.ENDS AND CL.SERVICE_ENDS BETWEEN
                                       EAC.BEGINS AND EAC.ENDS) OR
                                       (ADD_MONTHS(SYSDATE, -12) BETWEEN
                                       EAC.BEGINS AND EAC.ENDS AND
                                       CL.SERVICE_ENDS BETWEEN
                                       EAC.BEGINS AND
                                       GREATEST(EAC.ENDS,
                                                      CLM_BAC_UTIL.GETELCTENDDATEWITHGRACE(CL.ELCT_ID))))))))
                                   AND EE.PYCL_ER_ID = ER.ID) LOOP

          CCLAIMDTLS     := CCLAIMDTLS || CSUSPRCPTRQDCLM.ID || '~' ||
                            CSUSPRCPTRQDCLM.SERVICE_BEGINS || '~' ||
                            COALESCE(CSUSPRCPTRQDCLM.PROVIDER, '') || '~' ||
                            CSUSPRCPTRQDCLM.AMT || '~' ||
                            CSUSPRCPTRQDCLM.STATUS || '~' ||
                            CSUSPRCPTRQDCLM.ACTP_CD || '|';
          CDBTCARDSTATUS := ICDEBITCARDSTATUS;
        END LOOP;
      END IF;
    END;

    IF CCLAIMDTLS IS NOT NULL THEN

      RNOTIFICATION.CATEGORY    := 'BLOCKER';
      RNOTIFICATION.DESCRIPTION := CCLAIMDTLS;
      RNOTIFICATION.NOTE        := CDBTCARDSTATUS;
      RNOTIFICATION.LINK_LABEL  := 'TAKE ACTION';
      RNOTIFICATION.TYPE        := COALESCE(ICRULETYPE, 'Alert');
      RNOTIFICATION.REC_SOURCE  := 'RECEIPT REQUIRED';
      RNOTIFICATION.PRIORITY    := INPRIORITY;

      OTTABNOTIFICATION.EXTEND();
      OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
    END IF;
  END RESOLVERECEIPTREQDACT;

  PROCEDURE RunOutOfTimeToUseBalanceCY(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         IN NUMBER,
                                       inEr_Id            IN NUMBER,
                                       inEe_Id            IN NUMBER,
                                       icUserName         IN VARCHAR2,
                                       icAchAcct          IN VARCHAR2,
                                       icAchISO           IN VARCHAR2,
                                       icIsAchValid       IN VARCHAR2,
                                       icDebitCardStatus  IN VARCHAR2,
                                       icEmail            IN VARCHAR2,
                                       icIsAddressInValid IN VARCHAR2,
                                       icSeverity         IN VARCHAR2,
                                       inPriority         IN NUMBER,
                                       icRuleType         VARCHAR2) IS

    dEffective DATE := SYSDATE;
    nCutOffDays CONSTANT NUMBER := 30;
    cString             VARCHAR2(500) := 'Spend the funds on qualified expenses before the deadline to put them to good use!';
    cBalanceText        VARCHAR2(500) := 'Your balance from {{accType}} {{year}} must be used by {{endDate}}.';
    cBalanceUpdatedText VARCHAR2(4000) := '';
    bCutOffDaysPassed   BOOLEAN := FALSE;
    cResult             VARCHAR2(255);
    cErrorCategory      VARCHAR2(255);
    nErrorCode          NUMBER;
    cErrorArea          VARCHAR2(255);
    cOtherMessage       VARCHAR2(4000);
    cDemogValue         VARCHAR2(255);
    dEracEnds           DATE := SYSDATE;
    cYear               VARCHAR2(255);
    rNotification       trec_notification := trec_notification();
    cLabelBalanceText   VARCHAR2(500) := PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                   inEr_Id     => inEr_Id,
                                                                   icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.CY.BALANCEDESC',
                                                                   icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS');

  BEGIN

    IF jra_account_util.IsErJRA(inEr_Id) = 'No' THEN
      FOR rec_election IN (SELECT EL.ID ELCTID,
                                  EL.ERAC_ACTP_CD ACTPCD,
                                  EL.ERAC_ER_ID ELERACERID,
                                  EXTRACT(YEAR FROM EL.Erac_Ends) YEAR,
                                  EL.Erac_Ends AS ERAC_END,
                                  EL.Election_Effective AS ERAC_EFFECTIVE
                             FROM ELECTION EL
                            WHERE EL.ERAC_ACTP_CD NOT IN
                                  ('NON REIMBURSEMENT', 'NO ELECTION')
                              AND EL.EE_ID = inEe_Id
                              AND EXTRACT(YEAR FROM EL.Erac_Ends) < 2099
                              AND (SYSDATE BETWEEN EL.ELECTION_EFFECTIVE AND
                                  EL.ERAC_ENDS)
                            ORDER BY EL.Erac_Ends DESC) LOOP

        IF (TRUNC(rec_election.erac_end) - TRUNC(SYSDATE) BETWEEN 1 AND
           nCutOffDays) AND
           nvl(CLM_DISPLAYEEBALANCE(rec_election.ELCTID, 'No'), 0) > 0 THEN
          cYear      := rec_election.year;
          dEracEnds  := rec_election.erac_end;
          dEffective := rec_election.erac_effective;
          IF EXTRACT(YEAR FROM dEffective) != cYear THEN
            cBalanceUpdatedText := cBalanceUpdatedText ||
                                   REPLACE(REPLACE(REPLACE(coalesce(cLabelBalanceText,
                                                                    cBalanceText),
                                                           '{{year}}',
                                                           TO_CHAR(dEffective,
                                                                   'MM/DD/YYYY')),

                                                   '{{endDate}}',
                                                   TO_CHAR(dEracEnds,
                                                           'MM/DD/YYYY')),
                                           '{{accType}}',
                                           PortalUtil.GetAccountLabel(inEe_Id,
                                                                      rec_election.actpcd)) || '~';
          ELSE
            cBalanceUpdatedText := cBalanceUpdatedText ||
                                   REPLACE(REPLACE(REPLACE(coalesce(cLabelBalanceText,
                                                                    cBalanceText),
                                                           '{{year}}',
                                                           cYear),

                                                   '{{endDate}}',
                                                   TO_CHAR(dEracEnds,
                                                           'MM/DD/YYYY')),
                                           '{{accType}}',
                                           PortalUtil.GetAccountLabel(inEe_Id,
                                                                      rec_election.actpcd)) || '~';
          END IF;
          bCutOffDaysPassed := TRUE;

        END IF;
      END LOOP;

      IF bCutOffDaysPassed THEN

        rNotification.category := 'BLOCKER';

        rNotification.description := cBalanceUpdatedText ||
                                     coalesce(PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                        inEr_Id     => inEr_Id,
                                                                        icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.CY.DESC',
                                                                        icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS'),
                                              cString);

        rNotification.note := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                 inEr_Id     => inEr_Id,
                                                                 icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.CY.NOTE',
                                                                 icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS'),
                                       'Don''t Lose Your Money');

        BEGIN
          get_er_admn_demog(cResult,
                            cErrorCategory,
                            nErrorCode,
                            cErrorArea,
                            cOtherMessage,
                            inAdmin_Id,
                            inEr_Id,
                            'PAY_TYPE',
                            cDemogValue,
                            'System',
                            'No',
                            'No');
          IF cResult = 'OK' THEN
            IF nvl(cDemogValue, 'Self') = 'Both' THEN
              rNotification.link_label := 'PAGEBLOCKER.RUNOUTOFTIME.CY.ENTERREIMBURSEMENT' || '~' ||
                                          'Enabled' || '~' ||
                                          'PAGEBLOCKER.RUNOUTOFTIME.CY.PAYABILL' || '~' ||
                                          'Enabled';
            ELSIF nvl(cDemogValue, 'Self') = 'Self' THEN
              rNotification.link_label := 'PAGEBLOCKER.RUNOUTOFTIME.CY.ENTERREIMBURSEMENT' || '~' ||
                                          'Enabled' || '~' ||
                                          'PAGEBLOCKER.RUNOUTOFTIME.CY.PAYABILL' || '~' ||
                                          'Disabled';
            END IF;
          ELSE
            rNotification.link_label := '';
          END IF;

        END;
        rNotification.TYPE       := coalesce(icRuleType, 'Alert');
        rNotification.rec_source := 'RUN_OUTOF_TIME_CY';
        rNotification.priority   := inPriority;

        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      END IF;
    END IF;
  END RunOutOfTimeToUseBalanceCY;

  PROCEDURE RunOutOfTimeToUseBalancePY(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         IN NUMBER,
                                       inEr_Id            IN NUMBER,
                                       inEe_Id            IN NUMBER,
                                       icUserName         IN VARCHAR2,
                                       icAchAcct          IN VARCHAR2,
                                       icAchISO           IN VARCHAR2,
                                       icIsAchValid       IN VARCHAR2,
                                       icDebitCardStatus  IN VARCHAR2,
                                       icEmail            IN VARCHAR2,
                                       icIsAddressInValid IN VARCHAR2,
                                       icSeverity         IN VARCHAR2,
                                       inPriority         IN NUMBER,
                                       icRuleType         VARCHAR2) IS

    dSubmitEnds DATE := SYSDATE;
    dEffective  DATE := SYSDATE;
    nCutOffDays CONSTANT NUMBER := 30;
    cString             VARCHAR2(500) := 'Spend the funds on qualified expenses before the deadline to put them to good use!';
    cBalanceText        VARCHAR2(500) := 'Your balance from {{accType}} {{year}} must be used by {{endDate}}.';
    cBalanceUpdatedText VARCHAR2(4000) := '';
    bCutOffDaysPassed   BOOLEAN := FALSE;
    cResult             VARCHAR2(255);
    cErrorCategory      VARCHAR2(255);
    nErrorCode          NUMBER;
    cErrorArea          VARCHAR2(255);
    cOtherMessage       VARCHAR2(4000);
    cDemogValue         VARCHAR2(255);
    dEracEnds           DATE := SYSDATE;
    cYear               VARCHAR2(255);
    rNotification       trec_notification := trec_notification();
    cLabelBalanceText   VARCHAR2(500) := PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                   inEr_Id     => inEr_Id,
                                                                   icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.PY.BALANCEDESC',
                                                                   icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS');
  BEGIN

    IF jra_account_util.IsErJRA(inEr_Id) = 'No' THEN
      FOR rec_election IN (SELECT EL.ID ELCTID,
                                  EL.ERAC_ACTP_CD ACTPCD,
                                  EL.ERAC_ER_ID ELERACERID,
                                  EXTRACT(YEAR FROM EL.Erac_Ends) YEAR,
                                  EL.Erac_Ends AS ERAC_END,
                                  EL.Election_Effective AS ERAC_EFFECTIVE
                             FROM ELECTION EL
                            WHERE EL.ERAC_ACTP_CD NOT IN
                                  ('NON REIMBURSEMENT', 'NO ELECTION')
                              AND EL.EE_ID = inEe_Id
                              AND EXTRACT(YEAR FROM EL.Erac_Ends) < 2099
                              AND (SYSDATE > EL.Election_Effective AND SYSDATE > EL.Erac_Ends)
                            ORDER BY EL.Erac_Ends DESC) LOOP

        dSubmitEnds := Clm_Validateclaimutil.getRunOffDate(inEe_Id,
                                                           rec_election.ELCTID,
                                                           rec_election.ELERACERID,
                                                           rec_election.ACTPCD);

        IF (TRUNC(dSubmitEnds) - TRUNC(SYSDATE) BETWEEN 1 AND nCutOffDays) AND
           nvl(CLM_DISPLAYEEBALANCE(rec_election.ELCTID, 'No'), 0) > 0 THEN
          cYear      := rec_election.year;
          dEracEnds  := rec_election.erac_end;
          dEffective := rec_election.erac_effective;
          IF EXTRACT(YEAR FROM dEffective) != cYear THEN
            cBalanceUpdatedText := cBalanceUpdatedText ||
                                   REPLACE(REPLACE(REPLACE(coalesce(cLabelBalanceText,
                                                                    cBalanceText),
                                                           '{{year}}',
                                                           TO_CHAR(dEffective,
                                                                   'MM/DD/YYYY')),

                                                   '{{endDate}}',
                                                   TO_CHAR(dSubmitEnds,
                                                           'MM/DD/YYYY')),
                                           '{{accType}}',
                                           PortalUtil.GetAccountLabel(inEe_Id,
                                                                      rec_election.actpcd)) || '~';
          ELSE
            cBalanceUpdatedText := cBalanceUpdatedText ||
                                   REPLACE(REPLACE(REPLACE(coalesce(cLabelBalanceText,
                                                                    cBalanceText),
                                                           '{{year}}',
                                                           cYear),

                                                   '{{endDate}}',
                                                   TO_CHAR(dSubmitEnds,
                                                           'MM/DD/YYYY')),
                                           '{{accType}}',
                                           PortalUtil.GetAccountLabel(inEe_Id,
                                                                      rec_election.actpcd)) || '~';
          END IF;
          bCutOffDaysPassed := TRUE;

        END IF;
      END LOOP;

      IF bCutOffDaysPassed THEN

        rNotification.category    := 'BLOCKER';
        rNotification.description := cBalanceUpdatedText ||
                                     coalesce(PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                        inEr_Id     => inEr_Id,
                                                                        icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.PY.DESC',
                                                                        icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS'),
                                              cString);

        rNotification.note := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                 inEr_Id     => inEr_Id,
                                                                 icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.PY.NOTE',
                                                                 icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS'),
                                       'Don''t Lose Your Money');

        BEGIN
          get_er_admn_demog(cResult,
                            cErrorCategory,
                            nErrorCode,
                            cErrorArea,
                            cOtherMessage,
                            inAdmin_Id,
                            inEr_Id,
                            'PAY_TYPE',
                            cDemogValue,
                            'System',
                            'No',
                            'No');
          IF cResult = 'OK' THEN
            IF nvl(cDemogValue, 'Self') = 'Both' THEN
              rNotification.link_label := 'PAGEBLOCKER.RUNOUTOFTIME.PY.ENTERREIMBURSEMENT' || '~' ||
                                          'Enabled' || '~' ||
                                          'PAGEBLOCKER.RUNOUTOFTIME.PY.PAYABILL' || '~' ||
                                          'Enabled';
            ELSIF nvl(cDemogValue, 'Self') = 'Self' THEN
              rNotification.link_label := 'PAGEBLOCKER.RUNOUTOFTIME.PY.ENTERREIMBURSEMENT' || '~' ||
                                          'Enabled' || '~' ||
                                          'PAGEBLOCKER.RUNOUTOFTIME.PY.PAYABILL' || '~' ||
                                          'Disabled';
            END IF;
          ELSE
            rNotification.link_label := '';
          END IF;

        END;
        rNotification.TYPE       := coalesce(icRuleType, 'Alert');
        rNotification.rec_source := 'RUN_OUTOF_TIME_PY';
        rNotification.priority   := inPriority;

        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      END IF;
    END IF;
  END RunOutOfTimeToUseBalancePY;

  PROCEDURE CashBalanceThreshold(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();

    nDummy               PLS_INTEGER := 0;
    cResult              VARCHAR2(255) := 'ERROR';
    cErrorCategory       VARCHAR2(255) := 'OTHER';
    nErrorCode           NUMBER := 99999;
    cErrorArea           VARCHAR2(255) := 'Init';
    cOtherMessage        VARCHAR2(4000);
    nUserId              NUMBER;
    cObjName             VARCHAR2(20) := 'HSAROLE';
    cObjCD               VARCHAR2(20) := 'Section';
    occanview            VARCHAR2(3) := 'No';
    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';
    cEntityType          VARCHAR2(3);
    oShouldDispInvLink   VARCHAR2(5) := 'Yes';
    nElctID              NUMBER := 0;
    nAvlBalance          NUMBER := 0;
    nThresholdLimit      NUMBER;
    cIsInvested          VARCHAR2(10);

  BEGIN

    SELECT id INTO nuserid FROM Login WHERE user_name = icUserName;

    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);

    IF UPPER(occanexecute) = 'YES' THEN
      BEGIN
        SELECT decode(eed.demog_value, 'Move Completed', 'No', 'Yes')
          INTO oShouldDispInvLink
          FROM ee_demog eed
         WHERE eed.ee_id = inEe_Id
           AND eed.demog_type = 'MIGRATION_STATUS';
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
      IF UPPER(oShouldDispInvLink) = 'YES' THEN

        SELECT nvl(GetElectionForHSA(inEe_Id), 0) INTO nElctID FROM dual;

        IF nvl(nElctID, 0) <> 0 THEN
          SELECT nvl(CLM_DISPLAYEEBALANCE(nElctID, 'No'), 0)
            INTO nAvlBalance
            FROM dual;
        END IF;
        BEGIN
          nThresholdLimit := nvl(to_number(apputil.GetErAdmnDemog('HSA_INVESTMENT_THRESHOLD',
                                                                  inAdmin_Id,
                                                                  inEr_Id,
                                                                  SYSDATE,
                                                                  'Yes')),
                                 0);
        EXCEPTION
          WHEN OTHERS THEN
            nThresholdLimit := 0;
        END;
        IF nvl(nAvlBalance, 0) > nvl(nThresholdLimit, 0) THEN
          rNotification.category    := 'DIDYOUKNOW';
          rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                          inEr_Id    => inEr_Id,
                                                                          icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.INVESTNOW.DESC'),
                                                'Dont be caught by suprise. Try our investment calculator.');
          rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                          inEr_Id    => inEr_Id,
                                                                          icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.INVESTNOW.NOTE'),
                                                'Are You on Track for Retirement?');
          rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                          inEr_Id    => inEr_Id,
                                                                          icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.INVESTNOW.LINKLABEL'),
                                                'INVESTMENT CALCULATOR');
          rNotification.TYPE        := coalesce(icRuleType, 'Notification');
          rNotification.rec_source  := 'INVESTMENT_CALCULATOR';
          rNotification.priority    := inPriority;

          ottabNotification.Extend();
          ottabNotification(ottabNotification.Last) := rNotification;
        END IF;
      END IF;
    END IF;
  END CashBalanceThreshold;

  PROCEDURE UnderStandingAccount(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();

  BEGIN

    rNotification.category    := 'DIDYOUKNOW';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.UNDERSTAND.ACCOUNT.DESC'),
                                          'Having trouble understanding your account? We are here to help.');
    rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.UNDERSTAND.ACCOUNT.NOTE'),
                                          'Understanding Your Account');
    rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.UNDERSTAND.ACCOUNT.LINKLABEL'),
                                          'WATCH THE VIDEO');
    rNotification.TYPE        := coalesce(icRuleType, 'Notification');
    rNotification.rec_source  := 'UNDERSTAND_ACCOUNT';
    rNotification.priority    := inPriority;

    ottabNotification.Extend();
    ottabNotification(ottabNotification.Last) := rNotification;

  END UnderStandingAccount;

  PROCEDURE GetMobileApp(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();

  BEGIN

    rNotification.category    := 'DIDYOUKNOW';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.GET.MOBILE.DESC'),
                                          'Upload your receipts on the go with our mobile app!');
    rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.GET.MOBILE.NOTE'),
                                          'Get the Mobile App');
    rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.GET.MOBILE.LINKLABEL'),
                                          'DOWNLOAD IT NOW');
    rNotification.TYPE        := coalesce(icRuleType, 'Notification');
    rNotification.rec_source  := 'GET_MOBILE';
    rNotification.priority    := inPriority;

    ottabNotification.Extend();
    ottabNotification(ottabNotification.Last) := rNotification;

  END GetMobileApp;

  PROCEDURE EXCESSCONTRIBCHECK(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                               INADMIN_ID         NUMBER,
                               INER_ID            NUMBER,
                               INEE_ID            NUMBER,
                               ICUSERNAME         VARCHAR2,
                               ICACHACCT          VARCHAR2,
                               ICACHISO           VARCHAR2,
                               ICISACHVALID       VARCHAR2,
                               ICDEBITCARDSTATUS  VARCHAR2,
                               ICEMAIL            VARCHAR2,
                               ICISADDRESSINVALID VARCHAR2,
                               ICSEVERITY         VARCHAR2,
                               INPRIORITY         NUMBER,
                               ICRULETYPE         VARCHAR2) IS

    --------------------------------------------------------------------
    -- Activity      By                     On                Version --
    --------------------------------------------------------------------
    -- Created       Titas Das         19/04/2019              1.0.1
    /*
    Story id: PORTAL-6370, PORTAL-6371
    Popup on excess contribution exceeding 100% or threshold value.
    */
    -------------------------------------------------------------------------------------------------------------

    cACTIVEHSACHECK              VARCHAR2(255) := NULL;
    nPYExcessContribAmt          NUMBER;
    nCYExcessContribAmt          NUMBER;
    bPriorYrTaxDeadlineNotPassed BOOLEAN;

    CURSOR CURHED_EXCESS_THRESHOLD_CY IS
     SELECT TO_CHAR(HED.CONTRIB_YEAR) AS CONTRIB_YEAR
       FROM HSA_EXCESS_DEPOSIT HED, DEPOSIT D
      WHERE HED.DPST_ID = D.ID AND D.EE_ID = INEE_ID
        AND HED.EXCESS_LIMIT_TYPE IN
            ('ThresholdFamily',
             'ThresholdFamily+CatchUp', Home
 E-mail Us
 Oracle Articles
New Oracle Articles
 
 Oracle Training
 Oracle Tips 
 Oracle Forum
 Class Catalog

 
 Remote DBA
 Oracle Tuning
 Emergency 911
 RAC Support
 Apps Support
 Analysis
 Design
 Implementation
 Oracle Support

 
 SQL Tuning
 Security
 Oracle UNIX
 Oracle Linux
 Monitoring
 Remote support
 Remote plans
 Remote services
 Application Server
 Applications
 Oracle Forms
 Oracle Portal
 App Upgrades
 SQL Server
 Oracle Concepts
 Software Support
 Remote Support  
 Development  
 Implementation

 
 Consulting Staff
 Consulting Prices
 Help Wanted!

 

 
 Oracle Posters
 Oracle Books
 Oracle Scripts
 Ion 
 Excel-DB  

Don Burleson Blog 


 

 

 


 

 
             'ThresholdAverage',
             'ThresholdAverage+CatchUp',
             'ThresholdYrLastMonth',
             'ThresholdYrLastMonth+CatchUp')
        AND NOT EXISTS
      (SELECT 1
               FROM HSA_EXCESS_DEPOSIT HED1, DEPOSIT D1
        WHERE HED1.DPST_ID = D1.ID AND D1.EE_ID = INEE_ID
              AND HED1.EXCESS_LIMIT_TYPE IN
                    ('Family',
                     'Family+CatchUp',
                     'Average',
                     'Average+CatchUp',
                     'YrLastMonth',
                     'YrLastMonth+CatchUp')
                AND HED1.IS_REPORTED = 'Yes'
                AND HED1.CONTRIB_YEAR = EXTRACT(YEAR FROM SYSDATE))
        AND NOT EXISTS
      (SELECT 1
               FROM PREFERENCE_INFO PI, USER_PREFERENCE UP
              WHERE UP.PREF_ID = PI.ID
                AND PI.PREFERENCE_NAME =
                    'EXCESS_CONTRIBUTION_THRESHOLD_DONOTSHOW_FOR_YEAR'
                AND UP.EE_ID = INEE_ID
                AND UP.PREFFERED_CHOICE LIKE
                    '%' || TO_CHAR(EXTRACT(YEAR FROM SYSDATE)) || '%')
        AND HED.IS_REPORTED = 'Yes'
        AND HED.CONTRIB_YEAR = EXTRACT(YEAR FROM SYSDATE);

   CURSOR CURHED_EXCESS_THRESHOLD_PY IS
     SELECT TO_CHAR(HED.CONTRIB_YEAR) AS CONTRIB_YEAR
       FROM HSA_EXCESS_DEPOSIT HED, DEPOSIT D
      WHERE HED.DPST_ID = D.ID AND D.EE_ID = INEE_ID
        AND HED.EXCESS_LIMIT_TYPE IN
            ('ThresholdFamily',
             'ThresholdFamily+CatchUp',
             'ThresholdAverage',
             'ThresholdAverage+CatchUp',
             'ThresholdYrLastMonth',
             'ThresholdYrLastMonth+CatchUp')
        AND NOT EXISTS
      (SELECT 1
               FROM HSA_EXCESS_DEPOSIT HED1, DEPOSIT D1
        WHERE HED1.DPST_ID = D1.ID AND D1.EE_ID = INEE_ID
                AND HED1.EXCESS_LIMIT_TYPE IN
                    ('Family',
                     'Family+CatchUp',
                     'Average',
                     'Average+CatchUp',
                     'YrLastMonth',
                     'YrLastMonth+CatchUp')
                AND HED1.IS_REPORTED = 'Yes'
                AND HED1.CONTRIB_YEAR = EXTRACT(YEAR FROM SYSDATE) - 1)
        AND NOT EXISTS
      (SELECT 1
               FROM PREFERENCE_INFO PI, USER_PREFERENCE UP
              WHERE UP.PREF_ID = PI.ID
                AND PI.PREFERENCE_NAME =
                    'EXCESS_CONTRIBUTION_THRESHOLD_DONOTSHOW_FOR_YEAR'
                AND UP.EE_ID = INEE_ID
                AND UP.PREFFERED_CHOICE LIKE
                    '%' || TO_CHAR(EXTRACT(YEAR FROM SYSDATE) - 1) || '%')
        AND HED.IS_REPORTED = 'Yes'
        AND HED.CONTRIB_YEAR = EXTRACT(YEAR FROM SYSDATE) - 1
           -- 1.0.1 Start
        AND TO_DATE(COALESCE(APPUTIL_DATACACHE.GETERADMNDEMOG(INADMIN_ID,
                                                              INER_ID,
                                                              'IRS_TAX_DEADLINE',
                                                              'Yes'),
                             '04/15/' || TO_CHAR(SYSDATE, 'yyyy')),
                    'mm/dd/yyyy') >= TRUNC(SYSDATE);

    RNOTIFICATION TREC_NOTIFICATION := TREC_NOTIFICATION();

  BEGIN

    BEGIN
      SELECT EL.ID
        INTO CACTIVEHSACHECK
        FROM ELECTION EL, STACK_ELECTION SE
       WHERE SE.ELCT_ID = EL.ID
         AND EL.EE_ID = INEE_ID
         AND EL.ERAC_ACTP_CD = 'HSA'
         AND (TRUNC(SYSDATE) BETWEEN SE.START_DATE AND SE.END_DATE)
         AND UPPER(EL.ENROLLMENT_STATUS) = 'ENROLLED';

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        CACTIVEHSACHECK := NULL;
    END;

    IF CACTIVEHSACHECK IS NOT NULL THEN

      IF TO_DATE(COALESCE(APPUTIL_DATACACHE.GETERADMNDEMOG(INADMIN_ID,
                                                           INER_ID,
                                                           'IRS_TAX_DEADLINE',
                                                           'Yes'),
                          '04/15/' || TO_CHAR(SYSDATE, 'yyyy')),
                 'mm/dd/yyyy') >= TRUNC(SYSDATE) THEN
        bPriorYrTaxDeadlineNotPassed := TRUE;
      ELSE
        bPriorYrTaxDeadlineNotPassed := FALSE;
      END IF;

      IF bPriorYrTaxDeadlineNotPassed THEN
        nPYExcessContribAmt := RKP_ACCOUNT_UTIL.GETEXCESSCONTRBAMT(INEE_ID,
                                                                   'PY');
        IF nPYExcessContribAmt > 0 THEN
          RNOTIFICATION.CATEGORY   := 'BLOCKER';
          RNOTIFICATION.LINK_LABEL := 'EXCESSCONTRIBPY';

          RNOTIFICATION.NOTE     := EXTRACT(YEAR FROM SYSDATE) - 1;
          RNOTIFICATION.TYPE     := COALESCE(ICRULETYPE, 'Alert');
          RNOTIFICATION.PRIORITY := INPRIORITY;
          OTTABNOTIFICATION.EXTEND();
          OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
        END IF;
      END IF;

      IF RNOTIFICATION.LINK_LABEL IS NULL THEN
        nCYExcessContribAmt := RKP_ACCOUNT_UTIL.GETEXCESSCONTRBAMT(INEE_ID,
                                                                   'CY');

        IF nCYExcessContribAmt > 0 THEN
          RNOTIFICATION.CATEGORY   := 'BLOCKER';
          RNOTIFICATION.LINK_LABEL := 'EXCESSCONTRIBCY';

          RNOTIFICATION.NOTE     := EXTRACT(YEAR FROM SYSDATE);
          RNOTIFICATION.TYPE     := COALESCE(ICRULETYPE, 'Alert');
          RNOTIFICATION.PRIORITY := INPRIORITY;
          OTTABNOTIFICATION.EXTEND();
          OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
        END IF;

      END IF;

      IF RNOTIFICATION.LINK_LABEL IS NULL THEN

       FOR NDUMMY IN CURHED_EXCESS_THRESHOLD_PY LOOP

         RNOTIFICATION.CATEGORY    := 'BLOCKER';
         RNOTIFICATION.LINK_LABEL  := 'EXCESSCONTRIBTHRESHOLDPY';
         RNOTIFICATION.NOTE        := NDUMMY.CONTRIB_YEAR;
         RNOTIFICATION.DESCRIPTION := PORTALUTIL.GETPORTALLABEL(INADMIN_ID  => INADMIN_ID,
                                                                INER_ID     => INER_ID,
                                                                ICLABEL_CD  => 'PAGEBLOCKER.EXCESSCONTRIBTHRESHOLD.BODY1',
                                                                ICPORTAL_CD => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS') ||
                                      RNOTIFICATION.NOTE || ' ' ||
                                      PORTALUTIL.GETPORTALLABEL(INADMIN_ID  => INADMIN_ID,
                                                                INER_ID     => INER_ID,
                                                                ICLABEL_CD  => 'PAGEBLOCKER.EXCESSCONTRIBTHRESHOLD.BODY2',
                                                                ICPORTAL_CD => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS');
         RNOTIFICATION.TYPE        := COALESCE(ICRULETYPE, 'Alert');
         RNOTIFICATION.PRIORITY    := INPRIORITY;
         OTTABNOTIFICATION.EXTEND();
         OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;

         EXIT;
       END LOOP;

     END IF;

     IF RNOTIFICATION.LINK_LABEL IS NULL THEN

       FOR NDUMMY IN CURHED_EXCESS_THRESHOLD_CY LOOP

         RNOTIFICATION.CATEGORY    := 'BLOCKER';
         RNOTIFICATION.LINK_LABEL  := 'EXCESSCONTRIBTHRESHOLDCY';
         RNOTIFICATION.NOTE        := NDUMMY.CONTRIB_YEAR;
         RNOTIFICATION.DESCRIPTION := PORTALUTIL.GETPORTALLABEL(INADMIN_ID  => INADMIN_ID,
                                                                INER_ID     => INER_ID,
                                                                ICLABEL_CD  => 'PAGEBLOCKER.EXCESSCONTRIBTHRESHOLD.BODY1',
                                                                ICPORTAL_CD => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS') ||
                                      RNOTIFICATION.NOTE || ' ' ||
                                      PORTALUTIL.GETPORTALLABEL(INADMIN_ID  => INADMIN_ID,
                                                                INER_ID     => INER_ID,
                                                                ICLABEL_CD  => 'PAGEBLOCKER.EXCESSCONTRIBTHRESHOLD.BODY2',
                                                                ICPORTAL_CD => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS');
         RNOTIFICATION.TYPE        := COALESCE(ICRULETYPE, 'Alert');
         RNOTIFICATION.PRIORITY    := INPRIORITY;
         OTTABNOTIFICATION.EXTEND();
         OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;

         EXIT;
       END LOOP;

     END IF;

    END IF;
    
  END EXCESSCONTRIBCHECK;
  
  PROCEDURE ExpiredCheck(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2) IS
  
    rNotification        trec_notification := trec_notification();
    nCount               NUMBER := 0;
    nInstrNo             NUMBER;
    dInstrDate           DATE;
    cResult              VARCHAR2(255) := 'ERROR';
    cErrorCategory       VARCHAR2(255) := 'OTHER';
    nErrorCode           NUMBER := 99999;
    cErrorArea           VARCHAR2(255) := 'Init';
    cOtherMessage        VARCHAR2(4000) := NULL;
    cObjName             VARCHAR2(255) := 'ACCTTAB.PAYMENTS.REQUESTVOIDREISSUE';
    cObjCD               VARCHAR2(20) := 'RestService';
    occanview            VARCHAR2(3) := 'No';
    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';
    nuserid              NUMBER := NULL;
    cBankCode            VARCHAR2(255);
  
  BEGIN
  
    SELECT id INTO nuserid FROM Login WHERE user_name = icUserName;
  
    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);
  
    IF upper(occancreate) = 'YES' AND icIsAchValid IN ('No', 'PrenoteERR') THEN
    
      FOR curChecks IN (SELECT vw.*
                          FROM VW_PAYMENTS VW
                         WHERE nvl(vw.INSTR_NO, 0) != 0
                           AND vw.TYPECD = 'Check'
                           AND vw.TOTAL_AMT > 0
                           AND vw.STATUS = 'Issued'
                           AND vw.ee_id= inEe_Id
                           AND SYSDATE >
                               (vw.instr_date +
                                NVL((SELECT param_value
                                      FROM partner_param
                                     WHERE partner_id IN
                                           (SELECT p.id
                                              FROM partner_param pp,
                                                   partner       p
                                             WHERE pp.param_name =
                                                   'BANK_CODE'
                                               AND pp.partner_id = p.id
                                               AND p.partner_type = 'Bank'
                                               AND SYSDATE BETWEEN pp.begins AND
                                                   pp.ends
                                               AND pp.param_value =
                                                   vw.bank_code)
                                       AND param_name = 'CHECK_EXPIRY_DAYS'
                                       AND SYSDATE BETWEEN begins AND ends),
                                    90))) LOOP
        nCount     := nCount + 1;
        nInstrNo   := curChecks.Instr_No;
        dInstrDate := curChecks.Instr_Date;
        cBankCode  := curChecks.Bank_Code;
      END LOOP;
    
      IF nCount = 1 THEN
      
        BEGIN
          SELECT param_value
            INTO rNotification.description
            FROM partner_param
           WHERE partner_id IN
                 (SELECT p.id
                    FROM partner_param pp, partner p
                   WHERE pp.param_name = 'BANK_CODE'
                     AND pp.partner_id = p.id
                     AND p.partner_type = 'Bank'
                     AND SYSDATE BETWEEN pp.begins AND pp.ends
                     AND pp.param_value = cBankCode)
             AND param_name = 'CHECK_EXPIRY_DAYS'
             AND SYSDATE BETWEEN begins AND ends;
        
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            rNotification.description := 90;
        END;
      
        rNotification.category     := 'BLOCKER';
        rNotification.reference_id := nInstrNo;
        rNotification.note         := TO_CHAR(dInstrDate,'MM/DD/YYYY');
        rNotification.link_label   := 'EXPIRED_CHECK';
        rNotification.TYPE         := coalesce(icRuleType, 'Alert');
        rNotification.rec_source   := 'EXPIRED_CHECK';
        rNotification.priority     := inPriority;
      
        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      END IF;
    END IF;
  
  END ExpiredCheck;

END GetActionNeededPortalRules3;
/



====================================================================================================================
CREATE OR REPLACE FUNCTION Clm_GetAccountUpdatesDetails(inEeId   IN NUMBER,
                                                        inErId   IN NUMBER,
                                                        inAdmnId IN NUMBER,
                                                        inUserId IN NUMBER,
                                                        inDays   IN NUMBER)
  RETURN tTab_AccountUpdateDetail IS

  tblAccountUpdateDetail tTab_AccountUpdateDetail := tTab_AccountUpdateDetail();
  tblDebitCardDetails    tTab_AccountUpdateDetail := tTab_AccountUpdateDetail();
  v_claimsdata           TBL_CLAIMSDATA := TBL_CLAIMSDATA();
  cObjectName            VARCHAR2(255);
  cHasHSAViewPriv        VARCHAR2(3) := 'No';
  nUserId                NUMBER := inUserId;
  cProvider              VARCHAR2(255);
  cActivityDesc          VARCHAR2(255);
  cResult                VARCHAR2(5);
  cErrorCategory         VARCHAR2(255);
  nErrorCode             NUMBER;
  cErrorArea             VARCHAR2(255);
  cOtherMessage          VARCHAR2(4000);
  dElectionBegins        DATE;
  dElectionEnds          DATE;
  dServiceBegins         DATE; -- Minimum Date of Service Grace period
  dServiceEnds           DATE; -- Maximum Date of Service Grace period
  dMaxFutureServiceEnds  DATE;
  dSubmitEnds            DATE; -- RunOffDate
  cElectionEndReason     VARCHAR2(255);
  cStackExists           VARCHAR2(3);
  cUpdatedAcctLabel      VARCHAR2(255);
  cWorkGroup             VARCHAR2(255);
  cAmount                VARCHAR2(255);
  dTruncSysdate          DATE := trunc(SYSDATE);
  dMovementDate          DATE;
  nIndex                 PLS_INTEGER := 0;
  isJRA                  VARCHAR2(3);
  eNoInput   EXCEPTION;
  eException EXCEPTION;

  -- Non Claim Activities(RKP)
  CURSOR curRKPNonClaimActivity(inEeId IN NUMBER, inDays IN NUMBER) IS

    SELECT 'Non Claim Activities(RKP)' "SOURCE",
           D.ID "SOURCE_ID",
           A.EE_ID,
           TO_CHAR(COALESCE(D.CONFIRMED_ON,
                            D.POSTED_ON,
                            D.CREATED_ON,
                            D.TXN_DATE),
                   'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           D.DR_CR_IND,
           NVL(TO_CHAR(DECODE(D.DR_CR_IND, 'DR', -1 * D.TXN_AMT, D.TXN_AMT)),
               '') "AMOUNT",
           C.TXN_CATEGORY,
           NVL(C.TXN_CATEGORY_DISPLAY, C.TXN_TYPE) TXN_CATEGORY_DISPLAY,
           C.TXN_TYPE,
           C.TXN_CODE_SHORT_DESC,
           DECODE(UPPER(D.TXN_STATUS),
                  'CONFIRMED',
                  'Processed',
                  'Processing') "STATUS",
           D.POSTED_ON "PROCESSING_DATE",
           D.CONFIRMED_ON "PROCESSED_DATE",
           A.ACTP_CD
      FROM RKP_TRANSACTION_DTL D, RKP_TRANSACTION_CODE C, RKP_ACCOUNT A
     WHERE D.TXN_CODE = C.TXN_CODE
       AND D.TXN_STATUS IN ('Posted', 'Confirmed')
       AND NVL(D.LINK_REC_TYPE, 'X') != 'CLAIM'
       AND ((C.TXN_CATEGORY != 'Distribution' AND
           NVL(D.SOURCE_REC_TYPE, 'X') NOT IN
           ('CLAIM', 'DEBIT_CARD_IN_FILE_DTL', 'DEBIT_CARD_AUTH_TRXN_DTL')) OR
           (C.TXN_CATEGORY = 'Distribution' AND
           NVL(D.SOURCE_REC_TYPE, 'X') = 'RKP_TXN_ADJUSTMENT_DTL' AND
           NVL(D.SOURCE_SYSTEM, 'X') != 'BOA-FIS-Data' AND
           C.TXN_MODE = 'NA') OR EXISTS
            (SELECT 1
               FROM Rkp_Txn_Attr_Map rt, rkp_transaction_code rc
              WHERE rt.src_attr_code IN
                    ('REFUNDEXCESSAMOUNT', 'REFUNDEXCESSINTERESTAMOUNT')
                AND rt.tgt_attr_code = rc.txn_type
                AND rt.attr_map_domain = 'DISTRIB_TYPE_TO_TXN_TYPE'
                AND rc.txn_code = d.txn_code))
       AND A.EE_ID = INEEID
       AND A.ID = D.ACCOUNT_ID
       AND A.ACTIVATED_ON <= SYSDATE
       AND COALESCE(D.CONFIRMED_ON, D.POSTED_ON, D.CREATED_ON, D.TXN_DATE) >=
           SYSDATE - inDays;

  -- Non Claim Activities(Notional)
  CURSOR curNotionalNonClaimActivity(inEeId IN NUMBER, inDays IN NUMBER) IS
    SELECT 'Non Claim Activities(Notional)' "SOURCE",
           D.ID "SOURCE_ID",
           NVL(TO_CHAR(D.Created_On, 'MM/DD/YYYY HH24:MI:SS'),
               TO_CHAR(DS.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS')) "ACTIVITY_ON",
           DT.DEPOSIT_TYPE TXN_TYPE,
           CASE
             WHEN D.STATUS IN ('Confirmed', 'AckFromMV') THEN
              'Processed'
             ELSE
              'Processing'
           END "STATUS",
           (nvl(D.AMT, 0) + nvl(D.ADJUSTMENT_AMT, 0)) "AMOUNT",
           nvl(DT.WEB_CODE, DT.DEPOSIT_TYPE) "ACTIVITY_DESC",
           NVL(TO_CHAR(D.Created_On, 'MM/DD/YYYY HH24:MI:SS'),
               TO_CHAR(DS.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS')) "PROCESSING_DATE",
           NVL(TO_CHAR(D.Created_On, 'MM/DD/YYYY HH24:MI:SS'),
               TO_CHAR(DS.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS')) "PROCESSED_DATE",
           E.ERAC_ACTP_CD,
           DECODE(DT.WEB_CODE,
                  'Distribution',
                  'distribution',
                  'Interest',
                  'interest',
                  'Contribution',
                  'deposit',
                  'Fee',
                  'fees',
                  'others') "TXN_CATEGORY"
      FROM DEPOSIT          D,
           DEPOSIT_TYPE     DT,
           DEPOSIT_FILE     DFL,
           DEPOSIT_SCHEDULE DS,
           ELECTION         E
     WHERE D.DEPOSIT_TYPE = DT.DEPOSIT_TYPE
       AND D.DPFL_ID = DFL.ID
       AND DFL.DPSC_ID = DS.ID
       AND D.ELCT_ID = E.ID
       AND D.EE_ID = INEEID
       AND TO_DATE(NVL(TO_CHAR(D.Created_On, 'MM/DD/YYYY HH24:MI:SS'),
                       TO_CHAR(DS.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS')),
                   'MM/DD/YYYY HH24:MI:SS') >= SYSDATE - inDays
       AND E.ERAC_ACTP_CD NOT IN ('HSA');

  -- JRA Non Claim Activities
  CURSOR curJRANonClaimActivity(inEeId IN NUMBER, inDays IN NUMBER) IS
    SELECT VW.GROUP_TYPE "SOURCE",
           VW.ID "SOURCE_ID",
           VW.ERAC_ACTP_CD "ERAC_ACTP_CD",
           TO_CHAR(VW.ACTIVITY_DATE, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           VW.TXN_STATUS "STATUS",
           VW.AMOUNT,
           TO_CHAR(VW.PROCESSING_DATE, 'MM/DD/YYYY HH24:MI:SS') "PROCESSING_DATE",
           TO_CHAR(VW.PROCESSED_DATE, 'MM/DD/YYYY HH24:MI:SS') "PROCESSED_DATE",
           VW.TXN_CATEGORY,
           VW.TXN_TYPE,
           VW.PLAN_YEAR,
           TO_CHAR(VW.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS') "EFFECTIVE_DATE"
      FROM VW_EE_JRA_ACCOUNTACTIVITY VW
     WHERE VW.EE_ID = inEeId
       AND TRUNC(VW.ACTIVITY_DATE) >= TRUNC(SYSDATE) - inDays;

  -- Debit Card Unsettled Transactions Activity
  CURSOR curDebitCardUnsettledActivity(inEeId IN NUMBER, inDays IN NUMBER) IS
    SELECT 'DBCard Unsettled Txn' "SOURCE",
           TO_CHAR(VWUDB.DEBIT_CARD_AUTH_TXN_ID) "SOURCE_ID",
           VWUDB.EE_ID,
           VWUDB.TRXN_DATE "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           DECODE(VWUDB.STATUS,
                  'Approved',
                  'UNSETTLEDDBCARDTRXN',
                  'Declined',
                  'DENIEDDBCARDTRXN',
                  '') "OBJECT_NAME",
           'Section' "SECTION",
           VWUDB.ACTP_CD "ACTP_CD",
           INITCAP(NVL(VWUDB.PROVIDER_NAME, 'Unknown Provider')) "ACTIVITY_TYPE",
           'Debit card Activity' "ACTIVITY_DESCRIPTION",
           VWUDB.CLAIM_AMT "AMOUNT",
           decode(VWUDB.STATUS,
                  'Approved',
                  'Processing',
                  'Declined',
                  'Card Declined',
                  VWUDB.STATUS) "STATUS",
           'NA' "WORKGROUP",
           VWUDB.TXN_INDICATOR
      FROM VW_UNSETTLED_DBCARD_TRXN_TSYS VWUDB
     WHERE VWUDB.EE_ID = inEeId
       AND TO_DATE(VWUDB.TRXN_DATE, 'MM/DD/YYYY HH24:MI:SS') >=
           SYSDATE - inDays;

  -- Contribution Schedule activity
  CURSOR curContribScheduleActivity(inEeId IN NUMBER, inDays IN NUMBER) IS
    SELECT 'Contribution Schedule' "SOURCE",
           ECR.ID "SOURCE_ID",
           RA.EE_ID "EE_ID",
           DECODE(ECR.STATUS,
                  'Created',
                  TO_CHAR(ECR.CREATED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'Requested',
                  TO_CHAR(ECR.REQUESTED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'RequestFailed',
                  TO_CHAR(ECR.REJECTED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'ReadyToPost',
                  TO_CHAR(ECR.REQUESTED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'SentForPosting',
                  TO_CHAR((SELECT FILE_CREATION_DATE
                            FROM ACHFILE
                           WHERE ID = ECR.ACHFILE_ID),
                          'MM/DD/YYYY HH24:MI:SS'),
                  'Posted',
                  TO_CHAR(ECR.POSTED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'PostFailed',
                  TO_CHAR(ECR.REJECTED_ON, 'MM/DD/YYYY HH24:MI:SS')) "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'HSAROLE' "OBJECT_NAME",
           'Section' "SECTION",
           RA.ACTP_CD "ACTP_CD",
           'HSA' "ACTIVITY_TYPE",
           DECODE(ECR.STATUS,
                  'Requested',
                  'Contribution Scheduled',
                  'RequestFailed',
                  'Contribution Rejected',
                  'Created',
                  'Contribution Scheduled',
                  'ReadyToPost',
                  'Contribution Scheduled',
                  'SentForPosting',
                  'Contribution Scheduled',
                  'Posted',
                  'Contribution Scheduled',
                  'PostFailed',
                  'Contribution Rejected') "ACTIVITY_DESCRIPTION",
           '' AMOUNT,
           DECODE(ECR.STATUS,
                  'RequestFailed',
                  'Rejected',
                  'PostFailed',
                  'Rejected',
                  'Posted',
                  'Processed',
                  'Processing') STATUS,
           'NA' "WORKGROUP"
      FROM ELCT_CONTRIB_RQST ECR, ELCT_CONTRIB_SCHEDULE ECS, RKP_ACCOUNT RA
     WHERE RA.ELCT_ID = ECS.ELCT_ID
       AND ECS.ID = ECR.ELCTCOSCHD_ID
       AND ECR.STATUS IN ('Requested',
                          'RequestFailed',
                          'Created',
                          'ReadyToPost',
                          'SentForPosting',
                          'Posted',
                          'PostFailed')
       AND RA.EE_ID = inEeId
       AND (ECR.CREATED_ON >= SYSDATE - inDays OR
           ECR.REQUESTED_ON >= SYSDATE - inDays OR
           ECR.REJECTED_ON >= SYSDATE - inDays OR
           ECR.POSTED_ON >= SYSDATE - inDays);

  -- Bank Account Setup Activity For Contribution
  CURSOR curContribSetupActivity(inEeId IN NUMBER, inDays IN NUMBER) IS
    SELECT 'Contribution Setup' "SOURCE",
           B.ID "SOURCE_ID",
           B.EE_ID "EE_ID",
           TO_CHAR(B.STATUS_DATE, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'HSAROLE' "OBJECT_NAME",
           'Section' "SECTION",
           '' "ACTP_CD",
           CASE
             WHEN B.STATUS IN ('Created', 'Validation Sent') THEN
              'Bank Info Change'
             WHEN B.STATUS IN ('Validation Error',
                               'Validation Ageout',
                               'Validation ACH Reject') THEN
              'Bank Info Incorrect'
             WHEN B.STATUS = 'Validated' THEN
              'Bank Info Validated'
             WHEN B.STATUS = 'Deactivated' THEN
              'Bank Account Removed'
           END AS "ACTIVITY_TYPE",
           'NA' "ACTIVITY_DESCRIPTION",
           '' "AMOUNT",
           CASE
             WHEN B.STATUS IN ('Created', 'Validation Sent') THEN
              'Updated'
             WHEN B.STATUS IN ('Validation Error',
                               'Validation Ageout',
                               'Validation ACH Reject') THEN
              'Rejected'
             WHEN B.STATUS = 'Validated' THEN
              'Processed'
             WHEN B.STATUS = 'Deactivated' THEN
              'Removed'
           END AS "STATUS",
           'NA' "WORKGROUP"
      FROM BANK B
     WHERE B.EE_ID = inEeId
       AND B.STATUS_DATE >= SYSDATE - inDays;

  -- Help Ticket Activity
  CURSOR curHelpTicketActivity(inEeId IN NUMBER, inDays IN NUMBER) IS

    SELECT 'Help Ticket' "SOURCE",
           TO_CHAR(TK.ID) "SOURCE_ID",
           TK.CREATED_FOR_ID "EE_ID",
           TO_CHAR(coalesce(TK.REOPEN_RESOLVED_ON,
                            TK.REOPEN_DATE,
                            TK.RESOLVED_ON,
                            TK.ASSIGNED_ON,
                            TK.CREATED_ON),
                   'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'HLPTKTVIEW' "OBJECT_NAME",
           'Page' "SECTION",
           '' ACTP_CD,
           'Help Ticket Generated' "ACTIVITY_TYPE",
           DECODE(TK.STATUS,
                  'Open',
                  TO_CHAR(TRUNC(TK.CREATED_ON), 'MON-DD-YYYY'),
                  'Assigned',
                  TO_CHAR(TRUNC(TK.ASSIGNED_ON), 'MON-DD-YYYY'),
                  'Resolved',
                  TO_CHAR(TRUNC(TK.RESOLVED_ON), 'MON-DD-YYYY')) ACTIVITY_DESCRIPTION,
           '' "AMOUNT",
           TK.STATUS "STATUS",
           nvl(TK.Privacy_Level, 'No Restrictions') "WORKGROUP"
      FROM TICKET TK
     WHERE TK.CREATED_FOR_ID = inEeId
       AND TK.TKTY_CATEGORY = 'Employee'
       AND (TK.STATUS <> 'Resolved' OR TK.CREATED_THRU <> 'IVR')
       AND coalesce(TK.REOPEN_RESOLVED_ON,
                    TK.REOPEN_DATE,
                    TK.RESOLVED_ON,
                    TK.ASSIGNED_ON,
                    TK.CREATED_ON) >= SYSDATE - inDays;

  -- CIP Documents Upload Activity
  CURSOR curCIPDocsUploadActivity(inEeId IN NUMBER, inDays IN NUMBER) IS
    WITH CIPWORKGROUP AS
     (SELECT GETWORKGROUPFORCIPUPLOAD(inAdmnId, inErId, inEeId) AS WORKGROUP
        FROM DUAL)
    SELECT 'CIP Document Upload' "SOURCE",
           '' "SOURCE_ID",
           CI.EE_ID,
           TO_CHAR(CI.IMAGE_RECEIVED_ON, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'HSAROLE' "OBJECT_NAME",
           'Section' "SECTION",
           'HSA' "ACTP_CD",
           'HSA Application' "ACTIVITY_TYPE",
           'Documentation Uploaded' "ACTIVITY_DESCRIPTION",
           '' AMOUNT,
           'Under Review' STATUS,
           CI.WORKGROUP
      FROM CLAIMS_IMAGE CI, CIPWORKGROUP CW
     WHERE CI.STATUS = 'Indexed'
       AND CI.EE_ID = inEeId
       AND CI.WORKGROUP = CW.WORKGROUP
       AND CI.IMAGE_RECEIVED_ON >= SYSDATE - inDays;

  -- Profile Changes Activity
  CURSOR curProfileChangesActivity(inEeId IN NUMBER, inDays IN NUMBER) IS

    SELECT EMP.ID,
           TO_CHAR(EEHIST.DML_ON, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           TO_CHAR(EEHIST.DML_ON, 'MON-DD-YYYY') "ACTIVITY_DESCRIPTION",
           EEHIST.MAILING_LINE1_NEW,
           EEHIST.MAILING_LINE2_NEW,
           EEHIST.MAILING_LINE3_NEW,
           EEHIST.MAILING_ZIP_NEW,
           EEHIST.MAILING_CITY_NEW,
           EEHIST.MAILING_ST_CD_NEW,
           EEHIST.MAILING_ST_CTRY_CD_NEW,
           EEHIST.USER_NAME_NEW,
           EEHIST.ENCRYPTED_PASSWORD_NEW,
           EEHIST.SECURITY_CHALLENGE_NEW
      FROM EMPLOYEE EMP, EE_PROFILE_CHANGE_HIST EEHIST
     WHERE EMP.ID = EEHIST.EE_ID
       AND EMP.ID = inEeId
       AND EEHIST.DML_ON >= SYSDATE - inDays;

  -- Communication Event Activity
  CURSOR curCommunicationReturnActivity(inEeId IN NUMBER, inDays IN NUMBER) IS

    SELECT RMFD.ID,
           RMFD.EE_ID,
           TO_CHAR(RMFD.RETURNED_ON, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           TO_CHAR(RMFD.RETURNED_ON, 'MON-DD-YYYY') "ACTIVITY_DESCRIPTION"
      FROM RETURN_MAIL_FILE_DTL RMFD
     WHERE RMFD.EE_ID = inEeId
       AND RMFD.RETURNED_ON >= SYSDATE - inDays
     ORDER BY RMFD.RETURNED_ON DESC;

  -- Investment Realign/Sell Processing Activity
  CURSOR curInvestmentRealignSellProcessingActivity(inEeId IN NUMBER,
                                                    inDays IN NUMBER) IS

    SELECT RA.EE_ID "EE_ID",
           TO_CHAR(EIT.ID) "SOURCE_ID",
           TO_CHAR((SELECT EIS.REQUESTED_ON
                     FROM ELCT_INVEST_SELL EIS
                    WHERE EIS.ELCTINVSTTXN_ID = EIT.ID
                      AND rownum = 1),
                   'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           'HSAROLE' "OBJECT_NAME",
           TO_CHAR((SELECT EIS.REQUESTED_ON
                     FROM ELCT_INVEST_SELL EIS
                    WHERE EIS.ELCTINVSTTXN_ID = EIT.ID
                      AND rownum = 1),
                   'MM/DD/YYYY HH24:MI:SS') "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'Section' "SECTION",
           'HSA' "ACTP_CD",
           'Investment Sell' "ACTIVITY_DESCRIPTION",
           'Processing' "STATUS",
           'Non Claim Activities(RKP)' "SOURCE",
           'HSA' "ACTIVITY_TYPE",
           '' "AMOUNT",
           'Investment Sell' "WORKGROUP"

      FROM ELCT_INVEST_TRANSACTION EIT, RKP_ACCOUNT RA
     WHERE RA.EE_ID = inEeId
       AND EIT.INVEST_TYPE = 'Sell'
       AND EIT.ELCT_ID = RA.ELCT_ID
       AND EIT.TRXN_STATUS IN ('Pending', 'Inprocess', 'Processing')
       AND EIT.CREATED_ON >= SYSDATE - inDays

    UNION ALL

    SELECT RA.EE_ID "EE_ID",
           TO_CHAR(EIT.ID) "SOURCE_ID",
           TO_CHAR(EIT.REALIGN_CALL_ON, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           'HSAROLE' "OBJECT_NAME",
           TO_CHAR(EIT.REALIGN_CALL_ON, 'MM/DD/YYYY HH24:MI:SS') "PROCESSING_DATE",
           TO_CHAR(EIT.REALIGN_ACK_ON, 'MM/DD/YYYY HH24:MI:SS') "PROCESSED_DATE",
           'Section' "SECTION",
           'HSA' "ACTP_CD",
           'Investment Change' "ACTIVITY_DESCRIPTION",
           CASE
             WHEN EIT.TRXN_STATUS IN ('Pending', 'Inprocess', 'Processing') THEN
              'Processing'
             WHEN EIT.TRXN_STATUS IN ('Processed') THEN
              'Processed'
           END AS "STATUS",
           'Realign' "SOURCE",
           'HSA' "ACTIVITY_TYPE",
           '' "AMOUNT",
           'Investment Change' "WORKGROUP"

      FROM ELCT_INVEST_TRANSACTION EIT, RKP_ACCOUNT RA
     WHERE RA.EE_ID = inEeId
       AND EIT.INVEST_TYPE = 'Realign'
       AND EIT.ELCT_ID = RA.ELCT_ID
       AND EIT.TRXN_STATUS IN
           ('Pending', 'Inprocess', 'Processing', 'Processed')
       AND EIT.CREATED_ON >= SYSDATE - inDays

     ORDER BY ACTIVITY_ON DESC;

  --Direct Deposit Setup
  CURSOR curDirectDepositSetup(inEeId IN NUMBER, inDays IN NUMBER) IS

    SELECT EMP.ID,
           TO_CHAR(EMP.ACH_STATUS_DATE, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           TO_CHAR(EMP.ACH_STATUS_DATE, 'MON-DD-YYYY') "ACTIVITY_DESCRIPTION"
      FROM EMPLOYEE EMP
     WHERE EMP.ID = inEeId
       AND (EMP.ACH_STATUS_DATE IS NOT NULL AND
           EMP.ACH_STATUS_DATE >= SYSDATE - inDays);

BEGIN

  tblAccountUpdateDetail.Delete;
  IF inEeId IS NULL THEN
    RAISE eNoInput;
  END IF;

  IF nUserId IS NULL THEN
    BEGIN
      SELECT l.id
        INTO nUserId
        FROM login l
       WHERE l.ee_id = inEeId
         AND rownum = 1;
    EXCEPTION
      WHEN no_data_found THEN
        RAISE eNoInput;
      WHEN OTHERS THEN
        RAISE eNoInput;
    END;
  END IF;

  cHasHSAViewPriv := HASVIEWPRIVILEGE(nUserId, 'HSAROLE', 'Section');
  isJRA           := jra_account_util.isJRA(inEeId);

  IF isJRA <> 'Yes' THEN
    -- Account Closure/Moved Activities
    FOR recElections IN (SELECT EL.EE_ID PPTID,
                                EL.ID ELCTID,
                                EL.ERAC_ACTP_CD ACTPCD,
                                EL.ENROLLMENT_STATUS ENROLLMENTSTATUS,
                                TO_CHAR(EL.ERAC_ENDS, 'YYYY') PLANYEAR,
                                EL.ELECTED_AMOUNT ELCT_AMT,
                                EL.ELECTION_DATE ELCT_DATE
                           FROM ELECTION EL
                          WHERE EL.ERAC_ACTP_CD NOT IN
                                ('NON REIMBURSEMENT', 'NO ELECTION')
                            AND EL.EE_ID = inEeId) LOOP

      Clm_ElectionDates(ocresult        => cResult,
                        ocerrorcategory => cErrorCategory,
                        onerrorcode     => nerrorcode,
                        ocerrorarea     => cErrorArea,
                        ocothermessage  => cOtherMessage,
                        --
                        ineeid                 => inEeId,
                        inelctid               => recElections.Elctid,
                        inerid                 => inErId,
                        icactpcd               => recElections.Actpcd,
                        icDebugMode            => 'No',
                        odElectionBegins       => dElectionBegins, --What is the start date of the election
                        odElectionEnds         => dElectionEnds, --What is the end date of the election (incl separation rules)
                        odServiceBegins        => dServiceBegins, --What is the earliest service date.
                        odServiceEnds          => dServiceEnds, --What is the latest service date (incl grace)
                        odMaxFutureServiceEnds => dMaxFutureServiceEnds, --What is the max future service date
                        odSubmitEnds           => dSubmitEnds, --Last day allowed to submit a claim
                        ocElectionEndReason    => cElectionEndReason,
                        ocStackExists          => cStackExists,
                        idOverRideDate         => NULL);

      IF cResult != 'OK' THEN
        RAISE eException;
      END IF;

      IF (recElections.Enrollmentstatus = 'Moved') THEN

        SELECT MAX(MOVEMENT_DT)
          INTO dMovementDate
          FROM EE_MOVEMENT_DTL
         WHERE EE_ID_FROM = inEeId;
        dSubmitEnds := trunc(dMovementDate);
      END IF;

      IF (trunc(dSubmitEnds) - dTruncSysdate < 0) AND
         (dTruncSysdate - trunc(dSubmitEnds) <= inDays) THEN

        cUpdatedAcctLabel := PortalUtil.GetAccountLabel(inEeId,
                                                        recElections.Actpcd);
        IF (recElections.Actpcd <> 'HSA' AND
           TO_CHAR(trunc(SYSDATE, 'YEAR')) = recElections.Planyear) THEN
          tblAccountUpdateDetail.Extend;
          tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Closed Account',
                                                                                           SOURCE_ID            => '',
                                                                                           EE_ID                => inEeId,
                                                                                           ACTIVITY_ON          => TO_CHAR(dSubmitEnds,
                                                                                                                           'MM/DD/YYYY HH24:MI:SS'),
                                                                                           OBJECT_NAME          => '',
                                                                                           SECTION              => 'Section',
                                                                                           ACTP_CD              => cUpdatedAcctLabel,
                                                                                           ACTIVITY_TYPE        => cUpdatedAcctLabel ||
                                                                                                                   ' Closed',
                                                                                           ACTIVITY_DESCRIPTION => 'Account Closure',
                                                                                           PROCESSING_DATE      => '',
                                                                                           PROCESSED_DATE       => '',
                                                                                           AMOUNT               => '',
                                                                                           STATUS               => 'CLOSED',
                                                                                           WORKGROUP            => 'NA',
                                                                                           TXN_CATEGORY         => '',
                                                                                           EFFECTIVE_DATE       => '');

        ELSIF recElections.Actpcd = 'HSA' AND cHasHSAViewPriv = 'Yes' AND
              recElections.Enrollmentstatus = 'Moved' THEN
          tblAccountUpdateDetail.Extend;
          tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Moved Account',
                                                                                           SOURCE_ID            => '',
                                                                                           EE_ID                => inEeId,
                                                                                           ACTIVITY_ON          => TO_CHAR(dSubmitEnds,
                                                                                                                           'MM/DD/YYYY HH24:MI:SS'),
                                                                                           OBJECT_NAME          => '',
                                                                                           SECTION              => 'Section',
                                                                                           ACTP_CD              => cUpdatedAcctLabel,
                                                                                           ACTIVITY_TYPE        => cUpdatedAcctLabel ||
                                                                                                                   ' Moved',
                                                                                           ACTIVITY_DESCRIPTION => 'Account Moved',
                                                                                           PROCESSING_DATE      => '',
                                                                                           PROCESSED_DATE       => '',
                                                                                           AMOUNT               => '',
                                                                                           STATUS               => 'MOVED',
                                                                                           WORKGROUP            => 'NA',
                                                                                           TXN_CATEGORY         => '',
                                                                                           EFFECTIVE_DATE       => '');

        ELSIF recElections.Actpcd = 'HSA' AND cHasHSAViewPriv = 'Yes' THEN
          tblAccountUpdateDetail.Extend;
          tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Closed Account',
                                                                                           SOURCE_ID            => '',
                                                                                           EE_ID                => inEeId,
                                                                                           ACTIVITY_ON          => TO_CHAR(dSubmitEnds,
                                                                                                                           'MM/DD/YYYY HH24:MI:SS'),
                                                                                           OBJECT_NAME          => '',
                                                                                           SECTION              => 'Section',
                                                                                           ACTP_CD              => cUpdatedAcctLabel,
                                                                                           ACTIVITY_TYPE        => cUpdatedAcctLabel ||
                                                                                                                   ' Closed',
                                                                                           ACTIVITY_DESCRIPTION => 'Account Closure',
                                                                                           PROCESSING_DATE      => '',
                                                                                           PROCESSED_DATE       => '',
                                                                                           AMOUNT               => '',
                                                                                           STATUS               => 'CLOSED',
                                                                                           WORKGROUP            => 'NA',
                                                                                           TXN_CATEGORY         => '',
                                                                                           EFFECTIVE_DATE       => '');
        END IF;
      END IF;

    END LOOP;

    -- Non Claim Activities(RKP)
    IF cHasHSAViewPriv = 'Yes' THEN
      FOR recRKPNonClaimActivity IN curRKPNonClaimActivity(inEeId, inDays) LOOP

        tblAccountUpdateDetail.Extend;
        tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recRKPNonClaimActivity.SOURCE,
                                                                                         SOURCE_ID            => recRKPNonClaimActivity.SOURCE_ID,
                                                                                         EE_ID                => recRKPNonClaimActivity.EE_ID,
                                                                                         ACTIVITY_ON          => recRKPNonClaimActivity.ACTIVITY_ON,
                                                                                         OBJECT_NAME          => 'HSAROLE',
                                                                                         SECTION              => 'Section',
                                                                                         ACTP_CD              => recRKPNonClaimActivity.ACTP_CD,
                                                                                         ACTIVITY_TYPE        => 'HSA',
                                                                                         ACTIVITY_DESCRIPTION => nvl(recRKPNonClaimActivity.Txn_Category_Display,
                                                                                                                     recRKPNonClaimActivity.Txn_Type),
                                                                                         PROCESSING_DATE      => recRKPNonClaimActivity.PROCESSING_DATE,
                                                                                         PROCESSED_DATE       => recRKPNonClaimActivity.PROCESSED_DATE,
                                                                                         AMOUNT               => recRKPNonClaimActivity.AMOUNT,
                                                                                         STATUS               => recRKPNonClaimActivity.STATUS,
                                                                                         WORKGROUP            => recRKPNonClaimActivity.Txn_Category_Display,
                                                                                         TXN_CATEGORY         => recRKPNonClaimActivity.Txn_Category,
                                                                                         EFFECTIVE_DATE       => '');

      END LOOP;
    END IF;

    -- Non Claim Activities(Notional)
    FOR recNotionalNonClaimActivity IN curNotionalNonClaimActivity(inEeId,
                                                                   inDays) LOOP

      cUpdatedAcctLabel := PortalUtil.GetAccountLabel(inEeId,
                                                      recNotionalNonClaimActivity.Erac_Actp_Cd);

      IF nvl(UPPER(recNotionalNonClaimActivity.Txn_Category), 'others') =
         'DEPOSIT' THEN
        cWorkGroup := cUpdatedAcctLabel || ' Contribution';
      ELSE
        cWorkGroup := recNotionalNonClaimActivity.Txn_Type;
      END IF;

      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recNotionalNonClaimActivity.SOURCE,
                                                                                       SOURCE_ID            => recNotionalNonClaimActivity.SOURCE_ID,
                                                                                       EE_ID                => inEeId,
                                                                                       ACTIVITY_ON          => recNotionalNonClaimActivity.ACTIVITY_ON,
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => 'Section',
                                                                                       ACTP_CD              => cUpdatedAcctLabel,
                                                                                       PROCESSING_DATE      => recNotionalNonClaimActivity.PROCESSING_DATE,
                                                                                       PROCESSED_DATE       => recNotionalNonClaimActivity.PROCESSED_DATE,
                                                                                       ACTIVITY_TYPE        => cUpdatedAcctLabel,
                                                                                       ACTIVITY_DESCRIPTION => recNotionalNonClaimActivity.Activity_Desc,
                                                                                       AMOUNT               => recNotionalNonClaimActivity.AMOUNT,
                                                                                       STATUS               => recNotionalNonClaimActivity.STATUS,
                                                                                       WORKGROUP            => cWorkGroup,
                                                                                       TXN_CATEGORY         => recNotionalNonClaimActivity.Txn_Category,
                                                                                       EFFECTIVE_DATE       => '');
    END LOOP;
  ELSE
    -- JRA Account Closure/Moved Activities
    FOR recElections IN (SELECT DISTINCT EL.ERAC_ACTP_CD ACTPCD
                           FROM ELECTION EL
                          WHERE EL.ERAC_ACTP_CD NOT IN
                                ('NON REIMBURSEMENT', 'NO ELECTION')
                            AND EL.EE_ID = inEeId) LOOP
      SELECT DECODE(status,
                    'Closed',
                    trunc(ends),
                    'Active',
                    trunc(claim_submission_deadline))
        INTO dSubmitEnds
        FROM ee_account
       WHERE ee_id = inEeId
         AND actp_cd = recElections.ACTPCD;

      IF dSubmitEnds IS NOT NULL AND
         (trunc(dSubmitEnds) - dTruncSysdate < 0) AND
         (dTruncSysdate - trunc(dSubmitEnds) <= inDays) THEN

        cUpdatedAcctLabel := PortalUtil.GetAccountLabel(inEeId,
                                                        recElections.ACTPCD);

        tblAccountUpdateDetail.Extend;
        tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Closed Account',
                                                                                         SOURCE_ID            => '',
                                                                                         EE_ID                => inEeId,
                                                                                         ACTIVITY_ON          => TO_CHAR(dSubmitEnds,
                                                                                                                         'MM/DD/YYYY HH24:MI:SS'),
                                                                                         OBJECT_NAME          => '',
                                                                                         SECTION              => 'Section',
                                                                                         ACTP_CD              => cUpdatedAcctLabel,
                                                                                         ACTIVITY_TYPE        => cUpdatedAcctLabel ||
                                                                                                                 ' Closed',
                                                                                         ACTIVITY_DESCRIPTION => 'Account Closure',
                                                                                         PROCESSING_DATE      => '',
                                                                                         PROCESSED_DATE       => '',
                                                                                         AMOUNT               => '',
                                                                                         STATUS               => 'CLOSED',
                                                                                         WORKGROUP            => 'NA',
                                                                                         TXN_CATEGORY         => '',
                                                                                         EFFECTIVE_DATE       => '');

      END IF;
    END LOOP;

    -- JRA Non Claim Activities
    FOR recJRANonClaimActivity IN curJRANonClaimActivity(inEeId, inDays) LOOP

      cUpdatedAcctLabel := PortalUtil.GetAccountLabel(inEeId,
                                                      recJRANonClaimActivity.ERAC_ACTP_CD);
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recJRANonClaimActivity.SOURCE,
                                                                                       SOURCE_ID            => recJRANonClaimActivity.SOURCE_ID,
                                                                                       EE_ID                => inEeId,
                                                                                       ACTIVITY_ON          => recJRANonClaimActivity.ACTIVITY_ON,
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => 'Section',
                                                                                       ACTP_CD              => recJRANonClaimActivity.ERAC_ACTP_CD,
                                                                                       PROCESSING_DATE      => recJRANonClaimActivity.PROCESSING_DATE,
                                                                                       PROCESSED_DATE       => recJRANonClaimActivity.PROCESSED_DATE,
                                                                                       ACTIVITY_TYPE        => cUpdatedAcctLabel,
                                                                                       ACTIVITY_DESCRIPTION => recJRANonClaimActivity.TXN_TYPE,
                                                                                       AMOUNT               => recJRANonClaimActivity.AMOUNT,
                                                                                       STATUS               => recJRANonClaimActivity.STATUS,
                                                                                       WORKGROUP            => recJRANonClaimActivity.PLAN_YEAR,
                                                                                       TXN_CATEGORY         => recJRANonClaimActivity.Txn_Category,
                                                                                       EFFECTIVE_DATE       => recJRANonClaimActivity.EFFECTIVE_DATE);
    END LOOP;
  END IF;
  -- Claims Activity
  v_claimsdata := clm_getclaimdetails(NULL, NULL, NULL, inEeId);
  FOR indx IN 1 .. v_claimsdata.COUNT LOOP
    BEGIN
      SELECT DECODE(v_claimsdata(indx).ACCOUNT_TYPE, 'HSA', 'HSAROLE', '')
        INTO cObjectName
        FROM dual;

    EXCEPTION
      WHEN no_data_found THEN
        cObjectName := '';
    END;

    IF v_claimsdata(indx)
     .activity_date >= SYSDATE - inDays AND v_claimsdata(indx)
       .claim_status NOT IN ('Void', 'Hold') AND
        HASVIEWPRIVILEGE(nUserId, cObjectName, 'Section') = 'Yes' THEN

      IF v_claimsdata(indx).claim_status = 'UsedForOffset' THEN
        v_claimsdata(indx).claim_status := 'Used For offset';
      END IF;

      cProvider     := INITCAP(v_claimsdata(indx).PROVIDER);
      cActivityDesc := TO_CHAR(TRUNC(v_claimsdata(indx).ACTIVITY_DATE),
                               'MON-DD-YYYY');
      IF v_claimsdata(indx)
       .ACCOUNT_TYPE = 'HSA' AND instr(lower(cProvider), 'liquidate') > 0 THEN
        cProvider     := 'HSA Distribution';
        cActivityDesc := 'Account Distribution';
      END IF;

      IF v_claimsdata(indx)
       .CLAIM_BATCH_TYPE IN
          ('Manual', 'Online', 'Pass Thru', 'Conversion') THEN
        cActivityDesc := v_claimsdata(indx).CATEGORY || ' Expense';
      ELSIF v_claimsdata(indx).CLAIM_BATCH_TYPE IN ('Debit Card') THEN
        cActivityDesc := 'Debit Card Activity';
      END IF;

      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Claim',
                                                                                       SOURCE_ID            => v_claimsdata(indx).ID,
                                                                                       EE_ID                => inEeId,
                                                                                       ACTIVITY_ON          => TO_CHAR(nvl(v_claimsdata(indx)
                                                                                                                           .PAID_ON,
                                                                                                                           v_claimsdata(indx)
                                                                                                                           .ACTIVITY_DATE),
                                                                                                                       'MM/DD/YYYY HH24:MI:SS'),
                                                                                       OBJECT_NAME          => cObjectName,
                                                                                       SECTION              => 'Section',
                                                                                       ACTP_CD              => v_claimsdata(indx)
                                                                                                               .ACCOUNT_TYPE,
                                                                                       ACTIVITY_TYPE        => cProvider,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       ACTIVITY_DESCRIPTION => cActivityDesc,
                                                                                       AMOUNT               => -1 *
                                                                                                               REPLACE(REPLACE(v_claimsdata(indx)
                                                                                                                               .TOTAL_AMOUNT,
                                                                                                                               '$'),
                                                                                                                       ' '),
                                                                                       STATUS               => v_claimsdata(indx)
                                                                                                               .CLAIM_STATUS,
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;
  END LOOP;
  v_claimsdata.delete;

  -- Help Ticket Activity
  FOR recHelpTicketActivity IN curHelpTicketActivity(inEeId, inDays) LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recHelpTicketActivity.SOURCE,
                                                                                     SOURCE_ID            => recHelpTicketActivity.SOURCE_ID,
                                                                                     EE_ID                => recHelpTicketActivity.EE_ID,
                                                                                     ACTIVITY_ON          => recHelpTicketActivity.ACTIVITY_ON,
                                                                                     OBJECT_NAME          => recHelpTicketActivity.OBJECT_NAME,
                                                                                     SECTION              => recHelpTicketActivity.SECTION,
                                                                                     ACTP_CD              => recHelpTicketActivity.ACTP_CD,
                                                                                     PROCESSING_DATE      => recHelpTicketActivity.PROCESSING_DATE,
                                                                                     PROCESSED_DATE       => recHelpTicketActivity.PROCESSED_DATE,
                                                                                     ACTIVITY_TYPE        => recHelpTicketActivity.ACTIVITY_TYPE,
                                                                                     ACTIVITY_DESCRIPTION => recHelpTicketActivity.ACTIVITY_DESCRIPTION,
                                                                                     AMOUNT               => recHelpTicketActivity.AMOUNT,
                                                                                     STATUS               => recHelpTicketActivity.STATUS,
                                                                                     WORKGROUP            => recHelpTicketActivity.WORKGROUP,
                                                                                     TXN_CATEGORY         => '',
                                                                                     EFFECTIVE_DATE       => '');

  END LOOP;

  -- Debit Card Unsettled Transactions Activity
  FOR recDebitCardUnsettledActivity IN curDebitCardUnsettledActivity(inEeId,
                                                                     inDays) LOOP

    IF (recDebitCardUnsettledActivity.ACTP_CD = 'HSA' AND
       cHasHSAViewPriv = 'Yes') OR
       recDebitCardUnsettledActivity.ACTP_CD <> 'HSA' OR
       recDebitCardUnsettledActivity.ACTP_CD IS NULL THEN

      IF HASVIEWPRIVILEGE(nUserId,
                          recDebitCardUnsettledActivity.OBJECT_NAME,
                          recDebitCardUnsettledActivity.SECTION) = 'Yes' THEN

        cAmount := recDebitCardUnsettledActivity.AMOUNT;

        IF recDebitCardUnsettledActivity.TXN_INDICATOR = 'D' AND
           recDebitCardUnsettledActivity.Status = 'Processing' THEN
          cAmount := -1 * recDebitCardUnsettledActivity.AMOUNT;
        END IF;

        tblAccountUpdateDetail.Extend;
        tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recDebitCardUnsettledActivity.SOURCE,
                                                                                         SOURCE_ID            => recDebitCardUnsettledActivity.SOURCE_ID,
                                                                                         EE_ID                => recDebitCardUnsettledActivity.EE_ID,
                                                                                         ACTIVITY_ON          => recDebitCardUnsettledActivity.ACTIVITY_ON,
                                                                                         OBJECT_NAME          => recDebitCardUnsettledActivity.OBJECT_NAME,
                                                                                         SECTION              => recDebitCardUnsettledActivity.SECTION,
                                                                                         ACTP_CD              => recDebitCardUnsettledActivity.ACTP_CD,
                                                                                         PROCESSING_DATE      => recDebitCardUnsettledActivity.PROCESSING_DATE,
                                                                                         PROCESSED_DATE       => recDebitCardUnsettledActivity.PROCESSED_DATE,
                                                                                         ACTIVITY_TYPE        => recDebitCardUnsettledActivity.ACTIVITY_TYPE,
                                                                                         ACTIVITY_DESCRIPTION => recDebitCardUnsettledActivity.ACTIVITY_DESCRIPTION,
                                                                                         AMOUNT               => cAmount,
                                                                                         STATUS               => recDebitCardUnsettledActivity.STATUS,
                                                                                         WORKGROUP            => recDebitCardUnsettledActivity.WORKGROUP,
                                                                                         TXN_CATEGORY         => '',
                                                                                         EFFECTIVE_DATE       => '');
      END IF;
    END IF;

  END LOOP;

  -- Contribution Schedule activity
  IF isJRA <> 'Yes' AND cHasHSAViewPriv = 'Yes' THEN
    FOR recContribScheduleActivity IN curContribScheduleActivity(inEeId,
                                                                 inDays) LOOP

      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recContribScheduleActivity.SOURCE,
                                                                                       SOURCE_ID            => recContribScheduleActivity.SOURCE_ID,
                                                                                       EE_ID                => recContribScheduleActivity.EE_ID,
                                                                                       ACTIVITY_ON          => recContribScheduleActivity.ACTIVITY_ON,
                                                                                       OBJECT_NAME          => recContribScheduleActivity.OBJECT_NAME,
                                                                                       SECTION              => recContribScheduleActivity.SECTION,
                                                                                       ACTP_CD              => recContribScheduleActivity.ACTP_CD,
                                                                                       PROCESSING_DATE      => recContribScheduleActivity.PROCESSING_DATE,
                                                                                       PROCESSED_DATE       => recContribScheduleActivity.PROCESSED_DATE,
                                                                                       ACTIVITY_TYPE        => recContribScheduleActivity.ACTIVITY_TYPE,
                                                                                       ACTIVITY_DESCRIPTION => recContribScheduleActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => recContribScheduleActivity.AMOUNT,
                                                                                       STATUS               => recContribScheduleActivity.STATUS,
                                                                                       WORKGROUP            => recContribScheduleActivity.WORKGROUP,
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');

    END LOOP;
  END IF;

  -- Bank Account Setup Activity For Contribution
  FOR recContribSetupActivity IN curContribSetupActivity(inEeId, inDays) LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recContribSetupActivity.SOURCE,
                                                                                     SOURCE_ID            => recContribSetupActivity.SOURCE_ID,
                                                                                     EE_ID                => recContribSetupActivity.EE_ID,
                                                                                     ACTIVITY_ON          => recContribSetupActivity.ACTIVITY_ON,
                                                                                     OBJECT_NAME          => recContribSetupActivity.OBJECT_NAME,
                                                                                     SECTION              => recContribSetupActivity.SECTION,
                                                                                     ACTP_CD              => recContribSetupActivity.ACTP_CD,
                                                                                     PROCESSING_DATE      => recContribSetupActivity.PROCESSING_DATE,
                                                                                     PROCESSED_DATE       => recContribSetupActivity.PROCESSED_DATE,
                                                                                     ACTIVITY_TYPE        => recContribSetupActivity.ACTIVITY_TYPE,
                                                                                     ACTIVITY_DESCRIPTION => recContribSetupActivity.ACTIVITY_DESCRIPTION,
                                                                                     AMOUNT               => recContribSetupActivity.AMOUNT,
                                                                                     STATUS               => recContribSetupActivity.STATUS,
                                                                                     WORKGROUP            => recContribSetupActivity.WORKGROUP,
                                                                                     TXN_CATEGORY         => '',
                                                                                     EFFECTIVE_DATE       => '');

  END LOOP;

  -- Debit Card Activity

  tblDebitCardDetails := Clm_GetDebitCardActivities(inEeId, inDays);
  FOR nIndex IN 1 .. tblDebitCardDetails.COUNT LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tblDebitCardDetails(nIndex);

  END LOOP;

  -- CIP Documents Upload Activity
  IF isJRA <> 'Yes' AND cHasHSAViewPriv = 'Yes' THEN
    FOR recCIPDocsUploadActivity IN curCIPDocsUploadActivity(inEeId, inDays) LOOP
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recCIPDocsUploadActivity.SOURCE,
                                                                                       SOURCE_ID            => recCIPDocsUploadActivity.SOURCE_ID,
                                                                                       EE_ID                => recCIPDocsUploadActivity.EE_ID,
                                                                                       ACTIVITY_ON          => recCIPDocsUploadActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => recCIPDocsUploadActivity.PROCESSING_DATE,
                                                                                       PROCESSED_DATE       => recCIPDocsUploadActivity.PROCESSED_DATE,
                                                                                       OBJECT_NAME          => recCIPDocsUploadActivity.OBJECT_NAME,
                                                                                       SECTION              => recCIPDocsUploadActivity.SECTION,
                                                                                       ACTP_CD              => recCIPDocsUploadActivity.ACTP_CD,
                                                                                       ACTIVITY_TYPE        => recCIPDocsUploadActivity.ACTIVITY_TYPE,
                                                                                       ACTIVITY_DESCRIPTION => recCIPDocsUploadActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => recCIPDocsUploadActivity.AMOUNT,
                                                                                       STATUS               => recCIPDocsUploadActivity.STATUS,
                                                                                       WORKGROUP            => recCIPDocsUploadActivity.WORKGROUP,
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');

    END LOOP;
  END IF;

  -- Profile Changes Activity
  FOR recProfileActivity IN curProfileChangesActivity(inEeId, inDays) LOOP

    -- Contact Info Changes
    IF (recProfileActivity.MAILING_LINE1_NEW IS NOT NULL OR
       recProfileActivity.MAILING_LINE2_NEW IS NOT NULL OR
       recProfileActivity.MAILING_LINE3_NEW IS NOT NULL OR
       recProfileActivity.MAILING_ZIP_NEW IS NOT NULL OR
       recProfileActivity.MAILING_CITY_NEW IS NOT NULL OR
       recProfileActivity.MAILING_ST_CD_NEW IS NOT NULL OR
       recProfileActivity.MAILING_ST_CTRY_CD_NEW IS NOT NULL) THEN

      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Contact Info',
                                                                                       SOURCE_ID            => recProfileActivity.ID,
                                                                                       EE_ID                => recProfileActivity.ID,
                                                                                       ACTIVITY_ON          => recProfileActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       ACTIVITY_TYPE        => 'Contact Info Change',
                                                                                       ACTIVITY_DESCRIPTION => recProfileActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => '',
                                                                                       STATUS               => 'Updated',
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;

    -- Credentials Changes
    IF (recProfileActivity.USER_NAME_NEW IS NOT NULL) THEN
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Credentials',
                                                                                       SOURCE_ID            => recProfileActivity.ID,
                                                                                       EE_ID                => recProfileActivity.ID,
                                                                                       ACTIVITY_ON          => recProfileActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       ACTIVITY_TYPE        => 'Username',
                                                                                       ACTIVITY_DESCRIPTION => recProfileActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => '',
                                                                                       STATUS               => 'Updated',
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;

    -- Credentials Changes
    IF (recProfileActivity.ENCRYPTED_PASSWORD_NEW IS NOT NULL) THEN
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Credentials',
                                                                                       SOURCE_ID            => recProfileActivity.ID,
                                                                                       EE_ID                => recProfileActivity.ID,
                                                                                       ACTIVITY_ON          => recProfileActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       ACTIVITY_TYPE        => 'Password',
                                                                                       ACTIVITY_DESCRIPTION => recProfileActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => '',
                                                                                       STATUS               => 'Updated',
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;

    -- Credentials Changes
    IF (recProfileActivity.SECURITY_CHALLENGE_NEW IS NOT NULL) THEN
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Credentials',
                                                                                       SOURCE_ID            => recProfileActivity.ID,
                                                                                       EE_ID                => recProfileActivity.ID,
                                                                                       ACTIVITY_ON          => recProfileActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       ACTIVITY_TYPE        => 'Security Question',
                                                                                       ACTIVITY_DESCRIPTION => recProfileActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => '',
                                                                                       STATUS               => 'Updated',
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;

  END LOOP;

  -- Communication Event Activity
  FOR recCommunicationReturnActivity IN curCommunicationReturnActivity(inEeId,
                                                                       inDays) LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := trec_AccountUpdateDetail(SOURCE               => 'Communication Return',
                                                                                     SOURCE_ID            => recCommunicationReturnActivity.ID,
                                                                                     EE_ID                => inEeId,
                                                                                     ACTIVITY_ON          => recCommunicationReturnActivity.ACTIVITY_ON,
                                                                                     PROCESSING_DATE      => '',
                                                                                     PROCESSED_DATE       => '',
                                                                                     OBJECT_NAME          => '',
                                                                                     SECTION              => '',
                                                                                     ACTP_CD              => '',
                                                                                     ACTIVITY_TYPE        => 'Document Received',
                                                                                     ACTIVITY_DESCRIPTION => recCommunicationReturnActivity.ACTIVITY_DESCRIPTION,
                                                                                     AMOUNT               => '',
                                                                                     STATUS               => 'Returned Mail',
                                                                                     WORKGROUP            => 'NA',
                                                                                     TXN_CATEGORY         => '',
                                                                                     EFFECTIVE_DATE       => '');
    EXIT;
  END LOOP;

  -- Investment Realign/Sell Processing Activity
  IF isJRA <> 'Yes' THEN
    FOR recInvestmentRealignSellProcessingActivity IN curInvestmentRealignSellProcessingActivity(inEeId,
                                                                                                 inDays) LOOP
      IF (recInvestmentRealignSellProcessingActivity.ACTIVITY_DESCRIPTION IS NOT NULL) THEN
        tblAccountUpdateDetail.Extend;
        tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := trec_AccountUpdateDetail(SOURCE               => recInvestmentRealignSellProcessingActivity.SOURCE,
                                                                                         SOURCE_ID            => recInvestmentRealignSellProcessingActivity.SOURCE_ID,
                                                                                         EE_ID                => recInvestmentRealignSellProcessingActivity.EE_ID,
                                                                                         ACTIVITY_ON          => recInvestmentRealignSellProcessingActivity.ACTIVITY_ON,
                                                                                         PROCESSING_DATE      => recInvestmentRealignSellProcessingActivity.PROCESSING_DATE,
                                                                                         PROCESSED_DATE       => recInvestmentRealignSellProcessingActivity.PROCESSED_DATE,
                                                                                         OBJECT_NAME          => recInvestmentRealignSellProcessingActivity.OBJECT_NAME,
                                                                                         SECTION              => recInvestmentRealignSellProcessingActivity.SECTION,
                                                                                         ACTP_CD              => recInvestmentRealignSellProcessingActivity.ACTP_CD,
                                                                                         ACTIVITY_TYPE        => recInvestmentRealignSellProcessingActivity.ACTIVITY_TYPE,
                                                                                         ACTIVITY_DESCRIPTION => recInvestmentRealignSellProcessingActivity.ACTIVITY_DESCRIPTION,
                                                                                         AMOUNT               => recInvestmentRealignSellProcessingActivity.AMOUNT,
                                                                                         STATUS               => recInvestmentRealignSellProcessingActivity.STATUS,
                                                                                         WORKGROUP            => recInvestmentRealignSellProcessingActivity.WORKGROUP,
                                                                                         TXN_CATEGORY         => '',
                                                                                         EFFECTIVE_DATE       => '');

      END IF;
    END LOOP;
  END IF;
  -- Direct Deposit Setup
  FOR recDirectDepositSetup IN curDirectDepositSetup(inEeId, inDays) LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Direct Deposit Setup',
                                                                                     SOURCE_ID            => recDirectDepositSetup.ID,
                                                                                     EE_ID                => recDirectDepositSetup.ID,
                                                                                     ACTIVITY_ON          => recDirectDepositSetup.ACTIVITY_ON,
                                                                                     OBJECT_NAME          => '',
                                                                                     SECTION              => '',
                                                                                     ACTP_CD              => '',
                                                                                     PROCESSING_DATE      => '',
                                                                                     PROCESSED_DATE       => '',
                                                                                     ACTIVITY_TYPE        => 'Direct Deposit Change',
                                                                                     ACTIVITY_DESCRIPTION => recDirectDepositSetup.ACTIVITY_DESCRIPTION,
                                                                                     AMOUNT               => '',
                                                                                     STATUS               => 'Updated',
                                                                                     WORKGROUP            => 'NA',
                                                                                     TXN_CATEGORY         => '',
                                                                                     EFFECTIVE_DATE       => '');

  END LOOP;

  RETURN tblAccountUpdateDetail;
EXCEPTION
  WHEN eNoInput THEN
    RETURN tblAccountUpdateDetail;
END Clm_GetAccountUpdatesDetails;

--------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE BODY JRA_Account_Util IS

  cJRAAcctTypeCD CONSTANT Account_Type.CD%TYPE := 'RHRA';
  cPRAAcctTypeCD CONSTANT Account_Type.CD%TYPE := 'PHRA'; --1.0.9

  /******
   This function will be responsible for returning an array of Election associated
   with an Ee Account Id with the corresponding Election details.
  ******/
  FUNCTION IsAcctIdJRA(inEeAcctId IN NUMBER) RETURN VARCHAR2 IS
    cIsJRA VARCHAR2(3) := 'No';
  BEGIN
    BEGIN
      SELECT 'Yes' INTO cIsJRA FROM Ee_Account ea WHERE id = inEeAcctId;
    EXCEPTION
      WHEN no_data_found THEN
        cIsJRA := 'No';
    END;
    RETURN cIsJRA;
  END IsAcctIdJRA;

  FUNCTION IsJRA(inEeId IN NUMBER) RETURN VARCHAR2 IS
    cResultJRA VARCHAR2(3) := 'No';
    CRESULTPRA VARCHAR2(3) := 'No'; --1.0.9
  BEGIN
    cResultJRA := IsJRA(inEeId, cJRAAcctTypeCD);
    cResultPRA := IsJRA(inEeId, cPRAAcctTypeCD); --1.0.9
    IF cResultJRA = 'Yes' OR cResultPRA = 'Yes' THEN
      --1.0.9
      RETURN 'Yes';
    ELSE
      RETURN 'No';
    END IF;
  END IsJRA;

  FUNCTION IsActpCdJRA(icActpCd IN VARCHAR2) RETURN VARCHAR2 IS
    cIsJRA VARCHAR2(3) := 'No';
  BEGIN
    IF nvl(icActpCd, 'NA') IN (cJRAAcctTypeCD, cPRAAcctTypeCD) THEN
      cIsJRA := 'Yes';
    ELSE
      cIsJRA := 'No';
    END IF;
    RETURN cIsJRA;
  END IsActpCdJRA;

  -- 1.0.9 starts
  FUNCTION IsBundleJRA(inEEID IN NUMBER, icActpCd IN VARCHAR2)
    RETURN VARCHAR2 IS
    cIsJra VARCHAR2(3) := 'No';
    nERId  employer.id%TYPE;
  BEGIN
    SELECT pycl_er_id INTO nErid FROM employee WHERE id = inEEID;
  
    FOR rec IN (SELECT eab.actp_cd
                  FROM er_bundle eb, er_acct_bundle eab
                 WHERE eab.erbndl_label = eb.label
                   AND eab.erbndl_er_id = eb.er_id
                   AND eb.label = icActpCD
                   AND eb.er_id = nERId) LOOP
      cIsJRA := IsActpCdJRA(rec.actp_cd);
      IF cIsJRA = 'Yes' THEN
        EXIT;
      END IF;
    END LOOP;
    RETURN cIsJra;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN cIsJra;
  END IsBundleJRA;

  --ACC-22400 --1.1.4
  --Below one newly introduced for ACC-22708
  FUNCTION isSupportPremiumDrawDownForEr(inErId IN NUMBER) RETURN VARCHAR2 RESULT_CACHE RELIES_ON(ER_ADMN_ACCOUNT, Employer) IS
    cSupportPremiumDrawDown VARCHAR2(3) := 'No';
  BEGIN
    SELECT COALESCE(ALLOW_PREMIUMDRAWDOWN, 'No')
      INTO cSupportPremiumDrawDown
      FROM ER_ADMN_ACCOUNT ea
     WHERE ea.er_id = inErId
       AND ea.ACTP_CD = cJRAAcctTypeCD;
    RETURN cSupportPremiumDrawDown;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      BEGIN
        SELECT COALESCE(ALLOW_PREMIUMDRAWDOWN, 'No')
          INTO cSupportPremiumDrawDown
          FROM ER_ADMN_ACCOUNT ea, Employer er
         WHERE NVL(ea.er_id, 0) = 0
           AND er.id = inErId
           AND ea.admn_id = er.admn_id
           AND ea.actp_cd = cJRAAcctTypeCD;
        RETURN cSupportPremiumDrawDown;
      EXCEPTION
        WHEN OTHERS THEN
          RETURN cSupportPremiumDrawDown;
      END;
    WHEN OTHERS THEN
      RETURN cSupportPremiumDrawDown;
  END isSupportPremiumDrawDownForEr;

  --FUNCTION isSupportPremiumDrawDown(inEeId IN NUMBER) RETURN VARCHAR2 RESULT_CACHE RELIES_ON(ER_ADMN_ACCOUNT, Employee, Employer) AS
  FUNCTION isSupportPremiumDrawDown(inEeId IN NUMBER) RETURN VARCHAR2 AS
    PRAGMA UDF;
    cSupportPremiumDrawDown VARCHAR2(3) := 'No';
  BEGIN
  
    SELECT isSupportPremiumDrawDownForEr(inErId => ee.pycl_er_id)
      INTO cSupportPremiumDrawDown
      FROM Employee ee
     WHERE ee.id = inEeId;
  
    /*SELECT COALESCE(ALLOW_PREMIUMDRAWDOWN, 'No')
     INTO cSupportPremiumDrawDown
     FROM ER_ADMN_ACCOUNT ea, Employee ee, Employer er
    WHERE ea.ER_ID = ee.PYCL_ER_ID
      AND er.id = ee.PYCL_ER_ID
      AND ee.id = inEeId
      AND ea.ADMN_ID = er.ADMN_ID
      AND ea.ACTP_CD = cJRAAcctTypeCD;*/ --1.1.4
    RETURN cSupportPremiumDrawDown;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN cSupportPremiumDrawDown;
    WHEN OTHERS THEN
      RETURN cSupportPremiumDrawDown;
  END isSupportPremiumDrawDown;

  FUNCTION IsPre65(idEffectiveDt           IN DATE,
                   icEAActpCd              IN VARCHAR2,
                   idEAPost65EffectiveDate IN DATE,
                   idEABegins              IN DATE,
                   icAllowPremiumDrawDown  IN VARCHAR2) RETURN VARCHAR2
    DETERMINISTIC IS
    cIsPre65 VARCHAR2(10) := 'No';
  BEGIN
    IF icEAActpCd = cJRAAcctTypeCD AND
       idEAPost65EffectiveDate > COALESCE(idEffectiveDt, SYSDATE) AND
       TRUNC(idEAPost65EffectiveDate) > TRUNC(idEABegins) AND
       COALESCE(icAllowPremiumDrawDown, 'No') = 'Yes' THEN
      cIsPre65 := 'Yes';
    END IF;
    RETURN cIsPre65;
  END IsPre65;

  FUNCTION IsPre65(inEEId        IN NUMBER,
                   idEffectiveDt IN DATE,
                   icActpCd      IN VARCHAR2,
                   odPost65Dt    OUT DATE) RETURN VARCHAR2 IS
    cIsPre65 VARCHAR2(3) := 'No';
    --
  BEGIN
    SELECT 'Yes', POST65_EFFECTIVE_DATE
      INTO cisPre65, odPost65Dt
      FROM Ee_Account EA
     WHERE ea.ee_id = ineeid
       AND ea.actp_cd = nvl(icActpcd, cJRAAcctTypeCD)
       AND IsPre65(idEffectiveDt           => idEffectiveDt,
                   icEAActpCd              => ea.actp_cd,
                   idEAPost65EffectiveDate => ea.post65_effective_date,
                   idEABegins              => ea.begins,
                   icAllowPremiumDrawDown  => isSupportPremiumDrawDown(inEeId)) =
           'Yes'; --1.1.4
    --AND nvl(ea.POST65_EFFECTIVE_DATE , ea.begins) >= nvl(idEffectiveDt,SYSDATE);  --1.1.1
    --AND EA.POST65_EFFECTIVE_DATE >= NVL(IDEFFECTIVEDT, SYSDATE); --1.1.1  --1.1.4
    /*  --1.1.4 Starts
       AND EA.POST65_EFFECTIVE_DATE > NVL(IDEFFECTIVEDT, SYSDATE)
       AND EA.BEGINS <= NVL(IDEFFECTIVEDT, SYSDATE)
       AND isSupportPremiumDrawDown(inEeId) = 'Yes';
    --1.1.4 Ends*/ --1.1.4
    RETURN cIsPre65;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN cIsPre65;
  END isPre65;

  FUNCTION IsPre65(inEEId        IN NUMBER,
                   idEffectiveDt IN DATE,
                   odPost65Dt    OUT DATE) RETURN VARCHAR2 IS
  
  BEGIN
    RETURN IsPre65(inEeId, idEffectiveDt, cJRAAcctTypeCD, odPost65Dt); --1.1.4
  END isPre65;

  FUNCTION IsPre65(inEEId IN NUMBER, idEffectiveDt IN DATE) RETURN VARCHAR2 IS
    odPost65Dt DATE;
  BEGIN
    RETURN IsPre65(inEeId, idEffectiveDt, cJRAAcctTypeCD, odPost65Dt); --1.1.4
  END isPre65;
  -- 1.0.9 ends

  FUNCTION IsJRA(inEeId IN NUMBER, icActpCd IN VARCHAR2) RETURN VARCHAR2 IS
    cIsJRA VARCHAR2(3) := 'No';
  BEGIN
    BEGIN
      SELECT 'Yes'
        INTO cIsJRA
        FROM Ee_Account ea
       WHERE ea.ee_id = inEeId
         AND ea.actp_cd = icActpCd;
    EXCEPTION
      WHEN no_data_found THEN
        cIsJRA := IsBundleJRA(inEeId, icActpCd); --1.0.9
      --cIsJRA := 'No';
    END;
    RETURN cIsJRA;
  END IsJRA;

  FUNCTION IsErJRA(inErId IN NUMBER, icActpCd IN VARCHAR2) RETURN VARCHAR2 IS
    cIsJRA VARCHAR2(3) := 'No';
  BEGIN
    BEGIN
      IF IsActpCdJRA(icActpCd) = 'Yes' THEN
        SELECT 'Yes'
          INTO cIsJRA
          FROM er_admn_account eaa
         WHERE eaa.er_id = inErId
           AND eaa.actp_cd = icActpCd;
      ELSE
        cIsJRA := 'No';
      END IF;
    EXCEPTION
      WHEN no_data_found THEN
        cIsJRA := 'No';
    END;
    RETURN cIsJRA;
  
  END IsErJRA;

  FUNCTION IsErJRA(inErId IN NUMBER) RETURN VARCHAR2 IS
    cResultJRA VARCHAR2(3) := 'No';
    cResultPRA VARCHAR2(3) := 'No'; --1.0.9
  BEGIN
    cResultJRA := IsERJRA(inErId, cJRAAcctTypeCD);
    cResultPRA := IsERJRA(inErId, cPRAAcctTypeCD); --1.0.9
    IF cResultJRA = 'Yes' OR cResultPRA = 'Yes' THEN
      --1.0.9
      RETURN 'Yes';
    ELSE
      RETURN 'No';
    END IF;
  END IsErJRA;

  /******
   This function will be responsible for returning an array of Election associated
   with an Ee Account Id with the corresponding Election details.
  ******/
  FUNCTION GetBalanceTable(inEeAcctId IN NUMBER DEFAULT NULL,
                           inEeId     IN NUMBER DEFAULT NULL)
    RETURN JRA_Type.tTab_AccountBalance IS
    rElectionBalance JRA_Type.tRec_ElectionBalance;
  
    -- > Cursor to fetch the Election details along with the 
    -- > period through which the Funds can be used.
    CURSOR curElct IS
    --1.0.8 Start
    /*SELECT el.id,
                                                                                                                                                                                                                                                                                             ((nvl(el.total_deposit_amt, 0) +
                                                                                                                                                                                                                                                                                             nvl(el.total_recovered_amt, 0) + nvl(el.total_rollin_amt, 0)) -
                                                                                                                                                                                                                                                                                             (nvl(el.total_paid_claim_amt, 0) +
                                                                                                                                                                                                                                                                                             nvl(el.total_offset_used_amt, 0) +
                                                                                                                                                                                                                                                                                             nvl(el.total_rollout_amt, 0) + 
                                                                                                                                                                                                                                                                                             nvl(el.total_adjustment_amt, 0))) available_balance, -- 1.0.3
                                                                                                                                                                                                                                                                                             el.election_effective,
                                                                                                                                                                                                                                                                                             el.erac_ends,
                                                                                                                                                                                                                                                                                             ea.balance_use_begins,
                                                                                                                                                                                                                                                                                             ea.balance_use_ends,
                                                                                                                                                                                                                                                                                             nvl(el.total_deposit_amt, 0),
                                                                                                                                                                                                                                                                                             nvl(el.total_paid_claim_amt, 0),
                                                                                                                                                                                                                                                                                             nvl(el.total_recovered_amt, 0),
                                                                                                                                                                                                                                                                                             nvl(el.total_offset_used_amt, 0),
                                                                                                                                                                                                                                                                                             nvl(el.total_rollin_amt, 0),
                                                                                                                                                                                                                                                                                             nvl(el.total_rollout_amt, 0),
                                                                                                                                                                                                                                                                                             nvl(el.total_claim_ovrpmt_amt, 0),
                                                                                                                                                                                                                                                                                             nvl(el.elct_ovrpmt_amt, 0),
                                                                                                                                                                                                                                                                                             el.acct_id,
                                                                                                                                                                                                                                                                                             nvl(el.total_valid_claim_amt, 0),
                                                                                                                                                                                                                                                                                             nvl(el.total_invalid_claim_amt, 0),
                                                                                                                                                                                                                                                                                             nvl(el.total_recovered_amt_by_chk, 0) --1.0.2 Added
                                                                                                                                                                                                                                                                                             ,nvl(el.total_adjustment_amt, 0) -- 1.0.3 
                                                                                                                                                                                                                                                                                        FROM election el, employer_account ea
                                                                                                                                                                                                                                                                                       WHERE el.acct_id = inEeAcctId
                                                                                                                                                                                                                                                                                         AND ea.er_id = el.erac_er_id
                                                                                                                                                                                                                                                                                         AND ea.actp_cd = el.erac_actp_cd
                                                                                                                                                                                                                                                                                         AND ea.ends = el.erac_ends;*/
      SELECT *
        FROM (SELECT el.id,
                     ((nvl(el.total_deposit_amt, 0) +
                     nvl(el.total_recovered_amt, 0) +
                     nvl(el.total_rollin_amt, 0)) -
                     (nvl(el.total_paid_claim_amt, 0) +
                     nvl(el.total_offset_used_amt, 0) +
                     nvl(el.total_rollout_amt, 0) +
                     nvl(el.total_adjustment_amt, 0))) available_balance, -- 1.0.3
                     el.election_effective,
                     el.erac_ends,
                     DECODE(el.erac_actp_cd,
                            'RHRA',
                            ea.balance_use_begins,
                            el.election_effective) balance_use_begins, --1.0.8
                     DECODE(el.erac_actp_cd,
                            'RHRA',
                            ea.balance_use_ends,
                            el.erac_ends) balance_use_ends, --1.0.8
                     nvl(el.total_deposit_amt, 0),
                     nvl(el.total_paid_claim_amt, 0),
                     nvl(el.total_recovered_amt, 0),
                     nvl(el.total_offset_used_amt, 0),
                     nvl(el.total_rollin_amt, 0),
                     nvl(el.total_rollout_amt, 0),
                     nvl(el.total_claim_ovrpmt_amt, 0),
                     nvl(el.elct_ovrpmt_amt, 0),
                     el.acct_id,
                     nvl(el.total_valid_claim_amt, 0),
                     nvl(el.total_invalid_claim_amt, 0),
                     nvl(el.total_recovered_amt_by_chk, 0) --1.0.2 Added
                    ,
                     nvl(el.total_adjustment_amt, 0), -- 1.0.3 
                     el.ee_id, --1.0.8
                     el.erac_actp_cd --1.0.8
                     -- Starts : 1.1.8
                    ,
                     0                          RemainingFWDCapLimit,
                     0                          RemainingBackCapLimit,
                     el.Rollover_To_Next_Year,
                     el.Rollover_From_Next_Year,
                     el.Rollover_To_Prev_Year,
                     el.Rollover_From_Prev_Year
              -- ends : 1.1.8 
                FROM election el, employer_account ea
               WHERE ((inEeAcctId IS NOT NULL AND el.acct_id = inEeAcctId) OR
                     (inEeId IS NOT NULL AND el.ee_id = inEeId)) --1.0.8
                 AND ea.er_id = el.erac_er_id
                 AND ea.actp_cd = el.erac_actp_cd
                 AND ea.ends = el.erac_ends);
    --1.0.8 End
  BEGIN
    BEGIN
      tblAccountBalanceTable.delete;
      -- > Looping through the cursor and building 
      -- > the Array to be returned.
      OPEN curElct;
      LOOP
        --FETCH curElct
        --  INTO rElectionBalance;
        EXIT WHEN curElct%NOTFOUND;
        tblAccountBalanceTable(rElectionBalance.elct_id) := rElectionBalance;
      END LOOP;
      IF curElct%ISOPEN THEN
        CLOSE curElct;
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        IF curElct%ISOPEN THEN
          CLOSE curElct;
        END IF;
        tblAccountBalanceTable.delete;
      
    END;
    --  PrintBalanceTable(tblAccountBalanceTable); -- needs to be removed later, this is for testing purpose
    RETURN tblAccountBalanceTable;
  
  END GetBalanceTable;

  /******
   This function will be responsible for the following given a
   specific Ee Account Id:
   > If there is already a Balance Array populated then, return it.
   > Else, populate a Balance Array and return it.
  ******/
  FUNCTION GetBalanceTableInContext(inEeAcctId IN NUMBER DEFAULT NULL, --1.0.8
                                    inEeId     IN NUMBER DEFAULT NULL --1.0.8
                                    ) RETURN JRA_Type.tTab_AccountBalance IS
  BEGIN
    IF tblAccountBalanceTable.count <= 0 OR (inEeAcctId IS NOT NULL AND tblAccountBalanceTable(tblAccountBalanceTable.first)
       .acct_id != inEeAcctId) OR (inEeId IS NOT NULL AND tblAccountBalanceTable(tblAccountBalanceTable.first)
       .ee_id != inEeId) THEN
      --1.0.8 Modified EeId check is added
      tblAccountBalanceTable := GetBalanceTable(inEeAcctId, inEeId);
    END IF;
    RETURN tblAccountBalanceTable;
  END GetBalanceTableInContext;

  /******
   This function will be responsible for getting a Specific Balance
   record for an Election Id provided or a combination of Ee Account Id
   and Date Range passed as input.
  ******/
  FUNCTION GetBalanceRecord(inElctId   IN NUMBER DEFAULT NULL,
                            inEeAcctId IN NUMBER DEFAULT NULL,
                            idFromDate IN DATE DEFAULT SYSDATE,
                            idToDate   IN DATE DEFAULT SYSDATE)
    RETURN JRA_Type.tRec_ElectionBalance IS
    nElctId               election.id%TYPE := coalesce(inElctId, -99999);
    nEeAcctId             election.acct_id%TYPE := coalesce(inEeAcctId,
                                                            -99999);
    rElectionBalance      JRA_Type.tRec_ElectionBalance;
    rElectionBalance_null JRA_Type.tRec_ElectionBalance;
    dDrvFromDate          DATE := idFromDate;
    dDrvToDate            DATE := nvl(idToDate, dDrvFromDate);
    tblBalanceTable       JRA_Type.tTab_AccountBalance;
  BEGIN
    BEGIN
      -- > Call the routine to populate the Balance Array.
      -- > If Elelction Id had not been provided, the derive it based on
      --   provided Ee Account Id and Date Range combination.
      -- > Based on the provided/derived Election Id, get the Balance record
      --   from the pre-populated array.
      --> for given range of date if more than one election is fetched then earliest elction would be considered
      tblBalanceTable := GetBalanceTableInContext(inEeAcctId);
      IF nElctId = -99999 THEN
        FOR rec IN (SELECT el.id
                      FROM election el
                     WHERE el.acct_id = nEeAcctId
                       AND ((dDrvFromDate BETWEEN el.election_effective AND
                           el.erac_ends) OR
                           (dDrvToDate BETWEEN el.election_effective AND
                           el.erac_ends))
                     ORDER BY el.election_effective) LOOP
          nElctId := rec.id;
          EXIT;
        END LOOP;
      END IF;
      rElectionBalance := tblBalanceTable(nElctId);
    EXCEPTION
      WHEN no_data_found THEN
        rElectionBalance := rElectionBalance_null;
      
    END;
    --   PrintBalanceRecord(rElectionBalance); -- needs to be removed later, this is part of testing 
    RETURN rElectionBalance;
  END GetBalanceRecord;

  /******
   This function will be responsible for getting the Available Balance
   given a Ee Account Id and a specified date.
  ******/
  FUNCTION GetAvailableBalance(inEeAcctId IN NUMBER, idAsOfDate IN DATE)
    RETURN NUMBER IS
    rElectionBalance JRA_Type.tRec_ElectionBalance;
    nSum             election.total_deposit_amt%TYPE;
    nBalncTblIndx    PLS_INTEGER;
    tblBalanceTable  JRA_Type.tTab_AccountBalance;
  BEGIN
    -- > Get the populated Balance Array
    tblBalanceTable := GetBalanceTableInContext(inEeAcctId);
    nSum            := 0;
  
    -- > Sum up the Available Balance for all those Election whose 
    --   fund usability period encapsulated the date provided as input.
    nBalncTblIndx := tblBalanceTable.first;
    WHILE nBalncTblIndx IS NOT NULL LOOP
      rElectionBalance := tblBalanceTable(nBalncTblIndx);
      IF idAsOfDate BETWEEN rElectionBalance.balance_begins AND
         rElectionBalance.balance_ends THEN
        nSum := nSum + rElectionBalance.available_balance;
      END IF;
      nBalncTblIndx := tblBalanceTable.next(nBalncTblIndx);
    END LOOP;
    RETURN nSum;
  END GetAvailableBalance;

  /******
   This procedure will be responsible for returning an Array of Claim in Approved 
   as well as Overpaid against an Ee Account Id provided as input.
   Need to think:
    > In some scenarios, we will already have the Balance Array populated for a 
      specific Ee Account ID. In that case, we can add another input parameter
      to pass the Balance Array that will be used for referring the Election that
      need to be used for looking for claims instead of getting the Election list
      again within it.
      
    Modified       Mainak         1.0.1      06/09/2016 
    Approved claim should have claim image in Review/Complete status
    This need to be checked when claim_type of claim_batch is Manual 
    or claim_type is Online and receipt_reqd='Yes'
  ****************************************************************/
  /*PROCEDURE GetClaimDetailTable(inEeAcctId         IN NUMBER,
                                inEeId             IN NUMBER DEFAULT NULL, --1.0.8
                                icClmStatus        IN VARCHAR2,
                                icRHRAOffsetOption IN VARCHAR2, --1.0.8
                                icPHRAOffsetOption IN VARCHAR2, --1.0.8
                                otblClmDetail      OUT JRA_Type.tTab_ClaimDetail,
                                ocResult           OUT VARCHAR2) IS
    TYPE claim_detail IS REF CURSOR;
    curClaim          claim_detail;
    tblClmDetail      JRA_Type.tTab_ClaimDetail;
    rClaimDetail      JRA_Type.tRec_ClaimDetail;
    cClmStatus        VARCHAR2(30) := nvl(icClmStatus, 'NA');
    cSQL              VARCHAR2(4000);
    bValid            BOOLEAN := FALSE;
    nEeId             Employee.ID%TYPE;
    nRunOffBufferDays NUMBER;
  
  BEGIN
    --1.0.8 Start
    IF inEeId IS NOT NULL THEN
      nEeId := inEeId;
    ELSE
      nEeId := NULL;
    END IF;
    --Fetching buffer days setup in system variable. It will be added with the runoff date for the election.
    BEGIN
      SELECT variable_value
        INTO nRunOffBufferDays
        FROM system_variables
       WHERE variable_name = 'BUFFER_PERIOD';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        nRunOffBufferDays := 0;
    END;
  
    BEGIN
      cSQL := 'SELECT c.id,
             c.elct_id,
             c.claim_category,
             c.claim_type,
             c.clmbt_id,
             c.service_begins,
             nvl(c.amt, 0),
             (nvl(c.amt, 0) - nvl(c.recovered_amt, 0)) clm_remaining_amt,
             c.status,
             c.ee_id,
             c.dpndt_id,
             cb.submitted_on,
             c.service_ends, 
             el.erac_actp_cd,
             el.erac_er_id,
             el.acct_id eeAcctId
        FROM claim c, claim_batch cb, Account_Type a, election el WHERE a.cd=el.erac_actp_cd AND c.clmbt_id = cb.id AND c.elct_id = el.id
        AND el.ee_id = nvl(:inEeId,el.ee_id) AND el.acct_id = nvl(:inEeAcctId,el.acct_id) AND a.cd=el.erac_actp_cd 
        AND ((el.erac_actp_cd=''RHRA'' AND :icRHRAOffsetOption = ''Yes'') 
        OR (el.erac_actp_cd=''PHRA'' AND :icPHRAOffsetOption = ''Yes'' 
        AND (clm_validateclaimutil.getRunOffDate(ineeid   => el.ee_id,
                                                inelctid => el.id,
                                                inerid   => el.erac_er_id,
                                                icactpcd => el.erac_actp_cd) + :nRunOffBufferDays) >=  TRUNC(SYSDATE))) AND ('; --1.0.8 End
    
      FOR rec IN (SELECT Initcap(column_value) status
                    FROM TABLE(str2tbl(cClmStatus))) LOOP
        -- cClmStatus := Initcap(cClmStatus);
        -- > Cursor to fetch the Claim line level details.
      
        IF rec.status = 'Approved' THEN
          cSQL   := cSQL || '((c.status = ''Approved'' AND nvl(c.ELIGIBILITY_PENDING_FLAG,''No'')=''No'') AND NVL(cb.is_purged, ''No'') = ''No'' 
         AND cb.is_open = ''No'' AND ((NVL(cb.claim_type, ''Manual'') = ''Pass Thru'') OR
             (((NVL(cb.claim_type, ''Manual'') = ''Online'' AND
             a.receipt_reqd = ''Yes'') OR
             (NVL(cb.claim_type, ''Manual'') = ''Manual'')) AND EXISTS
              (SELECT ''X''
                  FROM Claims_Image ci
                 WHERE ci.Ee_Id IS NOT NULL
                   AND ci.Ee_Id = cb.ee_id
                   AND ci.clmbt_id IS NOT NULL
                   AND ci.clmbt_id = cb.id
                   AND ci.status IN (''Review'', ''Complete''))) OR
             NVL(cb.claim_type, ''Manual'') = ''Online'' AND
             a.receipt_reqd = ''No'')) OR';
          bValid := TRUE;
        ELSIF rec.status = 'Overpaid' THEN
          cSQL := cSQL ||
                  '(c.status in (''Paid'',''Released'') AND c.ovrpmt_flag = ''Yes'' AND (nvl(c.amt,0) - nvl(c.recovered_amt,0)) > 0) OR';
          \*ELSE
          cSQL := 'NA';*\
          bValid := TRUE;
        END IF;
      END LOOP;
      IF bValid THEN
        cSQL := TRIM(substr(cSQL, 1, instr(cSQL, 'OR', -1) - 1)) ||
                ') order by cb.submitted_on';
        OPEN curClaim FOR cSQL
          USING nEeId, inEeAcctId, icRHRAOffsetOption, icPHRAOffsetOption, nRunOffBufferDays;
        LOOP
          FETCH curClaim
            INTO rClaimDetail.clm_id,
                 rClaimDetail.elct_id,
                 rClaimDetail.clm_category,
                 rClaimDetail.clm_type,
                 rClaimDetail.clm_batch_id,
                 rClaimDetail.service_begins,
                 rClaimDetail.clm_amt,
                 rClaimDetail.clm_remaining_amt,
                 rClaimDetail.clm_status,
                 rClaimDetail.ee_id,
                 rClaimDetail.dpd_id,
                 rClaimDetail.submitted_on,
                 rClaimDetail.service_ends, --1.0.8
                 rClaimDetail.erac_actp_cd, --1.0.8
                 rClaimDetail.erac_er_id, --1.0.8
                 rClaimDetail.eeacctid; --1.0.8
          EXIT WHEN curClaim%NOTFOUND;
        
          tblClmDetail(rClaimDetail.clm_id) := rClaimDetail;
        
        END LOOP;
        IF curClaim%ISOPEN THEN
          CLOSE curClaim;
        END IF;
        ocResult := 'OK';
      ELSE
        ocResult := 'ERROR: Claim status:' || icClmStatus ||
                    ' is not valid claim status';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        tblClmDetail.delete;
        IF curClaim%ISOPEN THEN
          CLOSE curClaim;
        END IF;
        ocResult := 'ERROR: ' || SQLERRM;
    END;
  
    otblClmDetail := tblClmDetail;
  
    -- needs to be removed
    \* dbms_output.put_line('claim details :');
    PrintClaimTable(otblClmDetail);*\
    -- needs to be removed
  END GetClaimDetailTable;*/
  PROCEDURE GetClaimDetailTable(inEeAcctId         IN NUMBER DEFAULT NULL, --1.0.8
                                inEeId             IN NUMBER, --1.0.8
                                icClmStatus        IN VARCHAR2,
                                icRHRAOffsetOption IN VARCHAR2, --1.0.8
                                icPHRAOffsetOption IN VARCHAR2, --1.0.8
                                otblClmDetail      OUT JRA_Type.tTab_ClaimDetail,
                                ocResult           OUT VARCHAR2) IS
    /* TYPE claim_detail IS REF CURSOR;
    curClaim          claim_detail;*/ --Commented 1.1.3
    tblClmDetail JRA_Type.tTab_ClaimDetail;
    rClaimDetail JRA_Type.tRec_ClaimDetail;
    --cSQL              VARCHAR2(4000); --Commented 1.1.3
    --bValid            BOOLEAN := FALSE; --Commented 1.1.3
    nEeId Employee.ID%TYPE;
    --nRunOffBufferDays NUMBER; --Commented 1.1.5
    --Added 1.1.3 Start
    CURSOR curClaim(inEeId             NUMBER,
                    inEeAcctId         NUMBER,
                    icRHRAOffsetOption VARCHAR2,
                    icPHRAOffsetOption VARCHAR2,
                    icClmStatus        VARCHAR2
                    --,inRunOffBufferDays NUMBER --Commented 1.1.5
                    ) IS
      WITH inputStatus AS
       (SELECT decode(Initcap(column_value),
                      'Approved',
                      'Approved',
                      'Overpaid',
                      'Paid',
                      'Denied',
                      'Denied') status
          FROM TABLE(str2tbl(icClmStatus)))
      SELECT c.id,
             c.elct_id,
             c.claim_category,
             c.claim_type,
             c.clmbt_id,
             c.service_begins,
             nvl(c.amt, 0),
             (nvl(c.amt, 0) - nvl(c.recovered_amt, 0)) clm_remaining_amt,
             c.status,
             c.ee_id,
             c.dpndt_id,
             cb.submitted_on,
             c.service_ends,
             el.erac_actp_cd,
             el.erac_er_id,
             el.acct_id eeAcctId,
             c.ovrpmt_reason,
             el.election_effective
        FROM claim        c,
             claim_batch  cb,
             Account_Type a,
             election     el,
             inputStatus  inpsts
       WHERE a.cd = el.erac_actp_cd
         AND c.clmbt_id = cb.id
         AND c.elct_id = el.id
         AND el.ee_id = inEeId
         AND el.acct_id = nvl(inEeAcctId, el.acct_id)
         AND a.cd = el.erac_actp_cd
         AND ((el.erac_actp_cd = 'RHRA' AND icRHRAOffsetOption = 'Yes') OR
             (el.erac_actp_cd = 'PHRA' AND icPHRAOffsetOption = 'Yes'))
         AND decode(c.status, 'Paid', 'Paid', 'Released', 'Paid', c.status) =
             inpsts.status
         AND ((((c.status = 'Approved' OR
             (c.status = 'Denied' AND el.erac_actp_cd <> 'RHRA' AND
             c.reprocess_flag = 'Yes' AND --1.1.5 Added Reprocess_Flag
             ltrim(rtrim(c.reprocess_catg_list, '~'), '~') =
             'Goal amount exceeded')) AND
             nvl(c.ELIGIBILITY_PENDING_FLAG, 'No') = 'No') AND
             NVL(cb.is_purged, 'No') = 'No' AND cb.is_open = 'No' AND
             ((NVL(cb.claim_type, 'Manual') = 'Pass Thru') OR
             (((NVL(cb.claim_type, 'Manual') = 'Online' AND
             a.receipt_reqd = 'Yes') OR
             (NVL(cb.claim_type, 'Manual') = 'Manual')) AND EXISTS
              (SELECT 'X'
                    FROM Claims_Image ci
                   WHERE ci.Ee_Id IS NOT NULL
                     AND ci.Ee_Id = cb.ee_id
                     AND ci.clmbt_id IS NOT NULL
                     AND ci.clmbt_id = cb.id
                     AND ci.status IN ('Review', 'Complete'))) OR
             NVL(cb.claim_type, 'Manual') = 'Online' AND
             a.receipt_reqd = 'No')) OR
             (c.status IN ('Paid', 'Released') AND c.ovrpmt_flag = 'Yes' AND
             (nvl(c.amt, 0) - nvl(c.recovered_amt, 0)) > 0))
       ORDER BY cb.submitted_on;
    --Added 1.1.3 End
  BEGIN
    --1.0.8 Start
    IF inEeId IS NOT NULL THEN
      nEeId := inEeId;
    ELSE
      nEeId := NULL;
    END IF;
    --Fetching buffer days setup in system variable. It will be added with the runoff date for the election.
    /* --Commented 1.1.5
    BEGIN
      SELECT variable_value
        INTO nRunOffBufferDays
        FROM system_variables
       WHERE variable_name = 'BUFFER_PERIOD';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        nRunOffBufferDays := 0;
    END;
    */
  
    BEGIN
      --Commented 1.1.3 Start
      /* cSQL := 'SELECT c.id,
             c.elct_id,
             c.claim_category,
             c.claim_type,
             c.clmbt_id,
             c.service_begins,
             nvl(c.amt, 0),
             (nvl(c.amt, 0) - nvl(c.recovered_amt, 0)) clm_remaining_amt,
             c.status,
             c.ee_id,
             c.dpndt_id,
             cb.submitted_on,
             c.service_ends, 
             el.erac_actp_cd,
             el.erac_er_id,
             el.acct_id eeAcctId
        FROM claim c, claim_batch cb, Account_Type a, election el WHERE a.cd=el.erac_actp_cd AND c.clmbt_id = cb.id AND c.elct_id = el.id
        AND el.ee_id = nvl(:inEeId,el.ee_id) AND el.acct_id = nvl(:inEeAcctId,el.acct_id) AND a.cd=el.erac_actp_cd 
        AND ((el.erac_actp_cd=''RHRA'' AND :icRHRAOffsetOption = ''Yes'') 
        OR (el.erac_actp_cd=''PHRA'' AND :icPHRAOffsetOption = ''Yes'' 
        AND (clm_validateclaimutil.getRunOffDate(ineeid   => el.ee_id,
                                                inelctid => el.id,
                                                inerid   => el.erac_er_id,
                                                icactpcd => el.erac_actp_cd) + :nRunOffBufferDays) >=  TRUNC(SYSDATE))) AND ('; --1.0.8 End
      
      FOR rec IN (SELECT Initcap(column_value) status
                    FROM TABLE(str2tbl(cClmStatus))) LOOP
        -- cClmStatus := Initcap(cClmStatus);
        -- > Cursor to fetch the Claim line level details.
      
        IF rec.status = 'Approved' THEN
          cSQL   := cSQL || '(c.status = ''Approved'' AND nvl(c.ELIGIBILITY_PENDING_FLAG,''No'')=''No'') AND NVL(cb.is_purged, ''No'') = ''No'' 
         AND cb.is_open = ''No'' AND ((NVL(cb.claim_type, ''Manual'') = ''Pass Thru'') OR
             (((NVL(cb.claim_type, ''Manual'') = ''Online'' AND
             a.receipt_reqd = ''Yes'') OR
             (NVL(cb.claim_type, ''Manual'') = ''Manual'')) AND EXISTS
              (SELECT ''X''
                  FROM Claims_Image ci
                 WHERE ci.Ee_Id IS NOT NULL
                   AND ci.Ee_Id = cb.ee_id
                   AND ci.clmbt_id IS NOT NULL
                   AND ci.clmbt_id = cb.id
                   AND ci.status IN (''Review'', ''Complete''))) OR
             NVL(cb.claim_type, ''Manual'') = ''Online'' AND
             a.receipt_reqd = ''No'') OR';
          bValid := TRUE;
        ELSIF rec.status = 'Overpaid' THEN
          cSQL := cSQL ||
                  '(c.status in (''Paid'',''Released'') AND c.ovrpmt_flag = ''Yes'' AND (nvl(c.amt,0) - nvl(c.recovered_amt,0)) > 0) OR';
          \*ELSE
          cSQL := 'NA';*\
          bValid := TRUE;
        END IF;
      END LOOP;
      IF bValid THEN
      cSQL := TRIM(substr(cSQL, 1, instr(cSQL, 'OR', -1) - 1)) ||
              ') order by cb.submitted_on';
      OPEN curClaim FOR cSQL*/
      --Commented 1.1.3 End
      --Added 1.1.3 Start
      OPEN curClaim(inEeId             => nEeId,
                    inEeAcctId         => inEeAcctId,
                    icRHRAOffsetOption => icRHRAOffsetOption,
                    icPHRAOffsetOption => icPHRAOffsetOption,
                    icClmStatus        => icClmStatus
                    --,inRunOffBufferDays => nRunOffBufferDays --Commented 1.1.5
                    );
      --Added 1.1.3 End
      --          USING nEeId, inEeAcctId, icRHRAOffsetOption, icPHRAOffsetOption, nRunOffBufferDays; --Commented 1.1.3
      LOOP
        FETCH curClaim
          INTO rClaimDetail.clm_id,
               rClaimDetail.elct_id,
               rClaimDetail.clm_category,
               rClaimDetail.clm_type,
               rClaimDetail.clm_batch_id,
               rClaimDetail.service_begins,
               rClaimDetail.clm_amt,
               rClaimDetail.clm_remaining_amt,
               rClaimDetail.clm_status,
               rClaimDetail.ee_id,
               rClaimDetail.dpd_id,
               rClaimDetail.submitted_on,
               rClaimDetail.service_ends, --1.0.8
               rClaimDetail.erac_actp_cd, --1.0.8
               rClaimDetail.erac_er_id, --1.0.8
               rClaimDetail.eeacctid, --1.0.8
               rClaimDetail.ovrpmt_reason,
               rClaimDetail.election_effective; --1.1.3
        EXIT WHEN curClaim%NOTFOUND;
      
        tblClmDetail(rClaimDetail.clm_id) := rClaimDetail;
      
      END LOOP;
      IF curClaim%ISOPEN THEN
        CLOSE curClaim;
      END IF;
      ocResult := 'OK';
      --Commented 1.1.3 Start
      /* ELSE
        ocResult := 'ERROR: Claim status:' || icClmStatus ||
                    ' is not valid claim status';
      END IF;*/
      --Commented 1.1.3 End
    EXCEPTION
      WHEN OTHERS THEN
        tblClmDetail.delete;
        IF curClaim%ISOPEN THEN
          CLOSE curClaim;
        END IF;
        ocResult := 'ERROR: ' || SQLERRM;
    END;
  
    otblClmDetail := tblClmDetail;
  
    -- needs to be removed
    /* dbms_output.put_line('claim details :');
    PrintClaimTable(otblClmDetail);*/
    -- needs to be removed
  END GetClaimDetailTable;

  /******
   This function will be responsible for finding out all elections along with balance from where this claim can be funded to be paid or used for offset
  ******/
  PROCEDURE GetFundAvailabilityDetail(idClmDate           IN DATE,
                                      itblBalanceTable    IN JRA_Type.tTab_AccountBalance,
                                      onTotalAllocatedAmt OUT NUMBER,
                                      otblFundSourceTable OUT JRA_Type.tTab_FundSource,
                                      ocResult            OUT VARCHAR2) IS
  
    nTotalAllocatedAmt NUMBER;
    rElectionBalance   JRA_Type.tRec_ElectionBalance;
    tblBalanceTable    JRA_Type.tTab_AccountBalance := itblBalanceTable;
    rFundSource        JRA_Type.tRec_FundSource;
    tblFundSourceTable JRA_Type.tTab_FundSource;
    nBalncTblIndx      PLS_INTEGER;
  BEGIN
    -- considering itblBalanceTable is already populated for the corresponding acct_id
    BEGIN
    
      nTotalAllocatedAmt := 0;
      nBalncTblIndx      := tblBalanceTable.first;
      WHILE nBalncTblIndx IS NOT NULL LOOP
        rElectionBalance := tblBalanceTable(nBalncTblIndx);
      
        IF idClmDate BETWEEN rElectionBalance.balance_begins AND
           rElectionBalance.balance_ends AND
           rElectionBalance.available_balance > 0 THEN
        
          rFundSource.elct_id := nBalncTblIndx;
          rFundSource.amt := rElectionBalance.available_balance;
          tblFundSourceTable(nBalncTblIndx) := rFundSource;
          nTotalAllocatedAmt := nTotalAllocatedAmt + rFundSource.amt;
        END IF;
        nBalncTblIndx := tblBalanceTable.next(nBalncTblIndx);
      END LOOP;
      ocResult := 'OK';
    EXCEPTION
      WHEN OTHERS THEN
        nTotalAllocatedAmt := 0;
        tblFundSourceTable.delete;
        ocResult := 'ERROR: ' || SQLERRM;
    END;
    onTotalAllocatedAmt := nTotalAllocatedAmt;
    otblFundSourceTable := tblFundSourceTable;
    --  PrintFundSource(otblFundSourceTable); -- needs to be removed later
  END GetFundAvailabilityDetail;

  /********
  Below program is implemented like first own election's balance will be used for getting fund, 
  then rest claim's amount will get fund from others election of same account id.
  ********/

  PROCEDURE GetFundAllocationDetail(inClmId                IN NUMBER,
                                    inElctId               IN NUMBER DEFAULT NULL, -- claim's own election id
                                    inClmAmt               IN NUMBER DEFAULT NULL,
                                    idClmDate              IN DATE DEFAULT NULL,
                                    itblBalanceTable       IN JRA_Type.tTab_AccountBalance,
                                    itblClaimTable         IN JRA_Type.tTab_ClaimDetail,
                                    onTotalAllocatedAmount OUT NUMBER,
                                    otblFundSourceTable    OUT JRA_Type.tTab_FundSource,
                                    ocResult               OUT VARCHAR2) IS
  
    nDiff              NUMBER;
    nTotalAllocatedAmt NUMBER;
    nRemainingClmAmt   NUMBER := inClmAmt;
    rElectionBalance   JRA_Type.tRec_ElectionBalance;
    tblBalanceTable    JRA_Type.tTab_AccountBalance := itblBalanceTable;
    tblBalanceTableObj ttab_accountbalance;
    rFundSource        JRA_Type.tRec_FundSource;
    tblFundSourceTable JRA_Type.tTab_FundSource;
    rClaimDetail       JRA_Type.tRec_ClaimDetail;
    nFndSrcIndx        PLS_INTEGER;
    nElctId            election.id%TYPE := inElctId;
    dClmDate           DATE := idClmDate;
    eWrongInput EXCEPTION;
    cErrorMessage VARCHAR2(4000);
  BEGIN
    -- considering itblBalanceTable and itblClaimTable are already populated for the corresponding acct_id
    BEGIN
    
      nTotalAllocatedAmt := 0;
      -- Input validation
      IF inElctId IS NULL OR inClmAmt IS NULL OR dClmDate IS NULL THEN
        IF inClmId IS NULL OR itblClaimTable.count <= 0 THEN
          cErrorMessage := 'Wrong Input provided';
          RAISE eWrongInput;
        ELSE
          rClaimDetail := itblClaimTable(inClmId);
        
          IF nRemainingClmAmt IS NULL THEN
            nRemainingClmAmt := rClaimDetail.clm_remaining_amt;
          END IF;
        
          IF dClmDate IS NULL THEN
            dClmDate := rClaimDetail.service_begins;
          END IF;
        
          IF nElctId IS NULL THEN
            nElctId := rClaimDetail.elct_id;
          END IF;
        END IF;
      END IF;
    
      rElectionBalance := tblBalanceTable(nElctId);
    
      IF rElectionBalance.available_balance > 0 AND
         dClmDate BETWEEN rElectionBalance.balance_begins AND
         rElectionBalance.balance_ends THEN
        rFundSource.elct_id := nElctId;
        nDiff               := nRemainingClmAmt -
                               rElectionBalance.available_balance;
        IF ndiff <= 0 THEN
          rFundSource.amt := nRemainingClmAmt;
          tblFundSourceTable(nElctId) := rFundSource;
        ELSE
          rFundSource.amt := rElectionBalance.available_balance;
          tblFundSourceTable(nElctId) := rFundSource;
          nRemainingClmAmt := nDiff;
        END IF;
        nTotalAllocatedAmt := nTotalAllocatedAmt + rFundSource.amt;
      ELSE
        nDiff := nRemainingClmAmt;
      END IF;
      -- this is to use other's election's balance
      IF nDiff > 0 THEN
        tblBalanceTableObj := GetObjectTypeBalanceTblInOrder(tblBalanceTable,
                                                             'FIFO',
                                                             'RHRA'); --1.0.8
        nFndSrcIndx        := tblBalanceTableObj.first;
        WHILE nFndSrcIndx IS NOT NULL LOOP
          rElectionBalance := tblBalanceTable(tblBalanceTableObj(nFndSrcIndx)
                                              .elct_id);
          IF rElectionBalance.elct_id = nElctId THEN
            -- we will exclude own election
            nFndSrcIndx := tblBalanceTableObj.next(nFndSrcIndx);
            CONTINUE;
          END IF;
        
          IF dClmDate BETWEEN rElectionBalance.balance_begins AND
             rElectionBalance.balance_ends AND
             rElectionBalance.available_balance > 0 THEN
          
            rFundSource.elct_id := rElectionBalance.elct_id;
            nDiff               := nRemainingClmAmt -
                                   rElectionBalance.available_balance;
            IF ndiff <= 0 THEN
              rFundSource.amt := nRemainingClmAmt;
              tblFundSourceTable(rElectionBalance.elct_id) := rFundSource;
              nTotalAllocatedAmt := nTotalAllocatedAmt + nRemainingClmAmt;
              EXIT;
            END IF;
            rFundSource.amt := rElectionBalance.available_balance;
            tblFundSourceTable(rElectionBalance.elct_id) := rFundSource;
            nRemainingClmAmt := nDiff;
            nTotalAllocatedAmt := nTotalAllocatedAmt + rFundSource.amt;
          END IF;
          nFndSrcIndx := tblBalanceTableObj.next(nFndSrcIndx);
        END LOOP;
      END IF;
      ocResult := 'OK';
    EXCEPTION
      WHEN eWrongInput THEN
        nTotalAllocatedAmt := 0;
        tblFundSourceTable.delete;
        ocResult := 'ERROR: ' || cErrorMessage;
      WHEN OTHERS THEN
        nTotalAllocatedAmt := 0;
        tblFundSourceTable.delete;
        ocResult := 'ERROR: ' || SQLERRM;
    END;
    onTotalAllocatedAmount := nTotalAllocatedAmt;
    otblFundSourceTable    := tblFundSourceTable;
    --  PrintFundSource(otblFundSourceTable); -- needs to be removed later
  END GetFundAllocationDetail;

  FUNCTION GetObjectTypeBalanceTblInOrder(itblBalanceTable IN JRA_Type.tTab_AccountBalance,
                                          icOrder          VARCHAR2,
                                          icActpCd         IN VARCHAR2 DEFAULT NULL) --1.0.8
   RETURN ttab_accountbalance IS
    rElctBalance       JRA_Type.tRec_ElectionBalance;
    tblBalanceTableObj ttab_accountbalance := ttab_accountbalance();
    nIndx              PLS_INTEGER;
  BEGIN
    BEGIN
      IF itblBalanceTable.count > 0 THEN
        nIndx := itblBalanceTable.first;
        WHILE nIndx IS NOT NULL LOOP
          rElctBalance := itblBalanceTable(nIndx);
          IF icActpCd IS NULL OR itblBalanceTable(nIndx)
            .erac_actp_cd = icActpCd THEN
            --1.0.8
            tblBalanceTableObj.Extend(1);
            tblBalanceTableObj(tblBalanceTableObj.last) := NEW
                                                           trec_electionbalance(elct_id                => rElctBalance.elct_id,
                                                                                available_balance      => rElctBalance.available_balance,
                                                                                elct_begins            => rElctBalance.elct_begins,
                                                                                elct_ends              => rElctBalance.elct_ends,
                                                                                balance_begins         => rElctBalance.balance_begins,
                                                                                balance_ends           => rElctBalance.balance_ends,
                                                                                total_deposit_amt      => rElctBalance.total_deposit_amt,
                                                                                total_paid_amt         => rElctBalance.total_paid_amt,
                                                                                total_recovered_amt    => rElctBalance.total_recovered_amt,
                                                                                total_offset_used_amt  => rElctBalance.total_offset_used_amt,
                                                                                total_rollin_amt       => rElctBalance.total_rollin_amt,
                                                                                total_rollout_amt      => rElctBalance.total_rollout_amt,
                                                                                total_claim_ovrpmt_amt => rElctBalance.total_claim_ovrpmt_amt,
                                                                                elct_ovrpmt_amt        => rElctBalance.elct_ovrpmt_amt,
                                                                                acct_id                => rElctBalance.acct_id);
          END IF; --1.0.8
          nIndx := itblBalanceTable.next(nIndx);
        END LOOP;
      END IF;
      IF tblBalanceTableObj IS NOT NULL AND tblBalanceTableObj.Count > 0 THEN
        IF icOrder = 'FIFO' THEN
          SELECT CAST(MULTISET (SELECT t.*
                         FROM TABLE(tblBalanceTableObj) t
                        ORDER BY t.elct_begins ASC) AS ttab_accountbalance)
            INTO tblBalanceTableObj
            FROM dual;
        ELSIF icOrder = 'LIFO' THEN
          SELECT CAST(MULTISET (SELECT t.*
                         FROM TABLE(tblBalanceTableObj) t
                        ORDER BY t.elct_begins DESC) AS ttab_accountbalance)
            INTO tblBalanceTableObj
            FROM dual;
        ELSE
          tblBalanceTableObj.Delete;
          tblBalanceTableObj := NULL;
        END IF;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        tblBalanceTableObj.Delete;
        tblBalanceTableObj := NULL;
    END;
    RETURN tblBalanceTableObj;
  END GetObjectTypeBalanceTblInOrder;

  /******
   This function will be responsible for finding out all elections along with amount which were used erlier for a claim to be paid or used for offset
  ******/
  FUNCTION GetFundSourceDetail(inClmId  IN NUMBER,
                               inElctId IN NUMBER,
                               inClmAmt IN NUMBER)
    RETURN JRA_Type.tTab_FundSource IS
  
    tblFundSourceTable JRA_Type.tTab_FundSource;
    rFundSource        JRA_Type.tRec_FundSource;
  
    nTotalAmt NUMBER;
    CURSOR curFundSrc IS
      SELECT erid.elct_id_from, SUM(erid.amount), NULL
        FROM elct_roll_inout_dtl erid
       WHERE erid.clm_id = inClmId
       GROUP BY erid.elct_id_from
      HAVING SUM(erid.amount) != 0;
  BEGIN
    BEGIN
      OPEN curFundSrc;
    
      nTotalAmt := 0;
      LOOP
        FETCH curFundSrc
          INTO rFundSource;
        EXIT WHEN curFundSrc%NOTFOUND;
        nTotalAmt := nTotalAmt + rFundSource.amt;
        tblFundSourceTable(rFundSource.elct_id) := rFundSource;
      
      END LOOP;
      IF curFundSrc%ISOPEN THEN
        CLOSE curFundSrc;
      END IF;
      -- this is to find out how much own election's amount was used to pay the claim
      IF (inClmAmt - nTotalAmt) > 0 THEN
        rFundSource.elct_id := inElctId;
        rFundSource.amt := inClmAmt - nTotalAmt;
        tblFundSourceTable(inElctId) := rFundSource;
      END IF;
      --
    EXCEPTION
      WHEN OTHERS THEN
        IF curFundSrc%ISOPEN THEN
          CLOSE curFundSrc;
        END IF;
        tblFundSourceTable.delete;
      
    END;
    --  PrintFundSource(tblFundSourceTable); -- needs to be removed
    RETURN tblFundSourceTable;
  END GetFundSourceDetail;

  /******
   This procedure is responsible for adding the amount details from the FundSourceTable 
   to BalanceTable in column corresponding to the given txn_type. 
   E.g. If txn_type = 'Recovery', Fund to be added into Total_Recovered_Amt etc.
  ******/
  /*****
  Modified        Upendra         05/12/2016      1.0.1
  ACC-8748: Added block for Payment-Reversal
  
  Modified        Upendra         06/10/2016      1.0.2
  ACC-9229: Added block for Balance-Recovery and Balance-Recovery-Reversal
  
  Modified        Upendra         08/02/2016      1.0.3
  ACC-11921: Logic change for Roll in and roll out
    
  Modified        Debal         02/06/2017        1.0.4
  ACC-16751: Introduced new Transaction type Rollforward-Reversal.
  
  Modified       Sanjit Ghosh        06/04/2018   1.0.5
  ACC-20678: Introduced new Transaction type Adjustment.  
  *****/
  PROCEDURE AddFundToBalanceTable(ocResult            OUT VARCHAR2,
                                  inElctId            IN NUMBER,
                                  icTxnType           IN VARCHAR2,
                                  itblFundSourceTable IN JRA_Type.tTab_FundSource,
                                  iotblBalanceTable   IN OUT NOCOPY JRA_Type.tTab_AccountBalance) IS
    cTxnType VARCHAR2(255) := nvl(icTxnType, 'xxxxx');
    eInvalidTxnType EXCEPTION;
    bInvalidTxnType BOOLEAN := FALSE;
    nFndSrcIndx     PLS_INTEGER;
  BEGIN
    nFndSrcIndx := itblFundSourceTable.first;
    WHILE nFndSrcIndx IS NOT NULL LOOP
      IF cTxnType = 'Payment' THEN
        IF nFndSrcIndx != inElctId THEN
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
        END IF;
        iotblBalanceTable(inElctId).total_paid_amt := iotblBalanceTable(inElctId)
                                                      .total_paid_amt + itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
        --Start 1.0.5
      ELSIF cTxnType = 'Admin-Fees' THEN
        IF nFndSrcIndx != inElctId THEN
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
        END IF;
        iotblBalanceTable(inElctId).total_adjustment_amt := iotblBalanceTable(inElctId)
                                                            .total_adjustment_amt + itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
      ELSIF cTxnType = 'Admin-Fees-Reversal' THEN
        IF nFndSrcIndx != inElctId THEN
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
        END IF;
        iotblBalanceTable(inElctId).total_adjustment_amt := iotblBalanceTable(inElctId)
                                                            .total_adjustment_amt - itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
        --End 1.0.5
      ELSIF cTxnType = 'Recovery' THEN
        IF nFndSrcIndx != inElctId THEN
          --1.0.3 Start
          /*iotblBalanceTable(nFndSrcIndx).total_rollin_amt := iotblBalanceTable(nFndSrcIndx)
          .total_rollin_amt + itblFundSourceTable(nFndSrcIndx).amt;*/
        
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt - itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.3 End
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance + itblFundSourceTable(nFndSrcIndx).amt + iotblBalanceTable(nFndSrcIndx)
                                                              .elct_ovrpmt_amt; --1.1.0 Added elct_ovrppmt_amt
        
          iotblBalanceTable(nFndSrcIndx).elct_ovrpmt_amt := 0; --1.1.2
        
          --1.0.3 Start
          /*iotblBalanceTable(inElctId).total_rollout_amt := iotblBalanceTable(inElctId)
          .total_rollout_amt + itblFundSourceTable(nFndSrcIndx).amt;*/
        
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt - itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.3 End
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance - itblFundSourceTable(nFndSrcIndx).amt - iotblBalanceTable(inElctId)
                                                           .elct_ovrpmt_amt; --1.1.0 Added elct_ovrppmt_amt
        END IF;
        iotblBalanceTable(inElctId).total_recovered_amt := iotblBalanceTable(inElctId)
                                                           .total_recovered_amt + itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance + itblFundSourceTable(nFndSrcIndx).amt + iotblBalanceTable(inElctId)
                                                         .elct_ovrpmt_amt; --1.1.0 Added elct_ovrppmt_amt
        iotblBalanceTable(inElctId).elct_ovrpmt_amt := 0; --1.1.2
      
        iotblBalanceTable(inElctId).total_claim_ovrpmt_amt := iotblBalanceTable(inElctId)
                                                              .total_claim_ovrpmt_amt - itblFundSourceTable(nFndSrcIndx).amt;
      ELSIF cTxnType = 'Recovery-Reversal' THEN
        IF nFndSrcIndx != inElctId THEN
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance + itblFundSourceTable(nFndSrcIndx).amt; --1.0.3 Change minus to plus
        END IF;
        iotblBalanceTable(inElctId).total_recovered_amt := iotblBalanceTable(inElctId)
                                                           .total_recovered_amt - itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).total_claim_ovrpmt_amt := iotblBalanceTable(inElctId)
                                                              .total_claim_ovrpmt_amt + itblFundSourceTable(nFndSrcIndx).amt;
      ELSIF cTxnType = 'Offset' THEN
        IF nFndSrcIndx != inElctId THEN
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
        END IF;
        iotblBalanceTable(inElctId).total_offset_used_amt := iotblBalanceTable(inElctId)
                                                             .total_offset_used_amt + itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
      ELSIF cTxnType = 'Offset-Reversal' THEN
        IF nFndSrcIndx != inElctId THEN
          --1.0.3 Start
          /*iotblBalanceTable(nFndSrcIndx).total_rollin_amt := iotblBalanceTable(nFndSrcIndx)
          .total_rollin_amt + itblFundSourceTable(nFndSrcIndx).amt;*/
        
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt - itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.3 End
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.3 Start
          /*iotblBalanceTable(inElctId).total_rollout_amt := iotblBalanceTable(inElctId)
          .total_rollout_amt + itblFundSourceTable(nFndSrcIndx).amt;*/
        
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt - itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.3 End
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
        END IF;
        iotblBalanceTable(inElctId).total_offset_used_amt := iotblBalanceTable(inElctId)
                                                             .total_offset_used_amt - itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
        --1.0.1 Start
      ELSIF cTxnType = 'Payment-Reversal' THEN
        IF nFndSrcIndx != inElctId THEN
          --1.0.3 Start
          /*iotblBalanceTable(nFndSrcIndx).total_rollin_amt := iotblBalanceTable(nFndSrcIndx)
          .total_rollin_amt + itblFundSourceTable(nFndSrcIndx).amt;*/
        
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt - itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.3 End
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.3 Start
          /*iotblBalanceTable(inElctId).total_rollout_amt := iotblBalanceTable(inElctId)
          .total_rollout_amt + itblFundSourceTable(nFndSrcIndx).amt;*/
        
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt - itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.3 End
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
        END IF;
        iotblBalanceTable(inElctId).total_paid_amt := iotblBalanceTable(inElctId)
                                                      .total_paid_amt - itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
        --1.0.1 End
        --1.0.2 Start
      ELSIF cTxnType = 'Balance-Recovery' THEN
        IF nFndSrcIndx != inElctId THEN
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).elct_ovrpmt_amt := iotblBalanceTable(inElctId)
                                                         .elct_ovrpmt_amt - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
        END IF;
      ELSIF cTxnType = 'Balance-Recovery-Reversal' THEN
        IF nFndSrcIndx != inElctId THEN
          --1.0.3 Start
          /*iotblBalanceTable(nFndSrcIndx).total_rollin_amt := iotblBalanceTable(nFndSrcIndx)
          .total_rollin_amt + itblFundSourceTable(nFndSrcIndx).amt;*/
        
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt - itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.3 End
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.3 Start
          /*iotblBalanceTable(inElctId).total_rollout_amt := iotblBalanceTable(inElctId)
          .total_rollout_amt + itblFundSourceTable(nFndSrcIndx).amt;*/
        
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt - itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.3 End
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
        END IF;
        --1.0.2 End    
        --1.0.4 Starts
      ELSIF cTxnType = 'Rollforward-Reversal' THEN
        IF nFndSrcIndx != inElctId THEN
        
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt - itblFundSourceTable(nFndSrcIndx).amt;
        
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
        
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt - itblFundSourceTable(nFndSrcIndx).amt;
        
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
        END IF;
        -- 1.0.4 Ends.
      ELSE
        bInvalidTxnType := TRUE;
        EXIT;
      
      END IF;
      nFndSrcIndx := itblFundSourceTable.next(nFndSrcIndx);
    END LOOP;
    IF bInvalidTxnType THEN
      RAISE eInvalidTxnType;
    END IF;
    --
    ocResult := 'OK';
    --
    --  PrintBalanceTable(iotblBalanceTable); -- needs to be removed later
  EXCEPTION
    WHEN eInvalidTxnType THEN
      ocResult := 'ERROR: Invalid Transaction Type - ' || cTxnType;
    
    WHEN OTHERS THEN
      ocResult := 'ERROR: Adding Fund to Balance Table. Reason: ' ||
                  SQLERRM;
    
  END AddFundToBalanceTable;

  /******
   This procedure will be responsible to remove/subtract the amount details of FundSourceTable 
   from BalanceTable in column corresponding to the given txn_type. E.g. If txn_type = 'Recovery', 
   Fund to be subtracted from Total_Recovered_Amt etc.
  ******/
  /******
  Modified        Upendra         08/02/2016      1.0.0
  ACC-11921: Logic change for Roll in and roll out
  ******/
  PROCEDURE RemoveFundFromBalanceTable(ocResult            OUT VARCHAR2,
                                       inElctId            IN NUMBER,
                                       icTxnType           IN VARCHAR2,
                                       itblFundSourceTable IN JRA_Type.tTab_FundSource,
                                       iotblBalanceTable   IN OUT NOCOPY JRA_Type.tTab_AccountBalance) IS
    cTxnType VARCHAR2(255) := nvl(icTxnType, 'xxxxx');
    eInvalidTxnType EXCEPTION;
    bInvalidTxnType BOOLEAN := FALSE;
    nFndSrcIndx     PLS_INTEGER;
  BEGIN
    nFndSrcIndx := itblFundSourceTable.first;
    WHILE nFndSrcIndx IS NOT NULL LOOP
      IF cTxnType = 'Payment' THEN
        IF nFndSrcIndx != inElctId THEN
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
        END IF;
        iotblBalanceTable(inElctId).total_paid_amt := iotblBalanceTable(inElctId)
                                                      .total_paid_amt - itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
      ELSIF cTxnType = 'Recovery' THEN
        IF nFndSrcIndx != inElctId THEN
          --1.0.0 Start
          /*iotblBalanceTable(nFndSrcIndx).total_rollin_amt := iotblBalanceTable(nFndSrcIndx)
          .total_rollin_amt - itblFundSourceTable(nFndSrcIndx).amt;*/
        
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt + itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.0 End
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance - itblFundSourceTable(nFndSrcIndx).amt - iotblBalanceTable(nFndSrcIndx)
                                                              .elct_ovrpmt_amt; --1.1.0 Added elct_ovrppmt_amt;
          --1.0.0 Start
          /*iotblBalanceTable(inElctId).total_rollout_amt := iotblBalanceTable(inElctId)
          .total_rollout_amt - itblFundSourceTable(nFndSrcIndx).amt;*/
        
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt + itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.0 End
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance + itblFundSourceTable(nFndSrcIndx).amt + iotblBalanceTable(inElctId)
                                                           .elct_ovrpmt_amt; --1.1.0 Added elct_ovrppmt_amt
        END IF;
        iotblBalanceTable(inElctId).total_recovered_amt := iotblBalanceTable(inElctId)
                                                           .total_recovered_amt - itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance - itblFundSourceTable(nFndSrcIndx).amt - iotblBalanceTable(inElctId)
                                                         .elct_ovrpmt_amt; --1.1.0 Added elct_ovrppmt_amt
        iotblBalanceTable(inElctId).total_claim_ovrpmt_amt := iotblBalanceTable(inElctId)
                                                              .total_claim_ovrpmt_amt + itblFundSourceTable(nFndSrcIndx).amt;
      ELSIF cTxnType = 'Recovery-Reversal' THEN
        IF nFndSrcIndx != inElctId THEN
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
        END IF;
        iotblBalanceTable(inElctId).total_recovered_amt := iotblBalanceTable(inElctId)
                                                           .total_recovered_amt + itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).total_claim_ovrpmt_amt := iotblBalanceTable(inElctId)
                                                              .total_claim_ovrpmt_amt - itblFundSourceTable(nFndSrcIndx).amt;
      ELSIF cTxnType = 'Offset' THEN
        IF nFndSrcIndx != inElctId THEN
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt - itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
        END IF;
        iotblBalanceTable(inElctId).total_offset_used_amt := iotblBalanceTable(inElctId)
                                                             .total_offset_used_amt - itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance + itblFundSourceTable(nFndSrcIndx).amt;
      ELSIF cTxnType = 'Offset-Reversal' THEN
        IF nFndSrcIndx != inElctId THEN
          --1.0.0 Start
          /*iotblBalanceTable(nFndSrcIndx).total_rollin_amt := iotblBalanceTable(nFndSrcIndx)
          .total_rollin_amt - itblFundSourceTable(nFndSrcIndx).amt;*/
          iotblBalanceTable(nFndSrcIndx).total_rollout_amt := iotblBalanceTable(nFndSrcIndx)
                                                              .total_rollout_amt + itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.0 End
          iotblBalanceTable(nFndSrcIndx).available_balance := iotblBalanceTable(nFndSrcIndx)
                                                              .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
          --1.0.0 Start
          /*iotblBalanceTable(inElctId).total_rollout_amt := iotblBalanceTable(inElctId)
          .total_rollout_amt - itblFundSourceTable(nFndSrcIndx).amt;*/
          iotblBalanceTable(inElctId).total_rollin_amt := iotblBalanceTable(inElctId)
                                                          .total_rollin_amt + itblFundSourceTable(nFndSrcIndx).amt;
          iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                           .available_balance + itblFundSourceTable(nFndSrcIndx).amt; --Change minus to plus
          --1.0.0 End
        END IF;
        iotblBalanceTable(inElctId).total_offset_used_amt := iotblBalanceTable(inElctId)
                                                             .total_offset_used_amt + itblFundSourceTable(nFndSrcIndx).amt;
        iotblBalanceTable(inElctId).available_balance := iotblBalanceTable(inElctId)
                                                         .available_balance - itblFundSourceTable(nFndSrcIndx).amt;
      
      ELSE
        bInvalidTxnType := TRUE;
        EXIT;
      
      END IF;
      nFndSrcIndx := itblFundSourceTable.next(nFndSrcIndx);
    END LOOP;
    IF bInvalidTxnType THEN
      RAISE eInvalidTxnType;
    END IF;
    --
    ocResult := 'OK';
    --
    --   PrintBalanceTable(iotblBalanceTable); -- needs to be removed later
  EXCEPTION
    WHEN eInvalidTxnType THEN
      ocResult := 'ERROR: Invalid Transaction Type - ' || cTxnType;
    
    WHEN OTHERS THEN
      ocResult := 'ERROR: Removing Fund from Balance Table. Reason: ' ||
                  SQLERRM;
    
  END RemoveFundFromBalanceTable;

  /******
   This procedure will be responsible to populate ELCT_ROLL_INOUT_DTL table with the Fund 
   Rolling IN and OUT details or the corresponding Reversal. The record in FundSourceTable 
   coresponding to the input Elct_Id is to be skipped during the ELCT_ROLL_INOUT_DTL table 
   population since for Fund corresponding to the current Election we will not maintain 
   any Roll INOUT record.
  ******/
  /******
  Modified      Upendra         05/12/2016        1.0.1
  ACC-8748: Added new TxnType Payment-Reversal
  ******/
  /******  
  Modified      Upendra         06/14/2016        1.0.2
  ACC-9229: Added new TxnType Balance-Recovery-Reversal
  
  Modified        Debal         02/06/2017        1.0.3
    ACC-16751: Introduced new Transaction type Rollforward-Reversal.
  ******/
  /*
  Modified       Sanjit Ghosh        06/08/2018    1.0.4
  JIRA : ACC-20678
  Description : Administer account maintenance fees for RHRA accounts. 
  Changes in JRA_Account_Util.AddFundToBalanceTable
  */
  PROCEDURE MaintainFundRollingDetail(ocResult            OUT VARCHAR2,
                                      idAsOfDate          IN DATE DEFAULT SYSDATE,
                                      inElctId            IN NUMBER,
                                      inClmId             IN NUMBER,
                                      icTxnRef            IN NUMBER,
                                      icTxnType           IN VARCHAR2,
                                      icNote              IN VARCHAR2,
                                      itblFundSourceTable IN JRA_Type.tTab_FundSource) IS
  
    nFndSrcIndx      PLS_INTEGER;
    nElctRollGrpId   NUMBER;
    nAmt             NUMBER;
    bFirstTimeInLoop BOOLEAN := TRUE;
  BEGIN
    nFndSrcIndx := itblFundSourceTable.first;
    WHILE nFndSrcIndx IS NOT NULL LOOP
      IF nFndSrcIndx != inElctId THEN
        IF bFirstTimeInLoop THEN
          nElctRollGrpId   := ELCTROLLGRP_SEQ.nextval;
          bFirstTimeInLoop := FALSE;
        END IF;
        nAmt := itblFundSourceTable(nFndSrcIndx).amt;
        IF icTxnType IS NOT NULL AND
           icTxnType IN ('Recovery',
                         'Offset-Reversal',
                         'Payment-Reversal',
                         'Balance-Recovery-Reversal',
                         --Start 1.0.4
                         --'Rollforward-Reversal') THEN
                         'Rollforward-Reversal',
                         'Admin-Fees-Reversal') THEN
          --End 1.0.4
          -- Added : 1.0.3
          --1.0.1 Added Payment-Reversal in IN clause
          --1.0.2 Added Balance-Recovery-Reversal in IN clause
          nAmt := -nAmt;
        END IF;
        INSERT INTO ELCT_ROLL_INOUT_DTL
          (ID,
           TXN_DT,
           TXN_GRP_ID,
           ELCT_ID_FROM,
           ELCT_ID_TO,
           AMOUNT,
           CLM_ID,
           DPST_ID,
           TXN_TYPE,
           TXN_REF,
           NOTE)
        VALUES
          (ELCTROLLDTL_SEQ.nextval,
           idAsOfDate,
           nElctRollGrpId,
           nFndSrcIndx,
           inElctId,
           nAmt,
           inClmId,
           NULL,
           icTxnType,
           icTxnRef,
           icNote);
      END IF;
      nFndSrcIndx := itblFundSourceTable.next(nFndSrcIndx);
    END LOOP;
  
    ocResult := 'OK';
    -- Need to do proper exception handling and also needs to use common variables like error area, error, etc
  EXCEPTION
    WHEN OTHERS THEN
      ocResult := 'ERROR :MaintainFundRollingDetail ' || SQLERRM;
  END MaintainFundRollingDetail;

  PROCEDURE DeleteBalanceTblFrmContxt(inEeAcctId IN NUMBER DEFAULT NULL, --1.0.8
                                      inEeId     IN NUMBER DEFAULT NULL, --1.0.8
                                      ocResult   OUT VARCHAR2) IS
  
  BEGIN
    /*IF tblAccountBalanceTable.count > 0 AND tblAccountBalanceTable(tblAccountBalanceTable.first)
    .acct_id = inEeAcctId THEN*/ --1.0.8
    IF tblAccountBalanceTable.count > 0 AND
       ((inEeAcctId IS NOT NULL AND tblAccountBalanceTable(tblAccountBalanceTable.first)
       .acct_id = inEeAcctId) OR (inEeId IS NOT NULL AND tblAccountBalanceTable(tblAccountBalanceTable.first)
       .ee_id = inEeId)) THEN
      --1.0.8
      tblAccountBalanceTable.delete;
    END IF;
  
    ocResult := 'OK';
  EXCEPTION
    WHEN OTHERS THEN
      ocResult := 'ERROR: ' || SQLERRM;
  END DeleteBalanceTblFrmContxt;

  PROCEDURE PopulateBalanceRollPeriod(inErId      NUMBER,
                                      icActpCd    IN VARCHAR2,
                                      ocErrorArea OUT VARCHAR2,
                                      ocResult    OUT VARCHAR2) IS
    tblErAccountDtl    tTab_EmployerAccountDetail := tTab_EmployerAccountDetail();
    tblErAccountDtlTmp tTab_EmployerAccountDetail := tTab_EmployerAccountDetail();
    rErAccountDtlTmp   tRec_EmployerAccount;
    rErAccountDtl      tRec_EmployerAccount;
    nCount             PLS_INTEGER;
    nRollinoutPeriod   NUMBER;
  BEGIN
  
    ocErrorArea := 'GetEmployerAccount';
    SELECT tRec_EmployerAccount(ea.er_id,
                                ea.actp_cd,
                                ea.begins,
                                ea.ends,
                                ea.balance_rollfwd_allow_flag,
                                ea.balance_rollfwd_period_type,
                                ea.balance_rollfwd_period,
                                ea.balance_rollback_allow_flag,
                                ea.balance_rollback_period_type,
                                ea.balance_rollback_period,
                                nvl(ea.balance_use_begins,
                                    to_date('01011900', 'mmddyyyy')),
                                nvl(ea.balance_use_ends,
                                    to_date('01011900', 'mmddyyyy')),
                                eaa.balance_rollfwd_period_type,
                                eaa.balance_rollfwd_period,
                                eaa.balance_rollfwd_allow_flag,
                                eaa.balance_rollback_period_type,
                                eaa.balance_rollback_period,
                                eaa.balance_rollback_allow_flag)
      BULK COLLECT
      INTO tblErAccountDtl
      FROM employer_account ea, er_admn_account eaa
     WHERE ea.er_id = inErId
       AND ea.actp_cd = icActpCd
       AND ea.er_id = eaa.er_id
       AND ea.actp_cd = eaa.actp_cd
     ORDER BY ea.begins DESC;
  
    nCount := tblErAccountDtl.Count;
    IF nCount > 0 THEN
      tblErAccountDtlTmp.Extend(nCount);
    
      ocErrorArea := 'Processing balance_use_ends';
      FOR nIndx IN 1 .. tblErAccountDtl.count LOOP
        tblErAccountDtlTmp(nIndx) := tblErAccountDtl(nIndx);
        rErAccountDtlTmp := tblErAccountDtlTmp(nIndx);
        nRollinoutPeriod := coalesce(rErAccountDtlTmp.BALANCE_ROLLFWD_PERIOD,
                                     rErAccountDtlTmp.ERADMN_BALANCE_ROLLFWD_PERIOD,
                                     1);
        IF coalesce(rErAccountDtlTmp.BALANCE_ROLLFWD_ALLOW_FLAG,
                    rErAccountDtlTmp.ERADMN_BALNCE_ROLFWD_ALLOW_FLG,
                    'No') = 'Yes' THEN
          rErAccountDtlTmp.BALANCE_USE_ENDS := add_months(rErAccountDtlTmp.ENDS,
                                                          12 *
                                                          nRollinoutPeriod);
        
          IF tblErAccountDtlTmp.Exists(nIndx - 1) THEN
            IF rErAccountDtlTmp.BALANCE_USE_ENDS BETWEEN tblErAccountDtlTmp(nIndx - 1)
              .BEGINS AND tblErAccountDtlTmp(nIndx - 1).BALANCE_USE_ENDS THEN
              rErAccountDtlTmp.BALANCE_USE_ENDS := tblErAccountDtlTmp(nIndx - 1)
                                                   .BALANCE_USE_ENDS;
            ELSE
              rErAccountDtlTmp.BALANCE_USE_ENDS := least(tblErAccountDtlTmp(nIndx - 1)
                                                         .BALANCE_USE_ENDS,
                                                         rErAccountDtlTmp.BALANCE_USE_ENDS);
            END IF;
          END IF;
        ELSE
          rErAccountDtlTmp.BALANCE_USE_ENDS := rErAccountDtlTmp.ENDS;
        END IF;
      
        tblErAccountDtlTmp(nIndx) := rErAccountDtlTmp;
      
      END LOOP;
    
      ocErrorArea := 'Processing balance_use_begins';
      FOR nIndx IN REVERSE 1 .. tblErAccountDtlTmp.Count LOOP
        rErAccountDtlTmp := tblErAccountDtlTmp(nIndx);
        nRollinoutPeriod := coalesce(rErAccountDtlTmp.BALANCE_ROLLBACK_PERIOD,
                                     rErAccountDtlTmp.ERADMN_BALANCE_ROLLBACK_PERIOD,
                                     1);
        IF coalesce(rErAccountDtlTmp.BALANCE_ROLLBACK_ALLOW_FLAG,
                    rErAccountDtlTmp.ERADMN_BALNCE_ROLBCK_ALLOW_FLG,
                    'No') = 'Yes' THEN
          rErAccountDtlTmp.BALANCE_USE_BEGINS := add_months(rErAccountDtlTmp.BEGINS,
                                                            -12 *
                                                            nRollinoutPeriod);
        
          IF tblErAccountDtlTmp.Exists(nIndx + 1) THEN
            IF rErAccountDtlTmp.BALANCE_USE_BEGINS BETWEEN tblErAccountDtlTmp(nIndx + 1)
              .BALANCE_USE_BEGINS AND tblErAccountDtlTmp(nIndx + 1).ENDS THEN
              rErAccountDtlTmp.BALANCE_USE_BEGINS := tblErAccountDtlTmp(nIndx + 1)
                                                     .BALANCE_USE_BEGINS;
            ELSE
              rErAccountDtlTmp.BALANCE_USE_BEGINS := greatest(tblErAccountDtlTmp(nIndx + 1)
                                                              .BALANCE_USE_BEGINS,
                                                              rErAccountDtlTmp.BALANCE_USE_BEGINS);
            END IF;
          END IF;
        ELSE
          rErAccountDtlTmp.BALANCE_USE_BEGINS := rErAccountDtlTmp.BEGINS;
        END IF;
      
        tblErAccountDtlTmp(nIndx) := rErAccountDtlTmp;
      
      END LOOP;
    
      ocErrorArea := 'Update Employer Account';
      FOR nIndx IN 1 .. tblErAccountDtl.count LOOP
        rErAccountDtl    := tblErAccountDtl(nIndx);
        rErAccountDtlTmp := tblErAccountDtlTmp(nIndx);
        IF rErAccountDtl.BALANCE_USE_BEGINS !=
           rErAccountDtlTmp.BALANCE_USE_BEGINS AND
           rErAccountDtl.BALANCE_USE_ENDS !=
           rErAccountDtlTmp.BALANCE_USE_ENDS THEN
          UPDATE employer_account ea
             SET ea.balance_use_begins          = rErAccountDtlTmp.BALANCE_USE_BEGINS,
                 ea.balance_use_ends            = rErAccountDtlTmp.BALANCE_USE_ENDS,
                 ea.balance_rollfwd_allow_flag  = nvl(rErAccountDtlTmp.balance_rollfwd_allow_flag,
                                                      rErAccountDtlTmp.ERADMN_BALNCE_ROLFWD_ALLOW_FLG),
                 ea.balance_rollback_allow_flag = nvl(rErAccountDtlTmp.balance_rollback_allow_flag,
                                                      rErAccountDtlTmp.ERADMN_BALNCE_ROLBCK_ALLOW_FLG)
           WHERE ea.er_id = inErId
             AND ea.actp_cd = icActpCd
             AND ea.ends = rErAccountDtl.ENDS;
        ELSIF rErAccountDtl.BALANCE_USE_BEGINS !=
              rErAccountDtlTmp.BALANCE_USE_BEGINS THEN
          UPDATE employer_account ea
             SET ea.balance_use_begins          = rErAccountDtlTmp.BALANCE_USE_BEGINS,
                 ea.balance_rollfwd_allow_flag  = nvl(rErAccountDtlTmp.balance_rollfwd_allow_flag,
                                                      rErAccountDtlTmp.ERADMN_BALNCE_ROLFWD_ALLOW_FLG),
                 ea.balance_rollback_allow_flag = nvl(rErAccountDtlTmp.balance_rollback_allow_flag,
                                                      rErAccountDtlTmp.ERADMN_BALNCE_ROLBCK_ALLOW_FLG)
           WHERE ea.er_id = inErId
             AND ea.actp_cd = icActpCd
             AND ea.ends = rErAccountDtl.ENDS;
        ELSIF rErAccountDtl.BALANCE_USE_ENDS !=
              rErAccountDtlTmp.BALANCE_USE_ENDS THEN
          UPDATE employer_account ea
             SET ea.balance_use_ends            = rErAccountDtlTmp.BALANCE_USE_ENDS,
                 ea.balance_rollfwd_allow_flag  = nvl(rErAccountDtlTmp.balance_rollfwd_allow_flag,
                                                      rErAccountDtlTmp.ERADMN_BALNCE_ROLFWD_ALLOW_FLG),
                 ea.balance_rollback_allow_flag = nvl(rErAccountDtlTmp.balance_rollback_allow_flag,
                                                      rErAccountDtlTmp.ERADMN_BALNCE_ROLBCK_ALLOW_FLG)
           WHERE ea.er_id = inErId
             AND ea.actp_cd = icActpCd
             AND ea.ends = rErAccountDtl.ENDS;
        END IF;
      END LOOP;
    END IF;
    ocErrorArea := 'OTHERS';
    ocResult    := 'OK';
  EXCEPTION
    WHEN OTHERS THEN
      ocResult := 'ERROR: ' || ocErrorArea || ' : ' || SQLERRM;
  END PopulateBalanceRollPeriod;

  PROCEDURE GetFundingHoldingInfo(inAdmnId       IN NUMBER,
                                  inErId         IN NUMBER,
                                  icActpCd       IN VARCHAR2,
                                  icPaymentModel IN VARCHAR2,
                                  --
                                  iotblFundingHoldingDtl IN OUT NOCOPY JRA_Type.tTab_FundingHoldingDtl,
                                  onAchHldActID          OUT NUMBER,
                                  onAchFndActID          OUT NUMBER,
                                  ocWillAutoPull         OUT VARCHAR2,
                                  ocErrorArea            OUT VARCHAR2,
                                  ocResult               OUT VARCHAR2,
                                  ocOtherMessage         OUT VARCHAR2) IS
    cIdentifier         VARCHAR2(255);
    rFundingHoldingInfo JRA_Type.tRec_FundingHoldingInfo;
    nAchHldActID        NUMBER;
    nAchFndActID        NUMBER;
    cWillAutoPull       VARCHAR2(3);
    eWrongSetup EXCEPTION;
    eWrongInput EXCEPTION;
  BEGIN
    IF inAdmnId IS NULL OR inErId IS NULL OR icActpCd IS NULL THEN
      RAISE eWrongInput;
    END IF;
    cIdentifier := to_char(inAdmnId) || '-' || to_char(inErId) || '-' ||
                   icActpCd;
    IF iotblFundingHoldingDtl.Exists(cIdentifier) THEN
      rFundingHoldingInfo := iotblFundingHoldingDtl(cIdentifier);
      nAchFndActID        := rFundingHoldingInfo.funding_id;
      nAchHldActID        := rFundingHoldingInfo.holding_id;
      cWillAutoPull       := rFundingHoldingInfo.will_auto_pull;
    ELSE
      nAchHldActID  := NULL;
      nAchFndActID  := NULL;
      cWillAutoPull := 'No';
      -- Get holding/funding account for non-legacy system
      IF NVL(icPaymentModel, 'NA') != 'NA' THEN
        ocErrorArea := 'GetBankInfo';
        CLM_GET_BANKING_INFO(inAdmnId,
                             inErId,
                             icActpCd,
                             nAchHldActID,
                             nAchFndActID);
      
        IF icPaymentModel IN ('Sweep',
                              'ManualTrust',
                              'WaitForClient',
                              'WaitForClientAndFunds') THEN
        
          cWillAutoPull := 'No';
          nAchHldActID  := NULL;
        ELSIF icPaymentModel IN ('DirectSend') THEN
        
          ocErrorArea   := 'GetBankInfoForDirectSend ' || inErId || '/' ||
                           icActpCd;
          cWillAutoPull := 'Yes';
          IF nAchHldActID IS NULL OR nAchFndActID IS NULL THEN
            -- throw error - setup issue
          
            RAISE eWrongSetup;
          
          END IF;
        ELSIF icPaymentModel IN
              ('PullPush', 'PullPushByThreshold', 'SweepWithPegBalance') THEN
        
          ocErrorArea   := 'GetBankInfoForPullPush ' || inErId || '/' ||
                           icActpCd;
          cWillAutoPull := 'Yes';
          IF nAchHldActID IS NULL THEN
            -- throw error - setup issue
            RAISE eWrongSetup;
          END IF;
        END IF;
        rFundingHoldingInfo.er_id := inErId;
        rFundingHoldingInfo.actp_cd := icActpCd;
        rFundingHoldingInfo.funding_id := nAchFndActID;
        rFundingHoldingInfo.holding_id := nAchHldActID;
        rFundingHoldingInfo.will_auto_pull := cWillAutoPull;
        iotblFundingHoldingDtl(cIdentifier) := rFundingHoldingInfo;
      END IF;
    END IF;
    onAchHldActID  := nAchHldActID;
    onAchFndActID  := nAchFndActID;
    ocWillAutoPull := cWillAutoPull;
    ocResult       := 'OK';
    ocOtherMessage := NULL;
  EXCEPTION
    WHEN eWrongInput THEN
      onAchHldActID  := NULL;
      onAchFndActID  := NULL;
      ocWillAutoPull := 'No';
      ocResult       := 'ERROR';
      ocOtherMessage := 'Wrong Input Provided';
    WHEN eWrongSetup THEN
      onAchHldActID  := NULL;
      onAchFndActID  := NULL;
      ocWillAutoPull := 'No';
      ocResult       := 'ERROR';
      ocOtherMessage := 'Wrong Account Setup';
  END GetFundingHoldingInfo;

  /******
  Modified        Upendra         08/02/2016      1.0.1
  ACC-11921: Logic change for Roll in and roll out. Change sign > to <>.
  ******/
  PROCEDURE UpdateBalanceTable(inEeAcctId          IN NUMBER,
                               itblBalanceTableOrg IN JRA_Type.tTab_AccountBalance,
                               itblBalanceTableTmp IN JRA_Type.tTab_AccountBalance,
                               ocResult            OUT VARCHAR2) IS
    nTblIndx       NUMBER;
    rOrgElctDetail JRA_Type.tRec_ElectionBalance;
    rTmpElctDetail JRA_Type.tRec_ElectionBalance;
    nPaidAmt       NUMBER(12, 2);
    nTotPaidAmt    NUMBER(12, 2) := 0;
    nRcvrdAmt      NUMBER(12, 2);
    nTotRcvrdAmt   NUMBER(12, 2) := 0;
    nRollinAmt     NUMBER(12, 2);
    nRolloutAmt    NUMBER(12, 2);
    nOffsetUsedAmt NUMBER(12, 2);
    nValidAmt      NUMBER(12, 2); --1.1.3
    nInValidAmt    NUMBER(12, 2); --1.1.3
    cSqlStmt       VARCHAR2(2000);
    eException EXCEPTION;
    cErrorMessage VARCHAR2(4000);
  BEGIN
    IF itblBalanceTableTmp.count <= 0 OR
       (itblBalanceTableOrg.count > 0 AND
       itblBalanceTableTmp.count != itblBalanceTableOrg.count) THEN
      cErrorMessage := 'Collections are not valid';
      RAISE eException;
    END IF;
    nTblIndx := itblBalanceTableTmp.first;
    WHILE nTblIndx IS NOT NULL LOOP
    
      -- If both the original balance table and the changed balance table
      -- are obtained, then need to find the differential amount to update
      -- the election table. 
      IF itblBalanceTableOrg.count > 0 THEN
        rOrgElctDetail := itblBalanceTableOrg(nTblIndx);
        rTmpElctDetail := itblBalanceTableTmp(nTblIndx);
        nPaidAmt       := rTmpElctDetail.total_paid_amt -
                          rOrgElctDetail.total_paid_amt;
        nRcvrdAmt      := rTmpElctDetail.total_recovered_amt -
                          rOrgElctDetail.total_recovered_amt;
        nRollinAmt     := rTmpElctDetail.total_rollin_amt -
                          rOrgElctDetail.total_rollin_amt;
        nRolloutAmt    := rTmpElctDetail.total_rollout_amt -
                          rOrgElctDetail.total_rollout_amt;
        nOffsetUsedAmt := rTmpElctDetail.total_offset_used_amt -
                          rOrgElctDetail.total_offset_used_amt;
      
        --1.1.3 Start
        nValidAmt   := rTmpElctDetail.total_valid_claim_amt -
                       rOrgElctDetail.total_valid_claim_amt;
        nInValidAmt := rTmpElctDetail.total_invalid_claim_amt -
                       rOrgElctDetail.total_invalid_claim_amt;
        --1.1.3 End
        -- If the original balance table is not sent, it is assumed that the 
        -- changed balance table obtained has only the differential amount 
        -- and so no calculation is needed to update the election table.
      ELSE
        rTmpElctDetail := itblBalanceTableTmp(nTblIndx);
        nPaidAmt       := rTmpElctDetail.total_paid_amt;
        nRcvrdAmt      := rTmpElctDetail.total_recovered_amt;
        nRollinAmt     := rTmpElctDetail.total_rollin_amt;
        nRolloutAmt    := rTmpElctDetail.total_rollout_amt;
        nOffsetUsedAmt := rTmpElctDetail.total_offset_used_amt;
      
        nValidAmt   := rTmpElctDetail.total_valid_claim_amt; --1.1.3
        nInValidAmt := rTmpElctDetail.total_invalid_claim_amt; --1.1.3
      END IF;
    
      -- Need to write update statement
      IF nRcvrdAmt <> 0 OR nRollinAmt <> 0 OR nRolloutAmt <> 0 OR
         nOffsetUsedAmt <> 0 OR nPaidAmt <> 0 OR nValidAmt <> 0 OR
         nInValidAmt <> 0 --1.1.3
       THEN
        --1.0.1 Change > to <>
        cSqlStmt := 'update election e set ';
        IF nRcvrdAmt <> 0 THEN
          --1.0.1 Change > to <>
          nTotRcvrdAmt := nTotRcvrdAmt + nRcvrdAmt;
          cSqlStmt     := cSqlStmt ||
                          'e.TOTAL_RECOVERED_AMT=nvl(e.TOTAL_RECOVERED_AMT,0)+' ||
                          nRcvrdAmt ||
                          ',e.TOTAL_CLAIM_OVRPMT_AMT=e.TOTAL_CLAIM_OVRPMT_AMT-' ||
                          nRcvrdAmt || ',';
        END IF;
        IF nRollinAmt <> 0 THEN
          --1.0.1 Change > to <>
          cSqlStmt := cSqlStmt ||
                      'e.TOTAL_ROLLIN_AMT=nvl(e.TOTAL_ROLLIN_AMT,0)+' ||
                      nRollinAmt || ',';
        END IF;
        IF nRolloutAmt <> 0 THEN
          --1.0.1 Change > to <>
          cSqlStmt := cSqlStmt ||
                      'e.TOTAL_ROLLOUT_AMT=nvl(e.TOTAL_ROLLOUT_AMT,0)+' ||
                      nRolloutAmt || ',';
        END IF;
        IF nOffsetUsedAmt <> 0 THEN
          --1.0.1 Change > to <>
          cSqlStmt := cSqlStmt ||
                      'e.TOTAL_OFFSET_USED_AMT=nvl(e.TOTAL_OFFSET_USED_AMT,0)+' ||
                      nOffsetUsedAmt || ',';
        END IF;
        IF nPaidAmt <> 0 THEN
          --1.0.1 Change > to <>
          nTotPaidAmt := nTotPaidAmt + nPaidAmt;
          cSqlStmt    := cSqlStmt ||
                         'e.TOTAL_PAID_CLAIM_AMT=nvl(e.TOTAL_PAID_CLAIM_AMT,0)+' ||
                         nPaidAmt || ',';
        END IF;
        --1.1.3 Start
        IF nValidAmt <> 0 THEN
          cSqlStmt := cSqlStmt ||
                      'e.TOTAL_VALID_CLAIM_AMT=nvl(e.TOTAL_VALID_CLAIM_AMT,0)+' ||
                      nValidAmt || ',';
        END IF;
        IF nInValidAmt <> 0 THEN
          cSqlStmt := cSqlStmt ||
                      'e.TOTAL_INVALID_CLAIM_AMT=nvl(e.TOTAL_INVALID_CLAIM_AMT,0)+' ||
                      nInValidAmt || ',';
        END IF;
        --1.1.3 End
        cSqlStmt := rtrim(cSqlStmt, ',') || ' where e.id=:indx';
        EXECUTE IMMEDIATE cSqlStmt
          USING nTblIndx;
      END IF;
      nTblIndx := itblBalanceTableTmp.next(nTblIndx);
    END LOOP;
    -- ee_account needs to be updated
    IF nTotRcvrdAmt <> 0 THEN
      --1.0.1 Change > to <>
      UPDATE ee_account ea
         SET ea.total_recovered_amt   = nvl(ea.total_recovered_amt, 0) +
                                        nTotRcvrdAmt,
             ea.total_overpayment_amt = ea.total_overpayment_amt -
                                        nTotRcvrdAmt,
             ea.total_offset_used_amt = nvl(ea.total_offset_used_amt, 0) +
                                        nTotRcvrdAmt
       WHERE ea.id = inEeAcctId
         AND ea.actp_cd = 'RHRA'; --1.0.8
    END IF;
    IF nTotPaidAmt <> 0 THEN
      --1.0.1 Change > to <>
      UPDATE ee_account ea
         SET ea.total_paid_claim_amt = nvl(ea.total_paid_claim_amt, 0) +
                                       nTotPaidAmt
       WHERE ea.id = inEeAcctId
         AND ea.actp_cd = 'RHRA'; --1.0.8
    END IF;
    ocResult := 'OK';
  EXCEPTION
    WHEN eException THEN
      ocResult := 'ERROR: Election updation failed: ' || cErrorMessage;
    WHEN OTHERS THEN
      ocResult := 'ERROR: Election updation failed: ' || SQLERRM;
  END UpdateBalanceTable;

  PROCEDURE GetElectionTableDiff(itblBalanceTableOrg IN JRA_Type.tTab_AccountBalance,
                                 itblBalanceTableTmp IN OUT NOCOPY JRA_Type.tTab_AccountBalance,
                                 ocResult            OUT VARCHAR2) IS
    nTblIndx NUMBER;
    eException EXCEPTION;
    cErrorMessage VARCHAR2(4000);
  BEGIN
    IF itblBalanceTableTmp.count <= 0 OR
       itblBalanceTableTmp.count != itblBalanceTableOrg.count THEN
      cErrorMessage := 'Collections are not valid';
      RAISE eException;
    END IF;
    nTblIndx := itblBalanceTableOrg.first;
    WHILE nTblIndx IS NOT NULL LOOP
    
      itblBalanceTableTmp(nTblIndx).total_paid_amt := itblBalanceTableTmp(nTblIndx)
                                                      .total_paid_amt - itblBalanceTableOrg(nTblIndx)
                                                      .total_paid_amt;
      itblBalanceTableTmp(nTblIndx).total_recovered_amt := itblBalanceTableTmp(nTblIndx)
                                                           .total_recovered_amt - itblBalanceTableOrg(nTblIndx)
                                                           .total_recovered_amt;
      itblBalanceTableTmp(nTblIndx).total_rollin_amt := itblBalanceTableTmp(nTblIndx)
                                                        .total_rollin_amt - itblBalanceTableOrg(nTblIndx)
                                                        .total_rollin_amt;
      itblBalanceTableTmp(nTblIndx).total_rollout_amt := itblBalanceTableTmp(nTblIndx)
                                                         .total_rollout_amt - itblBalanceTableOrg(nTblIndx)
                                                         .total_rollout_amt;
      itblBalanceTableTmp(nTblIndx).total_offset_used_amt := itblBalanceTableTmp(nTblIndx)
                                                             .total_offset_used_amt - itblBalanceTableOrg(nTblIndx)
                                                             .total_offset_used_amt;
    
      nTblIndx := itblBalanceTableOrg.next(nTblIndx);
    END LOOP;
  
    ocResult := 'OK';
  EXCEPTION
    WHEN eException THEN
      ocResult := 'ERROR: Election Total Difference Amounts cannot be obtained: ' ||
                  cErrorMessage;
    WHEN OTHERS THEN
      ocResult := 'ERROR: Election Total Difference Amounts cannot be obtained: ' ||
                  SQLERRM;
  END GetElectionTableDiff;
  --
  PROCEDURE GetEEAcctBalance(inEeAcctId          IN NUMBER,
                             onTotDepositAmt     OUT NUMBER,
                             onTotRecoveredAmt   OUT NUMBER,
                             onTotPaidClmAmt     OUT NUMBER,
                             onTotOffsetUsedAmt  OUT NUMBER,
                             onTotOverpaymentAmt OUT NUMBER,
                             onTotAdjustmentAmt  OUT NUMBER -- 1.0.3
                             ) IS
  
    CURSOR curEEAcctBal IS
      SELECT nvl(SUM(el.total_deposit_amt), 0) TotalDepAmt,
             nvl(SUM(el.total_recovered_amt), 0) TotalRecovrAmt,
             nvl(SUM(el.total_paid_claim_amt), 0) TotalPaidClmAmt,
             nvl(SUM(el.total_offset_used_amt), 0) TotalOffsetUsdAmt,
             nvl(SUM(greatest(nvl(el.total_claim_ovrpmt_amt, 0),
                              nvl(el.elct_ovrpmt_amt, 0))),
                 0) TotalOvrPymtAmt,
             nvl(SUM(el.total_adjustment_amt), 0) TotalAdjAmt -- 1.0.3
        FROM election el
       WHERE el.acct_id = inEeAcctId;
  BEGIN
    OPEN curEEAcctBal;
    FETCH curEEAcctBal
      INTO onTotDepositAmt,
           onTotRecoveredAmt,
           onTotPaidClmAmt,
           onTotOffsetUsedAmt,
           onTotOverpaymentAmt,
           onTotAdjustmentAmt; -- 1.0.3
    CLOSE curEEAcctBal;
  EXCEPTION
    WHEN OTHERS THEN
      IF curEEAcctBal%ISOPEN THEN
        CLOSE curEEAcctBal;
      END IF;
      onTotDepositAmt     := 0;
      onTotRecoveredAmt   := 0;
      onTotPaidClmAmt     := 0;
      onTotOffsetUsedAmt  := 0;
      onTotOverpaymentAmt := 0;
      onTotAdjustmentAmt  := 0; -- 1.0.3
  END GetEEAcctBalance;
  --
  PROCEDURE UpdateEEAcctBalance(inEeAcctId IN NUMBER,
                                ocResult   OUT VARCHAR2) IS
    --
    nTotDepositAmt     NUMBER := 0;
    nTotRecoveredAmt   NUMBER := 0;
    nTotPaidClmAmt     NUMBER := 0;
    nTotOffsetUsedAmt  NUMBER := 0;
    nTotOverpaymentAmt NUMBER := 0;
    nTotAdjustmentAmt  NUMBER := 0; -- 1.0.3
  BEGIN
    -- Get EEAccount Balance
    GetEEAcctBalance(inEeAcctId          => inEeAcctId,
                     onTotDepositAmt     => nTotDepositAmt,
                     onTotRecoveredAmt   => nTotRecoveredAmt,
                     onTotPaidClmAmt     => nTotPaidClmAmt,
                     onTotOffsetUsedAmt  => nTotOffsetUsedAmt,
                     onTotOverpaymentAmt => nTotOverpaymentAmt,
                     onTotAdjustmentAmt  => nTotAdjustmentAmt);
    UPDATE ee_account ea
       SET ea.total_deposit_amt     = nTotDepositAmt,
           ea.total_recovered_amt   = nTotRecoveredAmt,
           ea.total_paid_claim_amt  = nTotPaidClmAmt,
           ea.total_offset_used_amt = nTotOffsetUsedAmt,
           ea.total_overpayment_amt = nTotOverpaymentAmt,
           ea.total_adjustment_amt  = nTotAdjustmentAmt -- 1.0.3
     WHERE EA.ID = inEeAcctId;
  
    ocResult := 'OK';
  EXCEPTION
    WHEN OTHERS THEN
      ocResult := 'ERROR: ' || SQLERRM;
    
  END UpdateEEAcctBalance;

  FUNCTION GetElectBalanceTable(inElctId IN NUMBER)
    RETURN JRA_Type.tTab_AccountBalance IS
    tblAccountBalanceTable JRA_Type.tTab_AccountBalance;
    rElectionBalance       JRA_Type.tRec_ElectionBalance;
  
    CURSOR curElct IS
      SELECT el.id,
             ((nvl(el.total_deposit_amt, 0) +
             nvl(el.total_recovered_amt, 0) + nvl(el.total_rollin_amt, 0)) -
             (nvl(el.total_paid_claim_amt, 0) +
             nvl(el.total_offset_used_amt, 0) +
             nvl(el.total_rollout_amt, 0) +
             nvl(el.total_adjustment_amt, 0))) available_balance, -- 1.0.3
             el.election_effective,
             el.erac_ends,
             ea.balance_use_begins,
             ea.balance_use_ends,
             nvl(el.total_deposit_amt, 0),
             nvl(el.total_paid_claim_amt, 0),
             nvl(el.total_recovered_amt, 0),
             nvl(el.total_offset_used_amt, 0),
             nvl(el.total_rollin_amt, 0),
             nvl(el.total_rollout_amt, 0),
             nvl(el.total_claim_ovrpmt_amt, 0),
             nvl(el.elct_ovrpmt_amt, 0),
             el.acct_id,
             nvl(el.total_valid_claim_amt, 0),
             nvl(el.total_invalid_claim_amt, 0),
             nvl(el.total_recovered_amt_by_chk, 0), --1.0.2 Added
             nvl(el.total_adjustment_amt, 0), -- 1.0.3
             el.ee_id, --1.0.8
             el.erac_actp_cd --1.0.8
             -- Starts : 1.1.8
            ,
             0                          RemainingFWDCapLimit,
             0                          RemainingBackCapLimit,
             el.Rollover_To_Next_Year,
             el.Rollover_From_Next_Year,
             el.Rollover_To_Prev_Year,
             el.Rollover_From_Prev_Year
      -- ends : 1.1.8 
        FROM election el, employer_account ea
       WHERE el.id = inElctId
         AND ea.er_id = el.erac_er_id
         AND ea.actp_cd = el.erac_actp_cd
         AND ea.ends = el.erac_ends;
  
  BEGIN
    BEGIN
      tblAccountBalanceTable.delete;
      -- > Looping through the cursor and building 
      -- > the Array to be returned.
      OPEN curElct;
      LOOP
        --FETCH curElct
        --  INTO rElectionBalance;
        EXIT WHEN curElct%NOTFOUND;
        tblAccountBalanceTable(rElectionBalance.elct_id) := rElectionBalance;
      END LOOP;
      IF curElct%ISOPEN THEN
        CLOSE curElct;
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        IF curElct%ISOPEN THEN
          CLOSE curElct;
        END IF;
        tblAccountBalanceTable.delete;
      
    END;
    --  PrintBalanceTable(tblAccountBalanceTable); -- needs to be removed later, this is for testing purpose
    RETURN tblAccountBalanceTable;
  
  END GetElectBalanceTable;
  --1.1.1 Starts
  --Modified on 10/15/2018 Balance calculation changed
  --el.total_offset_used_amt was added for both earlier but now only For RHRA 
  --el.ELCT_OVRPMT_AMT was deducted for both earlier but noe only for PHRA
  --
  FUNCTION GetElctBlncTblBndl(inElctId     IN NUMBER,
                              icCalledFrom IN VARCHAR2 DEFAULT 'Validation') --1.1.7
   RETURN JRA_Type.tTab_AccountBalance IS
    tblAccountBalanceTable JRA_Type.tTab_AccountBalance;
    rElectionBalance       JRA_Type.tRec_ElectionBalance;
    cCalledFrom            VARCHAR2(10) := icCalledFrom; --1.1.7
  
    CURSOR curElct IS
      SELECT el.id,
             /*((nvl(el.total_deposit_amt, 0) +
             nvl(el.total_recovered_amt, 0) + nvl(el.total_rollin_amt, 0)) -
             (CASE el.ERAC_ACTP_CD
               WHEN 'RHRA' THEN
                (nvl(el.total_paid_claim_amt, 0) +
                nvl(el.total_offset_used_amt, 0)) --1.1.1
               ELSE
                (nvl(el.TOTAL_VALID_CLAIM_AMT, 0) -
                nvl(el.ELCT_OVRPMT_AMT, 0)) --1.1.1
             END + NVL(EL.TOTAL_ROLLOUT_AMT, 0) +
             nvl(el.total_adjustment_amt, 0))) available_balance, -- 1.0.3  --1.1.1*/ --1.1.6
             CalcAvlblBalance(icEracActpCd       => el.ERAC_ACTP_CD,
                              inTotDepstAmt      => COALESCE(el.TOTAL_DEPOSIT_AMT,
                                                             0),
                              inTotRecovrAmt     => COALESCE(el.TOTAL_RECOVERED_AMT,
                                                             0),
                              inTotPaidClmAmt    => COALESCE(el.TOTAL_PAID_CLAIM_AMT,
                                                             0),
                              inTotValidClmAmt   => COALESCE(el.TOTAL_VALID_CLAIM_AMT,
                                                             0),
                              inElctOvrpmtAmt    => COALESCE(el.ELCT_OVRPMT_AMT,
                                                             0),
                              inTotRollinAmt     => COALESCE(el.TOTAL_ROLLIN_AMT,
                                                             0),
                              inTotRolloutAmt    => COALESCE(el.TOTAL_ROLLOUT_AMT,
                                                             0),
                              inTotAdjustmntAmt  => COALESCE(el.TOTAL_ADJUSTMENT_AMT,
                                                             0),
                              inTotOffsetUsedAmt => COALESCE(el.TOTAL_OFFSET_USED_AMT,
                                                             0),
                              inTotClmOvrpmtAmt  => COALESCE(el.TOTAL_CLAIM_OVRPMT_AMT,
                                                             0),
                              inElectedAmt       => COALESCE(el.ELECTED_AMOUNT,
                                                             0),
                              inCarryoverAmt     => COALESCE(el.CARRYOVER_AMOUNT,
                                                             0),
                              inCarryoverOutAmt  => COALESCE(el.CARRYOVER_OUT_AMOUNT,
                                                             0),
                              icCalledFrom       => cCalledFrom --1.1.7
                              ) available_balance, --1.1.6
             el.election_effective,
             el.erac_ends,
             ea.balance_use_begins,
             ea.balance_use_ends,
             nvl(el.total_deposit_amt, 0),
             nvl(el.total_paid_claim_amt, 0),
             nvl(el.total_recovered_amt, 0),
             nvl(el.total_offset_used_amt, 0),
             nvl(el.total_rollin_amt, 0),
             nvl(el.total_rollout_amt, 0),
             nvl(el.total_claim_ovrpmt_amt, 0),
             nvl(el.elct_ovrpmt_amt, 0),
             el.acct_id,
             nvl(el.total_valid_claim_amt, 0),
             nvl(el.total_invalid_claim_amt, 0),
             nvl(el.total_recovered_amt_by_chk, 0), --1.0.2 Added
             nvl(el.total_adjustment_amt, 0), -- 1.0.3
             el.ee_id, --1.0.8
             el.erac_actp_cd --1.0.8
             -- Starts : 1.1.8
            ,
             0                          RemainingFWDCapLimit,
             0                          RemainingBackCapLimit,
             el.Rollover_To_Next_Year,
             el.Rollover_From_Next_Year,
             el.Rollover_To_Prev_Year,
             el.Rollover_From_Prev_Year
      -- ends : 1.1.8 
        FROM election el, employer_account ea
       WHERE el.id = inElctId
         AND ea.er_id = el.erac_er_id
         AND ea.actp_cd = el.erac_actp_cd
         AND ea.ends = el.erac_ends;
  
  BEGIN
    BEGIN
      tblAccountBalanceTable.delete;
      -- > Looping through the cursor and building 
      -- > the Array to be returned.
      OPEN curElct;
      LOOP
        --FETCH curElct
        --  INTO rElectionBalance;
        EXIT WHEN curElct%NOTFOUND;
        tblAccountBalanceTable(rElectionBalance.elct_id) := rElectionBalance;
      END LOOP;
      IF curElct%ISOPEN THEN
        CLOSE curElct;
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        IF curElct%ISOPEN THEN
          CLOSE curElct;
        END IF;
        tblAccountBalanceTable.delete;
      
    END;
    --  PrintBalanceTable(tblAccountBalanceTable); -- needs to be removed later, this is for testing purpose
    RETURN tblAccountBalanceTable;
  
  END GetElctBlncTblBndl;
  --1.1.1 Ends

  --FUNCTION GetElectBalance(inElctId IN NUMBER) RETURN NUMBER IS  --1.1.7
  FUNCTION GetElectBalance(inElctId     IN NUMBER,
                           icCalledFrom IN VARCHAR2 DEFAULT 'Validation')
    RETURN NUMBER IS
    --1.1.7
    tblAccountBalanceTable JRA_Type.tTab_AccountBalance;
    nElectionBalance       NUMBER := 0;
    cCalledFrom            VARCHAR2(10) := icCalledFrom; --1.1.7
  BEGIN
    BEGIN
      --tblAccountBalanceTable := GetElectBalanceTable(inElctId => inElctId);  --1.1.1
      --tblAccountBalanceTable := GetElctBlncTblBndl(inElctId => inElctId); --1.1.1  --1.1.7
      tblAccountBalanceTable := GetElctBlncTblBndl(inElctId     => inElctId,
                                                   icCalledFrom => cCalledFrom); --1.1.7
      IF tblAccountBalanceTable.exists(inElctId) THEN
        nElectionBalance := tblAccountBalanceTable(inElctId)
                            .available_balance;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        nElectionBalance := 0;
    END;
    RETURN nElectionBalance;
  END GetElectBalance;

  FUNCTION GetElectBalanceTableCumulative(inEeId IN NUMBER)
    RETURN JRA_Type.tTab_AccountBalance IS
    tblAccountBalanceTable JRA_Type.tTab_AccountBalance;
    rElectionBalance       JRA_Type.tRec_ElectionBalance;
    dTruncSysdate          DATE := trunc(SYSDATE);
  
    CURSOR curElct IS
      SELECT el.id,
             ((nvl(el.total_deposit_amt, 0) +
             nvl(el.total_recovered_amt, 0) + nvl(el.total_rollin_amt, 0)) -
             (nvl(el.total_paid_claim_amt, 0) +
             nvl(el.total_offset_used_amt, 0) +
             nvl(el.total_rollout_amt, 0) +
             nvl(el.total_adjustment_amt, 0))) available_balance,
             el.election_effective,
             el.erac_ends,
             ea.balance_use_begins,
             ea.balance_use_ends,
             nvl(el.total_deposit_amt, 0),
             nvl(el.total_paid_claim_amt, 0),
             nvl(el.total_recovered_amt, 0),
             nvl(el.total_offset_used_amt, 0),
             nvl(el.total_rollin_amt, 0),
             nvl(el.total_rollout_amt, 0),
             nvl(el.total_claim_ovrpmt_amt, 0),
             nvl(el.elct_ovrpmt_amt, 0),
             el.acct_id,
             nvl(el.total_valid_claim_amt, 0),
             nvl(el.total_invalid_claim_amt, 0),
             nvl(el.total_recovered_amt_by_chk, 0),
             nvl(el.total_adjustment_amt, 0),
             el.ee_id, --1.0.8
             el.erac_actp_cd --1.0.8
             -- Starts : 1.1.8
            ,
             0                          RemainingFWDCapLimit,
             0                          RemainingBackCapLimit,
             el.Rollover_To_Next_Year,
             el.Rollover_From_Next_Year,
             el.Rollover_To_Prev_Year,
             el.Rollover_From_Prev_Year
      -- ends : 1.1.8 
        FROM election el, employer_account ea
       WHERE el.ee_id = inEeId
         AND el.erac_actp_cd = cJRAAcctTypeCD --1.0.6
         AND ((TRUNC(getRunOffDate(inEeId, el.id, ea.er_id, el.erac_actp_cd)) > =
             dTruncSysdate) OR TRUNC(ea.balance_use_ends) >= dTruncSysdate) --1.0.6
         AND ea.er_id = el.erac_er_id
         AND ea.actp_cd = el.erac_actp_cd
         AND ea.ends = el.erac_ends;
  
  BEGIN
    BEGIN
      tblAccountBalanceTable.delete;
      -- > Looping through the cursor and building 
      -- > the Array to be returned.
      OPEN curElct;
      LOOP
        --FETCH curElct
        --  INTO rElectionBalance;
        EXIT WHEN curElct%NOTFOUND;
        tblAccountBalanceTable(rElectionBalance.elct_id) := rElectionBalance;
      END LOOP;
      IF curElct%ISOPEN THEN
        CLOSE curElct;
      END IF;
    
    EXCEPTION
      WHEN OTHERS THEN
        IF curElct%ISOPEN THEN
          CLOSE curElct;
        END IF;
        tblAccountBalanceTable.delete;
      
    END;
    --  PrintBalanceTable(tblAccountBalanceTable); -- needs to be removed later, this is for testing purpose
    RETURN tblAccountBalanceTable;
  
  END GetElectBalanceTableCumulative;

  FUNCTION GetElectBalanceCumulative(inEeId IN NUMBER) RETURN NUMBER IS
    tblAccountBalanceTable JRA_Type.tTab_AccountBalance;
    nElectionBalance       NUMBER := 0;
    nIndex                 NUMBER := 0;
    dclmSubmissionDt       DATE := NULL; --1.0.6
  
    --Start 1.0.6
    CURSOR curClmSubmsnDt IS
      SELECT eac.claim_submission_deadline
        FROM ee_account eac
       WHERE eac.actp_cd = cJRAAcctTypeCD
         AND eac.ee_id = inEeId;
    --End 1.0.6    
  BEGIN
    --Start 1.0.6
    FOR recFundngAcct IN curClmSubmsnDt LOOP
      dclmSubmissionDt := recFundngAcct.Claim_Submission_Deadline;
      EXIT;
    END LOOP;
  
    BEGIN
      IF (dclmSubmissionDt IS NOT NULL AND
         (dclmSubmissionDt < TRUNC(SYSDATE))) THEN
        nElectionBalance := 0;
      ELSE
        --End 1.0.6 
        tblAccountBalanceTable := GetElectBalanceTableCumulative(inEeId => inEeId);
        nIndex                 := tblAccountBalanceTable.FIRST;
        WHILE nIndex IS NOT NULL LOOP
          nElectionBalance := nElectionBalance + tblAccountBalanceTable(nIndex)
                             .available_balance;
          nIndex           := tblAccountBalanceTable.NEXT(nIndex);
        END LOOP;
      END IF; --1.0.6                     
    
    EXCEPTION
      WHEN OTHERS THEN
        nElectionBalance := 0;
    END;
    RETURN nElectionBalance;
  END GetElectBalanceCumulative;

  /******
   This procedure finds and returns election balance relevant information like roll in amount,
   roll out amount, total offset amount and total revocered amount by check.
  ******/
  /******
  Modified        Gaurav         05/16/2017      1.0.1
  ACC-10800: Modified the signature of procedure GetElctBalanceDtl to return the total_recovered_amt_by_chk
             value as well.
  ******/
  /******
  Modified        Gaurav         06/10/2017      1.0.2
  ACC-17548: Modified the signature of procedure GetElctBalanceDtl to return the total_adjustment_amt
             value as well.
  ******/
  PROCEDURE GetElctBalanceDtl(ocresult                 OUT VARCHAR2,
                              ocerrorcategory          OUT VARCHAR2,
                              onerrorcode              OUT NUMBER,
                              ocerrorarea              OUT VARCHAR2,
                              ocothermessage           OUT VARCHAR2,
                              inElctid                 IN NUMBER,
                              onRollInAmt              OUT NUMBER,
                              onRollOutAmt             OUT NUMBER,
                              onTotalOffsetAmt         OUT NUMBER,
                              onTotalRecoveredAmtByChk OUT NUMBER -- Added : 1.0.1
                             ,
                              onTotalAdjustmentAmt     OUT NUMBER -- Added 1.0.2
                              ) IS
    tblAccountBalanceTable JRA_Type.tTab_AccountBalance;
    cerrorarea             VARCHAR2(255);
    cunitname              VARCHAR2(255) := 'JRA_Account_Util.GetElctBalanceDtl';
    cversion               VARCHAR2(255) := '1.0.2'; -- Modified : 1.0.2
  BEGIN
    cerrorarea             := 'Getting Balance';
    tblAccountBalanceTable := GetElectBalanceTable(inElctId => inElctId);
    IF tblAccountBalanceTable.exists(inElctId) THEN
      onRollInAmt              := tblAccountBalanceTable(inElctId)
                                  .total_rollin_amt;
      onRollOutAmt             := tblAccountBalanceTable(inElctId)
                                  .total_rollout_amt;
      onTotalOffsetAmt         := tblAccountBalanceTable(inElctId)
                                  .total_offset_used_amt;
      onTotalRecoveredAmtByChk := tblAccountBalanceTable(inElctId)
                                  .total_recovered_amt_by_chk; -- Added : 1.0.1
      onTotalAdjustmentAmt     := tblAccountBalanceTable(inElctId)
                                  .total_adjustment_amt; -- Added : 1.0.2
    END IF;
    --> Return OK
    cerrorarea := 'ReturnOK';
    ocresult   := 'OK';
  EXCEPTION
    WHEN OTHERS THEN
      ocresult                 := 'ERROR';
      ocerrorcategory          := 'OTHER';
      onerrorcode              := 99999;
      ocerrorarea              := cerrorarea;
      ocothermessage           := cunitname || '(' || cversion || ')-' ||
                                  cerrorarea || ': ' || SQLERRM;
      onRollInAmt              := 0;
      onRollOutAmt             := 0;
      onTotalOffsetAmt         := 0;
      onTotalRecoveredAmtByChk := 0; -- Added : 1.0.1
      onTotalAdjustmentAmt     := 0; -- Added : 1.0.2
  END GetElctBalanceDtl;

  /*************************************************************
  -->Added By: Upendra    06/10/2016        1.0.1
  -->Story Id: ACC-9229
  -->This function will determine how much amount particular election 
  took from other elections and determine how much amount can be reverted.
  *************************************************************/
  FUNCTION GetElctBalanceSourceDetail(inElctId        IN NUMBER,
                                      inTotAvlBalance IN NUMBER)
    RETURN tTab_ElctOffsetDtl IS
  
    tblElctOffsetDtlTable tTab_ElctOffsetDtl := tTab_ElctOffsetDtl();
    rElctOffsetDtl        tRec_ElctOffsetDtl := tRec_ElctOffsetDtl(NULL,
                                                                   NULL,
                                                                   NULL,
                                                                   NULL);
  
    nTotalAvlBalance NUMBER := inTotAvlBalance;
    nAmt             NUMBER := 0;
  
    CURSOR curFundSrc IS
      SELECT eod.offset_id,
             eod.elct_by_id,
             SUM(eod.amt) - SUM(nvl(eod.reverted_amt, 0)) amt,
             0 reverted_amt
        FROM elct_offset_dtl eod, election el, offset_hdr oh --1.0.2
       WHERE eod.elct_id = inElctId
         AND eod.offset_id = oh.id --1.0.2
         AND oh.offset_type = 'Overpayment-Elct-By-Elct' --1.0.2
         AND eod.elct_by_id IS NOT NULL --1.0.2
         AND (nvl(eod.amt, 0) - nvl(eod.reverted_amt, 0)) > 0
            --AND eod.elct_id = el.id --1.0.7 Commented
         AND eod.elct_by_id = el.id --1.0.7 Added
      --GROUP BY el.election_effective, eod.offset_id, eod.elct_by_id --1.0.7 Commented
       GROUP BY eod.elct_id,
                oh.offset_on,
                eod.offset_id,
                el.election_effective,
                eod.elct_by_id --1.0.7
      HAVING SUM(eod.amt) != 0
      --ORDER BY el.election_effective, eod.offset_id, eod.elct_by_id; --1.0.7 Commented
       ORDER BY el.election_effective,
                eod.elct_by_id,
                oh.offset_on,
                eod.offset_id; --1.0.7
  BEGIN
    BEGIN
      OPEN curFundSrc;
      LOOP
        FETCH curFundSrc
          INTO rElctOffsetDtl.offset_id,
               rElctOffsetDtl.elct_id,
               rElctOffsetDtl.amt,
               rElctOffsetDtl.reverted_amt;
        EXIT WHEN curFundSrc%NOTFOUND;
        tblElctOffsetDtlTable.extend;
        IF nTotalAvlBalance > 0 THEN
          nAmt                        := least(nTotalAvlBalance,
                                               rElctOffsetDtl.amt);
          rElctOffsetDtl.reverted_amt := nAmt;
          nTotalAvlBalance            := nTotalAvlBalance - nAmt;
        ELSE
          EXIT;
        END IF;
        tblElctOffsetDtlTable(tblElctOffsetDtlTable.last) := rElctOffsetDtl;
      
      END LOOP;
      IF curFundSrc%ISOPEN THEN
        CLOSE curFundSrc;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        IF curFundSrc%ISOPEN THEN
          CLOSE curFundSrc;
        END IF;
        tblElctOffsetDtlTable.delete;
    END;
    RETURN tblElctOffsetDtlTable;
  END GetElctBalanceSourceDetail;

  --ACC-22427 --1.1.6 Starts
  FUNCTION CalcAvlblBalance(icEracActpCd       IN VARCHAR2,
                            inTotDepstAmt      IN NUMBER,
                            inTotRecovrAmt     IN NUMBER,
                            inTotPaidClmAmt    IN NUMBER,
                            inTotValidClmAmt   IN NUMBER,
                            inElctOvrpmtAmt    IN NUMBER,
                            inTotRollinAmt     IN NUMBER,
                            inTotRolloutAmt    IN NUMBER,
                            inTotAdjustmntAmt  IN NUMBER,
                            inTotOffsetUsedAmt IN NUMBER DEFAULT 0,
                            inTotClmOvrpmtAmt  IN NUMBER DEFAULT 0,
                            inElectedAmt       IN NUMBER DEFAULT 0,
                            inCarryoverAmt     IN NUMBER DEFAULT 0,
                            inCarryoverOutAmt  IN NUMBER DEFAULT 0,
                            icCalledFrom       IN VARCHAR2 DEFAULT 'Validation') --1.1.7
   RETURN NUMBER IS
    cEracActpCd       ELECTION.ERAC_ACTP_CD%TYPE := icEracActpCd;
    nTotDepstAmt      NUMBER := inTotDepstAmt;
    nTotRecovrAmt     NUMBER := inTotRecovrAmt;
    nTotPaidClmAmt    NUMBER := inTotPaidClmAmt;
    nTotValidClmAmt   NUMBER := inTotValidClmAmt;
    nElctOvrpmtAmt    NUMBER := COALESCE(inElctOvrpmtAmt, 0); --1.1.7
    nTotRollinAmt     NUMBER := inTotRollinAmt;
    nTotRolloutAmt    NUMBER := inTotRolloutAmt;
    nTotAdjustmntAmt  NUMBER := inTotAdjustmntAmt;
    nTotOffsetUsedAmt NUMBER := inTotOffsetUsedAmt;
    nTotClmOvrpmtAmt  NUMBER := inTotClmOvrpmtAmt;
    nElectedAmt       NUMBER := inElectedAmt;
    nCarryoverAmt     NUMBER := inCarryoverAmt;
    nCarryoverOutAmt  NUMBER := inCarryoverOutAmt;
    nAvlblBalance     NUMBER := 0;
  BEGIN
    IF cEracActpCd = cPRAAcctTypeCD THEN
      nAvlblBalance := ((COALESCE(nTotDepstAmt, 0) +
                       COALESCE(nTotRecovrAmt, 0) +
                       COALESCE(nTotRollinAmt, 0)) -
                       ((COALESCE(nTotValidClmAmt, 0) - nElctOvrpmtAmt) --1.1.7
                       + COALESCE(nTotRolloutAmt, 0) +
                       COALESCE(nTotAdjustmntAmt, 0)));
      --1.1.7 Starts
      IF icCalledFrom = 'Portal' THEN
        nAvlblBalance := nAvlblBalance - nElctOvrpmtAmt;
      END IF;
      --1.1.7 Ends
    ELSIF cEracActpCd = cJRAAcctTypeCD THEN
      nAvlblBalance := ((nvl(nTotDepstAmt, 0) + nvl(nTotRecovrAmt, 0) +
                       nvl(nTotRollinAmt, 0)) -
                       ((nvl(nTotPaidClmAmt, 0) +
                       nvl(nTotOffsetUsedAmt, 0)) +
                       NVL(nTotRolloutAmt, 0) + nvl(nTotAdjustmntAmt, 0)));
    END IF;
    RETURN nAvlblBalance;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;
  END CalcAvlblBalance;
  --ACC-22427 --1.1.6 Ends

  -- Starts : 1.1.8
  FUNCTION IsErSupportRolloverCap(inErId     IN NUMBER,
                                  icActpCd   IN VARCHAR2,
                                  inPlanYear IN NUMBER DEFAULT NULL)
    RETURN VARCHAR2 IS
    nErId     NUMBER := inErId;
    nPlanYear NUMBER := inPlanYear;
    cActpCd   VARCHAR2(20) := icActpCd;
  
    nBalanceRollBackLimitAmt NUMBER := NULL;
    nBalanceRolloverLimit    NUMBER := NULL;
  BEGIN
    IF nErId IS NULL OR cActpCd IS NULL THEN
      RETURN 'No';
    END IF;
  
    IF nPlanYear IS NOT NULL THEN
      SELECT ea.Balance_RollBack_Limit_Amt, ea.Balance_Rollover_Limit
        INTO nBalanceRollBackLimitAmt, nBalanceRolloverLimit
        FROM Employer_Account ea
       WHERE ea.er_id = nErId
         AND ea.actp_cd = cActpCd
         AND extract(YEAR FROM ea.begins) = nPlanYear;
    ELSE
      SELECT ea.Balance_RollBack_Limit_Amt, ea.Balance_Rollover_Limit
        INTO nBalanceRollBackLimitAmt, nBalanceRolloverLimit
        FROM Employer_Account ea
       WHERE ea.er_id = nErId
         AND ea.actp_cd = cActpCd
         AND extract(YEAR FROM ea.begins) IN
             (SELECT extract(YEAR FROM(MAX(begins)))
                FROM Employer_Account ea
               WHERE ea.er_id = nErId);
    END IF;
  
    IF nBalanceRollBackLimitAmt IS NULL AND nBalanceRolloverLimit IS NULL THEN
      RETURN 'No';
    ELSE
      RETURN 'Yes';
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'No';
  END IsErSupportRolloverCap;

  PROCEDURE GetRollbackCapLimit(ocResult           OUT VARCHAR2,
                                onRollbackLimitAmt OUT NUMBER,
                                onRollbackLimitPrd OUT NUMBER,
                                inErId             IN NUMBER,
                                icActpCd           IN VARCHAR2,
                                inPlanYear         IN NUMBER DEFAULT NULL) IS
  
    nErId             NUMBER := inErId;
    nPlanYear         NUMBER := inPlanYear;
    cActpCd           VARCHAR2(20) := icActpCd;
    rEmployerAcct     Employer_Account%ROWTYPE;
    nRollbackLimitAmt NUMBER;
    nRollbackLimitPrd NUMBER;
    eException EXCEPTION;
  BEGIN
    IF nErId IS NULL OR cActpCd IS NULL THEN
      RAISE eException;
    END IF;
  
    IF nPlanYear IS NOT NULL THEN
      SELECT ea.Balance_RollBack_Limit_Amt, ea.Balance_RollBack_Period
        INTO nRollbackLimitAmt, nRollbackLimitPrd
        FROM Employer_Account ea
       WHERE ea.er_id = nErId
         AND ea.actp_cd = cActpCd
         AND extract(YEAR FROM ea.begins) = nPlanYear
         AND ea.Balance_RollBack_Allow_Flag = 'Yes';
    ELSE
      SELECT ea.Balance_RollBack_Limit_Amt, ea.Balance_RollBack_Period
        INTO nRollbackLimitAmt, nRollbackLimitPrd
        FROM Employer_Account ea
       WHERE ea.er_id = nErId
         AND ea.actp_cd = cActpCd
         AND extract(YEAR FROM ea.begins) IN
             (SELECT extract(YEAR FROM(MAX(begins)))
                FROM Employer_Account ea
               WHERE ea.er_id = nErId)
         AND ea.Balance_RollBack_Allow_Flag = 'Yes';
    END IF;
  
    onRollbackLimitAmt := nRollbackLimitAmt;
    onRollbackLimitPrd := nRollbackLimitPrd;
  
  EXCEPTION
    WHEN eException THEN
      nRollbackLimitAmt := 0;
      nRollbackLimitPrd := 0;
    
    WHEN OTHERS THEN
      nRollbackLimitAmt := 0;
      nRollbackLimitPrd := 0;
  END GetRollbackCapLimit;

  /*PROCEDURE FetchBalanceFromPrevYear(onTotalAllocatedAmount OUT NUMBER,
                                     ocResult               OUT VARCHAR2,
                                     otblFundSourceTable    OUT JRA_Type.tTab_FundSource,
                                     inElctId               IN NUMBER DEFAULT NULL,
                                     inClmAmt               IN NUMBER DEFAULT NULL,
                                     itblBalanceTable       IN JRA_Type.tTab_AccountBalance,
                                     itblClaimTable         IN JRA_Type.tTab_ClaimDetail) IS
  
    cResult            VARCHAR2(255);
    nRemainingClmAmt   NUMBER := inClmAmt;
    nRollbackLimitAmt  NUMBER;
    nRollbackLimitPrd  NUMBER;
    rElection          Election%ROWTYPE;
    nDiff              NUMBER;
    nElctId            NUMBER := inElctId;
    nPlanYearCount     NUMBER;
    nAvailableBal      NUMBER;
    rElectionBalance   JRA_Type.tRec_ElectionBalance;
    rFundSource        JRA_Type.tRec_FundSource;
    tblBalanceTableObj ttab_accountbalance;
    tblBalanceTable    JRA_Type.tTab_AccountBalance := itblBalanceTable;
  BEGIN
  
    tblBalanceTableObj := GetObjectTypeBalanceTblInOrder(tblBalanceTable,
                                                         'LIFO',
                                                         'RHRA');
    nFndSrcIndx        := tblBalanceTableObj.first;
    WHILE nFndSrcIndx IS NOT NULL LOOP
      rElectionBalance := tblBalanceTable(tblBalanceTableObj(nFndSrcIndx)
                                          .elct_id);
      IF rElectionBalance.elct_id = nElctId THEN
        -- we will exclude own election
        nFndSrcIndx := tblBalanceTableObj.next(nFndSrcIndx);
        CONTINUE;
      END IF;
    
      SELECT el.erac_er_id, el.erac_Actp_cd, el.erac_ends
        INTO rElection.Erac_Er_Id,
             rElection.Erac_Actp_Cd,
             rElection.Erac_Ends
        FROM election el
       WHERE el.id = rElectionBalance.elct_id;
      \*
      -> Checks if CapLimit > 0
      -> Fetch RemClmAmt = MIN(ClmAmt,CapLimit)
      -> Checks if RemClmAmt <= Balance of Prev Year election
      -> Populates the FundSource collection.
      -> Updates the RemClmAmt
      -> Check if RemClmAmt > 0
      -> Call again FetchBalanceFromPrevYear for immediate previous year. This steps will done reclusively till either CapLimit > 0  or RemClmAmt > 0.
      *\
      GetRollbackCapLimit(ocResult           => cResult,
                          onRollbackLimitAmt => nRollbackLimitAmt,
                          onRollbackLimitPrd => nRollbackLimitPrd,
                          inErId             => rElection.Erac_Er_Id,
                          icActpCd           => rElection.Erac_Actp_Cd,
                          inPlanYear         => extract(YEAR FROM
                                                        rElection.Erac_Ends));
    
      IF nRollbackLimitAmt > 0 THEN
        nRemainingClmAmt := least(nRemainingClmAmt, nRollbackLimitAmt);
      
        IF nRemainingClmAmt <= rElectionBalance.available_balance THEN
          rFundSource.amt := nRemainingClmAmt;
          tblFundSourceTable(rElectionBalance.elct_id) := rFundSource;
          nTotalAllocatedAmt := nTotalAllocatedAmt + nRemainingClmAmt;
          nRemainingClmAmt := nRemainingClmAmt -
                              rElectionBalance.available_balance;
        END IF;
        IF nRemainingClmAmt <= 0 THEN
          EXIT;
        END IF;
      ELSE
        EXIT;
      END IF;
    
    END LOOP;
  
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END FetchBalanceFromPrevYear;
  */-- Ends : 1.1.8
END JRA_Account_Util;







=======================================================================================================================================================================


CREATE OR REPLACE PACKAGE GetActionNeededPortalRules3 AUTHID DEFINER IS

  -- Author  : Mainak Ghosh
  -- Created : 03/17/2017
  -- Purpose : To display different notification for Portal 3.0

  PROCEDURE processActionNeededPortalRules(ocresult          OUT VARCHAR2,
                                           ocerrorcategory   OUT VARCHAR2,
                                           onerrorcode       OUT NUMBER,
                                           ocErrorArea       OUT VARCHAR2,
                                           ocothermessage    OUT VARCHAR2,
                                           ottabNotification OUT ttab_notification,
                                           ------------
                                           inEe_Id    IN Employee.Id%TYPE,
                                           icRuleType IN rules.rule_type%TYPE,
                                           ------------
                                           icUserName IN VARCHAR2 DEFAULT 'System');

  FUNCTION VALIDATE_RULES(ocresult        OUT VARCHAR2,
                          ocerrorcategory OUT VARCHAR2,
                          onerrorcode     OUT NUMBER,
                          ocErrorArea     OUT VARCHAR2,
                          ocothermessage  OUT VARCHAR2,
                          --------------
                          inAdmin_Id         IN Administrator.Id%TYPE,
                          inEr_Id            IN Employer.Id%TYPE,
                          inEe_Id            IN Employee.Id%TYPE,
                          icUserName         IN VARCHAR2,
                          icAchAcct          IN VARCHAR2,
                          icAchISO           IN VARCHAR2,
                          icIsAchValid       IN VARCHAR2,
                          icDebitCardStatus  IN VARCHAR2,
                          icEmail            IN VARCHAR2,
                          icIsAddressInValid IN VARCHAR2,
                          icRuleType         IN rules.rule_type%TYPE)
    RETURN ttab_notification;

  -----------------Rules-------------------------------------

  PROCEDURE RecReqForDBCardsClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdmin_Id         NUMBER,
                                   inEr_Id            NUMBER,
                                   inEe_Id            NUMBER,
                                   icUserName         VARCHAR2,
                                   icAchAcct          VARCHAR2,
                                   icAchISO           VARCHAR2,
                                   icIsAchValid       VARCHAR2,
                                   icDebitCardStatus  VARCHAR2,
                                   icEmail            VARCHAR2,
                                   icIsAddressInValid VARCHAR2,
                                   icSeverity         VARCHAR2,
                                   inPriority         NUMBER,
                                   icRuleType         VARCHAR2);

  PROCEDURE NotApprovedClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                              inAdmin_Id         NUMBER,
                              inEr_Id            NUMBER,
                              inEe_Id            NUMBER,
                              icUserName         VARCHAR2,
                              icAchAcct          VARCHAR2,
                              icAchISO           VARCHAR2,
                              icIsAchValid       VARCHAR2,
                              icDebitCardStatus  VARCHAR2,
                              icEmail            VARCHAR2,
                              icIsAddressInValid VARCHAR2,
                              icSeverity         VARCHAR2,
                              inPriority         NUMBER,
                              icRuleType         VARCHAR2);

  PROCEDURE LostOrStolenDebitCard(ottabNotification  IN OUT NOCOPY ttab_notification,
                                  inAdmin_Id         NUMBER,
                                  inEr_Id            NUMBER,
                                  inEe_Id            NUMBER,
                                  icUserName         VARCHAR2,
                                  icAchAcct          VARCHAR2,
                                  icAchISO           VARCHAR2,
                                  icIsAchValid       VARCHAR2,
                                  icDebitCardStatus  VARCHAR2,
                                  icEmail            VARCHAR2,
                                  icIsAddressInValid VARCHAR2,
                                  icSeverity         VARCHAR2,
                                  inPriority         NUMBER,
                                  icRuleType         VARCHAR2);

  PROCEDURE InvalidatedBankAccounts(ottabNotification  IN OUT NOCOPY ttab_notification,
                                    inAdmin_Id         NUMBER,
                                    inEr_Id            NUMBER,
                                    inEe_Id            NUMBER,
                                    icUserName         VARCHAR2,
                                    icAchAcct          VARCHAR2,
                                    icAchISO           VARCHAR2,
                                    icIsAchValid       VARCHAR2,
                                    icDebitCardStatus  VARCHAR2,
                                    icEmail            VARCHAR2,
                                    icIsAddressInValid VARCHAR2,
                                    icSeverity         VARCHAR2,
                                    inPriority         NUMBER,
                                    icRuleType         VARCHAR2);

  PROCEDURE RetireeMissingACH(ottabNotification  IN OUT NOCOPY ttab_notification,
                              inAdmin_Id         NUMBER,
                              inEr_Id            NUMBER,
                              inEe_Id            NUMBER,
                              icUserName         VARCHAR2,
                              icAchAcct          VARCHAR2,
                              icAchISO           VARCHAR2,
                              icIsAchValid       VARCHAR2,
                              icDebitCardStatus  VARCHAR2,
                              icEmail            VARCHAR2,
                              icIsAddressInValid VARCHAR2,
                              icSeverity         VARCHAR2,
                              inPriority         NUMBER,
                              icRuleType         VARCHAR2);

  PROCEDURE GetNotPaidPassThruClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                     inAdmin_Id         NUMBER,
                                     inEr_Id            NUMBER,
                                     inEe_Id            NUMBER,
                                     icUserName         VARCHAR2,
                                     icAchAcct          VARCHAR2,
                                     icAchISO           VARCHAR2,
                                     icIsAchValid       VARCHAR2,
                                     icDebitCardStatus  VARCHAR2,
                                     icEmail            VARCHAR2,
                                     icIsAddressInValid VARCHAR2,
                                     icSeverity         VARCHAR2,
                                     inPriority         NUMBER,
                                     icRuleType         VARCHAR2);

  PROCEDURE UnCashedChequePaymentTrxn(ottabNotification  IN OUT NOCOPY ttab_notification,
                                      inAdmin_Id         NUMBER,
                                      inEr_Id            NUMBER,
                                      inEe_Id            NUMBER,
                                      icUserName         VARCHAR2,
                                      icAchAcct          VARCHAR2,
                                      icAchISO           VARCHAR2,
                                      icIsAchValid       VARCHAR2,
                                      icDebitCardStatus  VARCHAR2,
                                      icEmail            VARCHAR2,
                                      icIsAddressInValid VARCHAR2,
                                      icSeverity         VARCHAR2,
                                      inPriority         NUMBER,
                                      icRuleType         VARCHAR2);

  PROCEDURE AddlRecptReqForDBCardsClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                         inAdmin_Id         NUMBER,
                                         inEr_Id            NUMBER,
                                         inEe_Id            NUMBER,
                                         icUserName         VARCHAR2,
                                         icAchAcct          VARCHAR2,
                                         icAchISO           VARCHAR2,
                                         icIsAchValid       VARCHAR2,
                                         icDebitCardStatus  VARCHAR2,
                                         icEmail            VARCHAR2,
                                         icIsAddressInValid VARCHAR2,
                                         icSeverity         VARCHAR2,
                                         inPriority         NUMBER,
                                         icRuleType         VARCHAR2);

  PROCEDURE OverpaymentClaim(ottabNotification  IN OUT NOCOPY ttab_notification,
                             inAdmin_Id         IN NUMBER,
                             inEr_Id            IN NUMBER,
                             inEe_Id            IN NUMBER,
                             icUserName         IN VARCHAR2,
                             icAchAcct          IN VARCHAR2,
                             icAchISO           IN VARCHAR2,
                             icIsAchValid       IN VARCHAR2,
                             icDebitCardStatus  IN VARCHAR2,
                             icEmail            IN VARCHAR2,
                             icIsAddressInValid IN VARCHAR2,
                             icSeverity         IN VARCHAR2,
                             inPriority         IN NUMBER,
                             icRuleType         VARCHAR2);

  PROCEDURE DirectDepositFailed(ottabNotification  IN OUT NOCOPY ttab_notification,
                                inAdmin_Id         IN NUMBER,
                                inEr_Id            IN NUMBER,
                                inEe_Id            IN NUMBER,
                                icUserName         IN VARCHAR2,
                                icAchAcct          IN VARCHAR2,
                                icAchISO           IN VARCHAR2,
                                icIsAchValid       IN VARCHAR2,
                                icDebitCardStatus  IN VARCHAR2,
                                icEmail            IN VARCHAR2,
                                icIsAddressInValid IN VARCHAR2,
                                icSeverity         IN VARCHAR2,
                                inPriority         IN NUMBER,
                                icRuleType         VARCHAR2);

  PROCEDURE AddBeneficiaries(ottabNotification  IN OUT NOCOPY ttab_notification,
                             inAdmin_Id         IN NUMBER,
                             inEr_Id            IN NUMBER,
                             inEe_Id            IN NUMBER,
                             icUserName         IN VARCHAR2,
                             icAchAcct          IN VARCHAR2,
                             icAchISO           IN VARCHAR2,
                             icIsAchValid       IN VARCHAR2,
                             icDebitCardStatus  IN VARCHAR2,
                             icEmail            IN VARCHAR2,
                             icIsAddressInValid IN VARCHAR2,
                             icSeverity         IN VARCHAR2,
                             inPriority         IN NUMBER,
                             icRuleType         VARCHAR2);

  PROCEDURE DBCardTurnedOff(ottabNotification  IN OUT NOCOPY ttab_notification,
                            inAdmin_Id         IN NUMBER,
                            inEr_Id            IN NUMBER,
                            inEe_Id            IN NUMBER,
                            icUserName         IN VARCHAR2,
                            icAchAcct          IN VARCHAR2,
                            icAchISO           IN VARCHAR2,
                            icIsAchValid       IN VARCHAR2,
                            icDebitCardStatus  IN VARCHAR2,
                            icEmail            IN VARCHAR2,
                            icIsAddressInValid IN VARCHAR2,
                            icSeverity         IN VARCHAR2,
                            inPriority         IN NUMBER,
                            icRuleType         VARCHAR2);

  PROCEDURE MissingEmail(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2);

  PROCEDURE EnrollOnline(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2);

  PROCEDURE UpdateMailingAddress(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2);

  PROCEDURE CompleteAccountOpening(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdminId          IN NUMBER,
                                   inErId             IN NUMBER,
                                   inEeId             IN NUMBER,
                                   icUserName         IN VARCHAR2,
                                   icAchAcct          IN VARCHAR2,
                                   icAchISO           IN VARCHAR2,
                                   icIsAchValid       IN VARCHAR2,
                                   icDebitCardStatus  IN VARCHAR2,
                                   icEmail            IN VARCHAR2,
                                   icIsAddressInValid IN VARCHAR2,
                                   icSeverity         IN VARCHAR2,
                                   inPriority         IN NUMBER,
                                   icRuleType         VARCHAR2);

  PROCEDURE ResolveReceiptReqdAct(ottabNotification  IN OUT NOCOPY ttab_notification,
                                  inAdminId          IN NUMBER,
                                  inErId             IN NUMBER,
                                  inEeId             IN NUMBER,
                                  icUserName         IN VARCHAR2,
                                  icAchAcct          IN VARCHAR2,
                                  icAchISO           IN VARCHAR2,
                                  icIsAchValid       IN VARCHAR2,
                                  icDebitCardStatus  IN VARCHAR2,
                                  icEmail            IN VARCHAR2,
                                  icIsAddressInValid IN VARCHAR2,
                                  icSeverity         IN VARCHAR2,
                                  inPriority         IN NUMBER,
                                  icRuleType         IN VARCHAR2);

  PROCEDURE RunOutOfTimeToUseBalanceCY(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         IN NUMBER,
                                       inEr_Id            IN NUMBER,
                                       inEe_Id            IN NUMBER,
                                       icUserName         IN VARCHAR2,
                                       icAchAcct          IN VARCHAR2,
                                       icAchISO           IN VARCHAR2,
                                       icIsAchValid       IN VARCHAR2,
                                       icDebitCardStatus  IN VARCHAR2,
                                       icEmail            IN VARCHAR2,
                                       icIsAddressInValid IN VARCHAR2,
                                       icSeverity         IN VARCHAR2,
                                       inPriority         IN NUMBER,
                                       icRuleType         VARCHAR2);

  PROCEDURE RunOutOfTimeToUseBalancePY(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         IN NUMBER,
                                       inEr_Id            IN NUMBER,
                                       inEe_Id            IN NUMBER,
                                       icUserName         IN VARCHAR2,
                                       icAchAcct          IN VARCHAR2,
                                       icAchISO           IN VARCHAR2,
                                       icIsAchValid       IN VARCHAR2,
                                       icDebitCardStatus  IN VARCHAR2,
                                       icEmail            IN VARCHAR2,
                                       icIsAddressInValid IN VARCHAR2,
                                       icSeverity         IN VARCHAR2,
                                       inPriority         IN NUMBER,
                                       icRuleType         VARCHAR2);

  PROCEDURE CashBalanceThreshold(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2);

  PROCEDURE UnderStandingAccount(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2);

  PROCEDURE GetMobileApp(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2);

  PROCEDURE ExcessContribCheck(ottabNotification  IN OUT NOCOPY ttab_notification,
                               inAdmin_Id         NUMBER,
                               inEr_Id            NUMBER,
                               inEe_Id            NUMBER,
                               icUserName         VARCHAR2,
                               icAchAcct          VARCHAR2,
                               icAchISO           VARCHAR2,
                               icIsAchValid       VARCHAR2,
                               icDebitCardStatus  VARCHAR2,
                               icEmail            VARCHAR2,
                               icIsAddressInValid VARCHAR2,
                               icSeverity         VARCHAR2,
                               inPriority         NUMBER,
                               icRuleType         VARCHAR2);

  PROCEDURE ExpiredCheck(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         NUMBER,
                         inEr_Id            NUMBER,
                         inEe_Id            NUMBER,
                         icUserName         VARCHAR2,
                         icAchAcct          VARCHAR2,
                         icAchISO           VARCHAR2,
                         icIsAchValid       VARCHAR2,
                         icDebitCardStatus  VARCHAR2,
                         icEmail            VARCHAR2,
                         icIsAddressInValid VARCHAR2,
                         icSeverity         VARCHAR2,
                         inPriority         NUMBER,
                         icRuleType         VARCHAR2);
           
  PROCEDURE PortalBlocker(ottabNotification  IN OUT NOCOPY ttab_notification,
           inAdmin_Id         NUMBER,
           inEr_Id            NUMBER,
           inEe_Id            NUMBER,
           icUserName         VARCHAR2,
           icAchAcct          VARCHAR2,
           icAchISO           VARCHAR2,
           icIsAchValid       VARCHAR2,
           icDebitCardStatus  VARCHAR2,
           icEmail            VARCHAR2,
           icIsAddressInValid VARCHAR2,
           icSeverity         VARCHAR2,
           inPriority         NUMBER,
           icRuleType         VARCHAR2);         

  PROCEDURE ElectionOverpayment(ottabNotification  IN OUT NOCOPY ttab_notification,
                                inAdmin_Id         IN NUMBER,
                                inEr_Id            IN NUMBER,
                                inEe_Id            IN NUMBER,
                                icUserName         IN VARCHAR2,
                                icAchAcct          IN VARCHAR2,
                                icAchISO           IN VARCHAR2,
                                icIsAchValid       IN VARCHAR2,
                                icDebitCardStatus  IN VARCHAR2,
                                icEmail            IN VARCHAR2,
                                icIsAddressInValid IN VARCHAR2,
                                icSeverity         IN VARCHAR2,
                                inPriority         IN NUMBER,
                                icRuleType         VARCHAR2);

  bIsJRA VARCHAR2(3);

END GetActionNeededPortalRules3;
/
CREATE OR REPLACE PACKAGE BODY GetActionNeededPortalRules3 IS
  /*****************************************************************
   Activity             By              On                Version
   *****************************************************************
   Created          Mainak Ghosh      03/17/2017           1.0.0
   Jira:            PORTAL-332
  ******************************************************************/

  PROCEDURE processActionNeededPortalRules(ocresult          OUT VARCHAR2,
                                         ocerrorcategory   OUT VARCHAR2,
                                         onerrorcode       OUT NUMBER,
                                         ocErrorArea       OUT VARCHAR2,
                                         ocothermessage    OUT VARCHAR2,
                                         ottabNotification OUT ttab_notification,
                                         ------------
                                         inEe_Id    IN Employee.Id%TYPE,
                                         icRuleType IN rules.rule_type%TYPE,
                                         ------------
                                         icUserName IN VARCHAR2 DEFAULT 'System') IS

  -- Standard Variables
  cunitname      VARCHAR2(255) := 'GetActionNeededPortalRules3.processActionNeededPortalRules';
  cversion       VARCHAR2(255) := '1.0.0';
  cresult        VARCHAR2(255) := 'ERROR';
  cerrorcategory VARCHAR2(255) := 'OTHER';
  nerrorcode     NUMBER := 99999;
  cerrorarea     VARCHAR2(3200) := 'Init';

  -- Unit specific Variables
  nAdmin_Id         Administrator.Id%TYPE;
  nEe_Id            Employee.Id%TYPE;
  nEr_Id            Employer.Id%TYPE;
  cUserName         Login.user_name%TYPE;
  cAchAcct          Employee.Ach_Acct%TYPE;
  cAchISO           Employee.Ach_Iso%TYPE;
  cIsAchValid       Employee.Is_Ach_Valid%TYPE;
  cDebitCardStatus  Employee.Debit_Card_Status%TYPE;
  cEmail            Employee.Email%TYPE;
  cIsAddressInValid Employee.is_address_invalid%TYPE;
  cRuleType         rules.rule_type%TYPE := coalesce(icRuleType, 'NA');
  eInvalidInput EXCEPTION;
BEGIN
  ocErrorArea := 'Get UserName';
  cUserName   := icUserName;

  ocErrorArea := 'Validate Ee. Id. for NULL';
  IF coalesce(inEe_Id, 0) = 0 THEN
    ocOtherMessage := 'Participant Id. cannot be blank';
    RAISE eInvalidInput;
  END IF;

  ocErrorArea := 'Get Admin and Er Id.';
  BEGIN
    SELECT er.admn_id, ee.pycl_er_id
      INTO nAdmin_Id, nEr_Id
      FROM employee ee, employer er
     WHERE ee.id = inEe_Id
       AND ee.pycl_er_id = er.id;
  EXCEPTION
    WHEN OTHERS THEN
      ocOtherMessage := 'Admin/Employer can not be found.';
      RAISE eInvalidInput;
  END;

  ocErrorArea := 'Validate Admin Id';
  IF coalesce(nAdmin_Id, 0) = 0 THEN
    ocOtherMessage := 'Admin Id. cannot be blank';
    RAISE eInvalidInput;
  END IF;

  ocErrorArea := 'Validate Er. Id';
  IF coalesce(nEr_Id, 0) = 0 THEN
    ocOtherMessage := 'Employer Id. cannot be blank';
    RAISE eInvalidInput;
  END IF;

  ocErrorArea := 'Get Employee';
  FOR rec_ee IN (SELECT * FROM employee WHERE id = inEe_Id) LOOP
    nEe_Id            := rec_ee.id;
    cAchAcct          := rec_ee.ach_acct;
    cAchISO           := rec_ee.ach_iso;
    cIsAchValid       := rec_ee.is_ach_valid;
    cDebitCardStatus  := rec_ee.debit_card_status;
    cEmail            := rec_ee.email;
    cIsAddressInValid := rec_ee.is_address_invalid;
    EXIT;
  END LOOP;

  bIsJRA := jra_account_util.isJRA(inEe_Id);
  
  ocErrorArea       := 'Calling VALIDATE_RULES function';
  ottabNotification := VALIDATE_RULES(ocresult        => cresult,
                                      ocerrorcategory => cerrorcategory,
                                      onerrorcode     => nerrorcode,
                                      ocErrorArea     => cErrorArea,
                                      ocothermessage  => ocothermessage,
                                      --------------
                                      inAdmin_Id         => nAdmin_Id,
                                      inEr_Id            => nEr_Id,
                                      inEe_Id            => nEe_Id,
                                      icUserName         => cUserName,
                                      icAchAcct          => cAchAcct,
                                      icAchISO           => cAchISO,
                                      icIsAchValid       => cIsAchValid,
                                      icDebitCardStatus  => cDebitCardStatus,
                                      icEmail            => cEmail,
                                      icIsAddressInValid => cIsAddressInValid,
                                      icRuleType         => cRuleType);

  IF UPPER(cresult) <> 'OK' THEN
    RAISE eInvalidInput;
  END IF;

  ocerrorarea    := 'ReturnOK';
  ocresult       := 'OK';
  ocothermessage := 'Successful';

EXCEPTION
  WHEN eInvalidInput THEN
    ocresult        := cResult;
    ocerrorcategory := coalesce(ocErrorCategory, cErrorCategory);
    onerrorcode     := coalesce(onErrorCode, nErrorCode);
    IF coalesce(ocErrorArea, 'ReturnOK') != 'ReturnOK' THEN
      ocErrorArea := ocErrorArea || ':' || cErrorArea || '-' || cUnitName || '-' ||
                     cVersion;
    ELSE
      ocErrorArea := ocErrorArea || cUnitName || '-' || cVersion;
    END IF;
    ocothermessage := substr(ocOtherMessage || ' : ' || SQLERRM, 1, 4000);
  
  WHEN OTHERS THEN
    ocresult        := cResult;
    ocerrorcategory := coalesce(ocErrorCategory, cErrorCategory);
    onerrorcode     := coalesce(onErrorCode, nErrorCode);
    IF coalesce(ocErrorArea, 'ReturnOK') != 'ReturnOK' THEN
      ocErrorArea := ocErrorArea || ':' || cErrorArea || '-' || cUnitName || '-' ||
                     cVersion;
    ELSE
      ocErrorArea := ocErrorArea || cUnitName || '-' || cVersion;
    END IF;
    ocothermessage := substr(ocOtherMessage || ' : ' || SQLERRM, 1, 4000);
END processActionNeededPortalRules;

  --------------------------------------------------------------------------------------------------------
  FUNCTION VALIDATE_RULES(ocresult        OUT VARCHAR2,
                          ocerrorcategory OUT VARCHAR2,
                          onerrorcode     OUT NUMBER,
                          ocErrorArea     OUT VARCHAR2,
                          ocothermessage  OUT VARCHAR2,
                          --------------
                          inAdmin_Id         IN Administrator.Id%TYPE,
                          inEr_Id            IN Employer.Id%TYPE,
                          inEe_Id            IN Employee.Id%TYPE,
                          icUserName         IN VARCHAR2,
                          icAchAcct          IN VARCHAR2,
                          icAchISO           IN VARCHAR2,
                          icIsAchValid       IN VARCHAR2,
                          icDebitCardStatus  IN VARCHAR2,
                          icEmail            IN VARCHAR2,
                          icIsAddressInValid IN VARCHAR2,
                          icRuleType         IN rules.rule_type%TYPE)
    RETURN ttab_notification IS

    --Standard Variables
    cunitname      VARCHAR2(255) := 'GetActionNeededPortalRules3.VALIDATE_RULES';
    cversion       VARCHAR2(255) := '1.0.0';
    cresult        VARCHAR2(255) := 'ERROR';
    cerrorcategory VARCHAR2(255) := 'OTHER';
    nerrorcode     NUMBER := 99999;
    cerrorarea     VARCHAR2(3200) := 'Init';

    CURSOR cur_Rule IS
      SELECT r.Id rules_Id,
             r.rule_name,
             r.rule_code,
             r.rule_type,
             r.fail_text_label,
             r.fail_text,
             epr.is_mandatory,
             epr.priority,
             epr.severity,
             epr.image_path
        FROM rules r, er_admin_rules epr
       WHERE r.id = epr.rules_id
         AND r.portal_layout = 'EEHOME3'
         AND r.rule_type = icRuleType
         AND epr.admin_id = inAdmin_Id
         AND epr.is_mandatory = 'Yes'
       ORDER BY epr.priority;

    CURSOR cur_Rule_super_admin IS
      SELECT r.Id rules_Id,
             r.rule_name,
             r.rule_code,
             r.rule_type,
             r.fail_text_label,
             r.fail_text,
             epr.is_mandatory,
             epr.priority,
             epr.severity,
             epr.image_path
        FROM rules r, er_admin_rules epr, administrator a
       WHERE r.id = epr.rules_id
         AND r.portal_layout = 'EEHOME3'
         AND r.rule_type = icRuleType
         AND epr.admin_id = a.id
         AND a.is_super_admin = 'Yes'
         AND epr.is_mandatory = 'Yes'
       ORDER BY epr.priority;

    CURSOR cur_Rule_exp IS
      SELECT r.Id rules_Id,
             r.rule_name,
             r.rule_code,
             r.rule_type,
             r.fail_text_label,
             r.fail_text,
             epr.is_mandatory,
             epr.priority,
             epr.severity,
             epr.image_path
        FROM rules r, er_admin_exception_rules epr
       WHERE r.id = epr.rules_id
         AND r.portal_layout = 'EEHOME3'
         AND r.rule_type = icRuleType
         AND epr.er_id = inEr_Id
         AND epr.is_mandatory = 'Yes'
       ORDER BY epr.priority;

    cRule VARCHAR2(32000);
    eException EXCEPTION;
    bIsException     BOOLEAN := FALSE;
    cSeverity        er_admin_rules.severity%TYPE;
    nPriority        er_admin_rules.priority%TYPE;
    cRuleType        rules.rule_type%TYPE;
    ttabNotification ttab_notification := ttab_notification();

  BEGIN

    ocErrorArea  := 'Calling rule engine for Exceptional Er. Setup';
    bIsException := FALSE;
    FOR rec_Rule_exp IN cur_Rule_exp LOOP
      bIsException := TRUE;
      cRule        := rec_Rule_exp.rule_code;
      cSeverity    := rec_Rule_exp.Severity;
      nPriority    := rec_rule_exp.priority;
      cRuleType    := rec_rule_exp.rule_type;

      ocErrorArea := 'Executing rule ' || cRule;
      EXECUTE IMMEDIATE 'BEGIN ' || cRule || '(' || ':ttabNotification,' ||
                        ':inAdmin_Id,' || ':inEr_Id,' || ':inEe_Id, ' ||
                        ':icUserName, ' || ':icAchAcct, ' || ':icAchISO, ' ||
                        ':icIsAchValid, ' || ':icDebitCardStatus, ' ||
                        ':icEmail, ' || ':icIsAddressInValid, ' ||
                        ':cSeverity, ' || ':nPriority, ' || ':cRuleType' ||
                        '); END;'

        USING IN OUT ttabNotification, IN inAdmin_Id, IN inEr_Id, IN inEe_Id, IN icUserName, IN icAchAcct, IN icAchISO, IN icIsAchValid, IN icDebitCardStatus, IN icEmail, IN icIsAddressInValid, IN cSeverity, IN nPriority, IN cRuleType;

    END LOOP;

    ocErrorArea := 'Calling rule engine for Normal Er. Setup';
    IF NOT bIsException THEN
      FOR rec_Rule IN cur_Rule LOOP
        bIsException := TRUE;
        cRule        := rec_Rule.rule_code;
        cSeverity    := rec_rule.severity;
        nPriority    := rec_rule.priority;
        cRuleType    := rec_rule.rule_type;

        ocErrorArea := 'Executing rule ' || cRule;
        EXECUTE IMMEDIATE 'BEGIN ' || cRule || '(' || ':ttabNotification,' ||
                          ':inAdmin_Id,' || ':inEr_Id,' || ':inEe_Id, ' ||
                          ':icUserName, ' || ':icAchAcct, ' ||
                          ':icAchISO, ' || ':icIsAchValid, ' ||
                          ':icDebitCardStatus, ' || ':icEmail, ' ||
                          ':icIsAddressInValid, ' || ':cSeverity, ' ||
                          ':nPriority, ' || ':cRuleType' || '); END;'

          USING IN OUT ttabNotification, IN inAdmin_Id, IN inEr_Id, IN inEe_Id, IN icUserName, IN icAchAcct, IN icAchISO, IN icIsAchValid, IN icDebitCardStatus, IN icEmail, IN icIsAddressInValid, IN cSeverity, IN nPriority, IN cRuleType;

      END LOOP;
    END IF;

    IF NOT bIsException THEN
      FOR rec_Rule IN cur_Rule_super_admin LOOP
        cRule     := rec_Rule.rule_code;
        cSeverity := rec_rule.severity;
        nPriority := rec_rule.priority;
        cRuleType := rec_rule.rule_type;

        ocErrorArea := 'Executing rule ' || cRule;
        EXECUTE IMMEDIATE 'BEGIN ' || cRule || '(' || ':ttabNotification,' ||
                          ':inAdmin_Id,' || ':inEr_Id,' || ':inEe_Id, ' ||
                          ':icUserName, ' || ':icAchAcct, ' ||
                          ':icAchISO, ' || ':icIsAchValid, ' ||
                          ':icDebitCardStatus, ' || ':icEmail, ' ||
                          ':icIsAddressInValid, ' || ':cSeverity, ' ||
                          ':nPriority, ' || ':cRuleType' || '); END;'

          USING IN OUT ttabNotification, IN inAdmin_Id, IN inEr_Id, IN inEe_Id, IN icUserName, IN icAchAcct, IN icAchISO, IN icIsAchValid, IN icDebitCardStatus, IN icEmail, IN icIsAddressInValid, IN cSeverity, IN nPriority, IN cRuleType;

      END LOOP;
    END IF;

    RETURN ttabNotification;

  EXCEPTION
    WHEN eException THEN
      ocresult        := cResult;
      ocerrorcategory := coalesce(ocErrorCategory, cErrorCategory);
      onerrorcode     := coalesce(onErrorCode, nErrorCode);
      IF coalesce(ocErrorArea, 'ReturnOK') != 'ReturnOK' THEN
        ocErrorArea := ocErrorArea || ':' || cErrorArea || '-' || cUnitName || '-' ||
                       cVersion;
      ELSE
        ocErrorArea := ocErrorArea || cUnitName || '-' || cVersion;
      END IF;

      ocothermessage := substr(ocOtherMessage || ' : ' || SQLERRM, 1, 4000);

      RETURN NULL;

    WHEN OTHERS THEN
      ocresult        := cResult;
      ocerrorcategory := coalesce(ocErrorCategory, cErrorCategory);
      onerrorcode     := coalesce(onErrorCode, nErrorCode);
      IF coalesce(ocErrorArea, 'ReturnOK') != 'ReturnOK' THEN
        ocErrorArea := ocErrorArea || ':' || cErrorArea || '-' || cUnitName || '-' ||
                       cVersion;
      ELSE
        ocErrorArea := ocErrorArea || cUnitName || '-' || cVersion;
      END IF;

      ocothermessage := substr(ocOtherMessage || ' : ' || SQLERRM, 1, 4000);

      RETURN NULL;
  END VALIDATE_RULES;

  PROCEDURE RecReqForDBCardsClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         NUMBER,
                                 inEr_Id            NUMBER,
                                 inEe_Id            NUMBER,
                                 icUserName         VARCHAR2,
                                 icAchAcct          VARCHAR2,
                                 icAchISO           VARCHAR2,
                                 icIsAchValid       VARCHAR2,
                                 icDebitCardStatus  VARCHAR2,
                                 icEmail            VARCHAR2,
                                 icIsAddressInValid VARCHAR2,
                                 icSeverity         VARCHAR2,
                                 inPriority         NUMBER,
                                 icRuleType         VARCHAR2) IS

  rNotification trec_notification := trec_notification();
  
BEGIN
  rNotification.category    := 'INYA';
  rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                  inEr_Id    => inEr_Id,
                                                                  icLabel_Cd => 'DASHBOARD.INYA.DBCARD_CLAIM_RECEIPT_REQUIRED'),
                                        'Expense requires eligible receipt');
  rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                  inEr_Id    => inEr_Id,
                                                                  icLabel_Cd => 'DASHBOARD.INYA.DBCARD_CLAIM_RESOLVE_ISSUE'),
                                        'RESOLVE ISSUE');
  rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
  rNotification.rec_source  := 'CLAIMS_ACTIVITY';
  rNotification.priority    := inPriority;

  FOR rec_DebitCardRecptReqd IN (SELECT cl.id,
                                        TRIM(to_char(cl.amt, '999990.00')) amt,
                                        el.erac_actp_cd actp_cd
                                   FROM claim        cl,
                                        claim_batch  cb,
                                        election     el,
                                        account_type at
                                  WHERE cl.clmbt_id = cb.id
                                    AND cl.claim_category = 'Debit Card'
                                    AND cl.elct_id = el.id
                                    AND el.erac_actp_cd = at.cd
                                    AND el.ee_id = inEe_Id
                                    AND at.receipt_reqd = 'Yes'
                                    AND cl.needs_substantiation = 'Yes'
                                    AND cl.substantiation_status != 'Pass'
                                    AND (coalesce(cl.ovrpmt_flag, 'No') = 'No')
                                    AND cl.is_pre_tax = 'No'
                                    AND cl.status IN ('Paid', 'Released')
                                    AND cl.amt > 0
                                    AND cl.service_begins >
                                        trunc(add_months(SYSDATE, -12),
                                              'RRRR')
                                    AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                            el.id,
                                                                            el.erac_er_id,
                                                                            el.erac_actp_cd) >=
                                        SYSDATE
                                    AND NOT EXISTS
                                  (SELECT 'B'
                                           FROM claims_image ci
                                          WHERE ci.clmbt_id = cb.id)) LOOP
    rNotification.reference_id := rec_DebitCardRecptReqd.Id;
    rNotification.amt          := rec_DebitCardRecptReqd.Amt;
    rNotification.dr_cr_ind    := 'DR';
    rNotification.note         := rec_DebitCardRecptReqd.Actp_Cd;
    ottabNotification.Extend();
    ottabNotification(ottabNotification.Last) := rNotification;
  END LOOP;
END RecReqForDBCardsClaims;

  ------------------------------------------------------------------------------------------------------------
  PROCEDURE NotApprovedClaims(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                            INADMIN_ID         NUMBER,
                            INER_ID            NUMBER,
                            INEE_ID            NUMBER,
                            ICUSERNAME         VARCHAR2,
                            ICACHACCT          VARCHAR2,
                            ICACHISO           VARCHAR2,
                            ICISACHVALID       VARCHAR2,
                            ICDEBITCARDSTATUS  VARCHAR2,
                            ICEMAIL            VARCHAR2,
                            ICISADDRESSINVALID VARCHAR2,
                            ICSEVERITY         VARCHAR2,
                            INPRIORITY         NUMBER,
                            ICRULETYPE         VARCHAR2) IS

  --------------------------------------------------------------------
  -- Activity      By                     On                Version --
  --------------------------------------------------------------------
  -- Created      Anand jajodia        07/12/2018        1.0.1
  /*
  Story id: PORTAL-854
  Not Approved Claims (Denied claims for which user can take action)
  will be shown immediately.
  */
  -- Modified   Tiyas                  08/01/2019        1.0.2
  /*
  PORTAL-9079
  Fixed an issue where claims with multiple denial reasons(some actionable
  and some non-actionable were being picked up as 'Not Approved' instead of
  'Denied')
  */
  -------------------------------------------------------------------------------------------------------------

  NALLOWBLDAYS NUMBER := 0;
  CDEMOGTYPE   ER_ADMN_DEMOG.DEMOG_TYPE%TYPE := 'DENIED_CLAIM_ALERT_EXPIRY_DAYS';
  ENODEMGSETUP EXCEPTION;
  CRESULT        VARCHAR2(255);
  CERRORCATEGORY VARCHAR2(4000);
  NERRORCODE     NUMBER;
  CERRORAREA     VARCHAR2(4000);
  COTHERMESSAGE  VARCHAR2(4000);
  RNOTIFICATION  TREC_NOTIFICATION := TREC_NOTIFICATION();
  dClosureDate   DATE; -- RunOffDate

BEGIN
  BEGIN
    GET_ER_ADMN_DEMOG(OCRESULT        => CRESULT,
                      OCERRORCATEGORY => CERRORCATEGORY,
                      ONERRORCODE     => NERRORCODE,
                      OCERRORAREA     => CERRORAREA,
                      OCOTHERMESSAGE  => COTHERMESSAGE,
                      INADMN_ID       => INADMIN_ID,
                      INERID          => INER_ID,
                      ICDEMOG_TYPE    => CDEMOGTYPE,
                      OCDEMOG_VALUE   => NALLOWBLDAYS);
    IF CRESULT != 'OK' OR NALLOWBLDAYS IS NULL THEN
      RAISE ENODEMGSETUP;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      NALLOWBLDAYS := 0;
  END;
  RNOTIFICATION.CATEGORY    := 'INYA';
  RNOTIFICATION.DESCRIPTION := COALESCE(PORTALUTIL.GETPORTALLABEL(INADMIN_ID => INADMIN_ID,
                                                                  INER_ID    => INER_ID,
                                                                  ICLABEL_CD => 'DASHBOARD.INYA.NOTAPPROVED_CLAIM'),
                                        'Not Approved Claims');
  RNOTIFICATION.LINK_LABEL  := COALESCE(PORTALUTIL.GETPORTALLABEL(INADMIN_ID => INADMIN_ID,
                                                                  INER_ID    => INER_ID,
                                                                  ICLABEL_CD => 'DASHBOARD.INYA.NOTAPPROVED'),
                                        'RESOLVE ISSUE');
  RNOTIFICATION.TYPE        := COALESCE(ICRULETYPE, ' Warning ');
  RNOTIFICATION.REC_SOURCE  := 'CLAIMS_ACTIVITY';
  RNOTIFICATION.PRIORITY    := INPRIORITY;
  FOR CCEEDENIED IN (SELECT DISTINCT C.ID,
                                     TRIM(TO_CHAR(C.AMT, '999990.00')) AMT,
                                     EL.Erac_Actp_Cd Actp_Cd
                       FROM CLAIM C, CLAIM_DENIAL_TEXT CDT, ELECTION EL
                      WHERE C.EE_ID = INEE_ID
                        AND C.STATUS = 'Denied'
                        AND (C.CLAIM_TYPE NOT IN 'PREMIUM' OR
                            SUBMIT_CLM_ID IS NULL)
                        AND C.ID = CDT.CLM_ID
                        AND C.ELCT_ID = EL.ID
                        AND CDT.LABEL ! = 'Other'
                        AND CDT.LABEL IS NOT NULL
                           -- 1.0.2 Start
                        AND NOT EXISTS
                      (SELECT 1
                               FROM CLAIM_DENIAL_TEXT CDT
                              WHERE CDT.CLM_ID = C.ID
                                AND CDT.LABEL
                              ! = 'Other'
                                AND CDT.LABEL IS NOT NULL
                                AND ISUSERACTIONABLE(INERID   => INER_ID,
                                                     INADMNID => INADMIN_ID,
                                                     ICLABEL  => CDT.LABEL,
                                                     ICACTPCD => EL.ERAC_ACTP_CD) = 'No')
                           -- 1.0.2 End
                        AND ((NALLOWBLDAYS > 0 AND C.APPEALED_ON IS NULL) OR
                            (NALLOWBLDAYS = 0))
                        AND ((NALLOWBLDAYS > 0 AND C.LINK_CLM_ID IS NULL) OR
                            (NALLOWBLDAYS = 0))
                        AND EXISTS
                      (SELECT 'x'
                               FROM CLAIM_ACTIVITY CA
                              WHERE CA.ACTION = 'Denied'
                                AND ((SYSDATE - CA.ACTION_ON) >= 0)
                                AND ((NALLOWBLDAYS > 0 AND ((SYSDATE -
                                    COALESCE(C.DENIAL_NOTIFIED_ON,
                                                                      CA.ACTION_ON)) <=
                                    NALLOWBLDAYS)) OR (NALLOWBLDAYS = 0))
                                AND C.ID = CA.CLM_ID)
                        AND NOT EXISTS
                      (SELECT 'B'
                               FROM claims_image ci
                              WHERE ci.clmbt_id = c.clmbt_id
                                AND CI.STATUS IN ('Indexed', 'QAPending'))
                        AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                el.id,
                                                                el.erac_er_id,
                                                                el.erac_actp_cd) >=
                            SYSDATE) LOOP
    dClosureDate := NULL;
    IF bIsJRA = 'Yes' THEN
      BEGIN
        SELECT trunc(account_closed_on)
          INTO dClosureDate
          FROM ee_account
         WHERE ee_id = INEE_ID
           AND actp_cd = CCEEDENIED.Actp_Cd
           and status = 'Closed';
      EXCEPTION
        WHEN no_data_found THEN
          dClosureDate := NULL;
      END;
      IF dClosureDate IS NOT NULL THEN
        CONTINUE;
      END IF;
    END IF;
  
    RNOTIFICATION.REFERENCE_ID := CCEEDENIED.ID;
    RNOTIFICATION.AMT          := CCEEDENIED.AMT;
    IF TO_NUMBER(RNOTIFICATION.AMT) < 0 THEN
      RNOTIFICATION.AMT := REPLACE(RNOTIFICATION.AMT, '-', '');
    END IF;
    RNOTIFICATION.note := CCEEDENIED.Actp_Cd;
    OTTABNOTIFICATION.EXTEND();
    OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
  END LOOP;

  FOR CCEEDENIED IN (SELECT DISTINCT submit_clm_id Sbmt_Clm_Id,
                                     TRIM(TO_CHAR(sum(C.AMT), '999990.00')) AMT,
                                     EL.Erac_Actp_Cd Actp_Cd
                       FROM CLAIM C, CLAIM_DENIAL_TEXT CDT, ELECTION EL
                      WHERE C.EE_ID = INEE_ID
                        AND C.STATUS = 'Denied'
                        AND (C.CLAIM_TYPE = 'PREMIUM' AND
                            SUBMIT_CLM_ID IS NOT NULL)
                        AND C.ID = CDT.CLM_ID
                        AND C.ELCT_ID = EL.ID
                        AND CDT.LABEL ! = 'Other'
                        AND CDT.LABEL IS NOT NULL
                           -- 1.0.2 Start
                        AND NOT EXISTS
                      (SELECT 1
                               FROM CLAIM_DENIAL_TEXT CDT
                              WHERE CDT.CLM_ID = C.ID
                                AND CDT.LABEL
                              ! = 'Other'
                                AND CDT.LABEL IS NOT NULL
                                AND ISUSERACTIONABLE(INERID   => INER_ID,
                                                     INADMNID => INADMIN_ID,
                                                     ICLABEL  => CDT.LABEL,
                                                     ICACTPCD => EL.ERAC_ACTP_CD) = 'No')
                           -- 1.0.2 End
                        AND ((NALLOWBLDAYS > 0 AND C.APPEALED_ON IS NULL) OR
                            (NALLOWBLDAYS = 0))
                        AND ((NALLOWBLDAYS > 0 AND C.LINK_CLM_ID IS NULL) OR
                            (NALLOWBLDAYS = 0))
                        AND EXISTS
                      (SELECT 'x'
                               FROM CLAIM_ACTIVITY CA
                              WHERE CA.ACTION = 'Denied'
                                AND ((SYSDATE - CA.ACTION_ON) >= 0)
                                AND ((NALLOWBLDAYS > 0 AND ((SYSDATE -
                                    COALESCE(C.DENIAL_NOTIFIED_ON,
                                                                      CA.ACTION_ON)) <=
                                    NALLOWBLDAYS)) OR (NALLOWBLDAYS = 0))
                                AND C.ID = CA.CLM_ID)
                        AND NOT EXISTS
                      (SELECT 'B'
                               FROM claims_image ci
                              WHERE ci.clmbt_id = c.clmbt_id
                                AND CI.STATUS IN ('Indexed', 'QAPending'))
                        AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                el.id,
                                                                el.erac_er_id,
                                                                el.erac_actp_cd) >=
                            SYSDATE
                      GROUP BY submit_clm_id, EL.Erac_Actp_Cd) LOOP
    dClosureDate := NULL;
    IF bIsJRA = 'Yes' THEN
      BEGIN
        SELECT trunc(account_closed_on)
          INTO dClosureDate
          FROM ee_account
         WHERE ee_id = INEE_ID
           AND actp_cd = CCEEDENIED.Actp_Cd
           and status = 'Closed';
      EXCEPTION
        WHEN no_data_found THEN
          dClosureDate := NULL;
      END;
      IF dClosureDate IS NOT NULL THEN
        CONTINUE;
      END IF;
    END IF;
  
    RNOTIFICATION.REFERENCE_ID := CCEEDENIED.Sbmt_Clm_Id;
    RNOTIFICATION.AMT          := CCEEDENIED.AMT;
    IF TO_NUMBER(RNOTIFICATION.AMT) < 0 THEN
      RNOTIFICATION.AMT := REPLACE(RNOTIFICATION.AMT, '-', '');
    END IF;
    RNOTIFICATION.note := CCEEDENIED.Actp_Cd;
    OTTABNOTIFICATION.EXTEND();
    OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
  END LOOP;

END NotApprovedClaims;

  ------------------------------------------------------------------------------------------------------------

  PROCEDURE LostOrStolenDebitCard(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                                INADMIN_ID         NUMBER,
                                INER_ID            NUMBER,
                                INEE_ID            NUMBER,
                                ICUSERNAME         VARCHAR2,
                                ICACHACCT          VARCHAR2,
                                ICACHISO           VARCHAR2,
                                ICISACHVALID       VARCHAR2,
                                ICDEBITCARDSTATUS  VARCHAR2,
                                ICEMAIL            VARCHAR2,
                                ICISADDRESSINVALID VARCHAR2,
                                ICSEVERITY         VARCHAR2,
                                INPRIORITY         NUMBER,
                                ICRULETYPE         VARCHAR2) IS

  --------------------------------------------------------------------
  -- Activity      By                     On                Version --
  --------------------------------------------------------------------
  -- Created      Arnab Chowdhury        06/07/2019        1.0.1
  /*
  Story id: PORTAL-7878
  To display page blocker in case debit card has been reported as lost or stolen
  */
  -------------------------------------------------------------------------------------------------------------

  nParamValue    NUMBER;
  nElctId        NUMBER := 0;
  dActivityDate  DATE;
  dDeriveDate    DATE;
  cResult        VARCHAR2(255) := 'ERROR';
  cErrorcategory VARCHAR2(255) := 'OTHER';
  cErrorarea     VARCHAR2(255) := 'Init';
  cOthermessage  VARCHAR2(4000) := NULL;
  cCustomText1   custom_text.text%TYPE := NULL;
  cCustomText2   custom_text.text%TYPE := NULL;
  cCustomText    VARCHAR2(8000);

  eLogErr EXCEPTION;
  RNOTIFICATION TREC_NOTIFICATION := TREC_NOTIFICATION();

  CURSOR CUR_DEPENDENT(INEE_ID NUMBER) IS
    SELECT DP.ID ID
      FROM DEPENDENT DP
     WHERE DP.EE_ID = INEE_ID
       AND DP.STATUS = 'Active';

BEGIN
  BEGIN
    SELECT el.id
      into nElctId
      FROM election el, stack_election se
     WHERE se.elct_id = el.id
       AND el.ee_id = INEE_ID
       AND el.erac_actp_cd = 'HSA'
       AND el.enrollment_status = 'Enrolled'
       AND trunc(SYSDATE) BETWEEN trunc(se.start_date) AND
           trunc(se.end_date);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      nElctId := 0;
  END;
  IF nvl(nElctID, 0) <> 0 THEN
    BEGIN
      select param_value
        into nParamValue
        from partner_param pp, partner p
       where pp.partner_id = p.id
         and pp.param_name = 'CARD_LOSTANDSTOLEN_PROCESSING_TIME'
         and p.partner_code = 'TSYS';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        nParamValue := 0;
    END;

    BEGIN
      SELECT REQUESTED_ON
        INTO dActivityDate
        FROM DEBIT_CARD_LOST_STOLEN_RQST
       WHERE ee_id = INEE_ID
         AND dep_id IS NULL
         AND status = 'Pending';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        dActivityDate := NULL;
    END;

    IF dActivityDate IS NULL THEN
      BEGIN
        SELECT max(act.activity_on)
          into dActivityDate
          FROM DEBIT_CARD_ACTIVITY_LOG act
         WHERE act.EE_ID = INEE_ID
           AND act.ACTIVITY_CD = 'Mark-Card-LostStolen'
           and act.ENTITY_TYPE = 'EMPLOYEE'
           and act.ENTITY_ID = INEE_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          dActivityDate := NULL;
      END;
      IF dActivityDate IS NOT NULL THEN
        dDeriveDate := GETBusinessDays(idDate    => dActivityDate,
                                       nNoOfDays => nParamValue);
        IF dDeriveDate < trunc(SYSDATE) THEN
          dActivityDate := NULL;
        END IF;
      END IF;
    END IF;

    IF dActivityDate IS NULL THEN
      FOR DEPENDENT IN CUR_DEPENDENT(INEE_ID) LOOP
        BEGIN
          SELECT REQUESTED_ON
            INTO dActivityDate
            FROM DEBIT_CARD_LOST_STOLEN_RQST
           WHERE ee_id = INEE_ID
             AND nvl(dep_id, 0) = nvl(DEPENDENT.ID, 0)
             AND status = 'Pending';
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            dActivityDate := NULL;
        END;
        IF dActivityDate IS NULL THEN
          BEGIN
            SELECT max(act.activity_on)
              into dActivityDate
              FROM DEBIT_CARD_ACTIVITY_LOG act
             WHERE act.EE_ID = INEE_ID
               AND act.ACTIVITY_CD = 'Mark-Card-LostStolen'
               and act.ENTITY_TYPE = 'DEPENDENT'
               and act.ENTITY_ID = DEPENDENT.ID;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              dActivityDate := NULL;
          END;
          IF dActivityDate IS NOT NULL THEN
            dDeriveDate := GETBusinessDays(idDate    => dActivityDate,
                                           nNoOfDays => nParamValue);
            IF dDeriveDate < trunc(SYSDATE) THEN
              dActivityDate := NULL;
            END IF;
          END IF;
        END IF;
        IF dActivityDate IS NOT NULL THEN
          EXIT;
        END IF;
      END LOOP;
    END IF;

    IF dActivityDate is not null THEN
      BEGIN
        clm_getcustomtext(ocResult        => cResult,
                          ocerrorcategory => cErrorcategory,
                          ocErrorArea     => cErrorarea,
                          ocothermessage  => cOthermessage,
                          icObjName       => 'DASHBOARDTAB.PAGE.BLOCKER.LOSTSTOLENCARD',
                          icObjTypeCd     => 'Page',
                          inAdmnId        => INADMIN_ID,
                          inErId          => INER_ID,
                          cCustText1      => cCustomText1,
                          cCustText2      => cCustomText2);

        IF cResult != 'OK' THEN
          cErrorarea    := 'Error Clm_GetCustomText for Admn_Id => ' ||
                           INADMIN_ID || ' ER_Id => ' || INER_ID;
          cOthermessage := cErrorarea || ' : ' || cOthermessage;
          RAISE eLogErr;
        END IF;
        cCustomText := TRIM(nvl(cCustomText1, ' ') ||
                            nvl(cCustomText2, ' '));
        cResult                   := 'OK';
        cOthermessage             := 'Text fetched successfully';
        RNOTIFICATION.CATEGORY    := 'BLOCKER';
        RNOTIFICATION.DESCRIPTION := cCustomText;
        RNOTIFICATION.LINK_LABEL  := COALESCE(PORTALUTIL.GETPORTALLABEL(INADMIN_ID => INADMIN_ID,
                                                                        INER_ID    => INER_ID,
                                                                        ICLABEL_CD => 'DASHBOARD.PAGE.BLOCKER.LOSTSTOLENCARD.LINK'),
                                              'OK, GOT IT');
        RNOTIFICATION.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                        inEr_Id    => inEr_Id,
                                                                        icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.LOSTSTOLENCARD.HDR'),
                                              'Your Account Functionality is Limited');
        RNOTIFICATION.TYPE        := coalesce(icRuleType, 'Alert');
        RNOTIFICATION.rec_source  := 'LOST_STOLEN CARD';
        RNOTIFICATION.priority    := inPriority;
        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      EXCEPTION
        WHEN eLogErr THEN
          dbms_output.put_line('Could not obtain the custom text due to ' ||
                               cOthermessage);
        WHEN OTHERS THEN
          dbms_output.put_line('Could not fetch lost stolen card details due to ' ||
                               cOthermessage);
      END;
    END IF;
  END IF;
END LostOrStolenDebitCard;

  ------------------------------------------------------------------------------------------------------------

  PROCEDURE InvalidatedBankAccounts(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                                  INADMIN_ID         NUMBER,
                                  INER_ID            NUMBER,
                                  INEE_ID            NUMBER,
                                  ICUSERNAME         VARCHAR2,
                                  ICACHACCT          VARCHAR2,
                                  ICACHISO           VARCHAR2,
                                  ICISACHVALID       VARCHAR2,
                                  ICDEBITCARDSTATUS  VARCHAR2,
                                  ICEMAIL            VARCHAR2,
                                  ICISADDRESSINVALID VARCHAR2,
                                  ICSEVERITY         VARCHAR2,
                                  INPRIORITY         NUMBER,
                                  ICRULETYPE         VARCHAR2) IS

  --------------------------------------------------------------------
  -- Activity      By                     On                Version --
  --------------------------------------------------------------------
  -- Created       Arnab Chowdhury        06/24/2019        1.0.1
  /*
  Story id: PORTAL-6994
  To display page blocker in case bank account has been invalidated
  */
  -------------------------------------------------------------------------------------------------------------

  nParamValue           NUMBER;
  cResult               VARCHAR2(255) := 'ERROR';
  cErrorcategory        VARCHAR2(255) := 'OTHER';
  cErrorarea            VARCHAR2(255) := 'Init';
  cOthermessage         VARCHAR2(4000) := NULL;
  cCustomText1          custom_text.text%TYPE := NULL;
  cCustomText2          custom_text.text%TYPE := NULL;
  cCustomText           VARCHAR2(8000);
  cRoutingNumber        VARCHAR2(9);
  cBankAcntNumber       VARCHAR2(20);
  cMaskedBankAcntNumber VARCHAR2(20);
  bIsBankInvalidated    BOOLEAN := FALSE;
  eLogErr EXCEPTION;
  RNOTIFICATION TREC_NOTIFICATION := TREC_NOTIFICATION();

  CURSOR CUR_DIRECT_DEPOSIT_BANK_ACCOUNT(INEE_ID NUMBER) IS
    SELECT EE_ACH_ACCT_NBR, EE_ACH_RTNG_NBR, EE_ACH_STATUS
      FROM VW_EEACHDTL
     WHERE EE_ID = INEE_ID
       AND EE_ACH_STATUS IN ('Invalid', 'Not Validated');

  CURSOR CUR_CONTRIBUTION_BANK_ACCOUNT(INEE_ID NUMBER) IS
    SELECT ISO BANKROUTINGNO,
           STATUS,
           cryptoutil.Decrypt_Data(BANK_ACCT_ENCRYPTED) BANKACCOUNTNO
      FROM BANK
     WHERE EE_ID = INEE_ID
       AND ER_ID IS NULL
       AND STATUS IN ('Validation Error',
                      'Validation Ageout',
                      'Validation ACH Reject');

BEGIN
  FOR DIRECT_DEPOSIT IN CUR_DIRECT_DEPOSIT_BANK_ACCOUNT(INEE_ID) LOOP
    cRoutingNumber     := DIRECT_DEPOSIT.EE_ACH_RTNG_NBR;
    cBankAcntNumber    := DIRECT_DEPOSIT.EE_ACH_ACCT_NBR;
    bIsBankInvalidated := TRUE;
  END LOOP;

  IF (NOT bIsBankInvalidated OR cRoutingNumber IS NULL OR
     cBankAcntNumber IS NULL) THEN
    FOR CONTRIBUTION IN CUR_CONTRIBUTION_BANK_ACCOUNT(INEE_ID) LOOP
      cRoutingNumber     := CONTRIBUTION.BANKROUTINGNO;
      cBankAcntNumber    := CONTRIBUTION.BANKACCOUNTNO;
      bIsBankInvalidated := TRUE;
      IF bIsBankInvalidated THEN
        EXIT;
      END IF;
    END LOOP;
  END IF;

  IF (bIsBankInvalidated AND cRoutingNumber IS NOT NULL AND
     cBankAcntNumber IS NOT NULL) THEN
    BEGIN
      clm_getcustomtext(ocResult        => cResult,
                        ocerrorcategory => cErrorcategory,
                        ocErrorArea     => cErrorarea,
                        ocothermessage  => cOthermessage,
                        icObjName       => 'DASHBOARDTAB.PAGE.BLOCKER.INVALIDATEDBANKACCOUNTS',
                        icObjTypeCd     => 'Page',
                        inAdmnId        => INADMIN_ID,
                        inErId          => INER_ID,
                        cCustText1      => cCustomText1,
                        cCustText2      => cCustomText2);

      IF cResult != 'OK' THEN
        cErrorarea    := 'Error Clm_GetCustomText for Admn_Id => ' ||
                         INADMIN_ID || ' ER_Id => ' || INER_ID;
        cOthermessage := cErrorarea || ' : ' || cOthermessage;
        RAISE eLogErr;
      END IF;

      SELECT CASE
               WHEN length(cBankAcntNumber) > 3 THEN
                '*****' || substr(cBankAcntNumber, -3, 3)
               WHEN length(cBankAcntNumber) <= 3 THEN
                substr(cBankAcntNumber, 1, length(cBankAcntNumber))
             END
        into cMaskedBankAcntNumber
        from dual;
      cCustomText               := TRIM(nvl(cCustomText1, ' ') ||
                                        nvl(cCustomText2, ' '));
      cResult                   := 'OK';
      cOthermessage             := 'Text fetched successfully';
      RNOTIFICATION.CATEGORY    := 'BLOCKER';
      RNOTIFICATION.DESCRIPTION := cCustomText;
      RNOTIFICATION.LINK_LABEL  := COALESCE(PORTALUTIL.GETPORTALLABEL(INADMIN_ID => INADMIN_ID,
                                                                      INER_ID    => INER_ID,
                                                                      ICLABEL_CD => 'DASHBOARD.PAGE.BLOCKER.INVALIDATEDBANKACCOUNTS.BTN1'),
                                            'I''LL DO IT LATER') || '~' ||
                                   COALESCE(PORTALUTIL.GETPORTALLABEL(INADMIN_ID => INADMIN_ID,
                                                                      INER_ID    => INER_ID,
                                                                      ICLABEL_CD => 'DASHBOARD.PAGE.BLOCKER.INVALIDATEDBANKACCOUNTS.BTN2'),
                                            'REVIEW');
      RNOTIFICATION.note        := 'Invalid bank details fetched. Masked Bank Account Number - ' ||
                                   cMaskedBankAcntNumber ||
                                   ' , Routing Number - ' || cRoutingNumber;
      RNOTIFICATION.TYPE        := coalesce(icRuleType, 'Alert');
      RNOTIFICATION.rec_source  := 'INVALID_BANK_ACCOUNT';
      RNOTIFICATION.priority    := inPriority;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    EXCEPTION
      WHEN eLogErr THEN
        dbms_output.put_line('Could not obtain the custom text due to ' ||
                             cOthermessage);
      WHEN OTHERS THEN
        dbms_output.put_line('Could not fetch lost stolen card details due to ' ||
                             cOthermessage);
    END;
  END IF;
END InvalidatedBankAccounts;

  ------------------------------------------------------------------------------------------------------------
  /*****************************************************************
   Activity             By              On                Version
   *****************************************************************
   Created          Suraj Kumar      08/08/2019           1.0.0
   Jira:            PORTAL-7942
  ******************************************************************/
  PROCEDURE RetireeMissingACH(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdmin_Id         NUMBER,
                                   inEr_Id            NUMBER,
                                   inEe_Id            NUMBER,
                                   icUserName         VARCHAR2,
                                   icAchAcct          VARCHAR2,
                                   icAchISO           VARCHAR2,
                                   icIsAchValid       VARCHAR2,
                                   icDebitCardStatus  VARCHAR2,
                                   icEmail            VARCHAR2,
                                   icIsAddressInValid VARCHAR2,
                                   icSeverity         VARCHAR2,
                                   inPriority         NUMBER,
                                   icRuleType         VARCHAR2) IS

  achPaymentOnly er_claim_param.ach_payment_only%TYPE := NULL;
  achPaymentOnlyOverrideInd employee.ach_payment_only_override_ind%TYPE := NULL;
  isAchValid employee.is_ach_valid%TYPE := NULL;
  rNotification trec_notification := trec_notification();


  BEGIN
    -- Check if participant is a retiree
	--IF jra_account_util.IsJRA(inEeId => inEe_Id) = 'Yes' THEN
	IF bIsJRA = 'Yes' THEN
      achPaymentOnly := GetErClmParam(inErID =>  inEr_Id,
                                    icParamColName => 'ACH_PAYMENT_ONLY');

      SELECT ach_payment_only_override_ind
             INTO achPaymentOnlyOverrideInd
                  FROM employee
                       WHERE id = inEe_Id;

      -- Check if participant requires payment by ACH only
      IF (achPaymentOnly = 'Yes' AND NOT achPaymentOnlyOverrideInd = 'Yes') THEN
        BEGIN
          SELECT is_ach_valid
                 INTO isAchValid
                      FROM employee
                           WHERE id = inEe_Id
                             AND ach_iso IS NULL AND ach_acct IS NULL;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            isAchValid := NULL;
        END;
        -- Check if participant ACH is missing
        IF (isAchValid IS NOT NULL AND isAchValid = 'No') THEN
          IF icRuleType = 'Alert' THEN         
            rNotification.category    := 'BLOCKER';
            rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                            inEr_Id    => inEr_Id,
                                                                            icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.RETIREEMISSINGACH.BODY'),
                                                  'Reimbursement requests must be processed through direct deposit to your designated bank account. No bank account has been added. Do you want to add a bank account now?');
            rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                            inEr_Id    => inEr_Id,
                                                                            icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.RETIREEMISSINGACH.BTN1'),
                                                  'NO, REMIND ME LATER') || '~' ||
                                         coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                            inEr_Id    => inEr_Id,
                                                                            icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.RETIREEMISSINGACH.BTN2'),
                                                  'ADD BANK ACCOUNT');
            rNotification.TYPE        := coalesce(icRuleType, 'Alert');
            rNotification.rec_source  := 'RETIREE_MISSING_ACH';
            rNotification.priority    := inPriority;
            ottabNotification.Extend();
            ottabNotification(ottabNotification.Last) := rNotification;
         END IF;
         IF icRuleType = ' Warning ' THEN   
            -- Add INYA notification for similar condition
            rNotification.category := 'INYA';
            rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                            inEr_Id    => inEr_Id,
                                                                            icLabel_Cd => 'DASHBOARD.INYA.RetireeMissingACH.DESC'),
                                                  'Payment is Ready');
            rNotification.link_label   := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                            inEr_Id    => inEr_Id,
                                                                            icLabel_Cd => 'DASHBOARD.INYA.RetireeMissingACH.LINKLABEL'),
                                                  'Add Bank Account');
            rNotification.TYPE := coalesce(icRuleType, ' Warning ');
            rNotification.rec_source  := 'RETIREE_MISSING_ACH';
            rNotification.priority    := inPriority;
            ottabNotification.Extend();
            ottabNotification(ottabNotification.Last) := rNotification;
          END IF;                                                                                                            
         END IF;
        END IF;
      END IF;
  END RetireeMissingACH;
  ------------------------------------------------------------------------------------------------------------

  PROCEDURE GetNotPaidPassThruClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdmin_Id         NUMBER,
                                   inEr_Id            NUMBER,
                                   inEe_Id            NUMBER,
                                   icUserName         VARCHAR2,
                                   icAchAcct          VARCHAR2,
                                   icAchISO           VARCHAR2,
                                   icIsAchValid       VARCHAR2,
                                   icDebitCardStatus  VARCHAR2,
                                   icEmail            VARCHAR2,
                                   icIsAddressInValid VARCHAR2,
                                   icSeverity         VARCHAR2,
                                   inPriority         NUMBER,
                                   icRuleType         VARCHAR2) IS

  cResult              VARCHAR2(255) := 'ERROR';
  cErrorCategory       VARCHAR2(255) := 'OTHER';
  nErrorCode           NUMBER := 99999;
  nElctID              NUMBER;
  nCount               NUMBER;
  cErrorArea           VARCHAR2(255) := 'Init';
  cOtherMessage        VARCHAR2(4000) := NULL;
  nuserid              NUMBER := NULL;
  cObjName             VARCHAR2(20) := 'EEPAYNOWPASSTHRU';
  cActpCd              VARCHAR2(20) := NULL;
  cObjCD               VARCHAR2(20) := 'Page';
  occanview            VARCHAR2(3) := 'No';
  occanexecute         VARCHAR2(3) := 'No';
  occancreate          VARCHAR2(3) := 'No';
  occandelete          VARCHAR2(3) := 'No';
  occanmodify          VARCHAR2(3) := 'No';
  occanmodifyifnull    VARCHAR2(3) := 'No';
  occanmodifyifnotnull VARCHAR2(3) := 'No';
  occanmodifytonull    VARCHAR2(3) := 'No';
  rNotification        trec_notification := trec_notification();
  
BEGIN
  rNotification.category    := 'INYA';
  rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                  inEr_Id    => inEr_Id,
                                                                  icLabel_Cd => 'DASHBOARD.INYA.PAYMENT_OPTION_FOR_CLAIM'),
                                        'Select Payment Option for Claim Payment');
  rNotification.link_label  := 'Select Payment';
  rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
  rNotification.rec_source  := 'CLAIM_PENDING_PASSTHRU';
  rNotification.priority    := inPriority;

  SELECT id INTO nuserid FROM login WHERE user_name = icUserName;

  cErrorArea := 'CheckingPrivilege';
  hasprivilege(cresult,
               cerrorcategory,
               nerrorcode,
               cerrorarea,
               cothermessage,
               nuserid,
               cObjName,
               cObjCD,
               occanview,
               occanexecute,
               occancreate,
               occandelete,
               occanmodify,
               occanmodifyifnull,
               occanmodifyifnotnull,
               occanmodifytonull);
  IF UPPER(occanexecute) = 'YES' THEN
    FOR rec_PassThru IN (SELECT c.id,
                                c.elct_id nElctID,
                                TRIM(to_char(c.amt, '999990.00')) amt
                           FROM claim_pending_passthru c
                          WHERE ee_id = inEe_Id
                            AND coalesce(is_processed, 'No') <> 'Yes'
                            AND coalesce(amt, 0) > 0) LOOP
    
      IF nElctID is not null then
        select erac_actp_cd into cActpCd from election where id = nElctID;
             
        IF Clm_Validateclaimutil.getRunOffDate(inEe_Id,
                                               nElctID,
                                               inEr_Id,
                                               cActpCd) >= SYSDATE THEN
          rNotification.reference_id := rec_PassThru.Id;
          rNotification.amt          := rec_PassThru.Amt;
          rNotification.dr_cr_ind    := 'DR';
          ottabNotification.Extend();
          ottabNotification(ottabNotification.Last) := rNotification;
        END IF;
      ELSE
        select count(1)
          into nCount
          from election el, er_acct_bundle erac
         where el.ee_id = inEe_Id
           and erac.erbndl_er_id = el.erac_er_id
           and el.erac_actp_cd = erac.actp_cd
           and Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                   el.id,
                                                   el.erac_er_id,
                                                   el.erac_actp_cd) >=
               SYSDATE;
        IF nCount > 0 THEN
          rNotification.reference_id := rec_PassThru.Id;
          rNotification.amt          := rec_PassThru.Amt;
          rNotification.dr_cr_ind    := 'DR';
          ottabNotification.Extend();
          ottabNotification(ottabNotification.Last) := rNotification;
        END IF;
      END IF;
    END LOOP;
  END IF;

END GetNotPaidPassThruClaims;

  ------------------------------------------------------------------------------------------------------------
  PROCEDURE UnCashedChequePaymentTrxn(ottabNotification  IN OUT NOCOPY ttab_notification,
                                      inAdmin_Id         NUMBER,
                                      inEr_Id            NUMBER,
                                      inEe_Id            NUMBER,
                                      icUserName         VARCHAR2,
                                      icAchAcct          VARCHAR2,
                                      icAchISO           VARCHAR2,
                                      icIsAchValid       VARCHAR2,
                                      icDebitCardStatus  VARCHAR2,
                                      icEmail            VARCHAR2,
                                      icIsAddressInValid VARCHAR2,
                                      icSeverity         VARCHAR2,
                                      inPriority         NUMBER,
                                      icRuleType         VARCHAR2) IS

    ocCanViewCashedInfo VARCHAR2(3) := 'No';

    nDisplayLagTime NUMBER := 10;
    nHideLagTime    NUMBER := 180;
    rNotification   trec_notification := trec_notification();
  BEGIN
    rNotification.category    := 'INYA';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.CHECKS_NOT_CASHED'),
                                          'IMPORTANT: Checks are uncashed');
    rNotification.link_label  := 'UNCASHED';
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'UNCASHED_CHECK';
    rNotification.priority    := inPriority;
    BEGIN
      ocCanViewCashedInfo := coalesce(apputil.GetErAdmnDemog('VIEW_CHECK_CASHED_INFO',
                                                             inAdmin_Id,
                                                             inEr_Id,
                                                             SYSDATE,
                                                             'Yes'),
                                      'No');
    EXCEPTION
      WHEN OTHERS THEN
        ocCanViewCashedInfo := 'No';
    END;

    IF ocCanViewCashedInfo = 'Yes' THEN
      nDisplayLagTime := coalesce(apputil.GetErAdmnDemog('UNCASHED_CHECK_LAGTIME',
                                                         inAdmin_Id,
                                                         inEr_Id,
                                                         SYSDATE,
                                                         'Yes'),
                                  10);
      nHideLagTime    := coalesce(apputil.GetErAdmnDemog('STALE_UNCASHED_CHECK_LAGTIME',
                                                         inAdmin_Id,
                                                         inEr_Id,
                                                         SYSDATE,
                                                         'Yes'),
                                  180);
      FOR rec_UncashedCheck IN (SELECT vw.PYFL_ID,
                                       el.Erac_Actp_Cd Actp_Cd,
                                       TRIM(REPLACE(vw.amt, '$', '')) amt
                                  FROM VW_EE_PAYMENTS VW, Election EL
                                 WHERE vw.EE_ID = inEe_Id
                                   AND vw.elct_id = el.ID
                                   AND vw.CLEARED_ON_DATE IS NULL
                                   AND vw.CHECK_NO IS NOT NULL
                                   AND vw.TYPECD = 'Check'
                                   AND TO_NUMBER(REPLACE(vw.AMT, '$', '')) > 0
                                   AND vw.VOID_ON IS NULL
                                   AND (SYSDATE BETWEEN
                                       (vw.INSTR_DATE + nDisplayLagTime) AND
                                       (vw.INSTR_DATE + nHideLagTime))
                                   AND vw.CHECK_STATUS = 'Issued') LOOP
        rNotification.reference_id := rec_UncashedCheck.PYFL_ID;
        rNotification.amt          := rec_UncashedCheck.amt;
        rNotification.dr_cr_ind    := 'DR';
        rNotification.note         := rec_UncashedCheck.Actp_Cd;
        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      END LOOP;

    END IF;

  END UnCashedChequePaymentTrxn;

  -------------------------------------------------------------------------------------------------

  PROCEDURE AddlRecptReqForDBCardsClaims(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         NUMBER,
                                       inEr_Id            NUMBER,
                                       inEe_Id            NUMBER,
                                       icUserName         VARCHAR2,
                                       icAchAcct          VARCHAR2,
                                       icAchISO           VARCHAR2,
                                       icIsAchValid       VARCHAR2,
                                       icDebitCardStatus  VARCHAR2,
                                       icEmail            VARCHAR2,
                                       icIsAddressInValid VARCHAR2,
                                       icSeverity         VARCHAR2,
                                       inPriority         NUMBER,
                                       icRuleType         VARCHAR2) IS

  rNotification trec_notification := trec_notification();

BEGIN
  rNotification.category    := 'INYA';
  rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                  inEr_Id    => inEr_Id,
                                                                  icLabel_Cd => 'DASHBOARD.INYA.DBCARD_CLAIM_INVALID_RECEIPT'),
                                        'Debit card receipt submitted was invalid. Please submit new receipt');
  rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                  inEr_Id    => inEr_Id,
                                                                  icLabel_Cd => 'DASHBOARD.INYA.DBCARD_CLAIM_RECEIPT_INVALID'),
                                        'INVALID RECEIPT');
  rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
  rNotification.rec_source  := 'CLAIM';
  rNotification.priority    := inPriority;
  FOR rec_DebitCardRecptReqd IN (SELECT cl.id,
                                        el.Erac_Actp_Cd Actp_Cd,
                                        TRIM(to_char(cl.amt, '999990.00')) amt
                                   FROM claim        cl,
                                        claim_batch  cb,
                                        election     el,
                                        account_type at
                                  WHERE cl.clmbt_id = cb.id
                                    AND cl.claim_category = 'Debit Card'
                                    AND (coalesce(cl.ovrpmt_flag, 'No') = 'No')
                                    AND cl.elct_id = el.id
                                    AND el.erac_actp_cd = at.cd
                                    AND el.ee_id = inEe_Id
                                    AND at.receipt_reqd = 'Yes'
                                    AND cl.needs_substantiation = 'Yes'
                                    AND cl.substantiation_status != 'Pass'
                                    AND cl.is_pre_tax = 'No'
                                    AND cl.status IN ('Paid', 'Released')
                                    AND cl.amt > 0
                                    AND cl.service_begins >
                                        trunc(add_months(SYSDATE, -12),
                                              'RRRR')
                                    AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                            el.id,
                                                                            el.erac_er_id,
                                                                            el.erac_actp_cd) >=
                                        SYSDATE
                                    AND EXISTS
                                  (SELECT 'B'
                                           FROM claims_image ci
                                          WHERE ci.clmbt_id = cb.id
                                            AND ci.status = 'Complete')) LOOP
    
    rNotification.reference_id := rec_DebitCardRecptReqd.Id;
    rNotification.amt          := rec_DebitCardRecptReqd.Amt;
    rNotification.dr_cr_ind    := 'DR';
    rNotification.note         := rec_DebitCardRecptReqd.Actp_Cd;
    ottabNotification.Extend();
    ottabNotification(ottabNotification.Last) := rNotification;
  END LOOP;

END AddlRecptReqForDBCardsClaims;

  -------------------------------------------------------------------------------------------------

  PROCEDURE OverpaymentClaim(ottabNotification  IN OUT NOCOPY ttab_notification,
                             inAdmin_Id         IN NUMBER,
                             inEr_Id            IN NUMBER,
                             inEe_Id            IN NUMBER,
                             icUserName         IN VARCHAR2,
                             icAchAcct          IN VARCHAR2,
                             icAchISO           IN VARCHAR2,
                             icIsAchValid       IN VARCHAR2,
                             icDebitCardStatus  IN VARCHAR2,
                             icEmail            IN VARCHAR2,
                             icIsAddressInValid IN VARCHAR2,
                             icSeverity         IN VARCHAR2,
                             inPriority         IN NUMBER,
                             icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();
    --bIsJRA        VARCHAR2(3);
  BEGIN
    rNotification.category    := 'INYA';

    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.EXPENSE_OVERPAID'),
                                          'Expense Overpayment');
    rNotification.link_label  := 'Resolve';
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'CLAIM';
    rNotification.priority    := inPriority;
    --bIsJRA                    := jra_account_util.isJRA(inEe_Id);
	
    FOR rec_OverpaidClaim IN (SELECT c.id,
                                   EL.Erac_Actp_Cd Actp_Cd,
                                   TRIM(to_char(c.amt - nvl(c.recovered_amt,0), '999990.00')) amt
                              FROM claim c, election el
                             WHERE c.ovrpmt_flag = 'Yes'
                               AND (c.CLAIM_TYPE NOT IN 'PREMIUM' OR
                                   SUBMIT_CLM_ID IS NULL)
                               AND c.ee_id = inEe_Id
                               AND c.ELCT_ID = el.ID
                               AND c.status IN ('Paid', 'Released')
                               AND coalesce(c.amt, 0) >
                                   coalesce(c.recovered_amt, 0)
                               AND NOT EXISTS
                             (SELECT 1
                                      FROM claims_image ci
                                     WHERE ci.status IN
                                           ('Indexed', 'QAPending')
                                       AND ci.clmbt_id = c.clmbt_id)
                               AND ((bIsJRA <> 'Yes' AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                       el.id,
                                                                       el.erac_er_id,
                                                                       el.erac_actp_cd) >=
                                   SYSDATE) OR bIsJRA = 'Yes')) LOOP
      rNotification.reference_id := rec_OverpaidClaim.Id;
      rNotification.amt          := rec_OverpaidClaim.Amt;
      rNotification.dr_cr_ind    := 'DR';
      rNotification.note         := rec_OverpaidClaim.Actp_Cd;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END LOOP;
    FOR rec_OverpaidClaim IN (SELECT submit_clm_id Sbmt_Clm_Id,
                                   EL.Erac_Actp_Cd Actp_Cd,
                                   TRIM(to_char(sum(c.amt - nvl(c.recovered_amt,0)), '999990.00')) amt
                              FROM claim c, election el
                             WHERE c.ovrpmt_flag = 'Yes'
                               AND (c.CLAIM_TYPE = 'PREMIUM' AND
                                   SUBMIT_CLM_ID IS NOT NULL)
                               AND c.ee_id = inEe_Id
                               AND c.ELCT_ID = el.ID
                               AND c.status IN ('Paid', 'Released')
                               AND coalesce(c.amt, 0) >
                                   coalesce(c.recovered_amt, 0)
                               AND NOT EXISTS
                             (SELECT 1
                                      FROM claims_image ci
                                     WHERE ci.status IN
                                           ('Indexed', 'QAPending')
                                       AND ci.clmbt_id = c.clmbt_id)
                               AND ((bIsJRA <> 'Yes' AND Clm_Validateclaimutil.getRunOffDate(el.ee_id,
                                                                       el.id,
                                                                       el.erac_er_id,
                                                                       el.erac_actp_cd) >=
                                   SYSDATE) OR bIsJRA = 'Yes')
                             GROUP BY submit_clm_id, EL.Erac_Actp_Cd) LOOP
      rNotification.reference_id := rec_OverpaidClaim.Sbmt_Clm_Id;
      rNotification.amt          := rec_OverpaidClaim.Amt;
      rNotification.dr_cr_ind    := 'DR';
      rNotification.note         := rec_OverpaidClaim.Actp_Cd;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END LOOP;
  END OverpaymentClaim;

  PROCEDURE DirectDepositFailed(ottabNotification  IN OUT NOCOPY ttab_notification,
                                inAdmin_Id         IN NUMBER,
                                inEr_Id            IN NUMBER,
                                inEe_Id            IN NUMBER,
                                icUserName         IN VARCHAR2,
                                icAchAcct          IN VARCHAR2,
                                icAchISO           IN VARCHAR2,
                                icIsAchValid       IN VARCHAR2,
                                icDebitCardStatus  IN VARCHAR2,
                                icEmail            IN VARCHAR2,
                                icIsAddressInValid IN VARCHAR2,
                                icSeverity         IN VARCHAR2,
                                inPriority         IN NUMBER,
                                icRuleType         VARCHAR2) IS
    rNotification trec_notification := trec_notification();
  BEGIN
    rNotification.category    := 'INYA';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARD.INYA.DIRECT_DEPOSIT_FAILED'),
                                          'Direct Deposit Failed');
    rNotification.link_label  := 'Validate';
    rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
    rNotification.rec_source  := 'DIRECT_DEPOSIT_FAILED';
    rNotification.priority    := inPriority;
    IF icAchAcct IS NOT NULL AND icAchIsO IS NOT NULL AND
       icIsAchValid IN ('No', 'PrenoteERR') THEN
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END IF;
  END DirectDepositFailed;

  PROCEDURE AddBeneficiaries(ottabNotification  IN OUT NOCOPY ttab_notification,
                             inAdmin_Id         IN NUMBER,
                             inEr_Id            IN NUMBER,
                             inEe_Id            IN NUMBER,
                             icUserName         IN VARCHAR2,
                             icAchAcct          IN VARCHAR2,
                             icAchISO           IN VARCHAR2,
                             icIsAchValid       IN VARCHAR2,
                             icDebitCardStatus  IN VARCHAR2,
                             icEmail            IN VARCHAR2,
                             icIsAddressInValid IN VARCHAR2,
                             icSeverity         IN VARCHAR2,
                             inPriority         IN NUMBER,
                             icRuleType         VARCHAR2) IS

    cResult              VARCHAR2(255) := 'ERROR';
    cErrorCategory       VARCHAR2(255) := 'OTHER';
    nErrorCode           NUMBER := 99999;
    cErrorArea           VARCHAR2(255) := 'Init';
    cOtherMessage        VARCHAR2(4000) := NULL;
    cObjName             VARCHAR2(255) := 'HSAROLE';
    cObjCD               VARCHAR2(20) := 'Section';
    occanview            VARCHAR2(3) := 'No';
    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';
    nuserid              NUMBER := NULL;

    rNotification trec_notification := trec_notification();

  BEGIN

    SELECT id INTO nuserid FROM Login WHERE user_name = icUserName;

    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);

    IF upper(occanexecute) = 'YES' THEN
      FOR cceebene IN (SELECT 'x'
                         FROM dual
                        WHERE EXISTS
                        (SELECT 'X'
                                 FROM election el, stack_election se
                                WHERE se.elct_id = el.id
                                  AND el.ee_id = inEe_Id
                                  AND el.erac_actp_cd = 'HSA'
                                  AND (trunc(SYSDATE) BETWEEN se.start_date AND
                                      se.end_date)
                                  AND UPPER(el.enrollment_status) =
                                      'ENROLLED'
                                  AND NOT EXISTS
                                (SELECT 'x'
                                         FROM dependent dp
                                        WHERE dp.ee_id = el.ee_id
                                          AND dp.allocated_percentage IS NOT NULL
                                          AND dp.allocated_percentage > 0))) LOOP

        rNotification.category    := 'BLOCKER';
        rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                        inEr_Id    => inEr_Id,
                                                                        icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.BENEFICIARIES.MISSING.DESC'),
                                              'In your account we don''t see any beneficiaries added. Please add...');
        rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                        inEr_Id    => inEr_Id,
                                                                        icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.BENEFICIARIES.MISSING.NOTE'),
                                              'Missing Beneficiaries');
        rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                        inEr_Id    => inEr_Id,
                                                                        icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.BENEFICIARIES.MISSING.LABEL'),
                                              'Enter Beneficiaries');
        rNotification.TYPE        := coalesce(icRuleType, 'Alert');
        rNotification.rec_source  := 'MISSING_BENEFICIARIES';
        rNotification.priority    := inPriority;

        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;

      END LOOP;
    END IF;
  END AddBeneficiaries;

  PROCEDURE DBCardTurnedOff(ottabNotification  IN OUT NOCOPY ttab_notification,
                            inAdmin_Id         IN NUMBER,
                            inEr_Id            IN NUMBER,
                            inEe_Id            IN NUMBER,
                            icUserName         IN VARCHAR2,
                            icAchAcct          IN VARCHAR2,
                            icAchISO           IN VARCHAR2,
                            icIsAchValid       IN VARCHAR2,
                            icDebitCardStatus  IN VARCHAR2,
                            icEmail            IN VARCHAR2,
                            icIsAddressInValid IN VARCHAR2,
                            icSeverity         IN VARCHAR2,
                            inPriority         IN NUMBER,
                            icRuleType         VARCHAR2) IS

    isTurnedOffDBCard VARCHAR2(3) := 'No';

    rNotification trec_notification := trec_notification();

  BEGIN

    SELECT decode(icDebitCardStatus,
                  'Suspended',
                  decode(clm_bac_util.getcardsuspendclosereason(inEe_Id),
                         'SUBST_FAILURE',
                         'Yes',
                         'No'),
                  'No')
      INTO isTurnedOffDBCard
      FROM dual;

    IF (isTurnedOffDBCard = 'Yes') THEN

      rNotification.category    := 'BLOCKER';
      rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.DEBITCARD.SUSPENDED.DESC'),
                                            'Debit card has been suspended please take action.');
      rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.DEBITCARD.SUSPENDED.NOTE'),
                                            'Debit Card Suspended');
      rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.DEBITCARD.SUSPENDED.LABEL'),
                                            'TAKE ACTION');
      rNotification.TYPE        := coalesce(icRuleType, 'Alert');
      rNotification.rec_source  := 'DEBITCARD_MISSING';
      rNotification.priority    := inPriority;

      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;

    END IF;

  END DBCardTurnedOff;

  PROCEDURE MissingEmail(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();

  BEGIN

    IF icEmail IS NULL THEN

      rNotification.category    := 'BLOCKER';
      rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.EMAIL.MISSING.DESC'),
                                            'Email ID is missing for the account, Please update email.');
      rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.EMAIL.MISSING.NOTE'),
                                            'Missing EmailID');
      rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.EMAIL.MISSING.LABEL'),
                                            'TAKE ACTION');
      rNotification.TYPE        := coalesce(icRuleType, 'Alert');
      rNotification.rec_source  := 'EMAIL_MISSING';
      rNotification.priority    := inPriority;

      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;

    END IF;

  END MissingEmail;

  PROCEDURE EnrollOnline(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2) IS
    --1.1.0

    bDummy BOOLEAN := FALSE;

    nUserId   NUMBER := NULL;
    cLink     VARCHAR2(4000) := '';
    cObjName  VARCHAR2(20) := 'EESMRY.EEELCTSMRY';
    cObjCD    VARCHAR2(20) := 'Section';
    occanview VARCHAR2(3) := 'No';

    cResult            VARCHAR2(255) := 'ERROR';
    cErrorCategory     VARCHAR2(255) := 'OTHER';
    nErrorCode         NUMBER := 99999;
    cErrorArea         VARCHAR2(255) := 'Init';
    cOtherMessage      VARCHAR2(4000) := NULL;
    cActpLabel         VARCHAR2(4000) := '';
    cElectionPeriod    VARCHAR2(4000) := '';
    cElectionStatus    VARCHAR2(4000) := '';
    cElectionAmount    VARCHAR2(4000) := '';
    cElectionEffective VARCHAR2(4000) := '';
    cElectionDate      VARCHAR2(4000) := '';

    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';

    rNotification trec_notification := trec_notification();

  BEGIN
    SELECT id INTO nuserid FROM Login WHERE user_name = icUserName;

    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);

    IF (occanview = 'Yes') THEN
      SELECT nvl(hyperlink, '')
        INTO clink
        FROM our_object
       WHERE NAME = cObjName
         AND typecd = cObjCD;

      IF (clink IS NOT NULL) THEN
        FOR rec_EnrollOnline IN (SELECT DISTINCT ea.actp_cd
                                   FROM employer_account ea
                                  WHERE ea.er_id = inEr_Id) LOOP
          cElectionStatus := '';
          cErrorArea      := 'GettingEeElctSmry';
          geteeelctsmrydata(cResult,
                            cErrorCategory,
                            nErrorcode,
                            cErrorarea,
                            cOthermessage,
                            inEe_Id,
                            inEr_Id,
                            rec_EnrollOnline.Actp_Cd,
                            cactplabel,
                            celectionperiod,
                            celectionstatus,
                            celectionamount,
                            celectioneffective,
                            celectiondate);

          IF (substr(cElectionStatus, 1, 6) = 'Elect|') THEN
            bDummy := TRUE;
            EXIT;
          END IF;

        END LOOP;
      END IF;
    END IF;

    IF bDummy THEN

      rNotification.category    := 'BLOCKER';
      rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.ENROLL.ONLINE.DESC'),
                                            'User has not been enrolled yet, Please enroll online.');
      rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.ENROLL.ONLINE.NOTE'),
                                            'Enroll Online');
      rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.ENROLL.ONLINE.LABEL'),
                                            'Enroll Online');
      rNotification.TYPE        := coalesce(icRuleType, 'Alert');
      rNotification.rec_source  := 'ENROLL_ONLINE';
      rNotification.priority    := inPriority;

      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;

    END IF;

  END EnrollOnline;

  PROCEDURE UpdateMailingAddress(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();
    bIsDependentPrimary         BOOLEAN := FALSE;
    nDepId               NUMBER;
    --bIsJRA               VARCHAR2(3);
    bIsInValidAddress      BOOLEAN := FALSE;

    CURSOR curEEAddressDetails(inEe_Id IN NUMBER) IS
      SELECT CASE
               WHEN ((ee.mailing_line1 IS NULL  AND ee.mailing_zip IS NULL AND
                    ee.mailing_city IS NULL AND ee.mailing_st_cd IS NULL AND
                    ee.mailing_st_ctry_cd IS NULL AND
                    nvl(is_resi_address_invalid, 'No') = 'Yes') OR
                    nvl(icIsAddressInValid, 'No') = 'Yes')
                THEN
                'No'
               ELSE
                'Yes'
             END valid_address
        FROM employee ee
       WHERE ee.id = inEe_Id;

  BEGIN
    --bIsJRA := jra_account_util.isJRA(inEe_Id);
	
    IF bIsJRA = 'Yes' THEN
      FOR recDependent IN (SELECT eah.dep_id
                             FROM ee_acct_holder eah
                            WHERE eah.acct_holder_type = 'Primary'
                              AND eah.ee_id = inEe_Id
                              AND eah.dep_id IS NOT NULL) LOOP
        bIsDependentPrimary := TRUE;
        nDepId       := recDependent.dep_id;
        EXIT;
      END LOOP;
      IF bIsDependentPrimary THEN
        FOR recDependentAddressDetails IN (SELECT CASE
                                                    WHEN ((d.mailing_address_line1 IS NULL  AND d.mailing_zip IS NULL AND
                                                         d.mailing_city IS NULL AND d.mailing_st_cd IS NULL AND
                                                         d.mailing_st_ctry_cd IS NULL AND
                                                         NVL(d.is_resi_address_invalid, 'No') = 'Yes') OR
                                                         NVL(d.is_address_invalid, 'No') = 'Yes')
                                                     THEN
                                                     'No'
                                                    ELSE
                                                     'Yes'
                                                  END valid_address
                                             FROM dependent d
                                            WHERE d.id = nDepId) LOOP
          IF (recDependentAddressDetails.valid_address = 'No') THEN
            bIsInValidAddress := TRUE;
          END IF;
          EXIT;
        END LOOP;
      ELSE
        FOR recEEAdressDetails IN curEEAddressDetails(inEe_Id) LOOP
          IF (recEEAdressDetails.valid_address = 'No') THEN
            bIsInValidAddress := TRUE;
          END IF;
          EXIT;
        END LOOP;
      END IF;
    ELSE
      FOR recEEAdressDetails IN curEEAddressDetails(inEe_Id) LOOP
        IF (recEEAdressDetails.valid_address = 'No') THEN
          bIsInValidAddress := TRUE;
        END IF;
        EXIT;
      END LOOP;
    END IF;
    IF bIsInValidAddress THEN
      rNotification.category    := 'BLOCKER';
      rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.INVALID.ADDRESS.DESC'),
                                            'We have mailed you important account information, but it was returned due to an invalid address. Please update your contact information. If you would like to receive electronic communications, check the "Go Paperless" checkbox.');
      rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.INVALID.ADDRESS.NOTE'),
                                            'Update Contact Information');
      rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                      inEr_Id    => inEr_Id,
                                                                      icLabel_Cd => 'DASHBOARD.PAGE.BLOCKER.INVALID.ADDRESS.LABEL'),
                                            'TAKE ACTION');
      rNotification.TYPE        := coalesce(icRuleType, 'Alert');
      rNotification.rec_source  := 'INVALID_MAILING_ADDRESS';
      rNotification.priority    := inPriority;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;
    END IF;

  END UpdateMailingAddress;

  PROCEDURE CompleteAccountOpening(ottabNotification  IN OUT NOCOPY ttab_notification,
                                   inAdminId          IN NUMBER,
                                   inErId             IN NUMBER,
                                   inEeId             IN NUMBER,
                                   icUserName         IN VARCHAR2,
                                   icAchAcct          IN VARCHAR2,
                                   icAchISO           IN VARCHAR2,
                                   icIsAchValid       IN VARCHAR2,
                                   icDebitCardStatus  IN VARCHAR2,
                                   icEmail            IN VARCHAR2,
                                   icIsAddressInValid IN VARCHAR2,
                                   icSeverity         IN VARCHAR2,
                                   inPriority         IN NUMBER,
                                   icRuleType         VARCHAR2) IS

    --------------------------------------------------------------------
    -- Activity      By                     On                Version --
    --------------------------------------------------------------------
    -- Modified      Gaurav Agarwal        06/19/2018        1.0.1
    /*
    Story id: PORTAL-519
      The blocker for asking documents against the CIP failure should not
      be shown to the user if some document is already uploaded by the
      participant.
    */
    ----------------------------------------------------------------------

    cStatus   VARCHAR2(50) := NULL;
    nUserId   NUMBER := NULL;
    cObjName  VARCHAR2(20) := 'HSAROLE';
    cObjCD    VARCHAR2(20) := 'Section';
    ocCanView VARCHAR2(3) := 'No';

    cResult        VARCHAR2(255) := 'ERROR';
    cErrorCategory VARCHAR2(255) := 'OTHER';
    nErrorCode     NUMBER := 99999;
    cErrorArea     VARCHAR2(255) := 'Init';
    cOtherMessage  VARCHAR2(4000) := NULL;

    ocCanExecute         VARCHAR2(3) := 'No';
    ocCanCreate          VARCHAR2(3) := 'No';
    ocCanDelete          VARCHAR2(3) := 'No';
    ocCanModify          VARCHAR2(3) := 'No';
    ocCanModifyIfNull    VARCHAR2(3) := 'No';
    ocCanModifyIfNotNull VARCHAR2(3) := 'No';
    ocCanModifyToNull    VARCHAR2(3) := 'No';
    cIdvStatus           VARCHAR2(50) := NULL;
    cCIPWorkGroup        VARCHAR2(255) := '';
    cClaimImgExist       VARCHAR2(3) := 'No';

    dSecurityCheckDate  DATE := SYSDATE;
    cSecurityCheckParam NUMBER;

    rNotification trec_notification := trec_notification();

    nTicketNo         NUMBER := 0;
    cCauseNote        VARCHAR2(4000) := '';
    bIsCIPDocRequired BOOLEAN := FALSE;
    bIsCIPDocReSubmit BOOLEAN := FALSE;
    cSecPartnerCd     VARCHAR2(20);
  BEGIN

    SELECT id INTO nUserId FROM Login WHERE user_name = icUserName;

    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cResult,
                 cErrorCategory,
                 nErrorCode,
                 cErrorArea,
                 cOtherMessage,
                 nUserId,
                 cObjName,
                 cObjCD,
                 ocCanView,
                 ocCanExecute,
                 ocCanCreate,
                 ocCanDelete,
                 ocCanModify,
                 ocCanModifyIfNull,
                 ocCanModifyIfNotNull,
                 ocCanModifyToNull);

    BEGIN

      SELECT elct.enrollment_status,
             elct.idv_status,
             trunc(elct.secutity_check_date)
        INTO cStatus, cIdvStatus, dSecurityCheckDate
        FROM (SELECT e.enrollment_status,
                     eea.idv_status,
                     eea.secutity_check_date
                FROM election e, elct_enrollment_activity eea
               WHERE e.id = eea.elct_id
                 AND e.erac_actp_cd = 'HSA'
                 AND eea.activity_type IN
                     ('Security_Check', 'Manual_Override')
                 AND e.ee_id = inEeId
                 AND e.erac_er_id = inErId
               ORDER BY eea.secutity_check_date DESC) elct
       WHERE rownum = 1;

      IF (cStatus = 'Security Fail' AND cIdvStatus = 'Failed' AND
         ocCanExecute = 'Yes') THEN

        BEGIN

          cSecPartnerCd := coalesce(RKP_Common.getbenconnect_cip(inadmnid => inAdminId,
                                                                 inerid   => inErId,
                                                                 icactpcd => 'HSA'),
                                    'N/A');

          IF cSecPartnerCd <> 'BenConnect-Acclaris' THEN
            cSecPartnerCd := RKP_Common.GetSecurityCheckPartner(inAdmnID => inAdminId,
                                                                inErID   => inErId);
          END IF;

          SELECT PARAM_VALUE
            INTO cSecurityCheckParam
            FROM PARTNER_PARAM PP, PARTNER P
           WHERE PP.PARTNER_ID = P.ID
             AND PP.PARAM_NAME = 'HSA_SECURITY_FAIL_AGEOUT_DAYS'
             AND SYSDATE BETWEEN PP.BEGINS AND PP.ENDS
             AND P.PARTNER_CODE = cSecPartnerCd;

        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            cSecurityCheckParam := 90;
          WHEN OTHERS THEN
            cSecurityCheckParam := 90;
        END;

        IF (trunc(SYSDATE) - dSecurityCheckDate) <= cSecurityCheckParam THEN
          BEGIN
            SELECT ticketDetail.id, ticketDetail.cause_note
              INTO nTicketNo, cCauseNote
              FROM (SELECT t.id, t.cause_note
                      FROM ticket t, ticket_subtype ts
                     WHERE ts.id = t.tkt_subtype_id
                       AND t.created_for_id = inEeId
                       AND t.created_by != 'impl.automation.ksc'
                       AND ts.tkty_category = 'Employee'
                       AND ts.tkty_label = 'Enrollment/Eligibility'
                       AND ts.subtype = 'Enrollment Status'
                     ORDER BY t.created_on DESC) ticketDetail
             WHERE rownum = 1;

          EXCEPTION
            WHEN no_data_found THEN
              nTicketNo  := 0;
              cCauseNote := '';
          END;

          IF (nTicketNo > 0) THEN
            bIsCIPDocReSubmit := TRUE;
          ELSE
            cCIPWorkGroup := GETWORKGROUPFORCIPUPLOAD(inAdminId,
                                                      inErId,
                                                      inEeId);
            BEGIN
              SELECT 'Yes'
                INTO cClaimImgExist
                FROM claims_image
               WHERE workgroup = cCIPWorkGroup
                 AND status = 'Indexed'
                 AND ee_id = inEeId
                 AND rownum = 1;

            EXCEPTION
              WHEN no_data_found THEN
                cClaimImgExist := 'No';
            END;
            IF (nvl(cClaimImgExist, 'No') <> 'Yes') THEN
              bIsCIPDocRequired := TRUE;
            END IF;
          END IF;
        END IF;
      END IF;

      IF bIsCIPDocReSubmit THEN
        rNotification.category     := 'BLOCKER';
        rNotification.reference_id := nTicketNo;
        rNotification.note         := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                         inEr_Id    => inErId,
                                                                         icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.HEADERMSG'),
                                               'We Need More Information');
        rNotification.description  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                         inEr_Id    => inErId,
                                                                         icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.BODYMSG1'),
                                               'Apologies, but we still need some information to open your HSA.') || '~' ||
                                      coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                         inEr_Id    => inErId,
                                                                         icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.BODYMSG2'),
                                               'We''ve created a help ticket so you can see the specific document(s) you need to send.') || '~' ||
                                      cCauseNote;

        rNotification.link_label := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                       inEr_Id    => inErId,
                                                                       icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.LATERTHANKS'),
                                             'LATER, THANKS') || '~' ||
                                    coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                       inEr_Id    => inErId,
                                                                       icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.VIEWTICKET'),
                                             'VIEW HELP TICKET') || '~' ||
                                    coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                       inEr_Id    => inErId,
                                                                       icLabel_Cd => 'SECURITYCHECKDOCUMENTRESUBMIT.PROVIDEDOCUMENTS'),
                                             'PROVIDE DOCUMENTS');

        rNotification.TYPE       := coalesce(icRuleType, 'Alert');
        rNotification.rec_source := 'COMPLETE_ACC_HT';
        rNotification.priority   := inPriority;

        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;

      ELSIF bIsCIPDocRequired THEN

        rNotification.category    := 'BLOCKER';
        rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                        inEr_Id    => inErId,
                                                                        icLabel_Cd => 'SECURITYCHECKMISSINGINFO.DESCRIPTION'),
                                              'We received your HSA application, but we need additional information to verify your identity. Please upload the documents listed below. If we don''t receive the requested information, we will stop attempting to open the account.');
        rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                        inEr_Id    => inErId,
                                                                        icLabel_Cd => 'SECURITYCHECKMISSINGINFO.NOTE'),
                                              'Required Documentation Needed');
        rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdminId,
                                                                        inEr_Id    => inErId,
                                                                        icLabel_Cd => 'SECURITYCHECKMISSINGINFO.PROVIDEDOCUMENTS'),
                                              'PROVIDE DOCUMENTS');
        rNotification.TYPE        := coalesce(icRuleType, 'Alert');
        rNotification.rec_source  := 'COMPLETE_ACC_OPENING';
        rNotification.priority    := inPriority;

        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;

      END IF;

    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;

  END CompleteAccountOpening;

  PROCEDURE RESOLVERECEIPTREQDACT(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                                  INADMINID          IN NUMBER,
                                  INERID             IN NUMBER,
                                  INEEID             IN NUMBER,
                                  ICUSERNAME         IN VARCHAR2,
                                  ICACHACCT          IN VARCHAR2,
                                  ICACHISO           IN VARCHAR2,
                                  ICISACHVALID       IN VARCHAR2,
                                  ICDEBITCARDSTATUS  IN VARCHAR2,
                                  ICEMAIL            IN VARCHAR2,
                                  ICISADDRESSINVALID IN VARCHAR2,
                                  ICSEVERITY         IN VARCHAR2,
                                  INPRIORITY         IN NUMBER,
                                  ICRULETYPE         IN VARCHAR2) IS

    RNOTIFICATION      TREC_NOTIFICATION := TREC_NOTIFICATION();
    NADMNID            NUMBER;
    NERID              NUMBER;
    NEEID              NUMBER;
    CCLAIMDTLS         VARCHAR2(32767) := NULL;
    CDBTCARDSTATUS     VARCHAR2(50) := NULL;
    CTEMPDBTCARDSTATUS VARCHAR2(50) := NULL;
  BEGIN

    NADMNID := INADMINID;
    NERID   := INERID;
    NEEID   := INEEID;

    BEGIN

      IF ICDEBITCARDSTATUS != 'Suspended' THEN
        FOR CRCPTRQDCLM IN (SELECT EE.DEBIT_CARD_STATUS,
                                   CL.ID ID,
                                   TO_CHAR(CL.SERVICE_BEGINS, 'MM/DD/YYYY') SERVICE_BEGINS,
                                   REPLACE(REPLACE(CL.PROVIDER, '~', ' '),
                                           '|',
                                           ' ') PROVIDER,
                                   CL.AMT,
                                   CASE
                                     WHEN CI.STATUS = 'Complete' THEN
                                      'Invalid Receipt'
                                     ELSE
                                      'Receipt Required'
                                   END AS STATUS,
                                   EL.ERAC_ACTP_CD ACTP_CD
                              FROM CLAIM        CL,
                                   CLAIM_BATCH  CB,
                                   ELECTION     EL,
                                   ACCOUNT_TYPE AT,
                                   CLAIMS_IMAGE CI,
                                   EMPLOYEE     EE
                             WHERE EE.ID = NEEID
                               AND CL.CLMBT_ID = CB.ID
                               AND EE.ID = CL.EE_ID
                               AND CL.CLAIM_CATEGORY = 'Debit Card'
                               AND CL.ELCT_ID = EL.ID
                               AND EL.ERAC_ACTP_CD = AT.CD
                               AND UPPER(AT.RECEIPT_REQD) = 'YES'
                               AND CL.NEEDS_SUBSTANTIATION = 'Yes'
                               AND CL.SUBSTANTIATION_STATUS != 'Pass'
                               AND CL.IS_PRE_TAX = 'No'
                               AND CL.STATUS IN ('Paid', 'Released')
                               AND TRUNC(CLM_VALIDATECLAIMUTIL.GETRUNOFFDATE(CL.EE_ID,
                                                                             EL.ID,
                                                                             EL.ERAC_ER_ID,
                                                                             EL.ERAC_ACTP_CD)) >=
                                   TRUNC(SYSDATE)
                               AND CI.CLMBT_ID(+) = CB.ID
                               AND (CI.STATUS NOT IN
                                   ('Indexed', 'Review', 'QAPending') OR
                                   CI.STATUS IS NULL)
                               AND CL.SERVICE_BEGINS >
                                   TRUNC(ADD_MONTHS(SYSDATE, -12), 'RRRR')
                               AND CL.AMT > 0
                               AND CL.ID NOT IN
                                   (SELECT DCFO.CLM_ID
                                      FROM DBCARD_CLAIM_OFFSET     DCO,
                                           DBCARD_CLAIM_FOR_OFFSET DCFO
                                     WHERE DCO.EE_ID = EL.EE_ID
                                       AND DCO.ID = DCFO.DCCLMOFF_ID
                                       AND DCO.STATUS =
                                           'Online-Claim-Selected')
                             ORDER BY SERVICE_BEGINS DESC) LOOP

          CCLAIMDTLS     := CCLAIMDTLS || CRCPTRQDCLM.ID || '~' ||
                            CRCPTRQDCLM.SERVICE_BEGINS || '~' ||
                            COALESCE(CRCPTRQDCLM.PROVIDER, '') || '~' ||
                            CRCPTRQDCLM.AMT || '~' || CRCPTRQDCLM.STATUS || '~' ||
                            CRCPTRQDCLM.ACTP_CD || '|';
          CDBTCARDSTATUS := CRCPTRQDCLM.DEBIT_CARD_STATUS;
        END LOOP;

      ELSIF ICDEBITCARDSTATUS = 'Suspended' THEN

        FOR CSUSPRCPTRQDCLM IN (SELECT CL.ID ID,
                                       TO_CHAR(CL.SERVICE_BEGINS,
                                               'MM/DD/YYYY') SERVICE_BEGINS,
                                       CL.PROVIDER,
                                       CL.AMT,
                                       CL.EE_ID EE_ID,
                                       CASE
                                         WHEN CI.STATUS = 'Complete' THEN
                                          'Invalid Receipt'
                                         ELSE
                                          'Receipt Required'
                                       END AS STATUS,
                                       ELCT.ERAC_ACTP_CD ACTP_CD
                                  FROM CLAIM            CL,
                                       CLAIM_BATCH      CB,
                                       EMPLOYEE         EE,
                                       ELECTION         ELCT,
                                       EMPLOYER_ACCOUNT EAC,
                                       EMPLOYER         ER,
                                       ER_CLAIM_PARAM   ERCP,
                                       CLAIMS_IMAGE     CI
                                 WHERE CL.CLMBT_ID = CB.ID
                                   AND CI.CLMBT_ID(+) = CB.ID
                                   AND (CI.STATUS NOT IN
                                       ('Indexed', 'Review', 'QAPending') OR
                                       CI.STATUS IS NULL)
                                   AND CL.CLAIM_CATEGORY = 'Debit Card'
                                   AND CL.EE_ID = EE.ID
                                   AND EE.DEBIT_CARD_STATUS = 'Suspended'
                                   AND EE.ID = NEEID
                                   AND CL.ELCT_ID = ELCT.ID
                                   AND ELCT.EE_ID = EE.ID
                                   AND ELCT.ERAC_ER_ID = EAC.ER_ID
                                   AND ELCT.ERAC_ACTP_CD = EAC.ACTP_CD
                                   AND ELCT.ERAC_ENDS = EAC.ENDS
                                   AND ERCP.ER_ID = ER.ID
                                   AND CL.SUBSTANTIATION_STATUS IN
                                       (DECODE(EAC.SUBSTFAIL_NOTIFY3_DAYS,
                                               0,
                                               DECODE(EAC.SUBSTFAIL_NOTIFY2_DAYS,
                                                      0,
                                                      'Notified1',
                                                      'Notified2'),
                                               'Notified3'))
                                   AND ((ERCP.DEBIT_CARD_AUTO_UNSUSPEND =
                                       'Yes' AND
                                       ((EAC.ENDS =
                                       TO_DATE('12/31/2099 23:59:59',
                                                   'MM/DD/YYYY HH24:MI:SS') AND
                                       CL.SERVICE_ENDS BETWEEN
                                       TRUNC(SYSDATE, 'YYYY') AND TRUNC((ADD_MONTHS(TRUNC(SYSDATE,
                                                                                              'YYYY'),
                                                                                        12) - 1)) +
                                       .99999) OR
                                       (EAC.ENDS <>
                                       TO_DATE('12/31/2099 23:59:59',
                                                   'MM/DD/YYYY HH24:MI:SS') AND
                                       ((EAC.ENDS >= TRUNC(SYSDATE) AND
                                       SYSDATE BETWEEN EAC.BEGINS AND
                                       EAC.ENDS AND CL.SERVICE_ENDS BETWEEN
                                       EAC.BEGINS AND EAC.ENDS) OR
                                       (EAC.ENDS < TRUNC(SYSDATE) AND
                                       SYSDATE BETWEEN EAC.BEGINS AND
                                       GREATEST(EAC.ENDS,
                                                      CLM_BAC_UTIL.GETELCTENDDATEWITHGRACE(CL.ELCT_ID)) AND
                                       CL.SERVICE_ENDS BETWEEN
                                       EAC.BEGINS AND
                                       GREATEST(EAC.ENDS,
                                                      CLM_BAC_UTIL.GETELCTENDDATEWITHGRACE(CL.ELCT_ID))))))) OR
                                       (NVL(ERCP.DEBIT_CARD_AUTO_UNSUSPEND,
                                             'No') = 'No' AND
                                       ((EAC.ENDS =
                                       TO_DATE('12/31/2099 23:59:59',
                                                   'MM/DD/YYYY HH24:MI:SS') AND
                                       CL.SERVICE_ENDS BETWEEN
                                       ADD_MONTHS(TRUNC(SYSDATE, 'YYYY'),
                                                      -12) AND TRUNC((ADD_MONTHS(TRUNC(SYSDATE,
                                                                                           'YYYY'),
                                                                                     12) - 1)) +
                                       .99999) OR
                                       (EAC.ENDS <>
                                       TO_DATE('12/31/2099 23:59:59',
                                                   'MM/DD/YYYY HH24:MI:SS') AND
                                       ((SYSDATE BETWEEN EAC.BEGINS AND
                                       EAC.ENDS AND CL.SERVICE_ENDS BETWEEN
                                       EAC.BEGINS AND EAC.ENDS) OR
                                       (ADD_MONTHS(SYSDATE, -12) BETWEEN
                                       EAC.BEGINS AND EAC.ENDS AND
                                       CL.SERVICE_ENDS BETWEEN
                                       EAC.BEGINS AND
                                       GREATEST(EAC.ENDS,
                                                      CLM_BAC_UTIL.GETELCTENDDATEWITHGRACE(CL.ELCT_ID))))))))
                                   AND EE.PYCL_ER_ID = ER.ID) LOOP

          CCLAIMDTLS     := CCLAIMDTLS || CSUSPRCPTRQDCLM.ID || '~' ||
                            CSUSPRCPTRQDCLM.SERVICE_BEGINS || '~' ||
                            COALESCE(CSUSPRCPTRQDCLM.PROVIDER, '') || '~' ||
                            CSUSPRCPTRQDCLM.AMT || '~' ||
                            CSUSPRCPTRQDCLM.STATUS || '~' ||
                            CSUSPRCPTRQDCLM.ACTP_CD || '|';
          CDBTCARDSTATUS := ICDEBITCARDSTATUS;
        END LOOP;
      END IF;
    END;

    IF CCLAIMDTLS IS NOT NULL THEN

      RNOTIFICATION.CATEGORY    := 'BLOCKER';
      RNOTIFICATION.DESCRIPTION := CCLAIMDTLS;
      RNOTIFICATION.NOTE        := CDBTCARDSTATUS;
      RNOTIFICATION.LINK_LABEL  := 'TAKE ACTION';
      RNOTIFICATION.TYPE        := COALESCE(ICRULETYPE, 'Alert');
      RNOTIFICATION.REC_SOURCE  := 'RECEIPT REQUIRED';
      RNOTIFICATION.PRIORITY    := INPRIORITY;

      OTTABNOTIFICATION.EXTEND();
      OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
    END IF;
  END RESOLVERECEIPTREQDACT;

  PROCEDURE RunOutOfTimeToUseBalanceCY(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         IN NUMBER,
                                       inEr_Id            IN NUMBER,
                                       inEe_Id            IN NUMBER,
                                       icUserName         IN VARCHAR2,
                                       icAchAcct          IN VARCHAR2,
                                       icAchISO           IN VARCHAR2,
                                       icIsAchValid       IN VARCHAR2,
                                       icDebitCardStatus  IN VARCHAR2,
                                       icEmail            IN VARCHAR2,
                                       icIsAddressInValid IN VARCHAR2,
                                       icSeverity         IN VARCHAR2,
                                       inPriority         IN NUMBER,
                                       icRuleType         VARCHAR2) IS

    dEffective DATE := SYSDATE;
    nCutOffDays CONSTANT NUMBER := 30;
    cString             VARCHAR2(500) := 'Spend the funds on qualified expenses before the deadline to put them to good use!';
    cBalanceText        VARCHAR2(500) := 'Your balance from {{accType}} {{year}} must be used by {{endDate}}.';
    cBalanceUpdatedText VARCHAR2(4000) := '';
    bCutOffDaysPassed   BOOLEAN := FALSE;
    cResult             VARCHAR2(255);
    cErrorCategory      VARCHAR2(255);
    nErrorCode          NUMBER;
    cErrorArea          VARCHAR2(255);
    cOtherMessage       VARCHAR2(4000);
    cDemogValue         VARCHAR2(255);
    dEracEnds           DATE := SYSDATE;
    cYear               VARCHAR2(255);
    rNotification       trec_notification := trec_notification();
    cLabelBalanceText   VARCHAR2(500) := PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                   inEr_Id     => inEr_Id,
                                                                   icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.CY.BALANCEDESC',
                                                                   icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS');

  BEGIN

    IF jra_account_util.IsErJRA(inEr_Id) = 'No' THEN
      FOR rec_election IN (SELECT EL.ID ELCTID,
                                  EL.ERAC_ACTP_CD ACTPCD,
                                  EL.ERAC_ER_ID ELERACERID,
                                  EXTRACT(YEAR FROM EL.Erac_Ends) YEAR,
                                  EL.Erac_Ends AS ERAC_END,
                                  EL.Election_Effective AS ERAC_EFFECTIVE
                             FROM ELECTION EL
                            WHERE EL.ERAC_ACTP_CD NOT IN
                                  ('NON REIMBURSEMENT', 'NO ELECTION')
                              AND EL.EE_ID = inEe_Id
                              AND EXTRACT(YEAR FROM EL.Erac_Ends) < 2099
                              AND (SYSDATE BETWEEN EL.ELECTION_EFFECTIVE AND
                                  EL.ERAC_ENDS)
                            ORDER BY EL.Erac_Ends DESC) LOOP

        IF (TRUNC(rec_election.erac_end) - TRUNC(SYSDATE) BETWEEN 1 AND
           nCutOffDays) AND
           nvl(CLM_DISPLAYEEBALANCE(rec_election.ELCTID, 'No'), 0) > 0 THEN
          cYear      := rec_election.year;
          dEracEnds  := rec_election.erac_end;
          dEffective := rec_election.erac_effective;
          IF EXTRACT(YEAR FROM dEffective) != cYear THEN
            cBalanceUpdatedText := cBalanceUpdatedText ||
                                   REPLACE(REPLACE(REPLACE(coalesce(cLabelBalanceText,
                                                                    cBalanceText),
                                                           '{{year}}',
                                                           TO_CHAR(dEffective,
                                                                   'MM/DD/YYYY')),

                                                   '{{endDate}}',
                                                   TO_CHAR(dEracEnds,
                                                           'MM/DD/YYYY')),
                                           '{{accType}}',
                                           PortalUtil.GetAccountLabel(inEe_Id,
                                                                      rec_election.actpcd)) || '~';
          ELSE
            cBalanceUpdatedText := cBalanceUpdatedText ||
                                   REPLACE(REPLACE(REPLACE(coalesce(cLabelBalanceText,
                                                                    cBalanceText),
                                                           '{{year}}',
                                                           cYear),

                                                   '{{endDate}}',
                                                   TO_CHAR(dEracEnds,
                                                           'MM/DD/YYYY')),
                                           '{{accType}}',
                                           PortalUtil.GetAccountLabel(inEe_Id,
                                                                      rec_election.actpcd)) || '~';
          END IF;
          bCutOffDaysPassed := TRUE;

        END IF;
      END LOOP;

      IF bCutOffDaysPassed THEN

        rNotification.category := 'BLOCKER';

        rNotification.description := cBalanceUpdatedText ||
                                     coalesce(PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                        inEr_Id     => inEr_Id,
                                                                        icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.CY.DESC',
                                                                        icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS'),
                                              cString);

        rNotification.note := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                 inEr_Id     => inEr_Id,
                                                                 icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.CY.NOTE',
                                                                 icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS'),
                                       'Don''t Lose Your Money');

        BEGIN
          get_er_admn_demog(cResult,
                            cErrorCategory,
                            nErrorCode,
                            cErrorArea,
                            cOtherMessage,
                            inAdmin_Id,
                            inEr_Id,
                            'PAY_TYPE',
                            cDemogValue,
                            'System',
                            'No',
                            'No');
          IF cResult = 'OK' THEN
            IF nvl(cDemogValue, 'Self') = 'Both' THEN
              rNotification.link_label := 'PAGEBLOCKER.RUNOUTOFTIME.CY.ENTERREIMBURSEMENT' || '~' ||
                                          'Enabled' || '~' ||
                                          'PAGEBLOCKER.RUNOUTOFTIME.CY.PAYABILL' || '~' ||
                                          'Enabled';
            ELSIF nvl(cDemogValue, 'Self') = 'Self' THEN
              rNotification.link_label := 'PAGEBLOCKER.RUNOUTOFTIME.CY.ENTERREIMBURSEMENT' || '~' ||
                                          'Enabled' || '~' ||
                                          'PAGEBLOCKER.RUNOUTOFTIME.CY.PAYABILL' || '~' ||
                                          'Disabled';
            END IF;
          ELSE
            rNotification.link_label := '';
          END IF;

        END;
        rNotification.TYPE       := coalesce(icRuleType, 'Alert');
        rNotification.rec_source := 'RUN_OUTOF_TIME_CY';
        rNotification.priority   := inPriority;

        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      END IF;
    END IF;
  END RunOutOfTimeToUseBalanceCY;

  PROCEDURE RunOutOfTimeToUseBalancePY(ottabNotification  IN OUT NOCOPY ttab_notification,
                                       inAdmin_Id         IN NUMBER,
                                       inEr_Id            IN NUMBER,
                                       inEe_Id            IN NUMBER,
                                       icUserName         IN VARCHAR2,
                                       icAchAcct          IN VARCHAR2,
                                       icAchISO           IN VARCHAR2,
                                       icIsAchValid       IN VARCHAR2,
                                       icDebitCardStatus  IN VARCHAR2,
                                       icEmail            IN VARCHAR2,
                                       icIsAddressInValid IN VARCHAR2,
                                       icSeverity         IN VARCHAR2,
                                       inPriority         IN NUMBER,
                                       icRuleType         VARCHAR2) IS

    dSubmitEnds DATE := SYSDATE;
    dEffective  DATE := SYSDATE;
    nCutOffDays CONSTANT NUMBER := 30;
    cString             VARCHAR2(500) := 'Spend the funds on qualified expenses before the deadline to put them to good use!';
    cBalanceText        VARCHAR2(500) := 'Your balance from {{accType}} {{year}} must be used by {{endDate}}.';
    cBalanceUpdatedText VARCHAR2(4000) := '';
    bCutOffDaysPassed   BOOLEAN := FALSE;
    cResult             VARCHAR2(255);
    cErrorCategory      VARCHAR2(255);
    nErrorCode          NUMBER;
    cErrorArea          VARCHAR2(255);
    cOtherMessage       VARCHAR2(4000);
    cDemogValue         VARCHAR2(255);
    dEracEnds           DATE := SYSDATE;
    cYear               VARCHAR2(255);
    rNotification       trec_notification := trec_notification();
    cLabelBalanceText   VARCHAR2(500) := PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                   inEr_Id     => inEr_Id,
                                                                   icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.PY.BALANCEDESC',
                                                                   icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS');
  BEGIN

    IF jra_account_util.IsErJRA(inEr_Id) = 'No' THEN
      FOR rec_election IN (SELECT EL.ID ELCTID,
                                  EL.ERAC_ACTP_CD ACTPCD,
                                  EL.ERAC_ER_ID ELERACERID,
                                  EXTRACT(YEAR FROM EL.Erac_Ends) YEAR,
                                  EL.Erac_Ends AS ERAC_END,
                                  EL.Election_Effective AS ERAC_EFFECTIVE
                             FROM ELECTION EL
                            WHERE EL.ERAC_ACTP_CD NOT IN
                                  ('NON REIMBURSEMENT', 'NO ELECTION')
                              AND EL.EE_ID = inEe_Id
                              AND EXTRACT(YEAR FROM EL.Erac_Ends) < 2099
                              AND (SYSDATE > EL.Election_Effective AND SYSDATE > EL.Erac_Ends)
                            ORDER BY EL.Erac_Ends DESC) LOOP

        dSubmitEnds := Clm_Validateclaimutil.getRunOffDate(inEe_Id,
                                                           rec_election.ELCTID,
                                                           rec_election.ELERACERID,
                                                           rec_election.ACTPCD);

        IF (TRUNC(dSubmitEnds) - TRUNC(SYSDATE) BETWEEN 1 AND nCutOffDays) AND
           nvl(CLM_DISPLAYEEBALANCE(rec_election.ELCTID, 'No'), 0) > 0 THEN
          cYear      := rec_election.year;
          dEracEnds  := rec_election.erac_end;
          dEffective := rec_election.erac_effective;
          IF EXTRACT(YEAR FROM dEffective) != cYear THEN
            cBalanceUpdatedText := cBalanceUpdatedText ||
                                   REPLACE(REPLACE(REPLACE(coalesce(cLabelBalanceText,
                                                                    cBalanceText),
                                                           '{{year}}',
                                                           TO_CHAR(dEffective,
                                                                   'MM/DD/YYYY')),

                                                   '{{endDate}}',
                                                   TO_CHAR(dSubmitEnds,
                                                           'MM/DD/YYYY')),
                                           '{{accType}}',
                                           PortalUtil.GetAccountLabel(inEe_Id,
                                                                      rec_election.actpcd)) || '~';
          ELSE
            cBalanceUpdatedText := cBalanceUpdatedText ||
                                   REPLACE(REPLACE(REPLACE(coalesce(cLabelBalanceText,
                                                                    cBalanceText),
                                                           '{{year}}',
                                                           cYear),

                                                   '{{endDate}}',
                                                   TO_CHAR(dSubmitEnds,
                                                           'MM/DD/YYYY')),
                                           '{{accType}}',
                                           PortalUtil.GetAccountLabel(inEe_Id,
                                                                      rec_election.actpcd)) || '~';
          END IF;
          bCutOffDaysPassed := TRUE;

        END IF;
      END LOOP;

      IF bCutOffDaysPassed THEN

        rNotification.category    := 'BLOCKER';
        rNotification.description := cBalanceUpdatedText ||
                                     coalesce(PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                        inEr_Id     => inEr_Id,
                                                                        icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.PY.DESC',
                                                                        icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS'),
                                              cString);

        rNotification.note := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id  => inAdmin_Id,
                                                                 inEr_Id     => inEr_Id,
                                                                 icLabel_Cd  => 'PAGEBLOCKER.RUNOUTOFTIME.PY.NOTE',
                                                                 icPortal_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS'),
                                       'Don''t Lose Your Money');

        BEGIN
          get_er_admn_demog(cResult,
                            cErrorCategory,
                            nErrorCode,
                            cErrorArea,
                            cOtherMessage,
                            inAdmin_Id,
                            inEr_Id,
                            'PAY_TYPE',
                            cDemogValue,
                            'System',
                            'No',
                            'No');
          IF cResult = 'OK' THEN
            IF nvl(cDemogValue, 'Self') = 'Both' THEN
              rNotification.link_label := 'PAGEBLOCKER.RUNOUTOFTIME.PY.ENTERREIMBURSEMENT' || '~' ||
                                          'Enabled' || '~' ||
                                          'PAGEBLOCKER.RUNOUTOFTIME.PY.PAYABILL' || '~' ||
                                          'Enabled';
            ELSIF nvl(cDemogValue, 'Self') = 'Self' THEN
              rNotification.link_label := 'PAGEBLOCKER.RUNOUTOFTIME.PY.ENTERREIMBURSEMENT' || '~' ||
                                          'Enabled' || '~' ||
                                          'PAGEBLOCKER.RUNOUTOFTIME.PY.PAYABILL' || '~' ||
                                          'Disabled';
            END IF;
          ELSE
            rNotification.link_label := '';
          END IF;

        END;
        rNotification.TYPE       := coalesce(icRuleType, 'Alert');
        rNotification.rec_source := 'RUN_OUTOF_TIME_PY';
        rNotification.priority   := inPriority;

        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      END IF;
    END IF;
  END RunOutOfTimeToUseBalancePY;

  PROCEDURE CashBalanceThreshold(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();

    nDummy               PLS_INTEGER := 0;
    cResult              VARCHAR2(255) := 'ERROR';
    cErrorCategory       VARCHAR2(255) := 'OTHER';
    nErrorCode           NUMBER := 99999;
    cErrorArea           VARCHAR2(255) := 'Init';
    cOtherMessage        VARCHAR2(4000);
    nUserId              NUMBER;
    cObjName             VARCHAR2(20) := 'HSAROLE';
    cObjCD               VARCHAR2(20) := 'Section';
    occanview            VARCHAR2(3) := 'No';
    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';
    cEntityType          VARCHAR2(3);
    oShouldDispInvLink   VARCHAR2(5) := 'Yes';
    nElctID              NUMBER := 0;
    nAvlBalance          NUMBER := 0;
    nThresholdLimit      NUMBER;
    cIsInvested          VARCHAR2(10);

  BEGIN

    SELECT id INTO nuserid FROM Login WHERE user_name = icUserName;

    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);

    IF UPPER(occanexecute) = 'YES' THEN
      BEGIN
        SELECT decode(eed.demog_value, 'Move Completed', 'No', 'Yes')
          INTO oShouldDispInvLink
          FROM ee_demog eed
         WHERE eed.ee_id = inEe_Id
           AND eed.demog_type = 'MIGRATION_STATUS';
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
      IF UPPER(oShouldDispInvLink) = 'YES' THEN

        SELECT nvl(GetElectionForHSA(inEe_Id), 0) INTO nElctID FROM dual;

        IF nvl(nElctID, 0) <> 0 THEN
          SELECT nvl(CLM_DISPLAYEEBALANCE(nElctID, 'No'), 0)
            INTO nAvlBalance
            FROM dual;
        END IF;
        BEGIN
          nThresholdLimit := nvl(to_number(apputil.GetErAdmnDemog('HSA_INVESTMENT_THRESHOLD',
                                                                  inAdmin_Id,
                                                                  inEr_Id,
                                                                  SYSDATE,
                                                                  'Yes')),
                                 0);
        EXCEPTION
          WHEN OTHERS THEN
            nThresholdLimit := 0;
        END;
        IF nvl(nAvlBalance, 0) > nvl(nThresholdLimit, 0) THEN
          rNotification.category    := 'DIDYOUKNOW';
          rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                          inEr_Id    => inEr_Id,
                                                                          icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.INVESTNOW.DESC'),
                                                'Dont be caught by suprise. Try our investment calculator.');
          rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                          inEr_Id    => inEr_Id,
                                                                          icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.INVESTNOW.NOTE'),
                                                'Are You on Track for Retirement?');
          rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                          inEr_Id    => inEr_Id,
                                                                          icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.INVESTNOW.LINKLABEL'),
                                                'INVESTMENT CALCULATOR');
          rNotification.TYPE        := coalesce(icRuleType, 'Notification');
          rNotification.rec_source  := 'INVESTMENT_CALCULATOR';
          rNotification.priority    := inPriority;

          ottabNotification.Extend();
          ottabNotification(ottabNotification.Last) := rNotification;
        END IF;
      END IF;
    END IF;
  END CashBalanceThreshold;

  PROCEDURE UnderStandingAccount(ottabNotification  IN OUT NOCOPY ttab_notification,
                                 inAdmin_Id         IN NUMBER,
                                 inEr_Id            IN NUMBER,
                                 inEe_Id            IN NUMBER,
                                 icUserName         IN VARCHAR2,
                                 icAchAcct          IN VARCHAR2,
                                 icAchISO           IN VARCHAR2,
                                 icIsAchValid       IN VARCHAR2,
                                 icDebitCardStatus  IN VARCHAR2,
                                 icEmail            IN VARCHAR2,
                                 icIsAddressInValid IN VARCHAR2,
                                 icSeverity         IN VARCHAR2,
                                 inPriority         IN NUMBER,
                                 icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();

  BEGIN

    rNotification.category    := 'DIDYOUKNOW';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.UNDERSTAND.ACCOUNT.DESC'),
                                          'Having trouble understanding your account? We are here to help.');
    rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.UNDERSTAND.ACCOUNT.NOTE'),
                                          'Understanding Your Account');
    rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.UNDERSTAND.ACCOUNT.LINKLABEL'),
                                          'WATCH THE VIDEO');
    rNotification.TYPE        := coalesce(icRuleType, 'Notification');
    rNotification.rec_source  := 'UNDERSTAND_ACCOUNT';
    rNotification.priority    := inPriority;

    ottabNotification.Extend();
    ottabNotification(ottabNotification.Last) := rNotification;

  END UnderStandingAccount;

  PROCEDURE GetMobileApp(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2) IS

    rNotification trec_notification := trec_notification();

  BEGIN

    rNotification.category    := 'DIDYOUKNOW';
    rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.GET.MOBILE.DESC'),
                                          'Upload your receipts on the go with our mobile app!');
    rNotification.note        := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.GET.MOBILE.NOTE'),
                                          'Get the Mobile App');
    rNotification.link_label  := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                    inEr_Id    => inEr_Id,
                                                                    icLabel_Cd => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS.GET.MOBILE.LINKLABEL'),
                                          'DOWNLOAD IT NOW');
    rNotification.TYPE        := coalesce(icRuleType, 'Notification');
    rNotification.rec_source  := 'GET_MOBILE';
    rNotification.priority    := inPriority;

    ottabNotification.Extend();
    ottabNotification(ottabNotification.Last) := rNotification;

  END GetMobileApp;

  PROCEDURE EXCESSCONTRIBCHECK(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                               INADMIN_ID         NUMBER,
                               INER_ID            NUMBER,
                               INEE_ID            NUMBER,
                               ICUSERNAME         VARCHAR2,
                               ICACHACCT          VARCHAR2,
                               ICACHISO           VARCHAR2,
                               ICISACHVALID       VARCHAR2,
                               ICDEBITCARDSTATUS  VARCHAR2,
                               ICEMAIL            VARCHAR2,
                               ICISADDRESSINVALID VARCHAR2,
                               ICSEVERITY         VARCHAR2,
                               INPRIORITY         NUMBER,
                               ICRULETYPE         VARCHAR2) IS

    --------------------------------------------------------------------
    -- Activity      By                     On                Version --
    --------------------------------------------------------------------
    -- Created       Titas Das         19/04/2019              1.0.1
    /*
    Story id: PORTAL-6370, PORTAL-6371
    Popup on excess contribution exceeding 100% or threshold value.
    */
    -------------------------------------------------------------------------------------------------------------

    cACTIVEHSACHECK              VARCHAR2(255) := NULL;
    nPYExcessContribAmt          NUMBER;
    nCYExcessContribAmt          NUMBER;
    bPriorYrTaxDeadlineNotPassed BOOLEAN;

    CURSOR CURHED_EXCESS_THRESHOLD_CY IS
     SELECT TO_CHAR(HED.CONTRIB_YEAR) AS CONTRIB_YEAR
       FROM HSA_EXCESS_DEPOSIT HED, DEPOSIT D
      WHERE HED.DPST_ID = D.ID AND D.EE_ID = INEE_ID
        AND HED.EXCESS_LIMIT_TYPE IN
            ('ThresholdFamily',
             'ThresholdFamily+CatchUp',
             'ThresholdAverage',
             'ThresholdAverage+CatchUp',
             'ThresholdYrLastMonth',
             'ThresholdYrLastMonth+CatchUp')
        AND NOT EXISTS
      (SELECT 1
               FROM HSA_EXCESS_DEPOSIT HED1, DEPOSIT D1
        WHERE HED1.DPST_ID = D1.ID AND D1.EE_ID = INEE_ID
              AND HED1.EXCESS_LIMIT_TYPE IN
                    ('Family',
                     'Family+CatchUp',
                     'Average',
                     'Average+CatchUp',
                     'YrLastMonth',
                     'YrLastMonth+CatchUp')
                AND HED1.IS_REPORTED = 'Yes'
                AND HED1.CONTRIB_YEAR = EXTRACT(YEAR FROM SYSDATE))
        AND NOT EXISTS
      (SELECT 1
               FROM PREFERENCE_INFO PI, USER_PREFERENCE UP
              WHERE UP.PREF_ID = PI.ID
                AND PI.PREFERENCE_NAME =
                    'EXCESS_CONTRIBUTION_THRESHOLD_DONOTSHOW_FOR_YEAR'
                AND UP.EE_ID = INEE_ID
                AND UP.PREFFERED_CHOICE LIKE
                    '%' || TO_CHAR(EXTRACT(YEAR FROM SYSDATE)) || '%')
        AND HED.IS_REPORTED = 'Yes'
        AND HED.CONTRIB_YEAR = EXTRACT(YEAR FROM SYSDATE);

   CURSOR CURHED_EXCESS_THRESHOLD_PY IS
     SELECT TO_CHAR(HED.CONTRIB_YEAR) AS CONTRIB_YEAR
       FROM HSA_EXCESS_DEPOSIT HED, DEPOSIT D
      WHERE HED.DPST_ID = D.ID AND D.EE_ID = INEE_ID
        AND HED.EXCESS_LIMIT_TYPE IN
            ('ThresholdFamily',
             'ThresholdFamily+CatchUp',
             'ThresholdAverage',
             'ThresholdAverage+CatchUp',
             'ThresholdYrLastMonth',
             'ThresholdYrLastMonth+CatchUp')
        AND NOT EXISTS
      (SELECT 1
               FROM HSA_EXCESS_DEPOSIT HED1, DEPOSIT D1
        WHERE HED1.DPST_ID = D1.ID AND D1.EE_ID = INEE_ID
                AND HED1.EXCESS_LIMIT_TYPE IN
                    ('Family',
                     'Family+CatchUp',
                     'Average',
                     'Average+CatchUp',
                     'YrLastMonth',
                     'YrLastMonth+CatchUp')
                AND HED1.IS_REPORTED = 'Yes'
                AND HED1.CONTRIB_YEAR = EXTRACT(YEAR FROM SYSDATE) - 1)
        AND NOT EXISTS
      (SELECT 1
               FROM PREFERENCE_INFO PI, USER_PREFERENCE UP
              WHERE UP.PREF_ID = PI.ID
                AND PI.PREFERENCE_NAME =
                    'EXCESS_CONTRIBUTION_THRESHOLD_DONOTSHOW_FOR_YEAR'
                AND UP.EE_ID = INEE_ID
                AND UP.PREFFERED_CHOICE LIKE
                    '%' || TO_CHAR(EXTRACT(YEAR FROM SYSDATE) - 1) || '%')
        AND HED.IS_REPORTED = 'Yes'
        AND HED.CONTRIB_YEAR = EXTRACT(YEAR FROM SYSDATE) - 1
           -- 1.0.1 Start
        AND TO_DATE(COALESCE(APPUTIL_DATACACHE.GETERADMNDEMOG(INADMIN_ID,
                                                              INER_ID,
                                                              'IRS_TAX_DEADLINE',
                                                              'Yes'),
                             '04/15/' || TO_CHAR(SYSDATE, 'yyyy')),
                    'mm/dd/yyyy') >= TRUNC(SYSDATE);

    RNOTIFICATION TREC_NOTIFICATION := TREC_NOTIFICATION();

  BEGIN

    BEGIN
      SELECT EL.ID
        INTO CACTIVEHSACHECK
        FROM ELECTION EL, STACK_ELECTION SE
       WHERE SE.ELCT_ID = EL.ID
         AND EL.EE_ID = INEE_ID
         AND EL.ERAC_ACTP_CD = 'HSA'
         AND (TRUNC(SYSDATE) BETWEEN SE.START_DATE AND SE.END_DATE)
         AND UPPER(EL.ENROLLMENT_STATUS) = 'ENROLLED';

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        CACTIVEHSACHECK := NULL;
    END;

    IF CACTIVEHSACHECK IS NOT NULL THEN

      IF TO_DATE(COALESCE(APPUTIL_DATACACHE.GETERADMNDEMOG(INADMIN_ID,
                                                           INER_ID,
                                                           'IRS_TAX_DEADLINE',
                                                           'Yes'),
                          '04/15/' || TO_CHAR(SYSDATE, 'yyyy')),
                 'mm/dd/yyyy') >= TRUNC(SYSDATE) THEN
        bPriorYrTaxDeadlineNotPassed := TRUE;
      ELSE
        bPriorYrTaxDeadlineNotPassed := FALSE;
      END IF;

      IF bPriorYrTaxDeadlineNotPassed THEN
        nPYExcessContribAmt := RKP_ACCOUNT_UTIL.GETEXCESSCONTRBAMT(INEE_ID,
                                                                   'PY');
        IF nPYExcessContribAmt > 0 THEN
          RNOTIFICATION.CATEGORY   := 'BLOCKER';
          RNOTIFICATION.LINK_LABEL := 'EXCESSCONTRIBPY';

          RNOTIFICATION.NOTE     := EXTRACT(YEAR FROM SYSDATE) - 1;
          RNOTIFICATION.TYPE     := COALESCE(ICRULETYPE, 'Alert');
          RNOTIFICATION.PRIORITY := INPRIORITY;
          OTTABNOTIFICATION.EXTEND();
          OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
        END IF;
      END IF;

      IF RNOTIFICATION.LINK_LABEL IS NULL THEN
        nCYExcessContribAmt := RKP_ACCOUNT_UTIL.GETEXCESSCONTRBAMT(INEE_ID,
                                                                   'CY');

        IF nCYExcessContribAmt > 0 THEN
          RNOTIFICATION.CATEGORY   := 'BLOCKER';
          RNOTIFICATION.LINK_LABEL := 'EXCESSCONTRIBCY';

          RNOTIFICATION.NOTE     := EXTRACT(YEAR FROM SYSDATE);
          RNOTIFICATION.TYPE     := COALESCE(ICRULETYPE, 'Alert');
          RNOTIFICATION.PRIORITY := INPRIORITY;
          OTTABNOTIFICATION.EXTEND();
          OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
        END IF;

      END IF;

      IF RNOTIFICATION.LINK_LABEL IS NULL THEN

       FOR NDUMMY IN CURHED_EXCESS_THRESHOLD_PY LOOP

         RNOTIFICATION.CATEGORY    := 'BLOCKER';
         RNOTIFICATION.LINK_LABEL  := 'EXCESSCONTRIBTHRESHOLDPY';
         RNOTIFICATION.NOTE        := NDUMMY.CONTRIB_YEAR;
         RNOTIFICATION.DESCRIPTION := PORTALUTIL.GETPORTALLABEL(INADMIN_ID  => INADMIN_ID,
                                                                INER_ID     => INER_ID,
                                                                ICLABEL_CD  => 'PAGEBLOCKER.EXCESSCONTRIBTHRESHOLD.BODY1',
                                                                ICPORTAL_CD => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS') ||
                                      RNOTIFICATION.NOTE || ' ' ||
                                      PORTALUTIL.GETPORTALLABEL(INADMIN_ID  => INADMIN_ID,
                                                                INER_ID     => INER_ID,
                                                                ICLABEL_CD  => 'PAGEBLOCKER.EXCESSCONTRIBTHRESHOLD.BODY2',
                                                                ICPORTAL_CD => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS');
         RNOTIFICATION.TYPE        := COALESCE(ICRULETYPE, 'Alert');
         RNOTIFICATION.PRIORITY    := INPRIORITY;
         OTTABNOTIFICATION.EXTEND();
         OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;

         EXIT;
       END LOOP;

     END IF;

     IF RNOTIFICATION.LINK_LABEL IS NULL THEN

       FOR NDUMMY IN CURHED_EXCESS_THRESHOLD_CY LOOP

         RNOTIFICATION.CATEGORY    := 'BLOCKER';
         RNOTIFICATION.LINK_LABEL  := 'EXCESSCONTRIBTHRESHOLDCY';
         RNOTIFICATION.NOTE        := NDUMMY.CONTRIB_YEAR;
         RNOTIFICATION.DESCRIPTION := PORTALUTIL.GETPORTALLABEL(INADMIN_ID  => INADMIN_ID,
                                                                INER_ID     => INER_ID,
                                                                ICLABEL_CD  => 'PAGEBLOCKER.EXCESSCONTRIBTHRESHOLD.BODY1',
                                                                ICPORTAL_CD => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS') ||
                                      RNOTIFICATION.NOTE || ' ' ||
                                      PORTALUTIL.GETPORTALLABEL(INADMIN_ID  => INADMIN_ID,
                                                                INER_ID     => INER_ID,
                                                                ICLABEL_CD  => 'PAGEBLOCKER.EXCESSCONTRIBTHRESHOLD.BODY2',
                                                                ICPORTAL_CD => 'DASHBOARDTAB.ALERTSANDNOTIFICATIONS');
         RNOTIFICATION.TYPE        := COALESCE(ICRULETYPE, 'Alert');
         RNOTIFICATION.PRIORITY    := INPRIORITY;
         OTTABNOTIFICATION.EXTEND();
         OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;

         EXIT;
       END LOOP;

     END IF;

    END IF;

  END EXCESSCONTRIBCHECK;

  PROCEDURE ExpiredCheck(ottabNotification  IN OUT NOCOPY ttab_notification,
                         inAdmin_Id         IN NUMBER,
                         inEr_Id            IN NUMBER,
                         inEe_Id            IN NUMBER,
                         icUserName         IN VARCHAR2,
                         icAchAcct          IN VARCHAR2,
                         icAchISO           IN VARCHAR2,
                         icIsAchValid       IN VARCHAR2,
                         icDebitCardStatus  IN VARCHAR2,
                         icEmail            IN VARCHAR2,
                         icIsAddressInValid IN VARCHAR2,
                         icSeverity         IN VARCHAR2,
                         inPriority         IN NUMBER,
                         icRuleType         VARCHAR2) IS

    rNotification        trec_notification := trec_notification();
    nCount               NUMBER := 0;
    nInstrNo             NUMBER;
    dInstrDate           DATE;
    cResult              VARCHAR2(255) := 'ERROR';
    cErrorCategory       VARCHAR2(255) := 'OTHER';
    nErrorCode           NUMBER := 99999;
    cErrorArea           VARCHAR2(255) := 'Init';
    cOtherMessage        VARCHAR2(4000) := NULL;
    cObjName             VARCHAR2(255) := 'ACCTTAB.PAYMENTS.REQUESTVOIDREISSUE';
    cObjCD               VARCHAR2(20) := 'RestService';
    occanview            VARCHAR2(3) := 'No';
    occanexecute         VARCHAR2(3) := 'No';
    occancreate          VARCHAR2(3) := 'No';
    occandelete          VARCHAR2(3) := 'No';
    occanmodify          VARCHAR2(3) := 'No';
    occanmodifyifnull    VARCHAR2(3) := 'No';
    occanmodifyifnotnull VARCHAR2(3) := 'No';
    occanmodifytonull    VARCHAR2(3) := 'No';
    nuserid              NUMBER := NULL;
    cBankCode            VARCHAR2(255);

  BEGIN

    SELECT id INTO nuserid FROM Login WHERE user_name = icUserName;

    cErrorArea := 'CheckingPrivilege';
    hasprivilege(cresult,
                 cerrorcategory,
                 nerrorcode,
                 cerrorarea,
                 cothermessage,
                 nuserid,
                 cObjName,
                 cObjCD,
                 occanview,
                 occanexecute,
                 occancreate,
                 occandelete,
                 occanmodify,
                 occanmodifyifnull,
                 occanmodifyifnotnull,
                 occanmodifytonull);

    IF upper(occancreate) = 'YES' AND icIsAchValid IN ('No', 'PrenoteERR') THEN

      FOR curChecks IN (SELECT vw.*
                          FROM VW_PAYMENTS VW
                         WHERE nvl(vw.INSTR_NO, 0) != 0
                           AND vw.TYPECD = 'Check'
                           AND vw.TOTAL_AMT > 0
                           AND vw.STATUS = 'Issued'
                           AND vw.ee_id= inEe_Id
                           AND COALESCE(vw.source_ref, 'Ongoing') = 'Ongoing'
                           AND SYSDATE >
                               (vw.instr_date +
                                NVL((SELECT param_value
                                      FROM partner_param
                                     WHERE partner_id IN
                                           (SELECT p.id
                                              FROM partner_param pp,
                                                   partner       p
                                             WHERE pp.param_name =
                                                   'BANK_CODE'
                                               AND pp.partner_id = p.id
                                               AND p.partner_type = 'Bank'
                                               AND SYSDATE BETWEEN pp.begins AND
                                                   pp.ends
                                               AND pp.param_value =
                                                   vw.bank_code)
                                       AND param_name = 'CHECK_EXPIRY_DAYS'
                                       AND SYSDATE BETWEEN begins AND ends),
                                    90))) LOOP
        nCount     := nCount + 1;
        nInstrNo   := curChecks.Instr_No;
        dInstrDate := curChecks.Instr_Date;
        cBankCode  := curChecks.Bank_Code;
      END LOOP;

      IF nCount = 1 THEN

        BEGIN
          SELECT param_value
            INTO rNotification.description
            FROM partner_param
           WHERE partner_id IN
                 (SELECT p.id
                    FROM partner_param pp, partner p
                   WHERE pp.param_name = 'BANK_CODE'
                     AND pp.partner_id = p.id
                     AND p.partner_type = 'Bank'
                     AND SYSDATE BETWEEN pp.begins AND pp.ends
                     AND pp.param_value = cBankCode)
             AND param_name = 'CHECK_EXPIRY_DAYS'
             AND SYSDATE BETWEEN begins AND ends;

        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            rNotification.description := 90;
        END;

        rNotification.category     := 'BLOCKER';
        rNotification.reference_id := nInstrNo;
        rNotification.note         := TO_CHAR(dInstrDate,'MM/DD/YYYY');
        rNotification.link_label   := 'EXPIRED_CHECK';
        rNotification.TYPE         := coalesce(icRuleType, 'Alert');
        rNotification.rec_source   := 'EXPIRED_CHECK';
        rNotification.priority     := inPriority;

        ottabNotification.Extend();
        ottabNotification(ottabNotification.Last) := rNotification;
      END IF;
    END IF;

  END ExpiredCheck;
  
  PROCEDURE PORTALBLOCKER(OTTABNOTIFICATION  IN OUT NOCOPY TTAB_NOTIFICATION,
                          INADMIN_ID         IN NUMBER,
                          INER_ID            IN NUMBER,
                          INEE_ID            IN NUMBER,
                          ICUSERNAME         IN VARCHAR2,
                          ICACHACCT          IN VARCHAR2,
                          ICACHISO           IN VARCHAR2,
                          ICISACHVALID       IN VARCHAR2,
                          ICDEBITCARDSTATUS  IN VARCHAR2,
                          ICEMAIL            IN VARCHAR2,
                          ICISADDRESSINVALID IN VARCHAR2,
                          ICSEVERITY         IN VARCHAR2,
                          INPRIORITY         IN NUMBER,
                          ICRULETYPE         VARCHAR2) IS

    RNOTIFICATION        TREC_NOTIFICATION := TREC_NOTIFICATION();
    dBlockerLastShownOn DATE;
    cResponseText       VARCHAR2(255);
    nDaysCount          NUMBER;
  BEGIN

    FOR CURPORTALBLOCKERS IN (SELECT *
        FROM (SELECT ER_ADMN_PB.Id,
             PB.TITLE,
             PB.DESCRIPTION,
             BUTTON1_LABEL,
             BUTTON1_ACTION_TYPE,
             BUTTON1_ACTION_URL,
             BUTTON2_LABEL,
             BUTTON2_ACTION_TYPE,
             BUTTON2_ACTION_URL,
             ER_ADMN_PB.Frequency,         
             Row_Number() OVER(PARTITION BY INEE_ID ORDER BY
                                CASE
                                  WHEN ER_ADMN_PB.IS_EMPLOYEE_SPECIFIC = 'Yes' THEN 0
                                  WHEN ER_ADMN_PB.Er_Id = INER_ID THEN 1
                                  WHEN (ER_ADMN_PB.Er_Id IS NULL OR ER_ADMN_PB.Er_Id = 0) AND a.Is_Umbrella = 'No' AND a.Is_Super_Admin = 'No' THEN 2
                                  WHEN (ER_ADMN_PB.Er_Id IS NULL OR ER_ADMN_PB.Er_Id = 0) AND a.Is_Umbrella = 'Yes' AND a.Is_Super_Admin = 'No' THEN 3
                                  WHEN (ER_ADMN_PB.Er_Id IS NULL OR ER_ADMN_PB.Er_Id = 0) AND a.Is_Umbrella = 'No' AND a.Is_Super_Admin = 'Yes' THEN 4
                                  ELSE 5
                                END
                             ) RowNumber
            FROM PORTAL_BLOCKERS         PB,
                 ER_ADMN_PORTAL_BLOCKERS ER_ADMN_PB,
                 Administrator           a
           WHERE PB.ID = ER_ADMN_PB.PRTLBLKR_ID
             AND ER_ADMN_PB.Admn_Id = a.id
             AND trunc(SYSDATE) BETWEEN START_DATE AND END_DATE
             AND ER_ADMN_PB.Admn_Id IN
                 (SELECT ad.Id AdmnId
                    FROM Administrator ad
                   WHERE (ad.Id = INADMIN_ID OR ad.Parent_Admn_Id = INADMIN_ID)
                  UNION ALL
                  SELECT ad.parent_admn_id
                    FROM Administrator ad
                   WHERE ad.Id = INADMIN_ID
                  UNION ALL
                  SELECT ad.Id AdmnId
                    FROM Administrator ad
                   WHERE ad.Is_Super_Admin = 'Yes')
             AND ((ER_ADMN_PB.Er_Id IS NULL OR ER_ADMN_PB.Er_Id = 0) OR
                 ER_ADMN_PB.Er_Id = INER_ID)
             AND (ER_ADMN_PB.IS_EMPLOYEE_SPECIFIC = 'No' OR
               (ER_ADMN_PB.IS_EMPLOYEE_SPECIFIC = 'Yes' AND EXISTS
                (SELECT 1
                    FROM ee_portal_blockers EPR
                   WHERE epr.eradmnprtlblkr_id = ER_ADMN_PB.id
                     AND epr.ee_id = INEE_ID)))
             AND PB.Is_Active = 'Yes'
             AND ER_ADMN_PB.Is_Active = 'Yes'
             AND (ER_ADMN_PB.Max_Display_Count IS NULL OR ER_ADMN_PB.Max_Display_Count >
                 (SELECT COUNT(1)
                    FROM ee_portal_blocker_response epbr
                   WHERE epbr.eradmnprtlblkr_id = ER_ADMN_PB.id
                     AND epbr.ee_id = INEE_ID))) q
    ORDER BY RowNumber) 
    LOOP
    
    dBlockerLastShownOn := NULL;
    cResponseText       := NULL;
    BEGIN
      SELECT response_date, response_text
        INTO dBlockerLastShownOn, cResponseText FROM 
       (SELECT response_date, response_text FROM ee_portal_blocker_response
       WHERE ee_id = INEE_ID
         AND eradmnprtlblkr_id = CURPORTALBLOCKERS.Id ORDER BY response_date DESC) WHERE rownum = 1;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    
    CASE CURPORTALBLOCKERS.Frequency
      WHEN 'Once' THEN
        nDaysCount := -1;
      WHEN 'Always' THEN
        nDaysCount := 0;
      WHEN 'Daily' THEN
        nDaysCount := 1;
      WHEN 'Weekly' THEN
        nDaysCount := 7;
      WHEN 'Monthly' THEN
        nDaysCount := 30;
    END CASE;
    
    IF dBlockerLastShownOn IS NULL OR
       (trunc(dBlockerLastShownOn) + nDaysCount <= trunc(SYSDATE) AND
       nvl(cResponseText, 'X') != 'DoNotShowAgain' AND CURPORTALBLOCKERS.Frequency != 'Once') THEN
      RNOTIFICATION.CATEGORY     := 'BLOCKER';
      RNOTIFICATION.NOTE         := NVL(CURPORTALBLOCKERS.BUTTON1_LABEL, '') || '~' ||
                                    NVL(CURPORTALBLOCKERS.BUTTON1_ACTION_TYPE,
                                        '') || '~' ||
                                    NVL(CURPORTALBLOCKERS.BUTTON1_ACTION_URL,
                                        '') || '~' ||
                                    NVL(CURPORTALBLOCKERS.BUTTON2_LABEL, '') || '~' ||
                                    NVL(CURPORTALBLOCKERS.BUTTON2_ACTION_TYPE,
                                        '') || '~' ||
                                    NVL(CURPORTALBLOCKERS.BUTTON2_ACTION_URL,
                                        '');
      RNOTIFICATION.LINK_LABEL   := CURPORTALBLOCKERS.TITLE;
      RNOTIFICATION.TYPE         := '';
      RNOTIFICATION.REC_SOURCE   := 'PORTAL_BLOCKER';
      RNOTIFICATION.PRIORITY     := INPRIORITY;
      RNOTIFICATION.DESCRIPTION  := CURPORTALBLOCKERS.DESCRIPTION;
      RNOTIFICATION.reference_id := CURPORTALBLOCKERS.Id;
    
      OTTABNOTIFICATION.EXTEND();
      OTTABNOTIFICATION(OTTABNOTIFICATION.LAST) := RNOTIFICATION;
      EXIT;
    END IF;
  END LOOP;
  
  END PORTALBLOCKER;


PROCEDURE ElectionOverpayment(ottabNotification  IN OUT NOCOPY ttab_notification,
                              inAdmin_Id         IN NUMBER,
                              inEr_Id            IN NUMBER,
                              inEe_Id            IN NUMBER,
                              icUserName         IN VARCHAR2,
                              icAchAcct          IN VARCHAR2,
                              icAchISO           IN VARCHAR2,
                              icIsAchValid       IN VARCHAR2,
                              icDebitCardStatus  IN VARCHAR2,
                              icEmail            IN VARCHAR2,
                              icIsAddressInValid IN VARCHAR2,
                              icSeverity         IN VARCHAR2,
                              inPriority         IN NUMBER,
                              icRuleType         VARCHAR2) IS

  rNotification trec_notification := trec_notification();
  --cIsJRA        VARCHAR2(3);
BEGIN
  rNotification.category := 'INYA';

  rNotification.description := coalesce(PortalUtil.GetPortalLabel(inAdmin_Id => inAdmin_Id,
                                                                  inEr_Id    => inEr_Id,
                                                                  icLabel_Cd => 'DASHBOARD.INYA.ACCOUNT_OVERPAID'),
                                        'Account Overpayment');
  rNotification.link_label  := 'Resolve';
  rNotification.TYPE        := coalesce(icRuleType, ' Warning ');
  rNotification.rec_source  := 'CASHOVRPMT';
  rNotification.priority    := inPriority;
  --cIsJRA                    := jra_account_util.isJRA(inEe_Id);
  
  IF bIsJRA = 'Yes' THEN
    FOR rec_AccountOverpaid IN (SELECT el.id,
                                       EL.Erac_Actp_Cd Actp_Cd,
                                       TRIM(to_char(el.elct_ovrpmt_amt,
                                                    '999990.00')) amt
                                  FROM election el
                                 WHERE el.ee_id = inEe_Id
                                   --AND cIsJRA = 'Yes'
								   AND bIsJRA = 'Yes'
                                   AND NVL(el.elct_ovrpmt_amt, 0) > 0
                                   AND el.ovrpmt_marked_on IS NOT NULL) LOOP
      rNotification.reference_id := rec_AccountOverpaid.Id;
      rNotification.amt          := rec_AccountOverpaid.Amt;
      rNotification.dr_cr_ind    := 'DR';
      rNotification.note         := rec_AccountOverpaid.Actp_Cd;
      ottabNotification.Extend();
      ottabNotification(ottabNotification.Last) := rNotification;

    END LOOP;
  END IF;

END ElectionOverpayment;

END GetActionNeededPortalRules3;
/


CREATE OR REPLACE TYPE CLAIMS_CODE.tTab_Notification AS TABLE OF tRec_Notification;




CREATE OR REPLACE TYPE CLAIMS_CODE.tRec_Notification AS OBJECT
(
  category varchar2(255),
  description varchar2(4000),
  note varchar2(4000),
  amt varchar2(255),
  dr_cr_ind varchar2(2),
  link_label varchar2(255),
  type varchar2(20),
  rec_source varchar2(255),
  reference_id number,
  priority number,

  CONSTRUCTOR FUNCTION tRec_Notification RETURN SELF AS RESULT
);



============================================================================================================
CREATE OR REPLACE FUNCTION Clm_GetPaymentDetails(inClaimId          IN NUMBER,
                                                 inEeId             IN NUMBER,
                                                 icCheckSingleClaim IN VARCHAR2 DEFAULT 'No' --1.0.1
                                                 )
  RETURN tTab_PaymentDetail IS

  /*********************************************************************************
   Activity            By                      On                     Version 
  **********************************************************************************
    Created          Ajoy Debnath                  07/06/2018                1.0.0
    Jira: PORTAL-587
    
     > inClaimId - this IN param contain Claim Id for an particular participant.
     > inEeId - this IN param contail Employee Id of a Perticular participant.
     
     > We will get details(PAYMENT_AMOUNT,PAYMENT_TYPE,ACTIVITY_DATE,PAYMENT_STATUS,PAID_ON,BANK_ACCOUNTNO,DISPLAY_BANK_ACCOUNTNO,etc.) from claim,employee_payment,pay_file,employee,ach_holding_account,check_register tables
       for particular claim of a participant based on the follwing clause - 
          > 'eepy_id' of 'claim' table must be equal to 'id' of 'employee_payment' table.
          > 'pyfl_id' of 'employee_payment' table must be equal to 'id' of 'pay_file' table.
          > 'id' of 'employee' table must be equal to 'ee_id' of claim table.
          > 'submit_clm_id' or 'c.id' must be euqla to given Claim Id passed as in-parameter 'inClaimId'.
          > 'ee_id' of 'claim' table must be equal to given Employee Id passed as in-parameter 'inEeId'.
          > 'achhldact_id' of 'pay_file' must be equal to 'Id' of 'ach_holding_account' table.
     
     > 'tTab_PaymentDetail' table type of 'tRec_PaymentDetail' will return form this unit.
     > For different payment types('CHEKC','ACH','Partner','PAYROLL') this unit will return different details.
     
     Modified         Tiyas                  05/08/2019                1.0.1
      Jira: PORTAL-6507
      Added a parameter viz. icCheckSingleClaim. This parameter will be sent as 'No'
      in most cases. In case of JRA recurring claims, when a particular claim's details
      are required, this parameter will be sent as 'Yes'.
            
     Modified         Tiyas/Sumang          05/20/2019                1.0.2
      Jira: PORTAL-7074
      Fetching schedule claim details    
      
     Modified          Arnab Bhattacharyya              07/01/2019                1.0.3
      Jira: PORTAL-6999
      Fetch payment details for on-hold status 
      
     Modified         Ajoy Debnath                  07/05/2019                1.0.4
      Jira: PORTAL-7618 / 8382
      Need to display overpayment refund details.
        
     Modified         Anand Jajodia                 08/21/2019                1.0.5
      Jira: PORTAL-8817
      As a Participant with a RHRA and/or PHRA, I want to be able to view my Payment Details of
      the Activity Details Card so that I can understand my cancelled recurring premium expense.      
      
     Modified         Gaurav                  08/30/2019                1.0.6
      Jira: PORTAL-7201
      For ACH payment previously we were showing the bank account number always from the EMPLOYEE
      table but now we are showing it from ACH_CREDIT table. If no record is found in ACH_CREDIT
      then we are showing the EMPLOYEE table's bank account number
        
     Modified         Gaurav                  10/14/2019                1.0.7
      Jira: PORTAL-6458
      For void and reissue payments the data is coming in different order for ACH and Check. Made 
      the changes to make it consistent.
        
        
  /**********************************************************************************/
  cResult            VARCHAR2(20);
  cPaymentExpectDate DATE;
  cOtherMessage      VARCHAR2(4000);
  cCheckStatus       check_register.status%TYPE;
  dCashedOn          check_register.cashed_on%TYPE;
  cPrevVoidCheckNo   check_register.instr_no%TYPE := NULL;
  dInstrDate         check_register.instr_date%TYPE := NULL;
  tab_PaymentDetail  tTab_PaymentDetail := tTab_PaymentDetail();
  nCheckAmt          NUMBER;

  cPayFileIds                VARCHAR2(4000) := '';
  cPayFileIdPresent          VARCHAR2(3) := 'No';
  cCheckNumbers              VARCHAR2(4000) := '';
  cCheckNoPresent            VARCHAR2(3) := 'No';
  cDisplayDebitCardNo        VARCHAR2(30) := '';
  nPosition                  NUMBER;
  cRepaymentFundIds          VARCHAR2(4000) := '';
  cDisplayAccountNo          VARCHAR2(6) := '';
  cBankAccountNo             VARCHAR2(30) := '';
  nPaymentDetailsCount       NUMBER := 0; -- 1.0.7 - Added
  nCurrentPaymentDetailCount NUMBER := 0; -- 1.0.7 - Added

  cClaimsId VARCHAR2(4000) := '';

  cIsMultipleOrigClmPmt VARCHAR2(3) := 'No';

  eNoInput EXCEPTION;

  CURSOR curClaimIds(inClmId IN NUMBER) IS
    SELECT LISTAGG(ID, ',') WITHIN GROUP(ORDER BY ID) CLAIMIDS
      FROM (SELECT c.id
              FROM claim c
             WHERE c.submit_clm_id = (SELECT nvl(submit_clm_id, id)
                                        FROM claim
                                       WHERE id = inClmId)
               AND icCheckSingleClaim = 'No'
               AND c.ee_id = inEeId
            UNION
            SELECT clm.id
              FROM claim clm
             WHERE clm.id = inClmId
               AND clm.ee_id = inEeId);

  CURSOR curPaymentDetail(inClmIds IN VARCHAR2,
                          inEeId   IN NUMBER) IS
    SELECT c.id,
           c.submit_clm_id,
           c.status claim_status,
           c.claim_type clm_type,
           ep.amt Amt,
           ep.id employeePaymentId,
           pf.typecd,
           to_char(pf.paid_on, 'MM/DD/YYYY') paid_on,
           ep.instr_no,
           e.ach_acct,
           nvl(substr(e.ach_acct,
                      LENGTH(e.ach_acct) - 2,
                      LENGTH(e.ach_acct)),
               'N/A') display_bank_account_no,
           e.debit_card_no card_no,
           nvl(substr(e.debit_card_no,
                      LENGTH(e.debit_card_no) - 3,
                      LENGTH(e.debit_card_no)),
               'N/A') display_card_no,
           pf.Id payfile_id,
           aha.check_image_link_type CHECK_IMAGE_LINK_TYPE,
           aha.check_image_link_buffer_hrs CHECK_IMAGE_BUFFER_HRS
      FROM claim               c,
           employee_payment    ep,
           pay_file            pf,
           employee            e,
           ach_holding_account aha
     WHERE c.eepy_id = ep.id
       AND ep.pyfl_id = pf.id
       AND e.id = c.ee_id
       AND c.id IN
           (SELECT COLUMN_VALUE FROM TABLE(STR2TBLSTR(inClmIds, ',')))
       AND c.ee_id = inEeId
       AND aha.id(+) = pf.achhldact_id
       AND c.eepy_id IS NOT NULL
     ORDER BY pf.paid_on DESC;

  CURSOR curCheckDetail(icCheckNo       IN VARCHAR2,
                        inEeId          NUMBER,
                        icIsRefundCheck IN VARCHAR2) IS
    SELECT cr.status, cr.cashed_on, cr.instr_amt, cr.instr_date
      FROM check_register cr
     WHERE cr.instr_no = icCheckNo
       AND cr.refund_check = icIsRefundCheck
       AND cr.ee_id = inEeId;

  CURSOR unallocateClaim(inClmIds IN VARCHAR2,
                         inEeId   IN NUMBER) IS
    SELECT uc.id,
           uep.amt Amt,
           uep.id unallocateEmpPmtId,
           upf.typecd,
           to_char(uep.activity_date, 'MM/DD/YYYY') paid_on,
           uep.instr_no,
           e.ach_acct,
           upf.Id payfile_id,
           nvl(substr(e.ach_acct,
                      LENGTH(e.ach_acct) - 2,
                      LENGTH(e.ach_acct)),
               'N/A') display_bank_account_no,
           aha.check_image_link_type CHECK_IMAGE_LINK_TYPE,
           aha.check_image_link_buffer_hrs CHECK_IMAGE_BUFFER_HRS
      FROM claim                       c,
           unallocate_claim            uc,
           unallocate_employee_payment uep,
           unallocate_pay_file         upf,
           employee                    e,
           ach_holding_account         aha
     WHERE uc.eepy_id = uep.id
       AND uep.pyfl_id = upf.id
       AND c.id = uc.id
       AND e.id = uc.ee_id
       AND uc.id IN
           (SELECT COLUMN_VALUE FROM TABLE(STR2TBLSTR(inClmIds, ',')))
       AND uc.ee_id = inEeId
       AND aha.id(+) = upf.achhldact_id
       AND uc.eepy_id IS NOT NULL
     ORDER BY uep.activity_date DESC;

  CURSOR curCheckVoidReissuDetail(inEeId    IN NUMBER,
                                  inInstrNo IN NUMBER) IS
    WITH unallocate_data AS
     (SELECT DISTINCT uep.instr_no, uep.pyfl_id
        FROM unallocate_claim            uc,
             unallocate_employee_payment uep,
             claim                       c,
             employee_payment            ep
       WHERE uc.eepy_id = uep.id
         AND c.id = uc.id
         AND c.eepy_id = ep.id
         AND ep.instr_no = inInstrNo
         AND c.ee_id = inEeId
         AND c.ee_id = uc.ee_id
         AND uep.ee_id = c.ee_id)
    SELECT cr.instr_no,
           TO_CHAR(cr.voided_on, 'MM/DD/YYYY') voided_on,
           cr.instr_date,
           cr.instr_amt,
           LAG(cr.instr_date,
               1,
               (SELECT instr_date
                  FROM check_register
                 WHERE instr_no = inInstrNo
                   AND ee_id = inEeId)) OVER(ORDER BY cr.voided_on) AS reissued_date,
           unallocate_data.pyfl_id
      FROM check_register cr, unallocate_data
     WHERE cr.instr_no = unallocate_data.INSTR_NO
       AND cr.ee_id = inEeId
     ORDER BY cr.voided_on;

  --1.0.3 Start
  CURSOR curSchedulePaymentsDetails(inClmId IN NUMBER,
                                    inEeId  IN NUMBER) IS
    SELECT C.AMT,
           C.ELCT_ID,
           C.EE_ID,
           TO_CHAR(C.SERVICE_BEGINS, 'MM/DD/YYYY') SERVICE_BEGINS,
           CASE
             WHEN C.SERVICE_BEGINS >= TRUNC(SYSDATE) AND
                  NVL(C.BULKPMT_FLAG, 'No') = 'No' AND
                  C.ELIGIBILITY_PENDING_FLAG = 'Yes' THEN
              'SCHEDULED'
             ELSE
              'AWAITINGFUNDS'
           END STATUS
      FROM CLAIM C
     WHERE CASE
             WHEN icCHECKSINGLECLAIM = 'No' THEN
              NVL(C.SUBMIT_CLM_ID, C.ID)
             ELSE
              C.ID
           END = inClmId
       AND C.STATUS = 'Approved'
       AND EE_ID = inEeId
       AND C.CLAIM_TYPE = 'PREMIUM'
       AND NOT EXISTS
     (SELECT 1
              FROM CLAIMS_IMAGE CI
             WHERE CI.CLMBT_ID = C.CLMBT_ID
               AND CI.STATUS IN ('Indexed', 'QAPending'))
     ORDER BY c.id;
  --1.0.3 End

  --1.0.4 Start
  CURSOR curRepaymentFundIds(inClaimIds IN VARCHAR2) IS
    SELECT LISTAGG(EE_REPAY_FUND_ID, ',') WITHIN GROUP(ORDER BY EE_REPAY_FUND_ID) REPAYFUNDIDS
      FROM (SELECT ERF.Id EE_REPAY_FUND_ID
              FROM CLAIM_OFFSET_DTL     COD,
                   Offset_Hdr           OH,
                   ee_repayment_funding ERF
             WHERE COD.OFFSET_ID = OH.ID
               AND COD.EE_REPAY_FUND_ID = ERF.ID
               AND COD.Reverted_On IS NULL
               AND nvl(ERF.REFUNDED_AMT, 0) > 0
               AND NVL(ERF.TRXN_TYPE, '') <> 'Plan Sponsor Collection'
               AND OH.offset_type IN
                   ('Overpayment-Claim-By-Check', 'Substantiation-By-Check')
               AND COD.CLM_ID IN
                   (SELECT COLUMN_VALUE
                      FROM TABLE(STR2TBLSTR(inClaimIds, ','))));

  CURSOR curRefundDetail(repaymentFundIds IN VARCHAR2) IS
    SELECT DISTINCT rb.refund_mode,
                    rbd.instr_no,
                    rb.status,
                    rbd.instr_date,
                    SUM(rbd.amt) amt,
                    rb.released_on,
                    rb.sent_on,
                    rb.approved_on
      FROM refund_rqst_dtl  rrd,
           refund_rqst      rr,
           refund_batch_dtl rbd,
           refund_batch     rb
     WHERE rrd.rfndrqst_id = rbd.rfndrqst_id
       AND rbd.rfndbat_id = rb.id
       AND rb.Refund_Mode IN ('Check', 'ACH')
       AND rb.status IN ('Approved', 'Released', 'Extracted')
       AND rb.Refund_To = 'EE'
       AND rrd.source_rec_type = 'EE_REPAYMENT_FUNDING'
       AND rrd.source_rec_id IN
           (SELECT COLUMN_VALUE
              FROM TABLE(STR2TBLSTR(repaymentFundIds, ',')))
       AND rrd.rfndrqst_id = rr.id
       AND rr.refund_to = 'EE'
       AND rr.ee_id = inEeId
     GROUP BY rb.id,
              rb.status,
              rb.refund_mode,
              rbd.instr_no,
              rbd.instr_date,
              rb.sent_on,
              rb.released_on,
              rb.approved_on;

  CURSOR curBankAccountDetail(ee_id IN NUMBER) IS
    SELECT nvl(substr(e.ach_acct,
                      LENGTH(e.ach_acct) - 2,
                      LENGTH(e.ach_acct)),
               'N/A') displayBankAccountNo,
           e.ach_acct bankAccountNo
      FROM employee e
     WHERE id = ee_id;
  --1.0.4 End  

  -- 1.0.5 Start
  CURSOR CURCANCELLEDPAYMENTSDETAILS(INCLMID IN NUMBER,
                                     INEEID  IN NUMBER) IS
  
    SELECT CLM.AMT TOTAL_CANCELLED_AMT,
           TO_CHAR(CRA.ACTIVITY_ON, 'MM/DD/YYYY') CANCELLED_ON,
           TO_CHAR(CLM.SERVICE_BEGINS, 'MM/DD/YYYY') SERVICE_BEGINS
      FROM CLAIM CLM, CLAIM_RETRO_ACTIVITY CRA
     WHERE CASE
             WHEN ICCHECKSINGLECLAIM = 'No' THEN
              NVL(CLM.SUBMIT_CLM_ID, CLM.ID)
             ELSE
              CLM.ID
           END = INCLMID
       AND CLM.ID = CRA.CLM_ID
       AND CLM.STATUS = 'Void'
       AND CLM.EE_ID = INEEID
       AND CLM.CLAIM_TYPE = 'PREMIUM'
       AND CRA.ACTIVITY_TYPE = 'Approved-To-Void';
  -- 1.0.5 End

  -- 1.0.6 (Start)
  CURSOR curEeACHAccountDetail(inEepyId IN NUMBER) IS
    SELECT nvl(substr(ac.dfi_acc_no,
                      LENGTH(ac.dfi_acc_no) - 2,
                      LENGTH(ac.dfi_acc_no)),
               'N/A') displayBankAccountNo,
           ac.dfi_acc_no bankAccountNo
      FROM ach_credit ac
     WHERE ac.individual_id = inEepyId
       AND nvl(ac.source_ref, 'NA') = 'EMPLOYEE_PAYMENT';

  -- 1.0.6 (End)

BEGIN

  tab_PaymentDetail.Delete;
  IF inClaimId IS NULL OR inEeId IS NULL THEN
    RAISE eNoInput;
  END IF;

  OPEN curClaimIds(inClaimId);
  FETCH curClaimIds
    INTO cClaimsId;
  CLOSE curClaimIds;

  FOR recPaymentDetail IN curPaymentDetail(cClaimsId, inEeId) LOOP
    cPayFileIdPresent          := 'No';
    cIsMultipleOrigClmPmt      := 'No';
    cDisplayAccountNo          := NULL; -- 1.0.6 (Added)
    cBankAccountNo             := NULL; -- 1.0.6 (Added)
    nCurrentPaymentDetailCount := 0;
  
    BEGIN
      SELECT 'Yes'
        INTO cPayFileIdPresent
        FROM TABLE(Str2tblstr(cPayFileIds, ','))
       WHERE Column_Value = recPaymentDetail.Payfile_Id;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        cPayFileIdPresent := 'No';
      WHEN OTHERS THEN
        cPayFileIdPresent := 'No';
    END;
  
    IF cPayFileIdPresent = 'No' THEN
      cPayFileIds := CONCAT(cPayFileIds, recPaymentDetail.Payfile_Id || ',');
    
      ----------- 2911 ---------
      BEGIN
        SELECT 'Yes'
          INTO cIsMultipleOrigClmPmt
          FROM claim c
         WHERE c.eepy_id = recPaymentDetail.employeePaymentId
           AND c.id NOT IN
               (SELECT Column_Value FROM TABLE(Str2tblstr(cClaimsId, ',')))
           AND c.ee_id = inEeId
           AND rownum = 1;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          cIsMultipleOrigClmPmt := 'No';
        WHEN OTHERS THEN
          cIsMultipleOrigClmPmt := 'No';
      END;
      ------ End 2911 ----------
    
      IF recPaymentDetail.typecd = 'ACH' THEN
      
        -- 1.0.6 (Start)
        OPEN curEeACHAccountDetail(recPaymentDetail.employeePaymentId);
        FETCH curEeACHAccountDetail
          INTO cDisplayAccountNo, cBankAccountNo;
      
        IF curEeACHAccountDetail%NOTFOUND THEN
          cDisplayAccountNo := NULL;
          cBankAccountNo    := NULL;
        END IF;
        CLOSE curEeACHAccountDetail;
        -- 1.0.6 (End)
      
        tab_PaymentDetail.Extend;
        tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => recPaymentDetail.Amt,
                                                                         PAYMENT_TYPE           => 'Direct Deposit',
                                                                         ACTIVITY_DATE          => recPaymentDetail.paid_on,
                                                                         PAYMENT_STATUS         => 'Deposited',
                                                                         PAID_ON                => recPaymentDetail.paid_on,
                                                                         BANK_ACCOUNTNO         => nvl(cBankAccountNo,
                                                                                                       recPaymentDetail.ach_acct),
                                                                         DISPLAY_BANK_ACCOUNTNO => nvl(cDisplayAccountNo,
                                                                                                       recPaymentDetail.display_bank_account_no),
                                                                         DEBIT_CARD_NO          => NULL,
                                                                         DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                         CASHED_ON              => NULL,
                                                                         CHECK_NO               => NULL,
                                                                         EXPECTED_PAYMENT_DATE  => NULL,
                                                                         PREV_CHECK_NO          => NULL,
                                                                         CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                         CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                         PAYMENT_METHOD         => 'Payment',
                                                                         CISMULTIPLEORIGCLMPMT  => cIsMultipleOrigClmPmt);
      
      ELSIF recPaymentDetail.typecd = 'Partner' THEN
        nPosition := REGEXP_INSTR(recPaymentDetail.clm_type, '[0-9]');
      
        IF nPosition > 0 THEN
          cDisplayDebitCardNo := substr(recPaymentDetail.clm_type,
                                        nPosition,
                                        4);
        ELSE
          cDisplayDebitCardNo := recPaymentDetail.display_card_no;
        END IF;
      
        IF ((recPaymentDetail.Claim_Status = 'Paid' OR recPaymentDetail.Claim_Status = 'Released') and recPaymentDetail.Amt < 0) THEN
            tab_PaymentDetail.Extend;
            tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => recPaymentDetail.Amt,
                                                                             PAYMENT_TYPE           => 'Debit Card',
                                                                             ACTIVITY_DATE          => recPaymentDetail.paid_on,
                                                                             PAYMENT_STATUS         => 'Refunded',
                                                                             PAID_ON                => recPaymentDetail.paid_on,
                                                                             BANK_ACCOUNTNO         => NULL,
                                                                             DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                             DEBIT_CARD_NO          => recPaymentDetail.card_no,
                                                                             DISPLAY_DEBIT_CARD_NO  => cDisplayDebitCardNo,
                                                                             CASHED_ON              => NULL,
                                                                             CHECK_NO               => NULL,
                                                                             EXPECTED_PAYMENT_DATE  => NULL,
                                                                             PREV_CHECK_NO          => NULL,
                                                                             CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                             CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                             PAYMENT_METHOD         => 'Payment',
                                                                             CISMULTIPLEORIGCLMPMT  => cIsMultipleOrigClmPmt);
        
        ELSE 
          tab_PaymentDetail.Extend;
          tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => recPaymentDetail.Amt,
                                                                           PAYMENT_TYPE           => 'Debit Card',
                                                                           ACTIVITY_DATE          => recPaymentDetail.paid_on,
                                                                           PAYMENT_STATUS         => 'Processed',
                                                                           PAID_ON                => recPaymentDetail.paid_on,
                                                                           BANK_ACCOUNTNO         => NULL,
                                                                           DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                           DEBIT_CARD_NO          => recPaymentDetail.card_no,
                                                                           DISPLAY_DEBIT_CARD_NO  => cDisplayDebitCardNo,
                                                                           CASHED_ON              => NULL,
                                                                           CHECK_NO               => NULL,
                                                                           EXPECTED_PAYMENT_DATE  => NULL,
                                                                           PREV_CHECK_NO          => NULL,
                                                                           CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                           CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                           PAYMENT_METHOD         => 'Payment',
                                                                           CISMULTIPLEORIGCLMPMT  => cIsMultipleOrigClmPmt);
        END IF;
      ELSIF recPaymentDetail.typecd IN ('Standard Text', 'Custom Text') THEN
        tab_PaymentDetail.Extend;
        tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => recPaymentDetail.Amt,
                                                                         PAYMENT_TYPE           => 'Payroll Payment',
                                                                         ACTIVITY_DATE          => recPaymentDetail.paid_on,
                                                                         PAYMENT_STATUS         => 'Processed',
                                                                         PAID_ON                => recPaymentDetail.paid_on,
                                                                         BANK_ACCOUNTNO         => NULL,
                                                                         DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                         DEBIT_CARD_NO          => NULL,
                                                                         DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                         CASHED_ON              => NULL,
                                                                         CHECK_NO               => NULL,
                                                                         EXPECTED_PAYMENT_DATE  => NULL,
                                                                         PREV_CHECK_NO          => NULL,
                                                                         CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                         CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                         PAYMENT_METHOD         => 'Payment',
                                                                         CISMULTIPLEORIGCLMPMT  => cIsMultipleOrigClmPmt);
      ELSIF recPaymentDetail.typecd = 'Check' THEN
      
        IF recPaymentDetail.Instr_No IS NULL THEN
        
          tab_PaymentDetail.Extend;
          tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => recPaymentDetail.Amt,
                                                                           PAYMENT_TYPE           => 'Check',
                                                                           ACTIVITY_DATE          => recPaymentDetail.paid_on,
                                                                           PAYMENT_STATUS         => 'Payment Processing',
                                                                           PAID_ON                => recPaymentDetail.paid_on,
                                                                           BANK_ACCOUNTNO         => NULL,
                                                                           DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                           DEBIT_CARD_NO          => NULL,
                                                                           DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                           CASHED_ON              => NULL,
                                                                           CHECK_NO               => NULL,
                                                                           EXPECTED_PAYMENT_DATE  => NULL,
                                                                           PREV_CHECK_NO          => NULL,
                                                                           CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                           CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                           PAYMENT_METHOD         => 'Payment',
                                                                           CISMULTIPLEORIGCLMPMT  => cIsMultipleOrigClmPmt);
        ELSE
          cCheckNoPresent := 'No';
          BEGIN
            SELECT 'Yes'
              INTO cCheckNoPresent
              FROM TABLE(Str2tblstr(cCheckNumbers, ','))
             WHERE Column_Value = recPaymentDetail.instr_no;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              cCheckNoPresent := 'No';
            WHEN OTHERS THEN
              cCheckNoPresent := 'No';
          END;
        
          IF cCheckNoPresent = 'No' THEN
            cCheckNumbers := CONCAT(cCheckNumbers,
                                    recPaymentDetail.instr_no || ',');
          
            OPEN curCheckDetail(recPaymentDetail.instr_no, inEeId, 'No');
            FETCH curCheckDetail
              INTO cCheckStatus, dCashedOn, nCheckAmt, dInstrDate;
            CLOSE curCheckDetail;
          
            -- 1.0.7 (Start)
            nPaymentDetailsCount := tab_PaymentDetail.Count;
          
            IF cCheckStatus = 'Cashed' THEN
              tab_PaymentDetail.Extend;
              tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => nCheckAmt,
                                                                               PAYMENT_TYPE           => 'Check',
                                                                               ACTIVITY_DATE          => recPaymentDetail.paid_on,
                                                                               PAYMENT_STATUS         => 'Cashed',
                                                                               PAID_ON                => NULL,
                                                                               BANK_ACCOUNTNO         => NULL,
                                                                               DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                               DEBIT_CARD_NO          => NULL,
                                                                               DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                               CASHED_ON              => to_char(dCashedOn,
                                                                                                                 'MM/DD/YYYY'),
                                                                               CHECK_NO               => recPaymentDetail.instr_no,
                                                                               EXPECTED_PAYMENT_DATE  => NULL,
                                                                               PREV_CHECK_NO          => NULL,
                                                                               CHECK_IMAGE_LINK_TYPE  => recPaymentDetail.CHECK_IMAGE_LINK_TYPE,
                                                                               CHECK_IMAGE_BUFFER_HRS => recPaymentDetail.CHECK_IMAGE_BUFFER_HRS,
                                                                               PAYMENT_METHOD         => 'Payment',
                                                                               CISMULTIPLEORIGCLMPMT  => cIsMultipleOrigClmPmt);
            
              --PORTAL-5292 starts
            
            ELSIF cCheckStatus = 'Refunded' THEN
              tab_PaymentDetail.Extend;
              tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => nCheckAmt,
                                                                               PAYMENT_TYPE           => 'Check',
                                                                               ACTIVITY_DATE          => recPaymentDetail.paid_on,
                                                                               PAYMENT_STATUS         => 'Refunded',
                                                                               PAID_ON                => NULL,
                                                                               BANK_ACCOUNTNO         => NULL,
                                                                               DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                               DEBIT_CARD_NO          => NULL,
                                                                               DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                               CASHED_ON              => NULL,
                                                                               CHECK_NO               => recPaymentDetail.instr_no,
                                                                               EXPECTED_PAYMENT_DATE  => NULL,
                                                                               PREV_CHECK_NO          => NULL,
                                                                               CHECK_IMAGE_LINK_TYPE  => recPaymentDetail.CHECK_IMAGE_LINK_TYPE,
                                                                               CHECK_IMAGE_BUFFER_HRS => recPaymentDetail.CHECK_IMAGE_BUFFER_HRS,
                                                                               PAYMENT_METHOD         => 'Payment',
                                                                               CISMULTIPLEORIGCLMPMT  => cIsMultipleOrigClmPmt);
            
              --PORTAL-5292 ENDS
            
            ELSE
              CLM_EXPECTED_PAYMENT_DATE.GetExpectedPayDateByClmId(ocResult       => cResult,
                                                                  ocOtherMessage => cOtherMessage,
                                                                  odPaymentDt    => cPaymentExpectDate,
                                                                  inClmId        => recPaymentDetail.Id);
              IF cResult != 'ERROR' THEN
                IF cPaymentExpectDate > TRUNC(SYSDATE) THEN
                  tab_PaymentDetail.Extend;
                  tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => nCheckAmt,
                                                                                   PAYMENT_TYPE           => 'Check',
                                                                                   ACTIVITY_DATE          => recPaymentDetail.paid_on,
                                                                                   PAYMENT_STATUS         => 'ExpectedPayment',
                                                                                   PAID_ON                => NULL,
                                                                                   BANK_ACCOUNTNO         => NULL,
                                                                                   DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                                   DEBIT_CARD_NO          => NULL,
                                                                                   DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                                   CASHED_ON              => NULL,
                                                                                   CHECK_NO               => recPaymentDetail.instr_no,
                                                                                   EXPECTED_PAYMENT_DATE  => to_char(cPaymentExpectDate,
                                                                                                                     'MM/DD/YYYY'),
                                                                                   PREV_CHECK_NO          => NULL,
                                                                                   CHECK_IMAGE_LINK_TYPE  => recPaymentDetail.CHECK_IMAGE_LINK_TYPE,
                                                                                   CHECK_IMAGE_BUFFER_HRS => recPaymentDetail.CHECK_IMAGE_BUFFER_HRS,
                                                                                   PAYMENT_METHOD         => 'Payment',
                                                                                   CISMULTIPLEORIGCLMPMT  => cIsMultipleOrigClmPmt);
                ELSE
                  tab_PaymentDetail.Extend;
                  tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => nCheckAmt,
                                                                                   PAYMENT_TYPE           => 'Check',
                                                                                   ACTIVITY_DATE          => recPaymentDetail.paid_on,
                                                                                   PAYMENT_STATUS         => 'Uncashed',
                                                                                   PAID_ON                => NULL,
                                                                                   BANK_ACCOUNTNO         => NULL,
                                                                                   DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                                   DEBIT_CARD_NO          => NULL,
                                                                                   DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                                   CASHED_ON              => NULL,
                                                                                   CHECK_NO               => recPaymentDetail.instr_no,
                                                                                   EXPECTED_PAYMENT_DATE  => NULL,
                                                                                   PREV_CHECK_NO          => NULL,
                                                                                   CHECK_IMAGE_LINK_TYPE  => recPaymentDetail.CHECK_IMAGE_LINK_TYPE,
                                                                                   CHECK_IMAGE_BUFFER_HRS => recPaymentDetail.CHECK_IMAGE_BUFFER_HRS,
                                                                                   PAYMENT_METHOD         => 'Payment',
                                                                                   CISMULTIPLEORIGCLMPMT  => cIsMultipleOrigClmPmt);
                END IF;
              END IF;
            END IF;
          
            IF tab_PaymentDetail.Count - nPaymentDetailsCount > 0 THEN
              nCurrentPaymentDetailCount := tab_PaymentDetail.Count;
            
            END IF;
          
            cPrevVoidCheckNo := NULL;
          
            FOR recVoidCheckDetail IN curCheckVoidReissuDetail(inEeId,
                                                               recPaymentDetail.instr_no) LOOP
            
              cCheckNumbers := CONCAT(cCheckNumbers,
                                      recVoidCheckDetail.instr_no || ',');
            
              cPayFileIds := CONCAT(cPayFileIds,
                                    recVoidCheckDetail.pyfl_id || ',');
            
              tab_PaymentDetail.Extend;
              tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => recVoidCheckDetail.instr_amt,
                                                                               PAYMENT_TYPE           => 'Check',
                                                                               ACTIVITY_DATE          => recVoidCheckDetail.voided_on,
                                                                               PAYMENT_STATUS         => 'Voided',
                                                                               PAID_ON                => NULL,
                                                                               BANK_ACCOUNTNO         => NULL,
                                                                               DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                               DEBIT_CARD_NO          => NULL,
                                                                               DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                               CASHED_ON              => NULL,
                                                                               CHECK_NO               => recVoidCheckDetail.instr_no,
                                                                               EXPECTED_PAYMENT_DATE  => NULL,
                                                                               PREV_CHECK_NO          => NULL,
                                                                               CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                               CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                               PAYMENT_METHOD         => 'Payment',
                                                                               CISMULTIPLEORIGCLMPMT  => cIsMultipleOrigClmPmt);
              cPrevVoidCheckNo := recVoidCheckDetail.instr_no;
            END LOOP;
          
            IF nCurrentPaymentDetailCount > 0 THEN
              tab_PaymentDetail(nCurrentPaymentDetailCount).PREV_CHECK_NO := cPrevVoidCheckNo;
            END IF;
          
            -- 1.0.7 (End)
          
          END IF;
        END IF;
      END IF;
    END IF;
  END LOOP;

  FOR unallocateClaimRec IN unallocateClaim(cClaimsId, inEeId) LOOP
    cPayFileIdPresent     := 'No';
    cIsMultipleOrigClmPmt := 'No';
    cDisplayAccountNo     := NULL; -- 1.0.6 (Added)
    cBankAccountNo        := NULL; -- 1.0.6 (Added)
  
    BEGIN
      SELECT 'Yes'
        INTO cPayFileIdPresent
        FROM TABLE(Str2tblstr(cPayFileIds, ','))
       WHERE Column_Value = unallocateClaimRec.Payfile_Id;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        cPayFileIdPresent := 'No';
      WHEN OTHERS THEN
        cPayFileIdPresent := 'No';
    END;
  
    IF cPayFileIdPresent = 'No' THEN
    
      cPayFileIds := CONCAT(cPayFileIds,
                            unallocateClaimRec.Payfile_Id || ',');
    
      ----------- 2911 ---------
      BEGIN
        SELECT 'Yes'
          INTO cIsMultipleOrigClmPmt
          FROM unallocate_claim uc
         WHERE uc.eepy_id = unallocateClaimRec.unallocateEmpPmtId
           AND uc.id NOT IN
               (SELECT Column_Value FROM TABLE(Str2tblstr(cClaimsId, ',')))
           AND uc.ee_id = inEeId
           AND rownum = 1;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          cIsMultipleOrigClmPmt := 'No';
        WHEN OTHERS THEN
          cIsMultipleOrigClmPmt := 'No';
      END;
    
      ------ End 2911 ----------
    
      IF unallocateClaimRec.typecd = 'Check' THEN
        OPEN curCheckDetail(unallocateClaimRec.instr_no, inEeId, 'No');
        FETCH curCheckDetail
          INTO cCheckStatus, dCashedOn, nCheckAmt, dInstrDate;
        CLOSE curCheckDetail;
        tab_PaymentDetail.Extend;
        tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => nCheckAmt,
                                                                         PAYMENT_TYPE           => 'Check',
                                                                         ACTIVITY_DATE          => unallocateClaimRec.paid_on,
                                                                         PAYMENT_STATUS         => 'Voided',
                                                                         PAID_ON                => NULL,
                                                                         BANK_ACCOUNTNO         => NULL,
                                                                         DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                         DEBIT_CARD_NO          => NULL,
                                                                         DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                         CASHED_ON              => NULL,
                                                                         CHECK_NO               => unallocateClaimRec.instr_no,
                                                                         EXPECTED_PAYMENT_DATE  => NULL,
                                                                         PREV_CHECK_NO          => NULL,
                                                                         CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                         CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                         PAYMENT_METHOD         => 'Payment',
                                                                         CISMULTIPLEORIGCLMPMT  => cIsMultipleOrigClmPmt);
      ELSIF unallocateClaimRec.typecd = 'ACH' THEN
      
        -- 1.0.6 (Start)
        OPEN curEeACHAccountDetail(unallocateClaimRec.unallocateEmpPmtId);
        FETCH curEeACHAccountDetail
          INTO cDisplayAccountNo, cBankAccountNo;
      
        IF curEeACHAccountDetail%NOTFOUND THEN
          cDisplayAccountNo := NULL;
          cBankAccountNo    := NULL;
        END IF;
        CLOSE curEeACHAccountDetail;
        -- 1.0.6 (End)
      
        tab_PaymentDetail.Extend;
        tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => unallocateClaimRec.Amt,
                                                                         PAYMENT_TYPE           => 'Direct Deposit',
                                                                         ACTIVITY_DATE          => unallocateClaimRec.paid_on,
                                                                         PAYMENT_STATUS         => 'Voided',
                                                                         PAID_ON                => NULL,
                                                                         BANK_ACCOUNTNO         => nvl(cBankAccountNo,
                                                                                                       unallocateClaimRec.ach_acct),
                                                                         DISPLAY_BANK_ACCOUNTNO => nvl(cDisplayAccountNo,
                                                                                                       unallocateClaimRec.display_bank_account_no),
                                                                         DEBIT_CARD_NO          => NULL,
                                                                         DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                         CASHED_ON              => NULL,
                                                                         CHECK_NO               => NULL,
                                                                         EXPECTED_PAYMENT_DATE  => NULL,
                                                                         PREV_CHECK_NO          => NULL,
                                                                         CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                         CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                         PAYMENT_METHOD         => 'Payment',
                                                                         CISMULTIPLEORIGCLMPMT  => cIsMultipleOrigClmPmt);
      END IF;
    END IF;
  END LOOP;

  --1.0.2 Start
  FOR scheduleClaimRec IN curSchedulePaymentsDetails(inClaimId, inEeId) LOOP
    IF (scheduleClaimRec.Status = 'SCHEDULED') THEN
      --1.0.3
      tab_PaymentDetail.Extend;
      tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => scheduleClaimRec.Amt,
                                                                       PAYMENT_TYPE           => 'Scheduled',
                                                                       ACTIVITY_DATE          => scheduleClaimRec.Service_Begins,
                                                                       PAYMENT_STATUS         => 'Scheduled',
                                                                       PAID_ON                => NULL,
                                                                       BANK_ACCOUNTNO         => NULL,
                                                                       DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                       DEBIT_CARD_NO          => NULL,
                                                                       DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                       CASHED_ON              => NULL,
                                                                       CHECK_NO               => NULL,
                                                                       EXPECTED_PAYMENT_DATE  => scheduleClaimRec.Service_Begins,
                                                                       PREV_CHECK_NO          => NULL,
                                                                       CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                       CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                       PAYMENT_METHOD         => 'Payment',
                                                                       CISMULTIPLEORIGCLMPMT  => NULL);
      -- 1.0.3 Start                                                                  
    ELSE
      tab_PaymentDetail.Extend;
      tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => scheduleClaimRec.Amt,
                                                                       PAYMENT_TYPE           => 'On Hold',
                                                                       ACTIVITY_DATE          => scheduleClaimRec.Service_Begins,
                                                                       PAYMENT_STATUS         => 'On Hold',
                                                                       PAID_ON                => NULL,
                                                                       BANK_ACCOUNTNO         => NULL,
                                                                       DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                       DEBIT_CARD_NO          => NULL,
                                                                       DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                       CASHED_ON              => NULL,
                                                                       CHECK_NO               => NULL,
                                                                       EXPECTED_PAYMENT_DATE  => scheduleClaimRec.Service_Begins,
                                                                       PREV_CHECK_NO          => NULL,
                                                                       CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                       CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                       PAYMENT_METHOD         => 'Payment',
                                                                       CISMULTIPLEORIGCLMPMT  => NULL);
    END IF;
    -- 1.0.3 End
  END LOOP;
  --1.0.2 End

  --1.0.5 Start

  FOR CANCELLEDPREMIUMCLAIMREC IN CURCANCELLEDPAYMENTSDETAILS(INCLAIMID,
                                                              INEEID) LOOP
  
    TAB_PAYMENTDETAIL.EXTEND;
    TAB_PAYMENTDETAIL(TAB_PAYMENTDETAIL.COUNT) := TREC_PAYMENTDETAIL(PAYMENT_AMOUNT         => CANCELLEDPREMIUMCLAIMREC.TOTAL_CANCELLED_AMT,
                                                                     PAYMENT_TYPE           => 'Cancelled',
                                                                     ACTIVITY_DATE          => CANCELLEDPREMIUMCLAIMREC.CANCELLED_ON,
                                                                     PAYMENT_STATUS         => 'Cancelled',
                                                                     PAID_ON                => NULL,
                                                                     BANK_ACCOUNTNO         => NULL,
                                                                     DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                     DEBIT_CARD_NO          => NULL,
                                                                     DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                     CASHED_ON              => NULL,
                                                                     CHECK_NO               => NULL,
                                                                     EXPECTED_PAYMENT_DATE  => CANCELLEDPREMIUMCLAIMREC.SERVICE_BEGINS,
                                                                     PREV_CHECK_NO          => NULL,
                                                                     CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                     CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                     PAYMENT_METHOD         => 'Payment',
                                                                     CISMULTIPLEORIGCLMPMT  => NULL);
  
  END LOOP;
  --1.0.5 End

  -- 1.0.6 (Start)
  cDisplayAccountNo := NULL;
  cBankAccountNo    := NULL;
  -- 1.0.6 (End)

  --1.0.4 Start
  OPEN curRepaymentFundIds(cClaimsId);
  FETCH curRepaymentFundIds
    INTO cRepaymentFundIds;
  CLOSE curRepaymentFundIds;

  FOR recRefundDetail IN curRefundDetail(cRepaymentFundIds) LOOP
  
    IF recRefundDetail.Refund_Mode = 'Check' THEN
    
      IF recRefundDetail.Instr_No IS NULL THEN
      
        tab_PaymentDetail.Extend;
        tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => recRefundDetail.Amt,
                                                                         PAYMENT_TYPE           => 'Check',
                                                                         ACTIVITY_DATE          => to_char(coalesce(recRefundDetail.sent_on,
                                                                                                                    recRefundDetail.Released_On,
                                                                                                                    recRefundDetail.Approved_On),
                                                                                                           'MM/DD/YYYY'),
                                                                         PAYMENT_STATUS         => 'Refund Processing',
                                                                         PAID_ON                => NULL,
                                                                         BANK_ACCOUNTNO         => NULL,
                                                                         DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                         DEBIT_CARD_NO          => NULL,
                                                                         DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                         CASHED_ON              => NULL,
                                                                         CHECK_NO               => NULL,
                                                                         EXPECTED_PAYMENT_DATE  => NULL,
                                                                         PREV_CHECK_NO          => NULL,
                                                                         CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                         CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                         PAYMENT_METHOD         => 'Refund',
                                                                         CISMULTIPLEORIGCLMPMT  => NULL);
      
      ELSE
      
        OPEN curCheckDetail(recRefundDetail.instr_no, inEeId, 'Yes');
        FETCH curCheckDetail
          INTO cCheckStatus, dCashedOn, nCheckAmt, dInstrDate;
        CLOSE curCheckDetail;
      
        IF dCashedOn IS NULL THEN
        
          tab_PaymentDetail.Extend;
          tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => nCheckAmt,
                                                                           PAYMENT_TYPE           => 'Check',
                                                                           ACTIVITY_DATE          => to_char(dInstrDate,
                                                                                                             'MM/DD/YYYY'),
                                                                           PAYMENT_STATUS         => 'Refund Sent',
                                                                           PAID_ON                => NULL,
                                                                           BANK_ACCOUNTNO         => NULL,
                                                                           DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                           DEBIT_CARD_NO          => NULL,
                                                                           DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                           CASHED_ON              => NULL,
                                                                           CHECK_NO               => recRefundDetail.instr_no,
                                                                           EXPECTED_PAYMENT_DATE  => NULL,
                                                                           PREV_CHECK_NO          => NULL,
                                                                           CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                           CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                           PAYMENT_METHOD         => 'Refund',
                                                                           CISMULTIPLEORIGCLMPMT  => NULL);
        
        ELSE
          tab_PaymentDetail.Extend;
          tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => nCheckAmt,
                                                                           PAYMENT_TYPE           => 'Check',
                                                                           ACTIVITY_DATE          => to_char(dCashedOn,
                                                                                                             'MM/DD/YYYY'),
                                                                           PAYMENT_STATUS         => 'Refund Cashed',
                                                                           PAID_ON                => NULL,
                                                                           BANK_ACCOUNTNO         => NULL,
                                                                           DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                           DEBIT_CARD_NO          => NULL,
                                                                           DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                           CASHED_ON              => to_char(dCashedOn,
                                                                                                             'MM/DD/YYYY'),
                                                                           CHECK_NO               => recRefundDetail.instr_no,
                                                                           EXPECTED_PAYMENT_DATE  => NULL,
                                                                           PREV_CHECK_NO          => NULL,
                                                                           CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                           CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                           PAYMENT_METHOD         => 'Refund',
                                                                           CISMULTIPLEORIGCLMPMT  => NULL);
        
        END IF;
      
      END IF;
    
    ELSIF recRefundDetail.Refund_Mode = 'ACH' THEN
    
      IF recRefundDetail.status = 'Approved' THEN
        tab_PaymentDetail.Extend;
        tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => recRefundDetail.Amt,
                                                                         PAYMENT_TYPE           => 'Direct Deposit',
                                                                         ACTIVITY_DATE          => to_char(recRefundDetail.Approved_On,
                                                                                                           'MM/DD/YYYY'),
                                                                         PAYMENT_STATUS         => 'Refund Processing',
                                                                         PAID_ON                => NULL,
                                                                         BANK_ACCOUNTNO         => NULL,
                                                                         DISPLAY_BANK_ACCOUNTNO => NULL,
                                                                         DEBIT_CARD_NO          => NULL,
                                                                         DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                         CASHED_ON              => NULL,
                                                                         CHECK_NO               => NULL,
                                                                         EXPECTED_PAYMENT_DATE  => NULL,
                                                                         PREV_CHECK_NO          => NULL,
                                                                         CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                         CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                         PAYMENT_METHOD         => 'Refund',
                                                                         CISMULTIPLEORIGCLMPMT  => NULL);
      
      ELSE
      
        IF cDisplayAccountNo IS NULL AND cBankAccountNo IS NULL THEN
          OPEN curBankAccountDetail(inEeId);
          FETCH curBankAccountDetail
            INTO cDisplayAccountNo, cBankAccountNo;
          CLOSE curBankAccountDetail;
        END IF;
      
        tab_PaymentDetail.Extend;
        tab_PaymentDetail(tab_PaymentDetail.Count) := tRec_PaymentDetail(PAYMENT_AMOUNT         => recRefundDetail.Amt,
                                                                         PAYMENT_TYPE           => 'Direct Deposit',
                                                                         ACTIVITY_DATE          => to_char(nvl(recRefundDetail.sent_on,
                                                                                                               recRefundDetail.Released_On),
                                                                                                           'MM/DD/YYYY'),
                                                                         PAYMENT_STATUS         => 'Refund Deposited',
                                                                         PAID_ON                => NULL,
                                                                         BANK_ACCOUNTNO         => cBankAccountNo,
                                                                         DISPLAY_BANK_ACCOUNTNO => cDisplayAccountNo,
                                                                         DEBIT_CARD_NO          => NULL,
                                                                         DISPLAY_DEBIT_CARD_NO  => NULL,
                                                                         CASHED_ON              => NULL,
                                                                         CHECK_NO               => NULL,
                                                                         EXPECTED_PAYMENT_DATE  => NULL,
                                                                         PREV_CHECK_NO          => NULL,
                                                                         CHECK_IMAGE_LINK_TYPE  => NULL,
                                                                         CHECK_IMAGE_BUFFER_HRS => NULL,
                                                                         PAYMENT_METHOD         => 'Refund',
                                                                         CISMULTIPLEORIGCLMPMT  => NULL);
      
      END IF;
    END IF;
  END LOOP;
  --1.0.4 End

  RETURN tab_PaymentDetail;

EXCEPTION
  WHEN eNoInput THEN
    RETURN tab_PaymentDetail;
  WHEN OTHERS THEN
    tab_PaymentDetail.Delete;
    RETURN tab_PaymentDetail;
  
END Clm_GetPaymentDetails;
========================================================================================================

CREATE OR REPLACE FUNCTION CLM_GETCLAIMDETAILS(ICCLAIMIDLIST      IN VARCHAR2,
                                               ICEEPYIDLIST       IN VARCHAR2,
                                               ICELCTIDLIST       IN VARCHAR2,
                                               INEEID             IN NUMBER,
                                               CUSEELCTIDONLY     IN VARCHAR2 DEFAULT 'No',
                                               ICCHECKSINGLECLAIM IN VARCHAR2 DEFAULT 'No')
  RETURN TBL_CLAIMSDATA IS
  NSUBMITCLAIMID      NUMBER;
  CPAYMENTBREAKDOWN   VARCHAR2(1000) := '';
  NPAIDCOUNTER        NUMBER;
  NPAYMENTSENTCOUNTER NUMBER;
  NPAYMENTPROCCOUNTER NUMBER;
  NAPPROVEDCOUNTER    NUMBER;
  NONHOLDCOUNTER      NUMBER;
  NREVIEWCOUNTER      NUMBER;
  NDENIEDCOUNTER      NUMBER;

  NNOTAPPROVEDCOUNTER                NUMBER;
  NOVERPAYMENTCOUNTER                NUMBER;
  NOVERPAYMENTRECOVERCOUNTER         NUMBER;
  NRECREQUIREDCOUNTER                NUMBER;
  NINVALIDRECPTCOUNTER               NUMBER;
  NVOIDCOUNTER                       NUMBER;
  NCANCELPREMIUMRECURRINGCOUNTER     NUMBER;
  NCANCELPREMIUMRECURRINGEACHCOUNTER NUMBER;
  NTOTALCLAIMAMT                     NUMBER;
  NTOTALCLAIMCOUNT                   NUMBER;
  NERID                              NUMBER;
  NADMNID                            NUMBER;
  NCLAIMBATCHID                      NUMBER;
  CREVIEWEDBY                        VARCHAR2(400);
  CAPPEALSTATUS                      VARCHAR2(255);
  CLABEL                             VARCHAR2(4000);
  CCLAIMSTATUS                       VARCHAR2(255);
  CJRACLAIMSTATUS                    VARCHAR2(255);
  CCLAIMIDLIST                       VARCHAR2(4000);
  CCATEGORY                          VARCHAR2(255);
  CCLAIMTYPE                         VARCHAR2(255);
  CCLAIMBATCHTYPE                    VARCHAR2(255);
  CPROVIDER                          VARCHAR2(255);
  CINDIVIDUALSERVICED                VARCHAR2(255);
  CRECREQUIRED                       VARCHAR2(255);
  CINVALIDRECPT                      VARCHAR2(255);
  CCLMNOTAPPROVEDREASON              VARCHAR2(4000) := '';
  CCLMDENIEDDREASON                  VARCHAR2(4000) := '';
  CCLMDENIALREASON                   VARCHAR2(4300) := '';
  CPAYMENTEXPECTDATE                 DATE;
  BEXPECTEDPAYMENTINFUTURE           BOOLEAN := FALSE;
  CRESULT                            VARCHAR2(20);
  COTHERMESSAGE                      VARCHAR2(4000);
  DSERVICEDATE                       DATE;
  DSERVICEENDDATE                    DATE;
  DACTIVITYDATE                      DATE;
  V_CLAIMSDATA                       TBL_CLAIMSDATA := TBL_CLAIMSDATA();
  V_CLAIM                            TREC_CLAIMSDATA;
  V_SPLITCLAIMDATA                   TBL_SPLITCLAIMSDATA := TBL_SPLITCLAIMSDATA();
  V_SPLITCLAIM                       TREC_SPLITCLAIMSDATA;
  V_ACTIVITYBREAKDOWNDATA            TBL_ACTIVITYBREAKDOWNDATA := TBL_ACTIVITYBREAKDOWNDATA();
  V_ACTIVITYBREAKDOWNCLAIM           TREC_ACTIVITYBREAKDOWNDATA;
  CCHECKCASHED                       VARCHAR2(3);
  CIMAGEEXISTS                       VARCHAR2(3) := 'No';
  CISACHVALID                        EMPLOYEE.IS_ACH_VALID%TYPE := 'No';
  CWILLOVERRIDE                      EMPLOYEE.ACH_PAYMENT_ONLY_OVERRIDE_IND%TYPE := 'No';
  CBANKACCTREQ                       VARCHAR2(3) := 'No';
  NPAIDAMT                           NUMBER := 0;
  CCHECKSTATUS                       VARCHAR2(255) := 'NA';
  BACTUALVOIDCLAIM                   BOOLEAN := FALSE;
  BISJRA                             BOOLEAN := FALSE;
  COTHERCLAIMSTATUS                  VARCHAR2(255);
  CERACACTPCD                        ELECTION.ERAC_ACTP_CD%TYPE;
  DPAIDON                            DATE;
  CDEBITCARDNO                       VARCHAR2(30) := '';
  NPOSITION                          NUMBER;
  CEENAME                            VARCHAR2(255) := '';
  --PORTAL-5292 starts
  CPRIVEEPYID     NUMBER := 0;
  CREFCHECKSTATUS VARCHAR2(255);
  DREFCHECKPAIDON DATE;
  NREFUNDCOUNTER  NUMBER;
  CCHECKREFUNDED  VARCHAR2(3);
  --PORTAL-5292 ENDS
  CSUBCLAIMSTATUS                VARCHAR2(255);
  CPREMIUMEXPTYPE                VARCHAR2(255);
  NDUMMYVOIDCOUNTER              NUMBER;
  NTOTALCLMWITHDUMMYVOIDCOUNT    NUMBER;
  NPROCESSINGSCHEDULEDCOUNTER    NUMBER;
  NPROCESSINGSCHEACHCOUNTER      NUMBER := 0;
  NOVERPAYMENTEACHCOUNTER        NUMBER := 0;
  NOVERPAYMENTRECOVEREACHCOUNTER NUMBER := 0;
  NINVALIDRECPTEACHCOUNTER       NUMBER := 0;
  NRECREQUIREDEACHCOUNTER        NUMBER := 0;
  NPAIDEACHCOUNTER               NUMBER := 0;
  NVOIDEACHCOUNTER               NUMBER := 0;
  NREFUNDEACHCOUNTER             NUMBER := 0;
  NPAYMENTPROCEACHCOUNTER        NUMBER := 0;
  NPAYMENTSENTEACHCOUNTER        NUMBER := 0;
  NDENIEDEACHCOUNTER             NUMBER := 0;
  NNOTAPPROVEDEACHCOUNTER        NUMBER := 0;
  NONHOLDEACHCOUNTER             NUMBER := 0;
  NBANKACCTREQCOUNTER            NUMBER := 0;
  NBANKACCTREQEACHCOUNTER        NUMBER := 0;
  CSUBMITTEDBY                   VARCHAR2(255);
  COVERPAYMENTREASON             VARCHAR2(4000);
  nDebitCardRefundedCounter      NUMBER := 0;
  CPROCESSINGSTATUS              VARCHAR2(25);
  --PORTAL-9397
  CPAYMENTSKIPREASONCD           VARCHAR2(255);
  CONHOLDREASON                  VARCHAR2(4000);
  ISMAILINGADDRESSEDITABLE       VARCHAR2(3);
  CROLLBWDSUPPORT                VARCHAR2(3);
  --PORTAL-9397

  CISCOMPLETEDCLMIMGPRESENT VARCHAR2(3);
  NSCHEDULEDCOUNTER         NUMBER := 0;
  CCLAIMSTATUSFORDCRA       VARCHAR2(10);
  CISMAILINGADDRINVALID VARCHAR2(3); --PORTAL-10408

  EINVALID_INPUT EXCEPTION;

  CURSOR CURCLAIMS(CLM_ID IN NUMBER) IS
    SELECT C.ID,
           C.STATUS,
           C.ELCT_ID,
           E.ERAC_ACTP_CD,
           E.ERAC_ENDS,
           C.AMT,
           C.RECOVERED_AMT,
           C.OVRPMT_FLAG,
           NVL(C.OVRPMT_NOTE, C.OVRPMT_REASON) OVERPAYMENT_NOTES,
           C.CLAIM_CATEGORY,
           CB.ID CLMBT_ID,
           CB.SUBMITTED_ON,
           C.CLAIM_TYPE AS CL_TYPE,
           CB.CLAIM_TYPE,
           C.SERVICE_BEGINS,
           C.SERVICE_ENDS,
           NVL(PRVD.NAME, C.PROVIDER) PROVIDER,
           C.DPNDT_ID,
           C.EEPY_ID,
           C.APPEAL_STATUS,
           C.REVIEWED_BY,
           NVL(C.REPROCESS_CATG_LIST, 'N/A') REPROCESS_CATG_LIST,
           NVL(C.OVRPMT_REASON, 'Incorrectly Approved') OVRPMT_REASON,
           C.INSUFFICIENT_BALANCE_IND,
           C.ELIGIBILITY_PENDING_FLAG,
           C.BULKPMT_FLAG,
           C.BULKPMT_BEGINS,
           CB.SUBMITTED_BY,
           C.SUBMIT_CLM_ID,
           C.PAYMENT_SKIP_REASON_CD --PORTAL-9397
      FROM CLAIM C, ELECTION E, CLAIM_BATCH CB, PROVIDER PRVD
     WHERE C.PRVD_ID = PRVD.ID(+)
       AND CASE
             WHEN ICCHECKSINGLECLAIM = 'No' THEN
              NVL(C.SUBMIT_CLM_ID, C.ID)
             ELSE
              C.ID
           END = CLM_ID
       AND C.ELCT_ID = E.ID
       AND (CASE
             WHEN CUSEELCTIDONLY = 'Yes' AND C.ELCT_ID IN ICELCTIDLIST THEN
              1
             WHEN CUSEELCTIDONLY = 'No' THEN
              1
             ELSE
              0
           END) = 1
       AND C.CLMBT_ID = CB.ID
       AND C.EE_ID = INEEID
       AND C.STATUS IN ('Review',
                        'WaitingAuth',
                        'Approved',
                        'Denied',
                        'Released',
                        'Paid',
                        'UsedForOffset',
                        'Void')
       AND C.CLAIM_CATEGORY != 'Excess Contribution'
     ORDER BY CB.SUBMITTED_ON, C.SERVICE_BEGINS;

  CURSOR CURCHECK(EEPYID IN NUMBER) IS
    SELECT NVL(CR.STATUS, 'NA') STATUS, PF.PAID_ON
      FROM EMPLOYEE_PAYMENT EP, CHECK_REGISTER CR, PAY_FILE PF
     WHERE EP.INSTR_NO = CR.INSTR_NO(+)
       AND EP.EE_ID = CR.EE_ID(+)
       AND PF.ID = EP.PYFL_ID
       AND EP.EE_ID = INEEID
       AND EP.ID = EEPYID;

  CURSOR DBCARDCLMCATEGORY(CLM_ID IN NUMBER) IS
    SELECT CLAIM_CATEGORY
      FROM (SELECT CASE
                     WHEN CLM.CLAIM_CATEGORY = 'Debit Card' THEN
                      COALESCE(CLM.USER_CLAIM_CATEGORY,
                               COALESCE((SELECT SIC_CAT
                                          FROM FSA_SIC_CODE
                                         WHERE CD = CLM.MCC_CD),
                                        'Uncategorized'))
                     ELSE
                      CLAIM_CATEGORY
                   END CLAIM_CATEGORY
              FROM CLAIM CLM, ELECTION EL
             WHERE EL.EE_ID = INEEID
               AND CLM.ID = CLM_ID
               AND CLM.ELCT_ID = EL.ID
               AND CLM.EE_ID = EL.EE_ID
               AND STATUS IN ('Paid', 'Released', 'UsedForOffset'));

  CURSOR RECREQFORDBCARDSCLAIMS(CLM_ID IN NUMBER) IS
    SELECT COUNT(*) RECRQDCOUNT
      FROM CLAIM CL, CLAIM_BATCH CB, ELECTION EL, ACCOUNT_TYPE AT
     WHERE CL.CLMBT_ID = CB.ID
       AND CL.CLAIM_CATEGORY = 'Debit Card'
       AND CL.ELCT_ID = EL.ID
       AND CL.ID = CLM_ID
       AND EL.ERAC_ACTP_CD = AT.CD
       AND EL.EE_ID = INEEID
       AND AT.RECEIPT_REQD = 'Yes'
       AND CL.NEEDS_SUBSTANTIATION = 'Yes'
       AND CL.SUBSTANTIATION_STATUS != 'Pass'
          
       AND (COALESCE(CL.OVRPMT_FLAG, 'No') = 'No' OR
           CLM_COMMON_REPROCESS_UTIL.ISCLMOVRPMTFORSUBST(CL.ID) = 'Yes')
          
       AND CL.IS_PRE_TAX = 'No'
       AND CL.STATUS IN ('Paid', 'Released')
       AND CL.AMT > 0
       AND CL.SERVICE_BEGINS > TRUNC(ADD_MONTHS(SYSDATE, -12), 'RRRR')
          
       AND CLM_VALIDATECLAIMUTIL.GETRUNOFFDATE(EL.EE_ID,
                                               EL.ID,
                                               EL.ERAC_ER_ID,
                                               EL.ERAC_ACTP_CD) >= SYSDATE
          
       AND NOT EXISTS
     (SELECT 'B' FROM CLAIMS_IMAGE CI WHERE CI.CLMBT_ID = CB.ID);

  CURSOR INVALIDRECEIPTFORDBCARDSCLAIMS(CLM_ID IN NUMBER) IS
    SELECT COUNT(*) INVALIDRECPTCOUNT
      FROM CLAIM CL, CLAIM_BATCH CB, ELECTION EL, ACCOUNT_TYPE AT
     WHERE CL.CLMBT_ID = CB.ID
       AND CL.ID = CLM_ID
       AND CL.CLAIM_CATEGORY = 'Debit Card'
       AND CL.ELCT_ID = EL.ID
       AND EL.ERAC_ACTP_CD = AT.CD
       AND EL.EE_ID = INEEID
       AND AT.RECEIPT_REQD = 'Yes'
       AND CL.NEEDS_SUBSTANTIATION = 'Yes'
       AND CL.SUBSTANTIATION_STATUS != 'Pass'
       AND CL.IS_PRE_TAX = 'No'
       AND CL.STATUS IN ('Paid', 'Released')
       AND CL.AMT > 0
       AND CL.SERVICE_BEGINS > TRUNC(ADD_MONTHS(SYSDATE, -12), 'RRRR')
          
       AND CLM_VALIDATECLAIMUTIL.GETRUNOFFDATE(EL.EE_ID,
                                               EL.ID,
                                               EL.ERAC_ER_ID,
                                               EL.ERAC_ACTP_CD) >= SYSDATE
          
       AND EXISTS (SELECT 'B'
              FROM CLAIMS_IMAGE CI
             WHERE CI.CLMBT_ID = CB.ID
               AND CI.STATUS = 'Complete');
               
  --PORTAL-9397
  CURSOR ONHOLDREASON(CPAYMENTSKIPREASONCD IN VARCHAR2) IS
    SELECT PS.CODE, 
           PS.CODE_DESC
      FROM PAYMENT_SKIP_REASON_CODE PS
     WHERE PS.CODE = COALESCE(CPAYMENTSKIPREASONCD, 'Processing Payment');
  
BEGIN

  IF INEEID IS NULL THEN
    RAISE EINVALID_INPUT;
  END IF;

  FOR EE IN (SELECT E.PYCL_ER_ID,
                    ER.ADMN_ID,
                    E.FIRST_NAME ||
                    DECODE(E.MIDDLE_INITIAL,
                           NULL,
                           '',
                           ' ' || E.MIDDLE_INITIAL) ||
                    DECODE(E.LAST_NAME, NULL, '', ' ' || E.LAST_NAME) NAME,
                    E.IS_ACH_VALID IS_ACH_VALID,
                    E.ACH_PAYMENT_ONLY_OVERRIDE_IND,
                    E.IS_ADDRESS_INVALID --PORTAL-10408
               FROM EMPLOYEE E, EMPLOYER ER
              WHERE E.ID = INEEID
                AND E.PYCL_ER_ID = ER.ID) LOOP
    NERID         := EE.PYCL_ER_ID;
    NADMNID       := EE.ADMN_ID;
    CEENAME       := EE.NAME;
    CISACHVALID   := EE.IS_ACH_VALID;
    CWILLOVERRIDE := EE.ACH_PAYMENT_ONLY_OVERRIDE_IND;
    CISMAILINGADDRINVALID := EE.IS_ADDRESS_INVALID; --PORTAL-10408
    EXIT;
  END LOOP;

  IF JRA_ACCOUNT_UTIL.ISJRA(INEEID) = 'Yes' THEN
    BISJRA := TRUE;
  END IF;

  IF JRA_ACCOUNT_UTIL.ISERJRA(NERID) = 'Yes' THEN
    BEGIN
      SELECT 'Yes'
        INTO CBANKACCTREQ
        FROM ER_CLAIM_PARAM ECP
       WHERE ECP.ACH_PAYMENT_ONLY = 'Yes'
         AND ECP.ER_ID = NERID
         AND CISACHVALID IN ('No', 'PrenoteERR')
         AND CWILLOVERRIDE IN ('No');
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        CBANKACCTREQ := 'No';
      WHEN OTHERS THEN
        CBANKACCTREQ := 'No';
    END;
  END IF;

  FOR C IN (SELECT DISTINCT CASE
                              WHEN ICCHECKSINGLECLAIM = 'No' THEN
                               NVL(SUBMIT_CLM_ID, ID)
                              ELSE
                               ID
                            END SUBMITCLAIMID
              FROM CLAIM,
                   TABLE(STR2TBLSTR(ICCLAIMIDLIST, ',')) A,
                   TABLE(STR2TBLSTR(ICEEPYIDLIST, ',')) B,
                   TABLE(STR2TBLSTR(ICELCTIDLIST, ',')) C
             WHERE ID = NVL(A.COLUMN_VALUE, ID)
               AND NVL(EEPY_ID, 0) = NVL(B.COLUMN_VALUE, NVL(EEPY_ID, 0))
               AND ELCT_ID = NVL(C.COLUMN_VALUE, ELCT_ID)
               AND EE_ID = INEEID) LOOP
  
    CCLAIMIDLIST                       := NULL;
    CPAYMENTBREAKDOWN                  := NULL;
    NPAIDCOUNTER                       := 0;
    NPAYMENTSENTCOUNTER                := 0;
    NPAYMENTPROCCOUNTER                := 0;
    NAPPROVEDCOUNTER                   := 0;
    NONHOLDCOUNTER                     := 0;
    NREVIEWCOUNTER                     := 0;
    NDENIEDCOUNTER                     := 0;
    NBANKACCTREQCOUNTER                := 0;
    NNOTAPPROVEDCOUNTER                := 0;
    NTOTALCLAIMAMT                     := 0;
    NTOTALCLAIMCOUNT                   := 0;
    NOVERPAYMENTCOUNTER                := 0;
    NOVERPAYMENTRECOVERCOUNTER         := 0;
    NRECREQUIREDCOUNTER                := 0;
    NINVALIDRECPTCOUNTER               := 0;
    NVOIDCOUNTER                       := 0;
    NCANCELPREMIUMRECURRINGCOUNTER     := 0;
    NCANCELPREMIUMRECURRINGEACHCOUNTER := 0;
    NSUBMITCLAIMID                     := C.SUBMITCLAIMID;
    V_SPLITCLAIMDATA                   := TBL_SPLITCLAIMSDATA();
    V_ACTIVITYBREAKDOWNDATA            := TBL_ACTIVITYBREAKDOWNDATA();
    CCHECKCASHED                       := 'NA';
    CRECREQUIRED                       := 'No';
    CINVALIDRECPT                      := 'No';
    NPAIDAMT                           := 0;
    BEXPECTEDPAYMENTINFUTURE           := FALSE;
    CCHECKSTATUS                       := 'NA';
    BACTUALVOIDCLAIM                   := FALSE;
    COTHERCLAIMSTATUS                  := '';
    DPAIDON                            := NULL;
    NREFUNDCOUNTER                     := 0;
    CCHECKREFUNDED                     := 'No';
    CSUBCLAIMSTATUS                    := NULL;
    NDUMMYVOIDCOUNTER                  := 0;
    NTOTALCLMWITHDUMMYVOIDCOUNT        := 0;
    NPROCESSINGSCHEDULEDCOUNTER        := 0;
  
    CISCOMPLETEDCLMIMGPRESENT := 'No';
    NSCHEDULEDCOUNTER         := 0;
    nDebitCardRefundedCounter := 0;
  
    FOR CCLAIM IN CURCLAIMS(C.SUBMITCLAIMID) LOOP
      CCLAIMIDLIST                := CCLAIMIDLIST || CCLAIM.ID || '|';
      NTOTALCLMWITHDUMMYVOIDCOUNT := NTOTALCLMWITHDUMMYVOIDCOUNT + 1;
      CINVALIDRECPT               := 'No';
      CRECREQUIRED                := 'No';
      CSUBMITTEDBY                := CCLAIM.SUBMITTED_BY;
      COTHERCLAIMSTATUS           := CCLAIM.STATUS;
      CINDIVIDUALSERVICED         := NULL;
      CCLAIMSTATUSFORDCRA         := NULL;
      CPAYMENTSKIPREASONCD        := CCLAIM.PAYMENT_SKIP_REASON_CD; --PORTAL-9397
      IF COTHERCLAIMSTATUS = 'UsedForOffset' THEN
        COTHERCLAIMSTATUS := 'Used For Offset';
      END IF;
    
      CPROCESSINGSTATUS := '';
    
      CERACACTPCD      := CCLAIM.ERAC_ACTP_CD;
      BACTUALVOIDCLAIM := FALSE;
    
      IF CCLAIM.STATUS = 'Void' THEN
        FOR CURUNALLOCATEDCLAIM IN (SELECT 1
                                      FROM UNALLOCATE_CLAIM UC
                                     WHERE UC.ID = CCLAIM.ID) LOOP
          BACTUALVOIDCLAIM := TRUE;
          EXIT;
        END LOOP;
        FOR CANCELCLAIM IN (SELECT 1
                              FROM CLAIM CLM, CLAIM_RETRO_ACTIVITY CRA
                             WHERE CLM.ID = CCLAIM.ID
                               AND CLM.ID = CRA.CLM_ID
                               AND CRA.ACTIVITY_TYPE = 'Approved-To-Void') LOOP
        
          BACTUALVOIDCLAIM := TRUE;
          EXIT;
        END LOOP;
      
        IF NOT BACTUALVOIDCLAIM THEN
          NDUMMYVOIDCOUNTER := NDUMMYVOIDCOUNTER + 1;
          CONTINUE;
        ELSE
          IF BISJRA THEN
            NCANCELPREMIUMRECURRINGCOUNTER     := NCANCELPREMIUMRECURRINGCOUNTER + 1;
            NCANCELPREMIUMRECURRINGEACHCOUNTER := NCANCELPREMIUMRECURRINGEACHCOUNTER + 1;
          ELSE
            NVOIDCOUNTER     := NVOIDCOUNTER + 1;
            NVOIDEACHCOUNTER := NVOIDEACHCOUNTER + 1;
          END IF;
        END IF;
      END IF;
    
      IF ICEEPYIDLIST IS NOT NULL THEN
        IF CCLAIM.STATUS = 'Released' OR CCLAIM.STATUS = 'Paid' THEN
          FOR RECACCT IN (SELECT 'X'
                            FROM TABLE(STR2TBLSTR(ICEEPYIDLIST, ','))
                           WHERE COLUMN_VALUE = CCLAIM.EEPY_ID) LOOP
            NPAIDAMT := NPAIDAMT + CCLAIM.AMT;
          END LOOP;
        END IF;
        CPAYMENTBREAKDOWN := CPAYMENTBREAKDOWN ||
                             PORTALUTIL.GETACCOUNTLABELFORELECTION(INEEID,
                                                                   CCLAIM.ELCT_ID,
                                                                   CCLAIM.ERAC_ACTP_CD) || '~' ||
                             EXTRACT(YEAR FROM CCLAIM.ERAC_ENDS) || '~' ||
                             CCLAIM.AMT || '|';
      ELSE
        NPAIDAMT          := NPAIDAMT + CCLAIM.AMT;
        CPAYMENTBREAKDOWN := CPAYMENTBREAKDOWN ||
                             PORTALUTIL.GETACCOUNTLABELFORELECTION(INEEID,
                                                                   CCLAIM.ELCT_ID,
                                                                   CCLAIM.ERAC_ACTP_CD) || '~' ||
                             EXTRACT(YEAR FROM CCLAIM.ERAC_ENDS) || '~' ||
                             CCLAIM.AMT || '|';
      END IF;
    
      CCATEGORY := CCLAIM.CLAIM_CATEGORY;
    
      IF (CCLAIM.CLAIM_CATEGORY = 'Debit Card') THEN
        FOR CLMCATEGORY IN DBCARDCLMCATEGORY(CCLAIM.ID) LOOP
          CCATEGORY := CLMCATEGORY.CLAIM_CATEGORY;
          EXIT;
        END LOOP;
      END IF;
      CCLAIMBATCHTYPE := CCLAIM.CLAIM_TYPE;
      CCLAIMTYPE      := CCLAIM.CL_TYPE;
      DACTIVITYDATE   := CCLAIM.SUBMITTED_ON;
      DSERVICEDATE    := CCLAIM.SERVICE_BEGINS;
      DSERVICEENDDATE := CCLAIM.SERVICE_ENDS;
      CPROVIDER       := CCLAIM.PROVIDER;
      NCLAIMBATCHID   := CCLAIM.CLMBT_ID;
    
      IF CCLAIM.REVIEWED_BY IS NOT NULL THEN
        CREVIEWEDBY := CCLAIM.REVIEWED_BY;
      END IF;
    
      IF CCLAIM.APPEAL_STATUS IS NOT NULL THEN
        CAPPEALSTATUS := CCLAIM.APPEAL_STATUS;
      END IF;
    
      IF CINDIVIDUALSERVICED IS NULL THEN
        IF CCLAIM.DPNDT_ID IS NULL THEN
          IF (CCLAIM.CLAIM_CATEGORY = 'Debit Card') THEN
            NPOSITION := REGEXP_INSTR(CCLAIM.CL_TYPE, '[0-9]');
            IF NPOSITION > 0 THEN
              CDEBITCARDNO := SUBSTR(CCLAIM.CL_TYPE, NPOSITION, 4);
              BEGIN
                SELECT DISTINCT NVL(TRIM(FIRST_NAME || ' ' ||
                                         DECODE(MIDDLE_INITIAL,
                                                NULL,
                                                '',
                                                MIDDLE_INITIAL || ' ') ||
                                         LAST_NAME),
                                    '')
                  INTO CINDIVIDUALSERVICED
                  FROM DEP_DEBIT_CARD_DTL DPCD, DEPENDENT DP
                 WHERE DPCD.EE_ID = INEEID
                   AND REGEXP_SUBSTR(TRIM(DPCD.DEBIT_CARD_NO), '.{4}$') =
                       CDEBITCARDNO
                   AND DPCD.DEP_ID = DP.ID;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  CINDIVIDUALSERVICED := '';
                WHEN OTHERS THEN
                  CINDIVIDUALSERVICED := '';
              END;
            END IF;
          END IF;
          IF CINDIVIDUALSERVICED IS NULL THEN
            CINDIVIDUALSERVICED := CEENAME;
          END IF;
        ELSE
          SELECT NVL(TRIM(FIRST_NAME || ' ' ||
                          DECODE(MIDDLE_INITIAL,
                                 NULL,
                                 '',
                                 MIDDLE_INITIAL || ' ') || LAST_NAME),
                     '')
            INTO CINDIVIDUALSERVICED
            FROM DEPENDENT
           WHERE ID = CCLAIM.DPNDT_ID;
        
        END IF;
      END IF;
    
      NTOTALCLAIMCOUNT := NTOTALCLAIMCOUNT + 1;
      NTOTALCLAIMAMT   := NTOTALCLAIMAMT + CCLAIM.AMT;
    
      BEGIN
        SELECT 'Yes'
          INTO CIMAGEEXISTS
          FROM CLAIM        CL,
               CLAIM_BATCH  CB,
               ELECTION     EL,
               ACCOUNT_TYPE AT,
               CLAIMS_IMAGE CI
         WHERE CL.CLMBT_ID = CB.ID
           AND CL.ELCT_ID = EL.ID
           AND EL.ERAC_ACTP_CD = AT.CD
           AND EL.EE_ID = CL.EE_ID
           AND EL.EE_ID = INEEID
           AND UPPER(AT.RECEIPT_REQD) = 'YES'
           AND UPPER(CB.CLAIM_TYPE) IN ('ONLINE', 'MANUAL')
           AND CI.CLMBT_ID = NCLAIMBATCHID
           AND CL.ID = CCLAIM.ID
           AND CI.CLMBT_ID = CL.CLMBT_ID
           AND CI.STATUS IN ('Indexed', 'QAPending');
      EXCEPTION
        WHEN TOO_MANY_ROWS THEN
          CIMAGEEXISTS := 'Yes';
        WHEN NO_DATA_FOUND THEN
          CIMAGEEXISTS := 'No';
        WHEN OTHERS THEN
          CIMAGEEXISTS := 'No';
      END;
    
      IF CIMAGEEXISTS = 'Yes' THEN
        NREVIEWCOUNTER := NREVIEWCOUNTER + 1;
        CCLAIM.STATUS  := 'Under Review';
      END IF;
    
      IF CCLAIM.STATUS = 'Released' OR CCLAIM.STATUS = 'Paid' THEN
        IF (CCLAIM.CLAIM_CATEGORY != 'Debit Card') THEN
          IF CPRIVEEPYID != CCLAIM.EEPY_ID THEN
            FOR CCHECK IN CURCHECK(CCLAIM.EEPY_ID) LOOP
              CCHECKSTATUS := CCHECK.STATUS;
              --PORTAL-5292 starts
              IF CCHECKSTATUS = 'Refunded' THEN
                CCHECKREFUNDED := 'Yes';
                --PORTAL-5292 ENDS
              ELSIF CCHECKSTATUS = 'Cashed' THEN
                CCHECKCASHED := 'Yes';
              ELSIF CCHECKSTATUS = 'NA' THEN
                CCHECKCASHED := 'NA';
              ELSE
                CCHECKCASHED := 'No';
              END IF;
            
              IF CCHECK.PAID_ON IS NOT NULL THEN
                IF CCHECK.PAID_ON >
                   NVL(DPAIDON, TO_DATE('01/01/1970', 'MM/DD/YYYY')) THEN
                  DPAIDON := CCHECK.PAID_ON;
                END IF;
              END IF;
            
              CPRIVEEPYID     := CCLAIM.EEPY_ID;
              CREFCHECKSTATUS := CCHECK.STATUS;
              DREFCHECKPAIDON := DPAIDON;
            END LOOP;
            --PORTAL-5292 starts
          ELSE
            IF CREFCHECKSTATUS = 'Refunded' THEN
              CCHECKREFUNDED := 'Yes';
            
            ELSIF CREFCHECKSTATUS = 'Cashed' THEN
              CCHECKCASHED := 'Yes';
            ELSIF CREFCHECKSTATUS = 'NA' THEN
              CCHECKCASHED := 'NA';
            
            ELSE
              CCHECKCASHED := 'No';
            END IF;
          
            IF DREFCHECKPAIDON IS NOT NULL THEN
              IF DREFCHECKPAIDON >
                 NVL(DPAIDON, TO_DATE('01/01/1970', 'MM/DD/YYYY')) THEN
                DPAIDON := DREFCHECKPAIDON;
              END IF;
            END IF;
          
          END IF;
        
          --PORTAL-5292 ENDS
        
          CLM_EXPECTED_PAYMENT_DATE.GETEXPECTEDPAYDATEBYCLMID(OCRESULT       => CRESULT,
                                                              OCOTHERMESSAGE => COTHERMESSAGE,
                                                              ODPAYMENTDT    => CPAYMENTEXPECTDATE,
                                                              INCLMID        => CCLAIM.ID);
        
          IF CRESULT != 'ERROR' AND
             TRUNC(CPAYMENTEXPECTDATE) >= TRUNC(SYSDATE) THEN
            BEXPECTEDPAYMENTINFUTURE := TRUE;
          END IF;
        ELSIF CCLAIM.Amt < 0 THEN
          nDebitCardRefundedCounter := nDebitCardRefundedCounter + 1;
        END IF;
      
        FOR REC_DEBITCARDINVALIDRECPT IN INVALIDRECEIPTFORDBCARDSCLAIMS(CCLAIM.ID) LOOP
          IF (REC_DEBITCARDINVALIDRECPT.INVALIDRECPTCOUNT > 0) THEN
            CINVALIDRECPT := 'Yes';
          END IF;
          EXIT;
        END LOOP;
      
        FOR REC_DEBITCARDRECPTREQD IN RECREQFORDBCARDSCLAIMS(CCLAIM.ID) LOOP
          IF (REC_DEBITCARDRECPTREQD.RECRQDCOUNT > 0) THEN
            CRECREQUIRED := 'Yes';
          END IF;
          EXIT;
        END LOOP;
      
        IF CCLAIM.OVRPMT_FLAG = 'Yes' THEN
          IF CCLAIM.AMT - NVL(CCLAIM.RECOVERED_AMT, 0) > 0 THEN
            CCLAIM.STATUS           := 'Overpayment';
            NOVERPAYMENTCOUNTER     := NOVERPAYMENTCOUNTER + 1;
            NOVERPAYMENTEACHCOUNTER := NOVERPAYMENTEACHCOUNTER + 1;
            COVERPAYMENTREASON      := CCLAIM.OVERPAYMENT_NOTES;
          
            IF CINVALIDRECPT = 'Yes' THEN
              CSUBCLAIMSTATUS := 'Invalid Receipt';
            ELSIF CRECREQUIRED = 'Yes' THEN
              CSUBCLAIMSTATUS := 'Receipt Required';
            END IF;
          
          ELSE
            CCLAIM.STATUS                  := 'Recovered';
            NOVERPAYMENTRECOVERCOUNTER     := NOVERPAYMENTRECOVERCOUNTER + 1;
            NOVERPAYMENTRECOVEREACHCOUNTER := NOVERPAYMENTRECOVEREACHCOUNTER + 1;
          END IF;
        
        ELSIF (CINVALIDRECPT = 'Yes') THEN
          CCLAIM.STATUS := 'Invalid Receipt';
          FOR CDT IN (SELECT CT.TEXT
                        FROM CLAIM_DENIAL_TEXT CT
                       WHERE CT.CLM_ID = CCLAIM.ID) LOOP
            CCLMDENIALREASON := CDT.TEXT;
          END LOOP;
          NINVALIDRECPTCOUNTER     := NINVALIDRECPTCOUNTER + 1;
          NINVALIDRECPTEACHCOUNTER := NINVALIDRECPTEACHCOUNTER + 1;
        
        ELSIF (CRECREQUIRED = 'Yes') THEN
          CCLAIM.STATUS := 'Receipt Required';
          FOR CDT IN (SELECT CT.TEXT
                        FROM CLAIM_DENIAL_TEXT CT
                       WHERE CT.CLM_ID = CCLAIM.ID) LOOP
            CCLMDENIALREASON := CDT.TEXT;
          END LOOP;
          NRECREQUIREDCOUNTER     := NRECREQUIREDCOUNTER + 1;
          NRECREQUIREDEACHCOUNTER := NRECREQUIREDEACHCOUNTER + 1;
        
        ELSIF ((BEXPECTEDPAYMENTINFUTURE AND CCHECKCASHED = 'NA') OR
              CCHECKCASHED = 'No') THEN
          IF CCLAIM.STATUS = 'Released' THEN
            NPAYMENTSENTCOUNTER     := NPAYMENTSENTCOUNTER + 1;
            NPAYMENTSENTEACHCOUNTER := NPAYMENTSENTEACHCOUNTER + 1;
          ELSE
            NPAYMENTPROCCOUNTER     := NPAYMENTPROCCOUNTER + 1;
            NPAYMENTPROCEACHCOUNTER := NPAYMENTPROCEACHCOUNTER + 1;
            CPROCESSINGSTATUS       := 'Payment Processing';
          END IF;
        ELSIF CCHECKREFUNDED = 'Yes' THEN
          NREFUNDCOUNTER     := NREFUNDCOUNTER + 1;
          NREFUNDEACHCOUNTER := NREFUNDEACHCOUNTER + 1;
        ELSE
          IF CCLAIM.STATUS = 'Released' THEN
            NPAIDCOUNTER     := NPAIDCOUNTER + 1;
            NPAIDEACHCOUNTER := NPAIDEACHCOUNTER + 1;
          ELSE
            NPAYMENTPROCCOUNTER     := NPAYMENTPROCCOUNTER + 1;
            NPAYMENTPROCEACHCOUNTER := NPAYMENTPROCEACHCOUNTER + 1;
            CPROCESSINGSTATUS       := 'Payment Processing';
          END IF;
        
        END IF;
      
      ELSIF CCLAIM.STATUS = 'Approved' THEN
        NAPPROVEDCOUNTER := NAPPROVEDCOUNTER + 1;
      ELSIF CCLAIM.STATUS = 'Review' OR CCLAIM.STATUS = 'WaitingAuth' THEN
        IF CCLAIM.STATUS = 'WaitingAuth' AND CCLAIM.ERAC_ACTP_CD = 'DCRA' THEN
          BEGIN
            SELECT 'Yes'
              INTO CISCOMPLETEDCLMIMGPRESENT
              FROM claims_image ci, claim_batch cb
             WHERE cb.id = ci.clmbt_id
               AND cb.id = NCLAIMBATCHID
               AND cb.ee_id = INEEID
               AND ci.status = 'Complete';
          EXCEPTION
            WHEN TOO_MANY_ROWS THEN
              CCLAIMSTATUSFORDCRA       := 'Scheduled';
              CISCOMPLETEDCLMIMGPRESENT := 'Yes';
            WHEN NO_DATA_FOUND THEN
              CCLAIMSTATUSFORDCRA       := NULL;
              CISCOMPLETEDCLMIMGPRESENT := 'No';
            WHEN OTHERS THEN
              CCLAIMSTATUSFORDCRA       := NULL;
              CISCOMPLETEDCLMIMGPRESENT := 'No';
          END;
          IF CISCOMPLETEDCLMIMGPRESENT = 'Yes' THEN
            CCLAIMSTATUSFORDCRA := 'Scheduled';
            NSCHEDULEDCOUNTER   := NSCHEDULEDCOUNTER + 1;
          END IF;
        
        ELSE
          NREVIEWCOUNTER := NREVIEWCOUNTER + 1;
        END IF;
      
      ELSIF CCLAIM.STATUS = 'Denied' THEN
        NDENIEDEACHCOUNTER := NDENIEDEACHCOUNTER + 1;
        FOR CDT IN (SELECT CT.LABEL, CT.TEXT
                      FROM CLAIM_DENIAL_TEXT CT
                     WHERE CT.CLM_ID = CCLAIM.ID
                       AND CT.LABEL ! = 'Other') LOOP
          CLABEL := CDT.LABEL;
        
          IF (CLABEL IS NOT NULL AND
             ISUSERACTIONABLE(INERID   => NERID,
                               INADMNID => NADMNID,
                               ICLABEL  => CLABEL,
                               ICACTPCD => CCLAIM.ERAC_ACTP_CD) = 'Yes') THEN
            CCLAIM.STATUS           := 'Not Approved';
            CCLMNOTAPPROVEDREASON   := CDT.TEXT;
            NNOTAPPROVEDCOUNTER     := NNOTAPPROVEDCOUNTER + 1;
            NNOTAPPROVEDEACHCOUNTER := NNOTAPPROVEDEACHCOUNTER + 1;
          ELSE
            CCLMDENIEDDREASON := CDT.TEXT;
            NDENIEDCOUNTER    := NDENIEDCOUNTER + 1;
            EXIT;
          END IF;
        END LOOP;
        FOR CLMOTHERREASON IN (SELECT CDT.TEXT
                                 FROM CLAIM_DENIAL_TEXT CDT
                                WHERE CDT.CLM_ID = CCLAIM.ID
                                  AND CDT.LABEL = 'Other') LOOP
          CCLMDENIEDDREASON := CLMOTHERREASON.TEXT;
          NDENIEDCOUNTER    := NDENIEDCOUNTER + 1;
        
        END LOOP;
        IF (NDENIEDCOUNTER > 0) THEN
          CCLMDENIALREASON := CCLMDENIEDDREASON;
        ELSE
          CCLMDENIALREASON := CCLMNOTAPPROVEDREASON;
        END IF;
      END IF;
    
      V_SPLITCLAIM := TREC_SPLITCLAIMSDATA(ID                  => CCLAIM.ID,
                                           CLAIM_STATUS        => coalesce(CCLAIMSTATUSFORDCRA,
                                                                           CCLAIM.STATUS),
                                           ACCOUNT_TYPE        => CCLAIM.ERAC_ACTP_CD,
                                           PLAN_YEAR           => EXTRACT(YEAR FROM
                                                                          CCLAIM.ERAC_ENDS),
                                           ELCT_ID             => CCLAIM.ELCT_ID,
                                           AMOUNT              => CCLAIM.AMT,
                                           CATEGORY            => CCLAIM.CLAIM_CATEGORY,
                                           CLAIM_BATCH_ID      => CCLAIM.CLMBT_ID,
                                           CLAIM_BATCH_TYPE    => CCLAIM.CLAIM_TYPE,
                                           SERVICE_DATE        => CCLAIM.SERVICE_BEGINS,
                                           SERVICE_END_DATE    => CCLAIM.SERVICE_ENDS,
                                           APPEAL_STATUS       => CCLAIM.APPEAL_STATUS,
                                           REVIEWED_BY         => CCLAIM.REVIEWED_BY,
                                           RECOVERED_AMT       => NVL(CCLAIM.RECOVERED_AMT,
                                                                      0),
                                           REASON_TEXT         => CCLAIM.OVRPMT_REASON,
                                           CLAIM_DENIAL_REASON => NULL,
                                           STATUS_LABEL        => CPROCESSINGSTATUS,
                                           V_RECOVERYDETAILS   => NULL);
      V_SPLITCLAIMDATA.EXTEND(1);
      V_SPLITCLAIMDATA(V_SPLITCLAIMDATA.COUNT) := V_SPLITCLAIM;
    
      IF (JRA_ACCOUNT_UTIL.ISJRA(INEEID, CERACACTPCD) = 'Yes' AND
         CCLAIMTYPE = 'PREMIUM') THEN
      
        -- Check Premium Expense Type
        IF (CCLAIM.ID = CCLAIM.SUBMIT_CLM_ID) THEN
          CPREMIUMEXPTYPE := CASE
                               WHEN CCLAIM.BULKPMT_FLAG = 'Yes' THEN
                                'Lumpsum'
                               WHEN NVL(CCLAIM.BULKPMT_FLAG, 'No') = 'No' THEN
                                'Recurring'
                             END;
        ELSIF (CCLAIM.BULKPMT_FLAG = 'Yes' AND CPREMIUMEXPTYPE IS NULL) THEN
          CPREMIUMEXPTYPE := 'Lumpsum';
        ELSIF (NVL(CCLAIM.BULKPMT_FLAG, 'No') = 'No' AND
              CPREMIUMEXPTYPE IS NULL) THEN
          CPREMIUMEXPTYPE := 'Recurring';
        END IF;
        -- Obtain other possible Statuses for Premium Claims
      
        IF (COTHERCLAIMSTATUS = 'Approved') THEN
          IF (CBANKACCTREQ = 'Yes' AND
             NVL(CCLAIM.ELIGIBILITY_PENDING_FLAG, 'No') = 'No') THEN
            NBANKACCTREQCOUNTER     := NBANKACCTREQCOUNTER + 1;
            NBANKACCTREQEACHCOUNTER := NBANKACCTREQEACHCOUNTER + 1;
          END IF;
          IF (CIMAGEEXISTS = 'No') THEN
            IF (CCLAIM.ELIGIBILITY_PENDING_FLAG = 'Yes' AND
               NVL(CCLAIM.BULKPMT_FLAG, 'No') = 'No' AND
               CCLAIM.SERVICE_BEGINS >= TRUNC(SYSDATE)) THEN
              NPROCESSINGSCHEDULEDCOUNTER := NPROCESSINGSCHEDULEDCOUNTER + 1;
              NPROCESSINGSCHEACHCOUNTER   := NPROCESSINGSCHEACHCOUNTER + 1;
            ELSE
              NONHOLDCOUNTER     := NONHOLDCOUNTER + 1;
              NONHOLDEACHCOUNTER := NONHOLDEACHCOUNTER + 1;
              
              --PORTAL-9397
              IF CPAYMENTSKIPREASONCD = 'Mailing Address Required' THEN
                ISMAILINGADDRESSEDITABLE := GetErAdmnColumnValueByEscalation(icColumnName => 'IS_MAILING_ADDR_EDIT_ALLOWED',
                                                                             inAdmnId     => NADMNID,
                                                                             inErId       => NERID);
                IF COALESCE(ISMAILINGADDRESSEDITABLE, 'Yes') = 'No' THEN
                  CPAYMENTSKIPREASONCD := 'Mailing Address Required - No Portal Update';
                END IF;
              ELSIF CPAYMENTSKIPREASONCD = 'Payment awaiting funds' THEN
                FOR CCHECKROLLBWDFLAG IN (SELECT EA.BALANCE_ROLLBACK_ALLOW_FLAG
                                            FROM EMPLOYER_ACCOUNT EA
                                           WHERE EA.ER_ID = NERID
                                             AND EA.ACTP_CD = CERACACTPCD) LOOP
                  CROLLBWDSUPPORT := CCHECKROLLBWDFLAG.BALANCE_ROLLBACK_ALLOW_FLAG;
                  EXIT;                         
                END LOOP; 
              
                IF CCLAIM.ERAC_ENDS < SYSDATE AND CROLLBWDSUPPORT = 'No' THEN
                  CPAYMENTSKIPREASONCD := 'Awaiting Funds - Prior Year';
                ELSE 
                  CPAYMENTSKIPREASONCD := 'Awaiting Funds - Current Year';
                END IF;
                                                                                              
              END IF;
              
              --PORTAL-10408 Start
              IF CPAYMENTSKIPREASONCD = 'Mailing Address Required' AND CISMAILINGADDRINVALID = 'No' THEN
                CONHOLDREASON := '';
              ELSE
                FOR HLDREASON IN ONHOLDREASON(CPAYMENTSKIPREASONCD) LOOP
                  CONHOLDREASON := HLDREASON.CODE_DESC;
                END LOOP; 
              END IF;
              --PORTAL-10408 End
              
              --PORTAL-9397
            END IF;
          END IF;
        
        END IF;
      
        ---- Derive Each Claim line Status for JRA
        IF NCANCELPREMIUMRECURRINGEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Cancelled';
        ELSIF NOVERPAYMENTEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Overpayment';
        ELSIF NOVERPAYMENTRECOVEREACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Recovered';
        ELSIF NINVALIDRECPTEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Invalid Receipt';
        ELSIF NRECREQUIREDEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Receipt Required';
        ELSIF NPAIDEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Paid';
        ELSIF NVOIDEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Cancelled';
        ELSIF NREFUNDEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Refunded';
        ELSIF NPAYMENTPROCEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Processing Payment';
        ELSIF NPAYMENTSENTEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Payment Sent';
        ELSIF NPROCESSINGSCHEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Processing Scheduled';
        ELSIF NBANKACCTREQEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Bank Account Required';
        ELSIF NONHOLDEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'On Hold';
        ELSIF NNOTAPPROVEDEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Not Approved';
        ELSIF NDENIEDEACHCOUNTER > 0 THEN
          CJRACLAIMSTATUS := 'Denied';
        ELSIF CIMAGEEXISTS = 'Yes' THEN
          CJRACLAIMSTATUS := 'Under Review';
        ELSE
          CJRACLAIMSTATUS := COTHERCLAIMSTATUS;
        END IF;
      
        V_ACTIVITYBREAKDOWNCLAIM := TREC_ACTIVITYBREAKDOWNDATA(CLAIM_ID           => CCLAIM.ID,
                                                               SUBMIT_CLAIM_ID    => NSUBMITCLAIMID,
                                                               ACCOUNT_TYPE       => CCLAIM.ERAC_ACTP_CD,
                                                               ELCT_ID            => CCLAIM.ELCT_ID,
                                                               AMOUNT             => CCLAIM.AMT,
                                                               CLAIM_CATEGORY     => CCLAIM.CLAIM_CATEGORY,
                                                               CLAIM_TYPE         => CCLAIM.CL_TYPE,
                                                               STATUS             => CJRACLAIMSTATUS,
                                                               CLAIM_BATCH_ID     => CCLAIM.CLMBT_ID,
                                                               CLAIM_BATCH_TYPE   => CCLAIM.CLAIM_TYPE,
                                                               SERVICE_BEGIN_DATE => CCLAIM.SERVICE_BEGINS,
                                                               SERVICE_END_DATE   => CCLAIM.SERVICE_ENDS,
                                                               ACTIVITY_DATE      => CCLAIM.SUBMITTED_ON,
                                                               PROVIDER           => CCLAIM.PROVIDER);
        V_ACTIVITYBREAKDOWNDATA.EXTEND(1);
        V_ACTIVITYBREAKDOWNDATA(V_ACTIVITYBREAKDOWNDATA.COUNT) := V_ACTIVITYBREAKDOWNCLAIM;
      END IF;
      NOVERPAYMENTEACHCOUNTER            := 0;
      NINVALIDRECPTEACHCOUNTER           := 0;
      NRECREQUIREDEACHCOUNTER            := 0;
      NPAIDEACHCOUNTER                   := 0;
      NVOIDEACHCOUNTER                   := 0;
      NREFUNDEACHCOUNTER                 := 0;
      NPAYMENTPROCEACHCOUNTER            := 0;
      NPAYMENTSENTEACHCOUNTER            := 0;
      NDENIEDEACHCOUNTER                 := 0;
      NNOTAPPROVEDEACHCOUNTER            := 0;
      NONHOLDEACHCOUNTER                 := 0;
      NPROCESSINGSCHEACHCOUNTER          := 0;
      NBANKACCTREQEACHCOUNTER            := 0;
      NOVERPAYMENTRECOVEREACHCOUNTER     := 0;
      NCANCELPREMIUMRECURRINGEACHCOUNTER := 0;
    END LOOP;
    
    
    IF NTOTALCLMWITHDUMMYVOIDCOUNT = NDUMMYVOIDCOUNTER THEN
      CONTINUE;
    ELSIF nDebitCardRefundedCounter = NTOTALCLAIMCOUNT THEN
      CCLAIMSTATUS := 'Refunded';
    ELSIF NTOTALCLMWITHDUMMYVOIDCOUNT = NCANCELPREMIUMRECURRINGCOUNTER THEN
      CCLAIMSTATUS := 'Cancelled';
    ELSIF CIMAGEEXISTS = 'Yes' THEN
      CCLAIMSTATUS := 'Under Review';
    ELSIF NOVERPAYMENTRECOVERCOUNTER = NTOTALCLAIMCOUNT THEN
      CCLAIMSTATUS := 'Recovered';
    ELSIF NOVERPAYMENTCOUNTER > 0 THEN
      CCLAIMSTATUS     := 'Overpayment';
      CCLMDENIALREASON := COVERPAYMENTREASON;
    ELSIF NINVALIDRECPTCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Invalid Receipt';
    ELSIF NRECREQUIREDCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Receipt Required';
    ELSIF NPAIDCOUNTER = NTOTALCLAIMCOUNT THEN
      CCLAIMSTATUS := 'Paid';
    ELSIF NPAIDCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Partially Paid';
    ELSIF NVOIDCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Cancelled';
    ELSIF NREFUNDCOUNTER = NTOTALCLAIMCOUNT THEN
      CCLAIMSTATUS := 'Refunded';
    ELSIF NREFUNDCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Partially Refunded';
    ELSIF NPAYMENTSENTCOUNTER = NTOTALCLAIMCOUNT THEN
      CCLAIMSTATUS := 'Payment Sent';
    ELSIF NPAYMENTSENTCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Partial Payment Sent';
    ELSIF NPAYMENTPROCCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Processing Payment';
    ELSIF NBANKACCTREQCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Bank Account Required';
    ELSIF NONHOLDCOUNTER > 0 THEN
      CCLAIMSTATUS     := 'On Hold';
      CCLMDENIALREASON := CPAYMENTSKIPREASONCD || '|' || CONHOLDREASON; --PORTAL-9397
    ELSIF NPROCESSINGSCHEDULEDCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Processing Scheduled';
    ELSIF (NAPPROVEDCOUNTER = NTOTALCLAIMCOUNT AND NOT BISJRA) THEN
      CCLAIMSTATUS := 'Approved';
    ELSIF (NAPPROVEDCOUNTER > 0 AND NOT BISJRA) THEN
      CCLAIMSTATUS := 'Partially Approved';
    ELSIF NREVIEWCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Under Review';
    ELSIF NDENIEDCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Denied';
    ELSIF NNOTAPPROVEDCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Not Approved';
    ELSIF NSCHEDULEDCOUNTER > 0 THEN
      CCLAIMSTATUS := 'Scheduled';
    ELSE
      CCLAIMSTATUS := COTHERCLAIMSTATUS;
    END IF;
  
    V_CLAIM := TREC_CLAIMSDATA(ID                      => NSUBMITCLAIMID,
                               CLAIM_STATUS            => CCLAIMSTATUS,
                               SUB_CLAIM_STATUS        => CSUBCLAIMSTATUS,
                               PAYMENT_BREAKDOWN       => CPAYMENTBREAKDOWN,
                               ACCOUNT_TYPE            => CERACACTPCD,
                               TOTAL_AMOUNT            => NTOTALCLAIMAMT,
                               CATEGORY                => CCATEGORY,
                               CLAIM_TYPE              => CCLAIMTYPE,
                               CLAIM_BATCH_ID          => NCLAIMBATCHID,
                               CLAIM_BATCH_TYPE        => CCLAIMBATCHTYPE,
                               PROVIDER                => CPROVIDER,
                               INDIVIDUAL_SERVICED     => CINDIVIDUALSERVICED,
                               SUBMIT_CLAIM_ID         => NSUBMITCLAIMID,
                               CHILD_CLAIM_ID          => CCLAIMIDLIST,
                               CLAIM_DENIAL_REASON     => CCLMDENIALREASON,
                               SERVICE_DATE            => DSERVICEDATE,
                               SERVICE_END_DATE        => DSERVICEENDDATE,
                               APPEAL_STATUS           => CAPPEALSTATUS,
                               REVIEWED_BY             => CREVIEWEDBY,
                               ACTIVITY_DATE           => DACTIVITYDATE,
                               FINAL_PAID_AMT          => NPAIDAMT,
                               PAID_ON                 => DPAIDON,
                               PREMIUM_EXPENSE_TYPE    => CPREMIUMEXPTYPE,
                               CLAIM_SUBMITTED_BY      => CSUBMITTEDBY,
                               V_SPLITCLAIMSDATA       => V_SPLITCLAIMDATA,
                               V_ACTIVITYBREAKDOWNDATA => V_ACTIVITYBREAKDOWNDATA);
    V_CLAIMSDATA.EXTEND(1);
    V_CLAIMSDATA(V_CLAIMSDATA.COUNT) := V_CLAIM;
  END LOOP;
  RETURN V_CLAIMSDATA;

EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001,
                            'Error while fetching data:' || SQLERRM);
END CLM_GETCLAIMDETAILS;
======================================================================================================
CREATE OR REPLACE FUNCTION GetErAdmnColumnValueByEscalation(icColumnName IN VARCHAR2,
                                                            inAdmnId     IN NUMBER,
                                                            inErId       IN NUMBER)
  RETURN VARCHAR2 AUTHID DEFINER IS

  /*********************************************************************************
      Activity            By                      On                     Version 
   **********************************************************************************
    Created           Gaurav                 09/12/2019                1.0.0
     Jira: PORTAL-8764
     
   This function returns the column value which is passed as input by searching in 
   administrator and employer tables using escalation logic.
     
  *********************************************************************************/

  cColumnValue VARCHAR2(4000) := NULL;

  cColumnCheckSql VARCHAR2(255) := 'SELECT 1 FROM all_tab_columns a, all_tab_columns b WHERE a.table_name = ''EMPLOYER'' AND b.table_name = ''ADMINISTRATOR'' AND a.column_name = b.column_name AND a.column_name = :colName';

  cMainSql VARCHAR2(2000) := 'SELECT tbl.colname FROM (SELECT tl.* FROM (SELECT 1, er.' ||
                             icColumnName || ' colname FROM employer er WHERE er.id = nvl(:erId, 0) AND er.admn_id = :admnId 
 UNION ALL
 SELECT 2, er2.' || icColumnName ||
                             ' colname FROM employer er1, employer er2 WHERE er1.id = nvl(:erId, 0) AND er1.admn_id = :admnId AND er1.parent_er_id = er2.id and er2.is_parent = ''Yes''
 UNION ALL
 SELECT 3, ad.' || icColumnName ||
                             ' colname FROM administrator ad WHERE ad.id = :admnId 
 UNION ALL
 SELECT 4, ad2.' || icColumnName ||
                             ' colname FROM administrator ad1, administrator ad2 WHERE ad1.id = :admnId AND ad1.parent_admn_id = ad2.id AND ad2.is_umbrella = ''Yes''
 UNION ALL
 SELECT 5, ad.' || icColumnName ||
                             ' colname FROM administrator ad WHERE ad.Is_Super_Admin = ''Yes'') tl WHERE tl.colname IS NOT NULL ORDER BY 1) tbl WHERE ROWNUM = 1';

BEGIN

  IF icColumnName IS NULL OR nvl(inAdmnId, 0) = 0 THEN
    RETURN cColumnValue;
  END IF;

  BEGIN
    EXECUTE IMMEDIATE cColumnCheckSql
      USING icColumnName;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN cColumnValue;
    WHEN OTHERS THEN
      RETURN cColumnValue;
  END;

  BEGIN
    EXECUTE IMMEDIATE cMainSql
      INTO cColumnValue
      USING inErId, inAdmnId, inErId, inAdmnId, inAdmnId, inAdmnId;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN cColumnValue;
    WHEN OTHERS THEN
      RETURN cColumnValue;
  END;

  RETURN cColumnValue;

EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
  
END GetErAdmnColumnValueByEscalation;
/
=================================================================================
JAVA WITH DB Functionality
	public static final String RECENT_TRANSACTIONS_ACTIVITY = "{? = call Clm_GetAccountUpdatesDetails(?,?,?,?,?)}";
	
	public List<StatusUpdatesBn> getRecentTranxList(Connection conn, UserDetailsBn userDtlsBn) throws SQLException {
		List<StatusUpdatesBn> updatedRecentTransList = new ArrayList<>();
		String days = "30";
		try (CallableStatement cs = conn.prepareCall(AlertConstants.RECENT_TRANSACTIONS_ACTIVITY)) {

			@SuppressWarnings("deprecation")
			final StructDescriptor recDescriptor = StructDescriptor.createDescriptor("TREC_ACCOUNTUPDATEDETAIL",
					DatabaseUtils.getOracleConnection(conn));
			final ResultSetMetaData resultSetMetaDate = recDescriptor.getMetaData();
			cs.registerOutParameter(1, Types.ARRAY, "TTAB_ACCOUNTUPDATEDETAIL");
			cs.setLong(2, userDtlsBn.getEeID());
			cs.setLong(3, userDtlsBn.getErID());
			cs.setLong(4, userDtlsBn.getAdmnID());
			cs.setLong(5, userDtlsBn.getId());
			cs.setString(6, days);
			cs.execute();
			Object[] data = (Object[]) ((Array) cs.getObject(1)).getArray();
			if (data == null || data.length == 0) {
				return updatedRecentTransList;
			}
			updatedRecentTransList = createRecentTranxList(data, resultSetMetaDate);
		}

		return updatedRecentTransList;
	}

	private List<StatusUpdatesBn> createRecentTranxList(Object[] data, ResultSetMetaData resultSetMetaDate)
			throws SQLException {
		List<StatusUpdatesBn> recentTransList = new ArrayList<>();
		StatusUpdatesBn recentTrans;

		for (Object object : data) {
			Struct row = (Struct) object;
			recentTrans = new StatusUpdatesBn();
			int index = 1;
			for (Object attribute : row.getAttributes()) {
				switch (resultSetMetaDate.getColumnName(index).toUpperCase()) {
				case "SOURCE":
					recentTrans.setSource(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "SOURCE_ID":
					recentTrans.setSourceId(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "ACTIVITY_ON":
					recentTrans.setActivityOn(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "ACTP_CD":
					recentTrans.setActpCd(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "OBJECT_NAME":
					recentTrans.setObjectName(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "SECTION":
					recentTrans.setSection(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "ACTIVITY_TYPE":
					recentTrans.setActivityType(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "ACTIVITY_DESCRIPTION":
					recentTrans.setActivityDescription(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "AMOUNT":
					recentTrans.setAmount(
							AmountUtil.formattedAmount(ConversionUtil.stringNoNull(String.valueOf(attribute))));

					break;
				case "PROCESSING_DATE":
					recentTrans.setProcessingDate(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "PROCESSED_DATE":
					recentTrans.setProcessedDate(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "STATUS":
					recentTrans.setStatus(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					recentTrans.setLinkLabel(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "WORKGROUP":
					recentTrans.setWorkGroup(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "TXN_CATEGORY":
					recentTrans.setTxnCategory(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "EFFECTIVE_DATE":
					recentTrans.setEffectiveDate(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				default:
				}
				index++;
			}
			recentTransList.add(recentTrans);
		}

		return recentTransList;
	}
	
	
	FUNCTION
--------------------------------------------------
CREATE OR REPLACE FUNCTION Clm_GetAccountUpdatesDetails(inEeId   IN NUMBER,
                                                        inErId   IN NUMBER,
                                                        inAdmnId IN NUMBER,
                                                        inUserId IN NUMBER,
                                                        inDays   IN NUMBER)
  RETURN tTab_AccountUpdateDetail IS

  tblAccountUpdateDetail tTab_AccountUpdateDetail := tTab_AccountUpdateDetail();
  tblDebitCardDetails    tTab_AccountUpdateDetail := tTab_AccountUpdateDetail();
  v_claimsdata           TBL_CLAIMSDATA := TBL_CLAIMSDATA();
  cObjectName            VARCHAR2(255);
  cHasHSAViewPriv        VARCHAR2(3) := 'No';
  nUserId                NUMBER := inUserId;
  cActivityType          VARCHAR2(255);
  cActivityDesc          VARCHAR2(255);
  cResult                VARCHAR2(5);
  cErrorCategory         VARCHAR2(255);
  nErrorCode             NUMBER;
  cErrorArea             VARCHAR2(255);
  cOtherMessage          VARCHAR2(4000);
  dElectionBegins        DATE;
  dElectionEnds          DATE;
  dServiceBegins         DATE; -- Minimum Date of Service Grace period
  dServiceEnds           DATE; -- Maximum Date of Service Grace period
  dMaxFutureServiceEnds  DATE;
  dSubmitEnds            DATE; -- RunOffDate
  dRunOffDate            DATE; -- RunOffDate
  cElectionEndReason     VARCHAR2(255);
  cStackExists           VARCHAR2(3);
  cUpdatedAcctLabel      VARCHAR2(255);
  cWorkGroup             VARCHAR2(255);
  cAmount                VARCHAR2(255);
  dTruncSysdate          DATE := trunc(SYSDATE);
  dMovementDate          DATE;
  nIndex                 PLS_INTEGER := 0;
  nCounter               NUMBER := 0;
  isJRA                  VARCHAR2(3);
  BFOUND                 BOOLEAN := FALSE;
  NJRASUBMITCLMIDLIST    VARCHAR2(4000);
  eNoInput   EXCEPTION;
  eException EXCEPTION;
  TYPE tblJraActpcd IS VARRAY(2) OF VARCHAR2(10);
  actpCdArr tblJraActpcd;

  -- Non Claim Activities(RKP)
  CURSOR curRKPNonClaimActivity(inEeId IN NUMBER,
                                inDays IN NUMBER) IS
  
    SELECT 'Non Claim Activities(RKP)' "SOURCE",
           D.ID "SOURCE_ID",
           A.EE_ID,
           TO_CHAR(COALESCE(D.CONFIRMED_ON,
                            D.POSTED_ON,
                            D.CREATED_ON,
                            D.TXN_DATE),
                   'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           D.DR_CR_IND,
           NVL(TO_CHAR(DECODE(D.DR_CR_IND, 'DR', -1 * D.TXN_AMT, D.TXN_AMT)),
               '') "AMOUNT",
           C.TXN_CATEGORY,
           NVL(C.TXN_CATEGORY_DISPLAY, C.TXN_TYPE) TXN_CATEGORY_DISPLAY,
           C.TXN_TYPE,
           C.TXN_CODE_SHORT_DESC,
           DECODE(UPPER(D.TXN_STATUS),
                  'CONFIRMED',
                  'Processed',
                  'Processing') "STATUS",
           D.POSTED_ON "PROCESSING_DATE",
           D.CONFIRMED_ON "PROCESSED_DATE",
           A.ACTP_CD,
           A.ELCT_ID
      FROM RKP_TRANSACTION_DTL D, RKP_TRANSACTION_CODE C, RKP_ACCOUNT A
     WHERE D.TXN_CODE = C.TXN_CODE
       AND D.TXN_STATUS IN ('Posted', 'Confirmed')
       AND NVL(D.LINK_REC_TYPE, 'X') != 'CLAIM'
       AND ((C.TXN_CATEGORY != 'Distribution' AND
           NVL(D.SOURCE_REC_TYPE, 'X') NOT IN
           ('CLAIM', 'DEBIT_CARD_IN_FILE_DTL', 'DEBIT_CARD_AUTH_TRXN_DTL')) OR
           (C.TXN_CATEGORY = 'Distribution' AND
           NVL(D.SOURCE_REC_TYPE, 'X') = 'RKP_TXN_ADJUSTMENT_DTL' AND
           NVL(D.SOURCE_SYSTEM, 'X') != 'BOA-FIS-Data' AND
           C.TXN_MODE = 'NA') OR EXISTS
            (SELECT 1
               FROM Rkp_Txn_Attr_Map rt, rkp_transaction_code rc
              WHERE rt.src_attr_code IN
                    ('REFUNDEXCESSAMOUNT', 'REFUNDEXCESSINTERESTAMOUNT')
                AND rt.tgt_attr_code = rc.txn_type
                AND rt.attr_map_domain = 'DISTRIB_TYPE_TO_TXN_TYPE'
                AND rc.txn_code = d.txn_code))
       AND A.EE_ID = INEEID
       AND A.ID = D.ACCOUNT_ID
       AND A.ACTIVATED_ON <= SYSDATE
       AND COALESCE(D.CONFIRMED_ON, D.POSTED_ON, D.CREATED_ON, D.TXN_DATE) >=
           SYSDATE - inDays;

  -- Non Claim Activities(Notional)
  CURSOR curNotionalNonClaimActivity(inEeId IN NUMBER,
                                     inDays IN NUMBER) IS
    SELECT 'Non Claim Activities(Notional)' "SOURCE",
           D.ID "SOURCE_ID",
           E.ID "ELCT_ID",
           NVL(TO_CHAR(D.Created_On, 'MM/DD/YYYY HH24:MI:SS'),
               TO_CHAR(DS.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS')) "ACTIVITY_ON",
           DT.DEPOSIT_TYPE TXN_TYPE,
           CASE
             WHEN D.STATUS IN ('Confirmed', 'AckFromMV') THEN
              'Processed'
             ELSE
              'Processing'
           END "STATUS",
           (nvl(D.AMT, 0) + nvl(D.ADJUSTMENT_AMT, 0)) "AMOUNT",
           nvl(DT.WEB_CODE, DT.DEPOSIT_TYPE) "ACTIVITY_DESC",
           NVL(TO_CHAR(D.Created_On, 'MM/DD/YYYY HH24:MI:SS'),
               TO_CHAR(DS.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS')) "PROCESSING_DATE",
           NVL(TO_CHAR(D.Created_On, 'MM/DD/YYYY HH24:MI:SS'),
               TO_CHAR(DS.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS')) "PROCESSED_DATE",
           E.ERAC_ACTP_CD,
           DECODE(DT.WEB_CODE,
                  'Distribution',
                  'distribution',
                  'Interest',
                  'interest',
                  'Contribution',
                  'deposit',
                  'Fee',
                  'fees',
                  'others') "TXN_CATEGORY"
      FROM DEPOSIT          D,
           DEPOSIT_TYPE     DT,
           DEPOSIT_FILE     DFL,
           DEPOSIT_SCHEDULE DS,
           ELECTION         E
     WHERE D.DEPOSIT_TYPE = DT.DEPOSIT_TYPE
       AND D.DPFL_ID = DFL.ID
       AND DFL.DPSC_ID = DS.ID
       AND D.ELCT_ID = E.ID
       AND D.EE_ID = INEEID
       AND TO_DATE(NVL(TO_CHAR(D.Created_On, 'MM/DD/YYYY HH24:MI:SS'),
                       TO_CHAR(DS.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS')),
                   'MM/DD/YYYY HH24:MI:SS') >= SYSDATE - inDays
       AND E.ERAC_ACTP_CD NOT IN ('HSA');

  -- JRA Non Claim Activities
  CURSOR curJRANonClaimActivity(inEeId IN NUMBER,
                                inDays IN NUMBER) IS
    SELECT VW.GROUP_TYPE "SOURCE",
           VW.ID "SOURCE_ID",
           VW.ERAC_ACTP_CD "ERAC_ACTP_CD",
           TO_CHAR(VW.ACTIVITY_DATE, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           VW.TXN_STATUS "STATUS",
           VW.AMOUNT,
           TO_CHAR(VW.PROCESSING_DATE, 'MM/DD/YYYY HH24:MI:SS') "PROCESSING_DATE",
           TO_CHAR(VW.PROCESSED_DATE, 'MM/DD/YYYY HH24:MI:SS') "PROCESSED_DATE",
           VW.TXN_CATEGORY,
           VW.TXN_TYPE,
           VW.PLAN_YEAR,
           TO_CHAR(VW.EFFECTIVE_DATE, 'MM/DD/YYYY HH24:MI:SS') "EFFECTIVE_DATE"
      FROM VW_EE_JRA_ACCOUNTACTIVITY VW
     WHERE VW.EE_ID = inEeId
       AND VW.GROUP_TYPE <> 'CASHOVRPMT'
       AND TRUNC(VW.ACTIVITY_DATE) >= TRUNC(SYSDATE) - inDays;

  -- JRA Void Claim Activity for Cancelled Premium Recurring Claims
  CURSOR curJRARecurringPremiumClaims(INEEID IN NUMBER,
                                      INDAYS IN NUMBER) IS
    SELECT CLM.SUBMIT_CLM_ID, SUM(CLM.AMT) TOTAL_AMT
      FROM CLAIM CLM, CLAIM_RETRO_ACTIVITY CRA, ELECTION EL
     WHERE CLM.ID = CRA.CLM_ID
       AND CLM.ELCT_ID = EL.ID
       AND CLM.EE_ID = EL.EE_ID
       AND EL.ERAC_ACTP_CD IN ('RHRA', 'PHRA')
       AND CLM.STATUS = 'Void'
       AND CRA.ACTIVITY_TYPE = 'Approved-To-Void'
       AND CLM.EE_ID = INEEID
       AND TRUNC(CRA.ACTIVITY_ON) >= TRUNC(SYSDATE) - INDAYS
     GROUP BY CLM.SUBMIT_CLM_ID;

  CURSOR curJRACancelledRecurringPremiumClaims(INEEID       IN NUMBER,
                                               SUBMITCLM_ID IN NUMBER) IS
    SELECT CL.ID CLM_ID,
           CL.PROVIDER PRVDR,
           CL.CLAIM_CATEGORY CATEGORY,
           EL.ERAC_ACTP_CD ACTP_CD,
           TO_CHAR(CR.ACTIVITY_ON, 'MM/DD/YYYY HH24:MI:SS') ACTIVITY_ON
      FROM CLAIM CL, CLAIM_RETRO_ACTIVITY CR, ELECTION EL
     WHERE CL.SUBMIT_CLM_ID = SUBMITCLM_ID
       AND CL.EE_ID = INEEID
       AND CL.ELCT_ID = EL.ID
       AND CL.EE_ID = EL.EE_ID
       AND CL.ID = CR.CLM_ID
       AND CL.STATUS = 'Void'
       AND CR.ACTIVITY_TYPE = 'Approved-To-Void'
       AND EL.ERAC_ACTP_CD IN ('RHRA', 'PHRA')
       AND ROWNUM = 1;

  -- Debit Card Unsettled Transactions Activity
  CURSOR curDebitCardUnsettledActivity(inEeId IN NUMBER,
                                       inDays IN NUMBER) IS
    SELECT 'DBCard Unsettled Txn' "SOURCE",
           TO_CHAR(VWUDB.DEBIT_CARD_AUTH_TXN_ID) "SOURCE_ID",
           VWUDB.EE_ID,
           VWUDB.TRXN_DATE "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           DECODE(VWUDB.STATUS,
                  'Approved',
                  'UNSETTLEDDBCARDTRXN',
                  'Declined',
                  'DENIEDDBCARDTRXN',
                  '') "OBJECT_NAME",
           'Section' "SECTION",
           VWUDB.ACTP_CD "ACTP_CD",
           INITCAP(NVL(VWUDB.PROVIDER_NAME, 'Unknown Provider')) "ACTIVITY_TYPE",
           'Debit card Activity' "ACTIVITY_DESCRIPTION",
           VWUDB.CLAIM_AMT "AMOUNT",
           decode(VWUDB.STATUS,
                  'Approved',
                  'Processing',
                  'Declined',
                  'Card Declined',
                  VWUDB.STATUS) "STATUS",
           'NA' "WORKGROUP",
           VWUDB.TXN_INDICATOR
      FROM VW_UNSETTLED_DBCARD_TRXN_TSYS VWUDB
     WHERE VWUDB.EE_ID = inEeId
       AND TO_DATE(VWUDB.TRXN_DATE, 'MM/DD/YYYY HH24:MI:SS') >=
           SYSDATE - inDays;

  -- Contribution Schedule activity
  CURSOR curContribScheduleActivity(inEeId IN NUMBER,
                                    inDays IN NUMBER) IS
    SELECT 'Contribution Schedule' "SOURCE",
           ECR.ID "SOURCE_ID",
           RA.EE_ID "EE_ID",
           DECODE(ECR.STATUS,
                  'Created',
                  TO_CHAR(ECR.CREATED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'Requested',
                  TO_CHAR(ECR.REQUESTED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'RequestFailed',
                  TO_CHAR(ECR.REJECTED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'ReadyToPost',
                  TO_CHAR(ECR.REQUESTED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'SentForPosting',
                  TO_CHAR((SELECT FILE_CREATION_DATE
                            FROM ACHFILE
                           WHERE ID = ECR.ACHFILE_ID),
                          'MM/DD/YYYY HH24:MI:SS'),
                  'Posted',
                  TO_CHAR(ECR.POSTED_ON, 'MM/DD/YYYY HH24:MI:SS'),
                  'PostFailed',
                  TO_CHAR(ECR.REJECTED_ON, 'MM/DD/YYYY HH24:MI:SS')) "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'HSAROLE' "OBJECT_NAME",
           'Section' "SECTION",
           RA.ACTP_CD "ACTP_CD",
           'HSA' "ACTIVITY_TYPE",
           DECODE(ECR.STATUS,
                  'Requested',
                  'Contribution Scheduled',
                  'RequestFailed',
                  'Contribution Rejected',
                  'Created',
                  'Contribution Scheduled',
                  'ReadyToPost',
                  'Contribution Scheduled',
                  'SentForPosting',
                  'Contribution Scheduled',
                  'Posted',
                  'Contribution Scheduled',
                  'PostFailed',
                  'Contribution Rejected') "ACTIVITY_DESCRIPTION",
           '' AMOUNT,
           DECODE(ECR.STATUS,
                  'RequestFailed',
                  'Rejected',
                  'PostFailed',
                  'Rejected',
                  'Posted',
                  'Processed',
                  'Processing') STATUS,
           'NA' "WORKGROUP"
      FROM ELCT_CONTRIB_RQST ECR, ELCT_CONTRIB_SCHEDULE ECS, RKP_ACCOUNT RA
     WHERE RA.ELCT_ID = ECS.ELCT_ID
       AND ECS.ID = ECR.ELCTCOSCHD_ID
       AND ECR.STATUS IN ('Requested',
                          'RequestFailed',
                          'Created',
                          'ReadyToPost',
                          'SentForPosting',
                          'Posted',
                          'PostFailed')
       AND RA.EE_ID = inEeId
       AND (ECR.CREATED_ON >= SYSDATE - inDays OR
           ECR.REQUESTED_ON >= SYSDATE - inDays OR
           ECR.REJECTED_ON >= SYSDATE - inDays OR
           ECR.POSTED_ON >= SYSDATE - inDays);

  -- Bank Account Setup Activity For Contribution
  CURSOR curContribSetupActivity(inEeId IN NUMBER,
                                 inDays IN NUMBER) IS
    SELECT 'Contribution Setup' "SOURCE",
           B.ID "SOURCE_ID",
           B.EE_ID "EE_ID",
           TO_CHAR(B.STATUS_DATE, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'HSAROLE' "OBJECT_NAME",
           'Section' "SECTION",
           '' "ACTP_CD",
           CASE
             WHEN B.STATUS IN ('Created', 'Validation Sent') THEN
              'Bank Info Change'
             WHEN B.STATUS IN ('Validation Error',
                               'Validation Ageout',
                               'Validation ACH Reject') THEN
              'Bank Info Incorrect'
             WHEN B.STATUS = 'Validated' THEN
              'Bank Info Validated'
             WHEN B.STATUS = 'Deactivated' THEN
              'Bank Account Removed'
           END AS "ACTIVITY_TYPE",
           'NA' "ACTIVITY_DESCRIPTION",
           '' "AMOUNT",
           CASE
             WHEN B.STATUS IN ('Created', 'Validation Sent') THEN
              'Updated'
             WHEN B.STATUS IN ('Validation Error',
                               'Validation Ageout',
                               'Validation ACH Reject') THEN
              'Rejected'
             WHEN B.STATUS = 'Validated' THEN
              'Processed'
             WHEN B.STATUS = 'Deactivated' THEN
              'Removed'
           END AS "STATUS",
           'NA' "WORKGROUP"
      FROM BANK B
     WHERE B.EE_ID = inEeId
       AND B.STATUS_DATE >= SYSDATE - inDays;

  -- Help Ticket Activity
  CURSOR curHelpTicketActivity(inEeId IN NUMBER,
                               inDays IN NUMBER) IS
  
    SELECT 'Help Ticket' "SOURCE",
           TO_CHAR(TK.ID) "SOURCE_ID",
           TK.CREATED_FOR_ID "EE_ID",
           TO_CHAR(coalesce(TK.REOPEN_RESOLVED_ON,
                            TK.REOPEN_DATE,
                            TK.RESOLVED_ON,
                            TK.ASSIGNED_ON,
                            TK.CREATED_ON),
                   'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'HLPTKTVIEW' "OBJECT_NAME",
           'Page' "SECTION",
           '' ACTP_CD,
           'Help Ticket Generated' "ACTIVITY_TYPE",
           DECODE(TK.STATUS,
                  'Open',
                  TO_CHAR(TRUNC(TK.CREATED_ON), 'MON-DD-YYYY'),
                  'Assigned',
                  TO_CHAR(TRUNC(TK.ASSIGNED_ON), 'MON-DD-YYYY'),
                  'Resolved',
                  TO_CHAR(TRUNC(TK.RESOLVED_ON), 'MON-DD-YYYY')) ACTIVITY_DESCRIPTION,
           '' "AMOUNT",
           TK.STATUS "STATUS",
           nvl(TK.Privacy_Level, 'No Restrictions') "WORKGROUP"
      FROM TICKET TK
     WHERE TK.CREATED_FOR_ID = inEeId
       AND TK.TKTY_CATEGORY = 'Employee'
       AND (TK.STATUS <> 'Resolved' OR TK.CREATED_THRU <> 'IVR')
       AND coalesce(TK.REOPEN_RESOLVED_ON,
                    TK.REOPEN_DATE,
                    TK.RESOLVED_ON,
                    TK.ASSIGNED_ON,
                    TK.CREATED_ON) >= SYSDATE - inDays;

  -- CIP Documents Upload Activity
  CURSOR curCIPDocsUploadActivity(inEeId IN NUMBER,
                                  inDays IN NUMBER) IS
    WITH CIPWORKGROUP AS
     (SELECT GETWORKGROUPFORCIPUPLOAD(inAdmnId, inErId, inEeId) AS WORKGROUP
        FROM DUAL)
    SELECT 'CIP Document Upload' "SOURCE",
           '' "SOURCE_ID",
           CI.EE_ID,
           TO_CHAR(CI.IMAGE_RECEIVED_ON, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           '' "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'HSAROLE' "OBJECT_NAME",
           'Section' "SECTION",
           'HSA' "ACTP_CD",
           'HSA Application' "ACTIVITY_TYPE",
           'Documentation Uploaded' "ACTIVITY_DESCRIPTION",
           '' AMOUNT,
           'Under Review' STATUS,
           CI.WORKGROUP
      FROM CLAIMS_IMAGE CI, CIPWORKGROUP CW
     WHERE CI.STATUS = 'Indexed'
       AND CI.EE_ID = inEeId
       AND CI.WORKGROUP = CW.WORKGROUP
       AND CI.IMAGE_RECEIVED_ON >= SYSDATE - inDays;

  -- Profile Changes Activity
  CURSOR curProfileChangesActivity(inEeId IN NUMBER,
                                   inDays IN NUMBER) IS
  
    SELECT EMP.ID,
           TO_CHAR(EEHIST.DML_ON, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           TO_CHAR(EEHIST.DML_ON, 'MON-DD-YYYY') "ACTIVITY_DESCRIPTION",
           EEHIST.MAILING_LINE1_NEW,
           EEHIST.MAILING_LINE2_NEW,
           EEHIST.MAILING_LINE3_NEW,
           EEHIST.MAILING_ZIP_NEW,
           EEHIST.MAILING_CITY_NEW,
           EEHIST.MAILING_ST_CD_NEW,
           EEHIST.MAILING_ST_CTRY_CD_NEW,
           EEHIST.USER_NAME_NEW,
           EEHIST.ENCRYPTED_PASSWORD_NEW,
           EEHIST.SECURITY_CHALLENGE_NEW
      FROM EMPLOYEE EMP, EE_PROFILE_CHANGE_HIST EEHIST
     WHERE EMP.ID = EEHIST.EE_ID
       AND EMP.ID = inEeId
       AND EEHIST.DML_ON >= SYSDATE - inDays;

  -- Communication Event Activity
  CURSOR curCommunicationReturnActivity(inEeId IN NUMBER,
                                        inDays IN NUMBER) IS
  
    SELECT RMFD.ID,
           RMFD.EE_ID,
           TO_CHAR(RMFD.RETURNED_ON, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           TO_CHAR(RMFD.RETURNED_ON, 'MON-DD-YYYY') "ACTIVITY_DESCRIPTION"
      FROM RETURN_MAIL_FILE_DTL RMFD
     WHERE RMFD.EE_ID = inEeId
       AND RMFD.RETURNED_ON >= SYSDATE - inDays
     ORDER BY RMFD.RETURNED_ON DESC;

  -- Investment Realign/Sell Processing Activity
  CURSOR curInvestmentRealignSellProcessingActivity(inEeId IN NUMBER,
                                                    inDays IN NUMBER) IS
  
    SELECT RA.EE_ID "EE_ID",
           TO_CHAR(EIT.ID) "SOURCE_ID",
           TO_CHAR((SELECT EIS.REQUESTED_ON
                     FROM ELCT_INVEST_SELL EIS
                    WHERE EIS.ELCTINVSTTXN_ID = EIT.ID
                      AND rownum = 1),
                   'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           'HSAROLE' "OBJECT_NAME",
           TO_CHAR((SELECT EIS.REQUESTED_ON
                     FROM ELCT_INVEST_SELL EIS
                    WHERE EIS.ELCTINVSTTXN_ID = EIT.ID
                      AND rownum = 1),
                   'MM/DD/YYYY HH24:MI:SS') "PROCESSING_DATE",
           '' "PROCESSED_DATE",
           'Section' "SECTION",
           'HSA' "ACTP_CD",
           'Investment Sell' "ACTIVITY_DESCRIPTION",
           'Processing' "STATUS",
           'Non Claim Activities(RKP)' "SOURCE",
           'HSA' "ACTIVITY_TYPE",
           '' "AMOUNT",
           'Investment Sell' "WORKGROUP"
    
      FROM ELCT_INVEST_TRANSACTION EIT, RKP_ACCOUNT RA
     WHERE RA.EE_ID = inEeId
       AND EIT.INVEST_TYPE = 'Sell'
       AND EIT.ELCT_ID = RA.ELCT_ID
       AND EIT.TRXN_STATUS IN ('Pending', 'Inprocess', 'Processing')
       AND EIT.CREATED_ON >= SYSDATE - inDays
    
    UNION ALL
    
    SELECT RA.EE_ID "EE_ID",
           TO_CHAR(EIT.ID) "SOURCE_ID",
           TO_CHAR(EIT.REALIGN_CALL_ON, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           'HSAROLE' "OBJECT_NAME",
           TO_CHAR(EIT.REALIGN_CALL_ON, 'MM/DD/YYYY HH24:MI:SS') "PROCESSING_DATE",
           TO_CHAR(EIT.REALIGN_ACK_ON, 'MM/DD/YYYY HH24:MI:SS') "PROCESSED_DATE",
           'Section' "SECTION",
           'HSA' "ACTP_CD",
           'Investment Change' "ACTIVITY_DESCRIPTION",
           CASE
             WHEN EIT.TRXN_STATUS IN ('Pending', 'Inprocess', 'Processing') THEN
              'Processing'
             WHEN EIT.TRXN_STATUS IN ('Processed') THEN
              'Processed'
           END AS "STATUS",
           'Realign' "SOURCE",
           'HSA' "ACTIVITY_TYPE",
           '' "AMOUNT",
           'Investment Change' "WORKGROUP"
    
      FROM ELCT_INVEST_TRANSACTION EIT, RKP_ACCOUNT RA
     WHERE RA.EE_ID = inEeId
       AND EIT.INVEST_TYPE = 'Realign'
       AND EIT.ELCT_ID = RA.ELCT_ID
       AND EIT.TRXN_STATUS IN
           ('Pending', 'Inprocess', 'Processing', 'Processed')
       AND EIT.CREATED_ON >= SYSDATE - inDays
    
     ORDER BY ACTIVITY_ON DESC;

  --Direct Deposit Setup
  CURSOR curDirectDepositSetup(inEeId IN NUMBER,
                               inDays IN NUMBER) IS
  
    SELECT EMP.ID,
           TO_CHAR(EMP.ACH_STATUS_DATE, 'MM/DD/YYYY HH24:MI:SS') "ACTIVITY_ON",
           TO_CHAR(EMP.ACH_STATUS_DATE, 'MON-DD-YYYY') "ACTIVITY_DESCRIPTION"
      FROM EMPLOYEE EMP
     WHERE EMP.ID = inEeId
       AND (EMP.ACH_STATUS_DATE IS NOT NULL AND
           EMP.ACH_STATUS_DATE >= SYSDATE - inDays);

  CURSOR CLAIMIDLIST(NSUBMITCLMIDLIST IN VARCHAR2) IS
    SELECT COLUMN_VALUE SUBMTCLM_ID
      FROM TABLE(STR2TBLSTR(NSUBMITCLMIDLIST, '~'));

  -- Retiree Inactive Account      
  CURSOR curRetireeInactiveAccount(inEeId   IN NUMBER,
                                   inDays   IN NUMBER,
                                   icActpcd IN VARCHAR2) IS
    SELECT el.id, el.erac_ends
      FROM election el
     WHERE el.ee_id = inEeId
       AND el.erac_actp_cd = icActpcd
       AND el.erac_ends >= SYSDATE - inDays
       AND el.erac_ends < SYSDATE
       AND EXISTS (SELECT eea.status
              FROM ee_account eea
             WHERE eea.ee_id = el.ee_id
               AND eea.actp_cd = el.erac_actp_cd
               AND eea.status != 'Closed');

  ---- Over Payment  Refund Activity 

  CURSOR curOverPaymentRefundActivity(inEeId IN NUMBER) IS
    SELECT DISTINCT 'Overpayment Refund Activity' SOURCE,
                    rrd.source_rec_id TRANSACTIONID,
                    erf.EE_ID,
                    erf.refunded_amt AMT,
                    TRUNC(TO_CHAR(MAX(COALESCE(rb.sent_on,
                                       rb.released_on,
                                       rb.approved_on)) 
                          OVER(PARTITION BY rrd.source_rec_id)),'MM-DD-YYYY') ACTIVITYDATE,
                    'Adjustment' TXNCATEGORY,
                    'REFUNDED' STATUS,
                    'Overpayment Refund' TXNTYPE,
                    'OVERPAYMENT_REFUND_ACTIVITY' GROUPTYPE
      FROM Refund_Rqst_Dtl      rrd,
           Refund_Rqst          rr,
           refund_batch_dtl     rbd,
           refund_batch         rb,
           ee_repayment_funding erf
     WHERE rrd.source_rec_type = 'EE_REPAYMENT_FUNDING'
       AND rrd.source_rec_id = erf.id
       AND rrd.rfndrqst_id = rr.id
       AND rr.id = rbd.rfndrqst_id
       AND rbd.rfndbat_id = rb.id
       AND rb.status IN ('Approved', 'Released', 'Extracted')
       AND rb.Refund_Mode IN ('Check', 'ACH')
       AND nvl(erf.refunded_amt, 0) > 0
       AND NVL(erf.trxn_type, 'XX') <> 'Plan Sponsor Collection'
       AND erf.ee_id = inEeId;

BEGIN
  tblAccountUpdateDetail.Delete;
  IF inEeId IS NULL THEN
    RAISE eNoInput;
  END IF;

  IF nUserId IS NULL THEN
    BEGIN
      SELECT l.id
        INTO nUserId
        FROM login l
       WHERE l.ee_id = inEeId
         AND rownum = 1;
    EXCEPTION
      WHEN no_data_found THEN
        RAISE eNoInput;
      WHEN OTHERS THEN
        RAISE eNoInput;
    END;
  END IF;

  cHasHSAViewPriv := HASVIEWPRIVILEGE(nUserId, 'HSAROLE', 'Section');
  isJRA           := jra_account_util.isJRA(inEeId);

  IF isJRA <> 'Yes' THEN
    -- Account Closure/Moved Activities
    FOR recElections IN (SELECT EL.EE_ID PPTID,
                                EL.ID ELCTID,
                                EL.ERAC_ACTP_CD ACTPCD,
                                EL.ENROLLMENT_STATUS ENROLLMENTSTATUS,
                                TO_CHAR(EL.ERAC_ENDS, 'YYYY') PLANYEAR,
                                EL.ELECTED_AMOUNT ELCT_AMT,
                                EL.ELECTION_DATE ELCT_DATE
                           FROM ELECTION EL
                          WHERE EL.ERAC_ACTP_CD NOT IN
                                ('NON REIMBURSEMENT', 'NO ELECTION')
                            AND EL.EE_ID = inEeId) LOOP
    
      Clm_ElectionDates(ocresult        => cResult,
                        ocerrorcategory => cErrorCategory,
                        onerrorcode     => nerrorcode,
                        ocerrorarea     => cErrorArea,
                        ocothermessage  => cOtherMessage,
                        --
                        ineeid                 => inEeId,
                        inelctid               => recElections.Elctid,
                        inerid                 => inErId,
                        icactpcd               => recElections.Actpcd,
                        icDebugMode            => 'No',
                        odElectionBegins       => dElectionBegins, --What is the start date of the election
                        odElectionEnds         => dElectionEnds, --What is the end date of the election (incl separation rules)
                        odServiceBegins        => dServiceBegins, --What is the earliest service date.
                        odServiceEnds          => dServiceEnds, --What is the latest service date (incl grace)
                        odMaxFutureServiceEnds => dMaxFutureServiceEnds, --What is the max future service date
                        odSubmitEnds           => dSubmitEnds, --Last day allowed to submit a claim
                        ocElectionEndReason    => cElectionEndReason,
                        ocStackExists          => cStackExists,
                        idOverRideDate         => NULL);
    
      IF cResult != 'OK' THEN
        RAISE eException;
      END IF;
    
      IF (recElections.Enrollmentstatus = 'Moved') THEN
      
        SELECT MAX(MOVEMENT_DT)
          INTO dMovementDate
          FROM EE_MOVEMENT_DTL
         WHERE EE_ID_FROM = inEeId;
        dSubmitEnds := trunc(dMovementDate);
      END IF;
    
      IF (trunc(dSubmitEnds) - dTruncSysdate < 0) AND
         (dTruncSysdate - trunc(dSubmitEnds) <= inDays) THEN
      
        cUpdatedAcctLabel := PortalUtil.GetAccountLabelForElection(inEeId,
                                                                   recElections.ElctId,
                                                                   recElections.Actpcd);
        IF (recElections.Actpcd <> 'HSA' AND
           TO_CHAR(trunc(SYSDATE, 'YEAR')) = recElections.Planyear) THEN
          tblAccountUpdateDetail.Extend;
          tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Closed Account',
                                                                                           SOURCE_ID            => '',
                                                                                           EE_ID                => inEeId,
                                                                                           ACTIVITY_ON          => TO_CHAR(dSubmitEnds,
                                                                                                                           'MM/DD/YYYY HH24:MI:SS'),
                                                                                           OBJECT_NAME          => '',
                                                                                           SECTION              => 'Section',
                                                                                           ACTP_CD              => recElections.Actpcd,
                                                                                           ACTIVITY_TYPE        => cUpdatedAcctLabel ||
                                                                                                                   ' Closed',
                                                                                           ACTIVITY_DESCRIPTION => 'Account Closure',
                                                                                           PROCESSING_DATE      => '',
                                                                                           PROCESSED_DATE       => '',
                                                                                           AMOUNT               => '',
                                                                                           STATUS               => 'CLOSED',
                                                                                           WORKGROUP            => 'NA',
                                                                                           TXN_CATEGORY         => '',
                                                                                           EFFECTIVE_DATE       => '');
        
        ELSIF recElections.Actpcd = 'HSA' AND cHasHSAViewPriv = 'Yes' AND
              recElections.Enrollmentstatus = 'Moved' THEN
          tblAccountUpdateDetail.Extend;
          tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Moved Account',
                                                                                           SOURCE_ID            => '',
                                                                                           EE_ID                => inEeId,
                                                                                           ACTIVITY_ON          => TO_CHAR(dSubmitEnds,
                                                                                                                           'MM/DD/YYYY HH24:MI:SS'),
                                                                                           OBJECT_NAME          => '',
                                                                                           SECTION              => 'Section',
                                                                                           ACTP_CD              => recElections.Actpcd,
                                                                                           ACTIVITY_TYPE        => cUpdatedAcctLabel ||
                                                                                                                   ' Moved',
                                                                                           ACTIVITY_DESCRIPTION => 'Account Moved',
                                                                                           PROCESSING_DATE      => '',
                                                                                           PROCESSED_DATE       => '',
                                                                                           AMOUNT               => '',
                                                                                           STATUS               => 'MOVED',
                                                                                           WORKGROUP            => 'NA',
                                                                                           TXN_CATEGORY         => '',
                                                                                           EFFECTIVE_DATE       => '');
        
        ELSIF recElections.Actpcd = 'HSA' AND cHasHSAViewPriv = 'Yes' THEN
          tblAccountUpdateDetail.Extend;
          tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Closed Account',
                                                                                           SOURCE_ID            => '',
                                                                                           EE_ID                => inEeId,
                                                                                           ACTIVITY_ON          => TO_CHAR(dSubmitEnds,
                                                                                                                           'MM/DD/YYYY HH24:MI:SS'),
                                                                                           OBJECT_NAME          => '',
                                                                                           SECTION              => 'Section',
                                                                                           ACTP_CD              => recElections.Actpcd,
                                                                                           ACTIVITY_TYPE        => cUpdatedAcctLabel ||
                                                                                                                   ' Closed',
                                                                                           ACTIVITY_DESCRIPTION => 'Account Closure',
                                                                                           PROCESSING_DATE      => '',
                                                                                           PROCESSED_DATE       => '',
                                                                                           AMOUNT               => '',
                                                                                           STATUS               => 'CLOSED',
                                                                                           WORKGROUP            => 'NA',
                                                                                           TXN_CATEGORY         => '',
                                                                                           EFFECTIVE_DATE       => '');
        END IF;
      END IF;
    
    END LOOP;
  
    -- Non Claim Activities(RKP)
    IF cHasHSAViewPriv = 'Yes' THEN
      FOR recRKPNonClaimActivity IN curRKPNonClaimActivity(inEeId, inDays) LOOP
      
        cUpdatedAcctLabel := PortalUtil.GetAccountLabelForElection(inEeId,
                                                                   recRKPNonClaimActivity.Elct_Id,
                                                                   recRKPNonClaimActivity.Actp_Cd);
        tblAccountUpdateDetail.Extend;
        tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recRKPNonClaimActivity.SOURCE,
                                                                                         SOURCE_ID            => recRKPNonClaimActivity.SOURCE_ID,
                                                                                         EE_ID                => recRKPNonClaimActivity.EE_ID,
                                                                                         ACTIVITY_ON          => recRKPNonClaimActivity.ACTIVITY_ON,
                                                                                         OBJECT_NAME          => 'HSAROLE',
                                                                                         SECTION              => 'Section',
                                                                                         ACTP_CD              => recRKPNonClaimActivity.ACTP_CD,
                                                                                         ACTIVITY_TYPE        => cUpdatedAcctLabel,
                                                                                         ACTIVITY_DESCRIPTION => nvl(recRKPNonClaimActivity.Txn_Category_Display,
                                                                                                                     recRKPNonClaimActivity.Txn_Type),
                                                                                         PROCESSING_DATE      => recRKPNonClaimActivity.PROCESSING_DATE,
                                                                                         PROCESSED_DATE       => recRKPNonClaimActivity.PROCESSED_DATE,
                                                                                         AMOUNT               => recRKPNonClaimActivity.AMOUNT,
                                                                                         STATUS               => recRKPNonClaimActivity.STATUS,
                                                                                         WORKGROUP            => recRKPNonClaimActivity.Txn_Category_Display,
                                                                                         TXN_CATEGORY         => recRKPNonClaimActivity.Txn_Category,
                                                                                         EFFECTIVE_DATE       => '');
      
      END LOOP;
    END IF;
  
    -- Non Claim Activities(Notional)
    FOR recNotionalNonClaimActivity IN curNotionalNonClaimActivity(inEeId,
                                                                   inDays) LOOP
    
      cUpdatedAcctLabel := PortalUtil.GetAccountLabelForElection(inEeId,
                                                                 recNotionalNonClaimActivity.Elct_Id,
                                                                 recNotionalNonClaimActivity.Erac_Actp_Cd);
    
      IF nvl(UPPER(recNotionalNonClaimActivity.Txn_Category), 'others') =
         'DEPOSIT' THEN
        cWorkGroup := cUpdatedAcctLabel || ' Contribution';
      ELSE
        cWorkGroup := recNotionalNonClaimActivity.Txn_Type;
      END IF;
    
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recNotionalNonClaimActivity.SOURCE,
                                                                                       SOURCE_ID            => recNotionalNonClaimActivity.SOURCE_ID,
                                                                                       EE_ID                => inEeId,
                                                                                       ACTIVITY_ON          => recNotionalNonClaimActivity.ACTIVITY_ON,
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => 'Section',
                                                                                       ACTP_CD              => recNotionalNonClaimActivity.Erac_Actp_Cd,
                                                                                       PROCESSING_DATE      => recNotionalNonClaimActivity.PROCESSING_DATE,
                                                                                       PROCESSED_DATE       => recNotionalNonClaimActivity.PROCESSED_DATE,
                                                                                       ACTIVITY_TYPE        => cUpdatedAcctLabel,
                                                                                       ACTIVITY_DESCRIPTION => recNotionalNonClaimActivity.Activity_Desc,
                                                                                       AMOUNT               => recNotionalNonClaimActivity.AMOUNT,
                                                                                       STATUS               => recNotionalNonClaimActivity.STATUS,
                                                                                       WORKGROUP            => cWorkGroup,
                                                                                       TXN_CATEGORY         => recNotionalNonClaimActivity.Txn_Category,
                                                                                       EFFECTIVE_DATE       => '');
    END LOOP;
  ELSE
    -- JRA Account Closure/Moved Activities
    actpCdArr := tblJraActpcd('RHRA', 'PHRA');
    FOR i IN 1 .. actpCdArr.count LOOP
      dSubmitEnds := NULL;
      nCounter    := 0;
      BEGIN
        SELECT trunc(account_closed_on)
          INTO dSubmitEnds
          FROM ee_account
         WHERE ee_id = inEeId
           AND actp_cd = actpCdArr(i)
           AND status = 'Closed';
      EXCEPTION
        WHEN no_data_found THEN
          dSubmitEnds := NULL;
      END;
      IF dSubmitEnds IS NULL THEN
        FOR recElections IN (SELECT EL.ID elctid
                               FROM ELECTION EL
                              WHERE EL.ERAC_ACTP_CD = actpCdArr(i)
                                AND EL.EE_ID = inEeId) LOOP
          nCounter := nCounter + 1;
          Clm_ElectionDates(ocresult        => cResult,
                            ocerrorcategory => cErrorCategory,
                            onerrorcode     => nerrorcode,
                            ocerrorarea     => cErrorArea,
                            ocothermessage  => cOtherMessage,
                            --
                            ineeid                 => inEeId,
                            inelctid               => recElections.elctid,
                            inerid                 => inErId,
                            icactpcd               => actpCdArr(i),
                            icDebugMode            => 'No',
                            odElectionBegins       => dElectionBegins, --What is the start date of the election
                            odElectionEnds         => dElectionEnds, --What is the end date of the election (incl separation rules)
                            odServiceBegins        => dServiceBegins, --What is the earliest service date.
                            odServiceEnds          => dServiceEnds, --What is the latest service date (incl grace)
                            odMaxFutureServiceEnds => dMaxFutureServiceEnds, --What is the max future service date
                            odSubmitEnds           => dRunOffDate, --Last day allowed to submit a claim
                            ocElectionEndReason    => cElectionEndReason,
                            ocStackExists          => cStackExists,
                            idOverRideDate         => NULL);
          IF cResult != 'OK' THEN
            RAISE eException;
          END IF;
          IF nCounter = 1 OR dRunOffDate > dSubmitEnds THEN
            dSubmitEnds := dRunOffDate;
          END IF;
        END LOOP;
      END IF;
      cUpdatedAcctLabel := PortalUtil.GetAccountLabel(inEeId, actpCdArr(i));
    
      IF dSubmitEnds IS NOT NULL AND
         (trunc(dSubmitEnds) - dTruncSysdate < 0) THEN
        IF (dTruncSysdate - trunc(dSubmitEnds) <= inDays) THEN
          tblAccountUpdateDetail.Extend;
          tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Closed Account',
                                                                                           SOURCE_ID            => '',
                                                                                           EE_ID                => inEeId,
                                                                                           ACTIVITY_ON          => TO_CHAR(dSubmitEnds,
                                                                                                                           'MM/DD/YYYY HH24:MI:SS'),
                                                                                           OBJECT_NAME          => '',
                                                                                           SECTION              => 'Section',
                                                                                           ACTP_CD              => actpCdArr(i),
                                                                                           ACTIVITY_TYPE        => cUpdatedAcctLabel ||
                                                                                                                   ' Closed',
                                                                                           ACTIVITY_DESCRIPTION => 'Account Closure',
                                                                                           PROCESSING_DATE      => '',
                                                                                           PROCESSED_DATE       => '',
                                                                                           AMOUNT               => '',
                                                                                           STATUS               => 'CLOSED',
                                                                                           WORKGROUP            => 'NA',
                                                                                           TXN_CATEGORY         => '',
                                                                                           EFFECTIVE_DATE       => '');
        
        END IF;
        -- Retiree Inactive Account 
        FOR recRetireeInactiveAccount IN curRetireeInactiveAccount(inEeId,
                                                                   inDays,
                                                                   actpCdArr(i)) LOOP
          IF (trunc(dSubmitEnds) -
             trunc(recRetireeInactiveAccount.erac_ends) > 0) THEN
            tblAccountUpdateDetail.Extend;
            tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Retiree Inactive Account',
                                                                                             SOURCE_ID            => recRetireeInactiveAccount.ID,
                                                                                             EE_ID                => inEeId,
                                                                                             ACTIVITY_ON          => to_char(recRetireeInactiveAccount.erac_ends,
                                                                                                                             'MM/DD/YYYY HH24:MI:SS'),
                                                                                             OBJECT_NAME          => '',
                                                                                             SECTION              => '',
                                                                                             ACTP_CD              => actpCdArr(i),
                                                                                             PROCESSING_DATE      => '',
                                                                                             PROCESSED_DATE       => '',
                                                                                             ACTIVITY_TYPE        => cUpdatedAcctLabel,
                                                                                             ACTIVITY_DESCRIPTION => 'Coverage Ended',
                                                                                             AMOUNT               => '',
                                                                                             STATUS               => 'Inactive',
                                                                                             WORKGROUP            => 'NA',
                                                                                             TXN_CATEGORY         => '',
                                                                                             EFFECTIVE_DATE       => '');
          END IF;
        END LOOP;
      ELSE
        -- Retiree Inactive Account 
        FOR recRetireeInactiveAccount IN curRetireeInactiveAccount(inEeId,
                                                                   inDays,
                                                                   actpCdArr(i)) LOOP
          tblAccountUpdateDetail.Extend;
          tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Retiree Inactive Account',
                                                                                           SOURCE_ID            => recRetireeInactiveAccount.ID,
                                                                                           EE_ID                => inEeId,
                                                                                           ACTIVITY_ON          => to_char(recRetireeInactiveAccount.erac_ends,
                                                                                                                           'MM/DD/YYYY HH24:MI:SS'),
                                                                                           OBJECT_NAME          => '',
                                                                                           SECTION              => '',
                                                                                           ACTP_CD              => actpCdArr(i),
                                                                                           PROCESSING_DATE      => '',
                                                                                           PROCESSED_DATE       => '',
                                                                                           ACTIVITY_TYPE        => cUpdatedAcctLabel,
                                                                                           ACTIVITY_DESCRIPTION => 'Coverage Ended',
                                                                                           AMOUNT               => '',
                                                                                           STATUS               => 'Inactive',
                                                                                           WORKGROUP            => 'NA',
                                                                                           TXN_CATEGORY         => '',
                                                                                           EFFECTIVE_DATE       => '');
        
        END LOOP;
      END IF;
    END LOOP;
  
    -- JRA Non Claim Activities
    FOR recJRANonClaimActivity IN curJRANonClaimActivity(inEeId, inDays) LOOP
    
      cUpdatedAcctLabel := PortalUtil.GetAccountLabel(inEeId,
                                                      recJRANonClaimActivity.ERAC_ACTP_CD);
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recJRANonClaimActivity.SOURCE,
                                                                                       SOURCE_ID            => recJRANonClaimActivity.SOURCE_ID,
                                                                                       EE_ID                => inEeId,
                                                                                       ACTIVITY_ON          => recJRANonClaimActivity.ACTIVITY_ON,
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => 'Section',
                                                                                       ACTP_CD              => recJRANonClaimActivity.ERAC_ACTP_CD,
                                                                                       PROCESSING_DATE      => recJRANonClaimActivity.PROCESSING_DATE,
                                                                                       PROCESSED_DATE       => recJRANonClaimActivity.PROCESSED_DATE,
                                                                                       ACTIVITY_TYPE        => cUpdatedAcctLabel,
                                                                                       ACTIVITY_DESCRIPTION => recJRANonClaimActivity.TXN_TYPE,
                                                                                       AMOUNT               => recJRANonClaimActivity.AMOUNT,
                                                                                       STATUS               => recJRANonClaimActivity.STATUS,
                                                                                       WORKGROUP            => recJRANonClaimActivity.PLAN_YEAR,
                                                                                       TXN_CATEGORY         => recJRANonClaimActivity.Txn_Category,
                                                                                       EFFECTIVE_DATE       => recJRANonClaimActivity.EFFECTIVE_DATE);
    END LOOP;
  
    -- JRA Void Claim Activities for Canceled Premium Recurring Claims
    FOR recJRARecurringPremiumClaims IN curJRARecurringPremiumClaims(inEeId,
                                                                     inDays) LOOP
      NJRASUBMITCLMIDLIST := RECJRARECURRINGPREMIUMCLAIMS.SUBMIT_CLM_ID || '~' ||
                             NJRASUBMITCLMIDLIST;
      FOR recJRACancelledRecurringPremiumClaims IN curJRACancelledRecurringPremiumClaims(inEeId,
                                                                                         recJRARecurringPremiumClaims.Submit_Clm_Id) LOOP
        tblAccountUpdateDetail.Extend;
        tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Claim',
                                                                                         SOURCE_ID            => recJRARecurringPremiumClaims.Submit_Clm_Id,
                                                                                         EE_ID                => inEeId,
                                                                                         ACTIVITY_ON          => recJRACancelledRecurringPremiumClaims.ACTIVITY_ON,
                                                                                         OBJECT_NAME          => '',
                                                                                         SECTION              => 'Section',
                                                                                         ACTP_CD              => recJRACancelledRecurringPremiumClaims.ACTP_CD,
                                                                                         ACTIVITY_TYPE        => INITCAP(recJRACancelledRecurringPremiumClaims.PRVDR),
                                                                                         PROCESSING_DATE      => '',
                                                                                         PROCESSED_DATE       => '',
                                                                                         ACTIVITY_DESCRIPTION => (recJRACancelledRecurringPremiumClaims.CATEGORY) ||
                                                                                                                 ' Expense',
                                                                                         AMOUNT               => -1 *
                                                                                                                 REPLACE(REPLACE(recJRARecurringPremiumClaims.TOTAL_AMT,
                                                                                                                                 '$'),
                                                                                                                         ' '),
                                                                                         STATUS               => 'CANCELLED',
                                                                                         WORKGROUP            => 'NA',
                                                                                         TXN_CATEGORY         => '',
                                                                                         EFFECTIVE_DATE       => '');
      END LOOP;
    END LOOP;
  
  END IF;
  -- Claims Activity
  v_claimsdata := clm_getclaimdetails(NULL, NULL, NULL, inEeId);
  FOR indx IN 1 .. v_claimsdata.COUNT LOOP
    BEGIN
      SELECT DECODE(v_claimsdata(indx).ACCOUNT_TYPE, 'HSA', 'HSAROLE', '')
        INTO cObjectName
        FROM dual;
    
    EXCEPTION
      WHEN no_data_found THEN
        cObjectName := '';
    END;
  
    IF v_claimsdata(indx)
     .activity_date >= SYSDATE - inDays AND v_claimsdata(indx)
       .claim_status NOT IN ('Hold',
                             'Void',
                             'Invalid Receipt',
                             'Receipt Required',
                             'Paid',
                             'Refunded',
                             'Partially Refunded') AND
        HASVIEWPRIVILEGE(nUserId, cObjectName, 'Section') = 'Yes' THEN
    
      IF (V_CLAIMSDATA(INDX).CLAIM_STATUS IN ('Cancelled')) THEN
        FOR CLM IN CLAIMIDLIST(NJRASUBMITCLMIDLIST) LOOP
          IF (TO_NUMBER(CLM.SUBMTCLM_ID) = V_CLAIMSDATA(INDX).SUBMIT_CLAIM_ID) THEN
            BFOUND := TRUE;
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF BFOUND THEN
        CONTINUE;
      END IF;
    
      IF v_claimsdata(indx).claim_status = 'UsedForOffset' THEN
        v_claimsdata(indx).claim_status := 'Used For offset';
      END IF;
    
      cActivityType := INITCAP(v_claimsdata(indx).PROVIDER);
      cActivityDesc := TO_CHAR(TRUNC(v_claimsdata(indx).ACTIVITY_DATE),
                               'MON-DD-YYYY');
      IF v_claimsdata(indx).ACCOUNT_TYPE = 'HSA' AND
          instr(lower(cActivityType), 'liquidate') > 0 THEN
        cActivityType := 'HSA Distribution';
        cActivityDesc := 'Account Distribution';
      END IF;
    
      IF v_claimsdata(indx).CLAIM_BATCH_TYPE IN
          ('Manual', 'Online', 'Pass Thru', 'Conversion') THEN
        cActivityDesc := v_claimsdata(indx).CATEGORY || ' Expense';
      ELSIF v_claimsdata(indx)
       .CLAIM_BATCH_TYPE IN ('Debit Card') AND
             REPLACE(REPLACE(v_claimsdata(indx).TOTAL_AMOUNT, '$'), ' ') >= 0 THEN
        cActivityDesc := 'Debit Card Activity';
      ELSIF v_claimsdata(indx)
       .CLAIM_BATCH_TYPE IN ('Debit Card') AND
             REPLACE(REPLACE(v_claimsdata(indx).TOTAL_AMOUNT, '$'), ' ') < 0 THEN
        cActivityDesc := 'Merchant Refund';
        cActivityType := PortalUtil.GetAccountLabelForClaim(inEeId,
                                                            v_claimsdata(indx).ID,
                                                            v_claimsdata(indx).ACCOUNT_TYPE);
      END IF;
    
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Claim',
                                                                                       SOURCE_ID            => v_claimsdata(indx).ID,
                                                                                       EE_ID                => inEeId,
                                                                                       ACTIVITY_ON          => TO_CHAR(nvl(v_claimsdata(indx).PAID_ON,
                                                                                                                           v_claimsdata(indx).ACTIVITY_DATE),
                                                                                                                       'MM/DD/YYYY HH24:MI:SS'),
                                                                                       OBJECT_NAME          => cObjectName,
                                                                                       SECTION              => 'Section',
                                                                                       ACTP_CD              => v_claimsdata(indx).ACCOUNT_TYPE,
                                                                                       ACTIVITY_TYPE        => cActivityType,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       ACTIVITY_DESCRIPTION => cActivityDesc,
                                                                                       AMOUNT               => -1 *
                                                                                                               REPLACE(REPLACE(v_claimsdata(indx).TOTAL_AMOUNT,
                                                                                                                               '$'),
                                                                                                                       ' '),
                                                                                       STATUS               => v_claimsdata(indx).CLAIM_STATUS,
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;
  END LOOP;
  v_claimsdata.delete;

  -- Help Ticket Activity
  FOR recHelpTicketActivity IN curHelpTicketActivity(inEeId, inDays) LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recHelpTicketActivity.SOURCE,
                                                                                     SOURCE_ID            => recHelpTicketActivity.SOURCE_ID,
                                                                                     EE_ID                => recHelpTicketActivity.EE_ID,
                                                                                     ACTIVITY_ON          => recHelpTicketActivity.ACTIVITY_ON,
                                                                                     OBJECT_NAME          => recHelpTicketActivity.OBJECT_NAME,
                                                                                     SECTION              => recHelpTicketActivity.SECTION,
                                                                                     ACTP_CD              => recHelpTicketActivity.ACTP_CD,
                                                                                     PROCESSING_DATE      => recHelpTicketActivity.PROCESSING_DATE,
                                                                                     PROCESSED_DATE       => recHelpTicketActivity.PROCESSED_DATE,
                                                                                     ACTIVITY_TYPE        => recHelpTicketActivity.ACTIVITY_TYPE,
                                                                                     ACTIVITY_DESCRIPTION => recHelpTicketActivity.ACTIVITY_DESCRIPTION,
                                                                                     AMOUNT               => recHelpTicketActivity.AMOUNT,
                                                                                     STATUS               => recHelpTicketActivity.STATUS,
                                                                                     WORKGROUP            => recHelpTicketActivity.WORKGROUP,
                                                                                     TXN_CATEGORY         => '',
                                                                                     EFFECTIVE_DATE       => '');
  
  END LOOP;

  -- Debit Card Unsettled Transactions Activity
  FOR recDebitCardUnsettledActivity IN curDebitCardUnsettledActivity(inEeId,
                                                                     inDays) LOOP
  
    IF (recDebitCardUnsettledActivity.ACTP_CD = 'HSA' AND
       cHasHSAViewPriv = 'Yes') OR
       recDebitCardUnsettledActivity.ACTP_CD <> 'HSA' OR
       recDebitCardUnsettledActivity.ACTP_CD IS NULL THEN
    
      IF HASVIEWPRIVILEGE(nUserId,
                          recDebitCardUnsettledActivity.OBJECT_NAME,
                          recDebitCardUnsettledActivity.SECTION) = 'Yes' THEN
      
        cAmount := recDebitCardUnsettledActivity.AMOUNT;
      
        IF recDebitCardUnsettledActivity.TXN_INDICATOR = 'D' AND
           recDebitCardUnsettledActivity.Status = 'Processing' THEN
          cAmount := -1 * recDebitCardUnsettledActivity.AMOUNT;
        END IF;
      
        tblAccountUpdateDetail.Extend;
        tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recDebitCardUnsettledActivity.SOURCE,
                                                                                         SOURCE_ID            => recDebitCardUnsettledActivity.SOURCE_ID,
                                                                                         EE_ID                => recDebitCardUnsettledActivity.EE_ID,
                                                                                         ACTIVITY_ON          => recDebitCardUnsettledActivity.ACTIVITY_ON,
                                                                                         OBJECT_NAME          => recDebitCardUnsettledActivity.OBJECT_NAME,
                                                                                         SECTION              => recDebitCardUnsettledActivity.SECTION,
                                                                                         ACTP_CD              => recDebitCardUnsettledActivity.ACTP_CD,
                                                                                         PROCESSING_DATE      => recDebitCardUnsettledActivity.PROCESSING_DATE,
                                                                                         PROCESSED_DATE       => recDebitCardUnsettledActivity.PROCESSED_DATE,
                                                                                         ACTIVITY_TYPE        => recDebitCardUnsettledActivity.ACTIVITY_TYPE,
                                                                                         ACTIVITY_DESCRIPTION => recDebitCardUnsettledActivity.ACTIVITY_DESCRIPTION,
                                                                                         AMOUNT               => cAmount,
                                                                                         STATUS               => recDebitCardUnsettledActivity.STATUS,
                                                                                         WORKGROUP            => recDebitCardUnsettledActivity.WORKGROUP,
                                                                                         TXN_CATEGORY         => '',
                                                                                         EFFECTIVE_DATE       => '');
      END IF;
    END IF;
  
  END LOOP;

  -- Contribution Schedule activity
  IF isJRA <> 'Yes' AND cHasHSAViewPriv = 'Yes' THEN
    FOR recContribScheduleActivity IN curContribScheduleActivity(inEeId,
                                                                 inDays) LOOP
    
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recContribScheduleActivity.SOURCE,
                                                                                       SOURCE_ID            => recContribScheduleActivity.SOURCE_ID,
                                                                                       EE_ID                => recContribScheduleActivity.EE_ID,
                                                                                       ACTIVITY_ON          => recContribScheduleActivity.ACTIVITY_ON,
                                                                                       OBJECT_NAME          => recContribScheduleActivity.OBJECT_NAME,
                                                                                       SECTION              => recContribScheduleActivity.SECTION,
                                                                                       ACTP_CD              => recContribScheduleActivity.ACTP_CD,
                                                                                       PROCESSING_DATE      => recContribScheduleActivity.PROCESSING_DATE,
                                                                                       PROCESSED_DATE       => recContribScheduleActivity.PROCESSED_DATE,
                                                                                       ACTIVITY_TYPE        => recContribScheduleActivity.ACTIVITY_TYPE,
                                                                                       ACTIVITY_DESCRIPTION => recContribScheduleActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => recContribScheduleActivity.AMOUNT,
                                                                                       STATUS               => recContribScheduleActivity.STATUS,
                                                                                       WORKGROUP            => recContribScheduleActivity.WORKGROUP,
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    
    END LOOP;
  END IF;

  -- Bank Account Setup Activity For Contribution
  FOR recContribSetupActivity IN curContribSetupActivity(inEeId, inDays) LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recContribSetupActivity.SOURCE,
                                                                                     SOURCE_ID            => recContribSetupActivity.SOURCE_ID,
                                                                                     EE_ID                => recContribSetupActivity.EE_ID,
                                                                                     ACTIVITY_ON          => recContribSetupActivity.ACTIVITY_ON,
                                                                                     OBJECT_NAME          => recContribSetupActivity.OBJECT_NAME,
                                                                                     SECTION              => recContribSetupActivity.SECTION,
                                                                                     ACTP_CD              => recContribSetupActivity.ACTP_CD,
                                                                                     PROCESSING_DATE      => recContribSetupActivity.PROCESSING_DATE,
                                                                                     PROCESSED_DATE       => recContribSetupActivity.PROCESSED_DATE,
                                                                                     ACTIVITY_TYPE        => recContribSetupActivity.ACTIVITY_TYPE,
                                                                                     ACTIVITY_DESCRIPTION => recContribSetupActivity.ACTIVITY_DESCRIPTION,
                                                                                     AMOUNT               => recContribSetupActivity.AMOUNT,
                                                                                     STATUS               => recContribSetupActivity.STATUS,
                                                                                     WORKGROUP            => recContribSetupActivity.WORKGROUP,
                                                                                     TXN_CATEGORY         => '',
                                                                                     EFFECTIVE_DATE       => '');
  
  END LOOP;

  -- Debit Card Activity

  tblDebitCardDetails := Clm_GetDebitCardActivities(inEeId, inDays);
  FOR nIndex IN 1 .. tblDebitCardDetails.COUNT LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tblDebitCardDetails(nIndex);
  
  END LOOP;

  -- CIP Documents Upload Activity
  IF isJRA <> 'Yes' AND cHasHSAViewPriv = 'Yes' THEN
    FOR recCIPDocsUploadActivity IN curCIPDocsUploadActivity(inEeId, inDays) LOOP
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recCIPDocsUploadActivity.SOURCE,
                                                                                       SOURCE_ID            => recCIPDocsUploadActivity.SOURCE_ID,
                                                                                       EE_ID                => recCIPDocsUploadActivity.EE_ID,
                                                                                       ACTIVITY_ON          => recCIPDocsUploadActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => recCIPDocsUploadActivity.PROCESSING_DATE,
                                                                                       PROCESSED_DATE       => recCIPDocsUploadActivity.PROCESSED_DATE,
                                                                                       OBJECT_NAME          => recCIPDocsUploadActivity.OBJECT_NAME,
                                                                                       SECTION              => recCIPDocsUploadActivity.SECTION,
                                                                                       ACTP_CD              => recCIPDocsUploadActivity.ACTP_CD,
                                                                                       ACTIVITY_TYPE        => recCIPDocsUploadActivity.ACTIVITY_TYPE,
                                                                                       ACTIVITY_DESCRIPTION => recCIPDocsUploadActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => recCIPDocsUploadActivity.AMOUNT,
                                                                                       STATUS               => recCIPDocsUploadActivity.STATUS,
                                                                                       WORKGROUP            => recCIPDocsUploadActivity.WORKGROUP,
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    
    END LOOP;
  END IF;

  -- Profile Changes Activity
  FOR recProfileActivity IN curProfileChangesActivity(inEeId, inDays) LOOP
  
    -- Contact Info Changes
    IF (recProfileActivity.MAILING_LINE1_NEW IS NOT NULL OR
       recProfileActivity.MAILING_LINE2_NEW IS NOT NULL OR
       recProfileActivity.MAILING_LINE3_NEW IS NOT NULL OR
       recProfileActivity.MAILING_ZIP_NEW IS NOT NULL OR
       recProfileActivity.MAILING_CITY_NEW IS NOT NULL OR
       recProfileActivity.MAILING_ST_CD_NEW IS NOT NULL OR
       recProfileActivity.MAILING_ST_CTRY_CD_NEW IS NOT NULL) THEN
    
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Contact Info',
                                                                                       SOURCE_ID            => recProfileActivity.ID,
                                                                                       EE_ID                => recProfileActivity.ID,
                                                                                       ACTIVITY_ON          => recProfileActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       ACTIVITY_TYPE        => 'Contact Info Change',
                                                                                       ACTIVITY_DESCRIPTION => recProfileActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => '',
                                                                                       STATUS               => 'Updated',
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;
  
    -- Credentials Changes
    IF (recProfileActivity.USER_NAME_NEW IS NOT NULL) THEN
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Credentials',
                                                                                       SOURCE_ID            => recProfileActivity.ID,
                                                                                       EE_ID                => recProfileActivity.ID,
                                                                                       ACTIVITY_ON          => recProfileActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       ACTIVITY_TYPE        => 'Username',
                                                                                       ACTIVITY_DESCRIPTION => recProfileActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => '',
                                                                                       STATUS               => 'Updated',
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;
  
    -- Credentials Changes
    IF (recProfileActivity.ENCRYPTED_PASSWORD_NEW IS NOT NULL) THEN
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Credentials',
                                                                                       SOURCE_ID            => recProfileActivity.ID,
                                                                                       EE_ID                => recProfileActivity.ID,
                                                                                       ACTIVITY_ON          => recProfileActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       ACTIVITY_TYPE        => 'Password',
                                                                                       ACTIVITY_DESCRIPTION => recProfileActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => '',
                                                                                       STATUS               => 'Updated',
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;
  
    -- Credentials Changes
    IF (recProfileActivity.SECURITY_CHALLENGE_NEW IS NOT NULL) THEN
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Credentials',
                                                                                       SOURCE_ID            => recProfileActivity.ID,
                                                                                       EE_ID                => recProfileActivity.ID,
                                                                                       ACTIVITY_ON          => recProfileActivity.ACTIVITY_ON,
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       ACTIVITY_TYPE        => 'Security Question',
                                                                                       ACTIVITY_DESCRIPTION => recProfileActivity.ACTIVITY_DESCRIPTION,
                                                                                       AMOUNT               => '',
                                                                                       STATUS               => 'Updated',
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => '',
                                                                                       EFFECTIVE_DATE       => '');
    END IF;
  
  END LOOP;

  -- Communication Event Activity
  FOR recCommunicationReturnActivity IN curCommunicationReturnActivity(inEeId,
                                                                       inDays) LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := trec_AccountUpdateDetail(SOURCE               => 'Communication Return',
                                                                                     SOURCE_ID            => recCommunicationReturnActivity.ID,
                                                                                     EE_ID                => inEeId,
                                                                                     ACTIVITY_ON          => recCommunicationReturnActivity.ACTIVITY_ON,
                                                                                     PROCESSING_DATE      => '',
                                                                                     PROCESSED_DATE       => '',
                                                                                     OBJECT_NAME          => '',
                                                                                     SECTION              => '',
                                                                                     ACTP_CD              => '',
                                                                                     ACTIVITY_TYPE        => 'Document Received',
                                                                                     ACTIVITY_DESCRIPTION => recCommunicationReturnActivity.ACTIVITY_DESCRIPTION,
                                                                                     AMOUNT               => '',
                                                                                     STATUS               => 'Returned Mail',
                                                                                     WORKGROUP            => 'NA',
                                                                                     TXN_CATEGORY         => '',
                                                                                     EFFECTIVE_DATE       => '');
    EXIT;
  END LOOP;

  -- Investment Realign/Sell Processing Activity
  IF isJRA <> 'Yes' THEN
    FOR recInvestmentRealignSellProcessingActivity IN curInvestmentRealignSellProcessingActivity(inEeId,
                                                                                                 inDays) LOOP
      IF (recInvestmentRealignSellProcessingActivity.ACTIVITY_DESCRIPTION IS NOT NULL) THEN
        tblAccountUpdateDetail.Extend;
        tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := trec_AccountUpdateDetail(SOURCE               => recInvestmentRealignSellProcessingActivity.SOURCE,
                                                                                         SOURCE_ID            => recInvestmentRealignSellProcessingActivity.SOURCE_ID,
                                                                                         EE_ID                => recInvestmentRealignSellProcessingActivity.EE_ID,
                                                                                         ACTIVITY_ON          => recInvestmentRealignSellProcessingActivity.ACTIVITY_ON,
                                                                                         PROCESSING_DATE      => recInvestmentRealignSellProcessingActivity.PROCESSING_DATE,
                                                                                         PROCESSED_DATE       => recInvestmentRealignSellProcessingActivity.PROCESSED_DATE,
                                                                                         OBJECT_NAME          => recInvestmentRealignSellProcessingActivity.OBJECT_NAME,
                                                                                         SECTION              => recInvestmentRealignSellProcessingActivity.SECTION,
                                                                                         ACTP_CD              => recInvestmentRealignSellProcessingActivity.ACTP_CD,
                                                                                         ACTIVITY_TYPE        => recInvestmentRealignSellProcessingActivity.ACTIVITY_TYPE,
                                                                                         ACTIVITY_DESCRIPTION => recInvestmentRealignSellProcessingActivity.ACTIVITY_DESCRIPTION,
                                                                                         AMOUNT               => recInvestmentRealignSellProcessingActivity.AMOUNT,
                                                                                         STATUS               => recInvestmentRealignSellProcessingActivity.STATUS,
                                                                                         WORKGROUP            => recInvestmentRealignSellProcessingActivity.WORKGROUP,
                                                                                         TXN_CATEGORY         => '',
                                                                                         EFFECTIVE_DATE       => '');
      
      END IF;
    END LOOP;
  END IF;
  -- Direct Deposit Setup
  FOR recDirectDepositSetup IN curDirectDepositSetup(inEeId, inDays) LOOP
    tblAccountUpdateDetail.Extend;
    tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => 'Direct Deposit Setup',
                                                                                     SOURCE_ID            => recDirectDepositSetup.ID,
                                                                                     EE_ID                => recDirectDepositSetup.ID,
                                                                                     ACTIVITY_ON          => recDirectDepositSetup.ACTIVITY_ON,
                                                                                     OBJECT_NAME          => '',
                                                                                     SECTION              => '',
                                                                                     ACTP_CD              => '',
                                                                                     PROCESSING_DATE      => '',
                                                                                     PROCESSED_DATE       => '',
                                                                                     ACTIVITY_TYPE        => 'Direct Deposit Change',
                                                                                     ACTIVITY_DESCRIPTION => recDirectDepositSetup.ACTIVITY_DESCRIPTION,
                                                                                     AMOUNT               => '',
                                                                                     STATUS               => 'Updated',
                                                                                     WORKGROUP            => 'NA',
                                                                                     TXN_CATEGORY         => '',
                                                                                     EFFECTIVE_DATE       => '');
  
  END LOOP;

  -- Over Payment Refunded Activity 

  FOR recRefundActivity IN curOverPaymentRefundActivity(inEeId) LOOP
    IF TO_DATE(recRefundActivity.ACTIVITYDATE,'MM-DD-YYYY') >= SYSDATE - inDays THEN
      tblAccountUpdateDetail.Extend;
      tblAccountUpdateDetail(tblAccountUpdateDetail.Count) := tRec_AccountUpdateDetail(SOURCE               => recRefundActivity.SOURCE,
                                                                                       SOURCE_ID            => recRefundActivity.TRANSACTIONID,
                                                                                       EE_ID                => recRefundActivity.EE_ID,
                                                                                       ACTIVITY_ON          => recRefundActivity.ACTIVITYDATE,
                                                                                       OBJECT_NAME          => '',
                                                                                       SECTION              => '',
                                                                                       ACTP_CD              => '',
                                                                                       PROCESSING_DATE      => '',
                                                                                       PROCESSED_DATE       => '',
                                                                                       ACTIVITY_TYPE        => '',
                                                                                       ACTIVITY_DESCRIPTION => recRefundActivity.TXNTYPE,
                                                                                       AMOUNT               => recRefundActivity.AMT,
                                                                                       STATUS               => recRefundActivity.STATUS,
                                                                                       WORKGROUP            => 'NA',
                                                                                       TXN_CATEGORY         => recRefundActivity.TXNCATEGORY,
                                                                                       EFFECTIVE_DATE       => '');
    END IF;
  END LOOP;

  RETURN tblAccountUpdateDetail;
EXCEPTION
  WHEN eNoInput THEN
    RETURN tblAccountUpdateDetail;
END Clm_GetAccountUpdatesDetails;
-----------------------------------------------------------------
CREATE OR REPLACE TYPE tbl_ClaimsData AS TABLE OF tRec_ClaimsData
-----------------------------------------------------------------------

CREATE OR REPLACE TYPE TREC_CLAIMSDATA AS OBJECT
(
  ID                  VARCHAR2(30),
  CLAIM_STATUS        VARCHAR2(255),
  SUB_CLAIM_STATUS    VARCHAR2(255),
  PAYMENT_BREAKDOWN   VARCHAR2(1000),
  ACCOUNT_TYPE        VARCHAR2(255),
  TOTAL_AMOUNT        VARCHAR2(20),
  CATEGORY            VARCHAR2(255),
  CLAIM_TYPE          VARCHAR2(255),
  CLAIM_BATCH_ID      VARCHAR2(30),
  CLAIM_BATCH_TYPE    VARCHAR2(255),
  PROVIDER            VARCHAR2(255),
  INDIVIDUAL_SERVICED VARCHAR2(255),
  SUBMIT_CLAIM_ID     NUMBER,
  CHILD_CLAIM_ID      VARCHAR2(4000),
  CLAIM_DENIAL_REASON VARCHAR2(4000),
  SERVICE_DATE        DATE,
  SERVICE_END_DATE    DATE,
  APPEAL_STATUS       VARCHAR2(255),
  REVIEWED_BY         VARCHAR2(400),
  ACTIVITY_DATE       DATE,
  FINAL_PAID_AMT      VARCHAR2(15),
  PAID_ON             DATE,
  PREMIUM_EXPENSE_TYPE  VARCHAR2(255),
  CLAIM_SUBMITTED_BY  VARCHAR2(255),
  V_SPLITCLAIMSDATA   TBL_SPLITCLAIMSDATA,
  V_ACTIVITYBREAKDOWNDATA TBL_ACTIVITYBREAKDOWNDATA,
  CONSTRUCTOR FUNCTION TREC_CLAIMSDATA RETURN SELF AS RESULT
)
=======================================================================================================
with java
==========================================================
public static final String RECENT_TRANSACTIONS_ACTIVITY = "{? = call Clm_GetAccountUpdatesDetails(?,?,?,?,?)}";

========================================================================
public List<StatusUpdatesBn> getRecentTranxList(Connection conn, UserDetailsBn userDtlsBn) throws SQLException {
		List<StatusUpdatesBn> updatedRecentTransList = new ArrayList<>();
		String days = "30";
		try (CallableStatement cs = conn.prepareCall(AlertConstants.RECENT_TRANSACTIONS_ACTIVITY)) {

			@SuppressWarnings("deprecation")
			final StructDescriptor recDescriptor = StructDescriptor.createDescriptor("TREC_ACCOUNTUPDATEDETAIL",
					DatabaseUtils.getOracleConnection(conn));
			final ResultSetMetaData resultSetMetaDate = recDescriptor.getMetaData();
			cs.registerOutParameter(1, Types.ARRAY, "TTAB_ACCOUNTUPDATEDETAIL");
			cs.setLong(2, userDtlsBn.getEeID());
			cs.setLong(3, userDtlsBn.getErID());
			cs.setLong(4, userDtlsBn.getAdmnID());
			cs.setLong(5, userDtlsBn.getId());
			cs.setString(6, days);
			cs.execute();
			Object[] data = (Object[]) ((Array) cs.getObject(1)).getArray();
			if (data == null || data.length == 0) {
				return updatedRecentTransList;
			}
			updatedRecentTransList = createRecentTranxList(data, resultSetMetaDate);
		}

		return updatedRecentTransList;
	}

	private List<StatusUpdatesBn> createRecentTranxList(Object[] data, ResultSetMetaData resultSetMetaDate)
			throws SQLException {
		List<StatusUpdatesBn> recentTransList = new ArrayList<>();
		StatusUpdatesBn recentTrans;

		for (Object object : data) {
			Struct row = (Struct) object;
			recentTrans = new StatusUpdatesBn();
			int index = 1;
			for (Object attribute : row.getAttributes()) {
				switch (resultSetMetaDate.getColumnName(index).toUpperCase()) {
				case "SOURCE":
					recentTrans.setSource(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "SOURCE_ID":
					recentTrans.setSourceId(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "ACTIVITY_ON":
					recentTrans.setActivityOn(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "ACTP_CD":
					recentTrans.setActpCd(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "OBJECT_NAME":
					recentTrans.setObjectName(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "SECTION":
					recentTrans.setSection(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "ACTIVITY_TYPE":
					recentTrans.setActivityType(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "ACTIVITY_DESCRIPTION":
					recentTrans.setActivityDescription(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "AMOUNT":
					recentTrans.setAmount(
							AmountUtil.formattedAmount(ConversionUtil.stringNoNull(String.valueOf(attribute))));

					break;
				case "PROCESSING_DATE":
					recentTrans.setProcessingDate(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "PROCESSED_DATE":
					recentTrans.setProcessedDate(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "STATUS":
					recentTrans.setStatus(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					recentTrans.setLinkLabel(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "WORKGROUP":
					recentTrans.setWorkGroup(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "TXN_CATEGORY":
					recentTrans.setTxnCategory(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				case "EFFECTIVE_DATE":
					recentTrans.setEffectiveDate(ConversionUtil.stringNoNull(String.valueOf(attribute)));
					break;
				default:
				}
				index++;
			}
			recentTransList.add(recentTrans);
		}

		return recentTransList;
	}



